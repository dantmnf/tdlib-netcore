// generated by codegen/genwriter.rb
using System;
using System.Text.Json;
using TDLibCore.Api;

namespace TDLibCore.JsonClient.ObjectConverter
{
    partial class ErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 114, 114, 111, 114 }));
        private static ReadOnlySpan<byte> propName_code => new byte[] { 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_code = JsonEncodedText.Encode(propName_code);
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Error)tlobj;
            writer.WriteNumber(encodedPropName_code, obj.Code);
            writer.WriteString(encodedPropName_message, obj.Message);
        }
    }

    partial class OkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 111, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TdlibParametersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 100, 108, 105, 98, 80, 97, 114, 97, 109, 101, 116, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_use_test_dc => new byte[] { 117, 115, 101, 95, 116, 101, 115, 116, 95, 100, 99 };
        private static readonly JsonEncodedText encodedPropName_use_test_dc = JsonEncodedText.Encode(propName_use_test_dc);
        private static ReadOnlySpan<byte> propName_database_directory => new byte[] { 100, 97, 116, 97, 98, 97, 115, 101, 95, 100, 105, 114, 101, 99, 116, 111, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_database_directory = JsonEncodedText.Encode(propName_database_directory);
        private static ReadOnlySpan<byte> propName_files_directory => new byte[] { 102, 105, 108, 101, 115, 95, 100, 105, 114, 101, 99, 116, 111, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_files_directory = JsonEncodedText.Encode(propName_files_directory);
        private static ReadOnlySpan<byte> propName_use_file_database => new byte[] { 117, 115, 101, 95, 102, 105, 108, 101, 95, 100, 97, 116, 97, 98, 97, 115, 101 };
        private static readonly JsonEncodedText encodedPropName_use_file_database = JsonEncodedText.Encode(propName_use_file_database);
        private static ReadOnlySpan<byte> propName_use_chat_info_database => new byte[] { 117, 115, 101, 95, 99, 104, 97, 116, 95, 105, 110, 102, 111, 95, 100, 97, 116, 97, 98, 97, 115, 101 };
        private static readonly JsonEncodedText encodedPropName_use_chat_info_database = JsonEncodedText.Encode(propName_use_chat_info_database);
        private static ReadOnlySpan<byte> propName_use_message_database => new byte[] { 117, 115, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 100, 97, 116, 97, 98, 97, 115, 101 };
        private static readonly JsonEncodedText encodedPropName_use_message_database = JsonEncodedText.Encode(propName_use_message_database);
        private static ReadOnlySpan<byte> propName_use_secret_chats => new byte[] { 117, 115, 101, 95, 115, 101, 99, 114, 101, 116, 95, 99, 104, 97, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_use_secret_chats = JsonEncodedText.Encode(propName_use_secret_chats);
        private static ReadOnlySpan<byte> propName_api_id => new byte[] { 97, 112, 105, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_api_id = JsonEncodedText.Encode(propName_api_id);
        private static ReadOnlySpan<byte> propName_api_hash => new byte[] { 97, 112, 105, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_api_hash = JsonEncodedText.Encode(propName_api_hash);
        private static ReadOnlySpan<byte> propName_system_language_code => new byte[] { 115, 121, 115, 116, 101, 109, 95, 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_system_language_code = JsonEncodedText.Encode(propName_system_language_code);
        private static ReadOnlySpan<byte> propName_device_model => new byte[] { 100, 101, 118, 105, 99, 101, 95, 109, 111, 100, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_device_model = JsonEncodedText.Encode(propName_device_model);
        private static ReadOnlySpan<byte> propName_system_version => new byte[] { 115, 121, 115, 116, 101, 109, 95, 118, 101, 114, 115, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_system_version = JsonEncodedText.Encode(propName_system_version);
        private static ReadOnlySpan<byte> propName_application_version => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 95, 118, 101, 114, 115, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_application_version = JsonEncodedText.Encode(propName_application_version);
        private static ReadOnlySpan<byte> propName_enable_storage_optimizer => new byte[] { 101, 110, 97, 98, 108, 101, 95, 115, 116, 111, 114, 97, 103, 101, 95, 111, 112, 116, 105, 109, 105, 122, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_enable_storage_optimizer = JsonEncodedText.Encode(propName_enable_storage_optimizer);
        private static ReadOnlySpan<byte> propName_ignore_file_names => new byte[] { 105, 103, 110, 111, 114, 101, 95, 102, 105, 108, 101, 95, 110, 97, 109, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_ignore_file_names = JsonEncodedText.Encode(propName_ignore_file_names);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TdlibParameters)tlobj;
            writer.WriteBoolean(encodedPropName_use_test_dc, obj.UseTestDc);
            writer.WriteString(encodedPropName_database_directory, obj.DatabaseDirectory);
            writer.WriteString(encodedPropName_files_directory, obj.FilesDirectory);
            writer.WriteBoolean(encodedPropName_use_file_database, obj.UseFileDatabase);
            writer.WriteBoolean(encodedPropName_use_chat_info_database, obj.UseChatInfoDatabase);
            writer.WriteBoolean(encodedPropName_use_message_database, obj.UseMessageDatabase);
            writer.WriteBoolean(encodedPropName_use_secret_chats, obj.UseSecretChats);
            writer.WriteNumber(encodedPropName_api_id, obj.ApiId);
            writer.WriteString(encodedPropName_api_hash, obj.ApiHash);
            writer.WriteString(encodedPropName_system_language_code, obj.SystemLanguageCode);
            writer.WriteString(encodedPropName_device_model, obj.DeviceModel);
            writer.WriteString(encodedPropName_system_version, obj.SystemVersion);
            writer.WriteString(encodedPropName_application_version, obj.ApplicationVersion);
            writer.WriteBoolean(encodedPropName_enable_storage_optimizer, obj.EnableStorageOptimizer);
            writer.WriteBoolean(encodedPropName_ignore_file_names, obj.IgnoreFileNames);
        }
    }

    partial class AuthenticationCodeTypeTelegramMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101, 84, 121, 112, 101, 84, 101, 108, 101, 103, 114, 97, 109, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_length => new byte[] { 108, 101, 110, 103, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_length = JsonEncodedText.Encode(propName_length);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthenticationCodeTypeTelegramMessage)tlobj;
            writer.WriteNumber(encodedPropName_length, obj.Length);
        }
    }

    partial class AuthenticationCodeTypeSmsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101, 84, 121, 112, 101, 83, 109, 115 }));
        private static ReadOnlySpan<byte> propName_length => new byte[] { 108, 101, 110, 103, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_length = JsonEncodedText.Encode(propName_length);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthenticationCodeTypeSms)tlobj;
            writer.WriteNumber(encodedPropName_length, obj.Length);
        }
    }

    partial class AuthenticationCodeTypeCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101, 84, 121, 112, 101, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_length => new byte[] { 108, 101, 110, 103, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_length = JsonEncodedText.Encode(propName_length);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthenticationCodeTypeCall)tlobj;
            writer.WriteNumber(encodedPropName_length, obj.Length);
        }
    }

    partial class AuthenticationCodeTypeFlashCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101, 84, 121, 112, 101, 70, 108, 97, 115, 104, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_pattern => new byte[] { 112, 97, 116, 116, 101, 114, 110 };
        private static readonly JsonEncodedText encodedPropName_pattern = JsonEncodedText.Encode(propName_pattern);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthenticationCodeTypeFlashCall)tlobj;
            writer.WriteString(encodedPropName_pattern, obj.Pattern);
        }
    }

    partial class AuthenticationCodeInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_next_type => new byte[] { 110, 101, 120, 116, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_next_type = JsonEncodedText.Encode(propName_next_type);
        private static ReadOnlySpan<byte> propName_timeout => new byte[] { 116, 105, 109, 101, 111, 117, 116 };
        private static readonly JsonEncodedText encodedPropName_timeout = JsonEncodedText.Encode(propName_timeout);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthenticationCodeInfo)tlobj;
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            if (obj.NextType != null)
            {
                writer.WritePropertyName(encodedPropName_next_type);
                writer.WriteTLObjectValue(obj.NextType);
            }
            writer.WriteNumber(encodedPropName_timeout, obj.Timeout);
        }
    }

    partial class EmailAddressAuthenticationCodeInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_email_address_pattern => new byte[] { 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115, 95, 112, 97, 116, 116, 101, 114, 110 };
        private static readonly JsonEncodedText encodedPropName_email_address_pattern = JsonEncodedText.Encode(propName_email_address_pattern);
        private static ReadOnlySpan<byte> propName_length => new byte[] { 108, 101, 110, 103, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_length = JsonEncodedText.Encode(propName_length);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EmailAddressAuthenticationCodeInfo)tlobj;
            writer.WriteString(encodedPropName_email_address_pattern, obj.EmailAddressPattern);
            writer.WriteNumber(encodedPropName_length, obj.Length);
        }
    }

    partial class TextEntityConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121 }));
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_length => new byte[] { 108, 101, 110, 103, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_length = JsonEncodedText.Encode(propName_length);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntity)tlobj;
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_length, obj.Length);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class TextEntitiesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 105, 101, 115 }));
        private static ReadOnlySpan<byte> propName_entities => new byte[] { 101, 110, 116, 105, 116, 105, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_entities = JsonEncodedText.Encode(propName_entities);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntities)tlobj;
            if (obj.Entities != null)
            {
                writer.WritePropertyName(encodedPropName_entities);
                writer.WriteArray(obj.Entities);
            }
        }
    }

    partial class FormattedTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 111, 114, 109, 97, 116, 116, 101, 100, 84, 101, 120, 116 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_entities => new byte[] { 101, 110, 116, 105, 116, 105, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_entities = JsonEncodedText.Encode(propName_entities);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (FormattedText)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
            if (obj.Entities != null)
            {
                writer.WritePropertyName(encodedPropName_entities);
                writer.WriteArray(obj.Entities);
            }
        }
    }

    partial class TermsOfServiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 114, 109, 115, 79, 102, 83, 101, 114, 118, 105, 99, 101 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_min_user_age => new byte[] { 109, 105, 110, 95, 117, 115, 101, 114, 95, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_min_user_age = JsonEncodedText.Encode(propName_min_user_age);
        private static ReadOnlySpan<byte> propName_show_popup => new byte[] { 115, 104, 111, 119, 95, 112, 111, 112, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_show_popup = JsonEncodedText.Encode(propName_show_popup);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TermsOfService)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteNumber(encodedPropName_min_user_age, obj.MinUserAge);
            writer.WriteBoolean(encodedPropName_show_popup, obj.ShowPopup);
        }
    }

    partial class AuthorizationStateWaitTdlibParametersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 87, 97, 105, 116, 84, 100, 108, 105, 98, 80, 97, 114, 97, 109, 101, 116, 101, 114, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AuthorizationStateWaitEncryptionKeyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 87, 97, 105, 116, 69, 110, 99, 114, 121, 112, 116, 105, 111, 110, 75, 101, 121 }));
        private static ReadOnlySpan<byte> propName_is_encrypted => new byte[] { 105, 115, 95, 101, 110, 99, 114, 121, 112, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_encrypted = JsonEncodedText.Encode(propName_is_encrypted);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthorizationStateWaitEncryptionKey)tlobj;
            writer.WriteBoolean(encodedPropName_is_encrypted, obj.IsEncrypted);
        }
    }

    partial class AuthorizationStateWaitPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 87, 97, 105, 116, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AuthorizationStateWaitCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 87, 97, 105, 116, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_code_info => new byte[] { 99, 111, 100, 101, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_code_info = JsonEncodedText.Encode(propName_code_info);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthorizationStateWaitCode)tlobj;
            if (obj.CodeInfo != null)
            {
                writer.WritePropertyName(encodedPropName_code_info);
                writer.WriteTLObjectValue(obj.CodeInfo);
            }
        }
    }

    partial class AuthorizationStateWaitOtherDeviceConfirmationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 87, 97, 105, 116, 79, 116, 104, 101, 114, 68, 101, 118, 105, 99, 101, 67, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_link => new byte[] { 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_link = JsonEncodedText.Encode(propName_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthorizationStateWaitOtherDeviceConfirmation)tlobj;
            writer.WriteString(encodedPropName_link, obj.Link);
        }
    }

    partial class AuthorizationStateWaitRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 87, 97, 105, 116, 82, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_terms_of_service => new byte[] { 116, 101, 114, 109, 115, 95, 111, 102, 95, 115, 101, 114, 118, 105, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_terms_of_service = JsonEncodedText.Encode(propName_terms_of_service);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthorizationStateWaitRegistration)tlobj;
            if (obj.TermsOfService != null)
            {
                writer.WritePropertyName(encodedPropName_terms_of_service);
                writer.WriteTLObjectValue(obj.TermsOfService);
            }
        }
    }

    partial class AuthorizationStateWaitPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 87, 97, 105, 116, 80, 97, 115, 115, 119, 111, 114, 100 }));
        private static ReadOnlySpan<byte> propName_password_hint => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 95, 104, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_password_hint = JsonEncodedText.Encode(propName_password_hint);
        private static ReadOnlySpan<byte> propName_has_recovery_email_address => new byte[] { 104, 97, 115, 95, 114, 101, 99, 111, 118, 101, 114, 121, 95, 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_has_recovery_email_address = JsonEncodedText.Encode(propName_has_recovery_email_address);
        private static ReadOnlySpan<byte> propName_recovery_email_address_pattern => new byte[] { 114, 101, 99, 111, 118, 101, 114, 121, 95, 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115, 95, 112, 97, 116, 116, 101, 114, 110 };
        private static readonly JsonEncodedText encodedPropName_recovery_email_address_pattern = JsonEncodedText.Encode(propName_recovery_email_address_pattern);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthorizationStateWaitPassword)tlobj;
            writer.WriteString(encodedPropName_password_hint, obj.PasswordHint);
            writer.WriteBoolean(encodedPropName_has_recovery_email_address, obj.HasRecoveryEmailAddress);
            writer.WriteString(encodedPropName_recovery_email_address_pattern, obj.RecoveryEmailAddressPattern);
        }
    }

    partial class AuthorizationStateReadyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 82, 101, 97, 100, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AuthorizationStateLoggingOutConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 76, 111, 103, 103, 105, 110, 103, 79, 117, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AuthorizationStateClosingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 67, 108, 111, 115, 105, 110, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AuthorizationStateClosedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101, 67, 108, 111, 115, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PasswordStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 83, 116, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_has_password => new byte[] { 104, 97, 115, 95, 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_has_password = JsonEncodedText.Encode(propName_has_password);
        private static ReadOnlySpan<byte> propName_password_hint => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100, 95, 104, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_password_hint = JsonEncodedText.Encode(propName_password_hint);
        private static ReadOnlySpan<byte> propName_has_recovery_email_address => new byte[] { 104, 97, 115, 95, 114, 101, 99, 111, 118, 101, 114, 121, 95, 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_has_recovery_email_address = JsonEncodedText.Encode(propName_has_recovery_email_address);
        private static ReadOnlySpan<byte> propName_has_passport_data => new byte[] { 104, 97, 115, 95, 112, 97, 115, 115, 112, 111, 114, 116, 95, 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_has_passport_data = JsonEncodedText.Encode(propName_has_passport_data);
        private static ReadOnlySpan<byte> propName_recovery_email_address_code_info => new byte[] { 114, 101, 99, 111, 118, 101, 114, 121, 95, 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115, 95, 99, 111, 100, 101, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_recovery_email_address_code_info = JsonEncodedText.Encode(propName_recovery_email_address_code_info);
        private static ReadOnlySpan<byte> propName_pending_reset_date => new byte[] { 112, 101, 110, 100, 105, 110, 103, 95, 114, 101, 115, 101, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_pending_reset_date = JsonEncodedText.Encode(propName_pending_reset_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PasswordState)tlobj;
            writer.WriteBoolean(encodedPropName_has_password, obj.HasPassword);
            writer.WriteString(encodedPropName_password_hint, obj.PasswordHint);
            writer.WriteBoolean(encodedPropName_has_recovery_email_address, obj.HasRecoveryEmailAddress);
            writer.WriteBoolean(encodedPropName_has_passport_data, obj.HasPassportData);
            if (obj.RecoveryEmailAddressCodeInfo != null)
            {
                writer.WritePropertyName(encodedPropName_recovery_email_address_code_info);
                writer.WriteTLObjectValue(obj.RecoveryEmailAddressCodeInfo);
            }
            writer.WriteNumber(encodedPropName_pending_reset_date, obj.PendingResetDate);
        }
    }

    partial class RecoveryEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 99, 111, 118, 101, 114, 121, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115 }));
        private static ReadOnlySpan<byte> propName_recovery_email_address => new byte[] { 114, 101, 99, 111, 118, 101, 114, 121, 95, 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_recovery_email_address = JsonEncodedText.Encode(propName_recovery_email_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RecoveryEmailAddress)tlobj;
            writer.WriteString(encodedPropName_recovery_email_address, obj.RecoveryEmailAddress_);
        }
    }

    partial class TemporaryPasswordStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 109, 112, 111, 114, 97, 114, 121, 80, 97, 115, 115, 119, 111, 114, 100, 83, 116, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_has_password => new byte[] { 104, 97, 115, 95, 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_has_password = JsonEncodedText.Encode(propName_has_password);
        private static ReadOnlySpan<byte> propName_valid_for => new byte[] { 118, 97, 108, 105, 100, 95, 102, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_valid_for = JsonEncodedText.Encode(propName_valid_for);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TemporaryPasswordState)tlobj;
            writer.WriteBoolean(encodedPropName_has_password, obj.HasPassword);
            writer.WriteNumber(encodedPropName_valid_for, obj.ValidFor);
        }
    }

    partial class LocalFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 99, 97, 108, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_path => new byte[] { 112, 97, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_path = JsonEncodedText.Encode(propName_path);
        private static ReadOnlySpan<byte> propName_can_be_downloaded => new byte[] { 99, 97, 110, 95, 98, 101, 95, 100, 111, 119, 110, 108, 111, 97, 100, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_can_be_downloaded = JsonEncodedText.Encode(propName_can_be_downloaded);
        private static ReadOnlySpan<byte> propName_can_be_deleted => new byte[] { 99, 97, 110, 95, 98, 101, 95, 100, 101, 108, 101, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_can_be_deleted = JsonEncodedText.Encode(propName_can_be_deleted);
        private static ReadOnlySpan<byte> propName_is_downloading_active => new byte[] { 105, 115, 95, 100, 111, 119, 110, 108, 111, 97, 100, 105, 110, 103, 95, 97, 99, 116, 105, 118, 101 };
        private static readonly JsonEncodedText encodedPropName_is_downloading_active = JsonEncodedText.Encode(propName_is_downloading_active);
        private static ReadOnlySpan<byte> propName_is_downloading_completed => new byte[] { 105, 115, 95, 100, 111, 119, 110, 108, 111, 97, 100, 105, 110, 103, 95, 99, 111, 109, 112, 108, 101, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_downloading_completed = JsonEncodedText.Encode(propName_is_downloading_completed);
        private static ReadOnlySpan<byte> propName_download_offset => new byte[] { 100, 111, 119, 110, 108, 111, 97, 100, 95, 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_download_offset = JsonEncodedText.Encode(propName_download_offset);
        private static ReadOnlySpan<byte> propName_downloaded_prefix_size => new byte[] { 100, 111, 119, 110, 108, 111, 97, 100, 101, 100, 95, 112, 114, 101, 102, 105, 120, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_downloaded_prefix_size = JsonEncodedText.Encode(propName_downloaded_prefix_size);
        private static ReadOnlySpan<byte> propName_downloaded_size => new byte[] { 100, 111, 119, 110, 108, 111, 97, 100, 101, 100, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_downloaded_size = JsonEncodedText.Encode(propName_downloaded_size);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LocalFile)tlobj;
            writer.WriteString(encodedPropName_path, obj.Path);
            writer.WriteBoolean(encodedPropName_can_be_downloaded, obj.CanBeDownloaded);
            writer.WriteBoolean(encodedPropName_can_be_deleted, obj.CanBeDeleted);
            writer.WriteBoolean(encodedPropName_is_downloading_active, obj.IsDownloadingActive);
            writer.WriteBoolean(encodedPropName_is_downloading_completed, obj.IsDownloadingCompleted);
            writer.WriteNumber(encodedPropName_download_offset, obj.DownloadOffset);
            writer.WriteNumber(encodedPropName_downloaded_prefix_size, obj.DownloadedPrefixSize);
            writer.WriteNumber(encodedPropName_downloaded_size, obj.DownloadedSize);
        }
    }

    partial class RemoteFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 116, 101, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_unique_id => new byte[] { 117, 110, 105, 113, 117, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_unique_id = JsonEncodedText.Encode(propName_unique_id);
        private static ReadOnlySpan<byte> propName_is_uploading_active => new byte[] { 105, 115, 95, 117, 112, 108, 111, 97, 100, 105, 110, 103, 95, 97, 99, 116, 105, 118, 101 };
        private static readonly JsonEncodedText encodedPropName_is_uploading_active = JsonEncodedText.Encode(propName_is_uploading_active);
        private static ReadOnlySpan<byte> propName_is_uploading_completed => new byte[] { 105, 115, 95, 117, 112, 108, 111, 97, 100, 105, 110, 103, 95, 99, 111, 109, 112, 108, 101, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_uploading_completed = JsonEncodedText.Encode(propName_is_uploading_completed);
        private static ReadOnlySpan<byte> propName_uploaded_size => new byte[] { 117, 112, 108, 111, 97, 100, 101, 100, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_uploaded_size = JsonEncodedText.Encode(propName_uploaded_size);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoteFile)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_unique_id, obj.UniqueId);
            writer.WriteBoolean(encodedPropName_is_uploading_active, obj.IsUploadingActive);
            writer.WriteBoolean(encodedPropName_is_uploading_completed, obj.IsUploadingCompleted);
            writer.WriteNumber(encodedPropName_uploaded_size, obj.UploadedSize);
        }
    }

    partial class FileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_size => new byte[] { 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_size = JsonEncodedText.Encode(propName_size);
        private static ReadOnlySpan<byte> propName_expected_size => new byte[] { 101, 120, 112, 101, 99, 116, 101, 100, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_expected_size = JsonEncodedText.Encode(propName_expected_size);
        private static ReadOnlySpan<byte> propName_local => new byte[] { 108, 111, 99, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_local = JsonEncodedText.Encode(propName_local);
        private static ReadOnlySpan<byte> propName_remote => new byte[] { 114, 101, 109, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_remote = JsonEncodedText.Encode(propName_remote);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (File)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteNumber(encodedPropName_size, obj.Size);
            writer.WriteNumber(encodedPropName_expected_size, obj.ExpectedSize);
            if (obj.Local != null)
            {
                writer.WritePropertyName(encodedPropName_local);
                writer.WriteTLObjectValue(obj.Local);
            }
            if (obj.Remote != null)
            {
                writer.WritePropertyName(encodedPropName_remote);
                writer.WriteTLObjectValue(obj.Remote);
            }
        }
    }

    partial class InputFileIdConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 70, 105, 108, 101, 73, 100 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputFileId)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
        }
    }

    partial class InputFileRemoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 70, 105, 108, 101, 82, 101, 109, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputFileRemote)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
        }
    }

    partial class InputFileLocalConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 70, 105, 108, 101, 76, 111, 99, 97, 108 }));
        private static ReadOnlySpan<byte> propName_path => new byte[] { 112, 97, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_path = JsonEncodedText.Encode(propName_path);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputFileLocal)tlobj;
            writer.WriteString(encodedPropName_path, obj.Path);
        }
    }

    partial class InputFileGeneratedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 70, 105, 108, 101, 71, 101, 110, 101, 114, 97, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_original_path => new byte[] { 111, 114, 105, 103, 105, 110, 97, 108, 95, 112, 97, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_original_path = JsonEncodedText.Encode(propName_original_path);
        private static ReadOnlySpan<byte> propName_conversion => new byte[] { 99, 111, 110, 118, 101, 114, 115, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_conversion = JsonEncodedText.Encode(propName_conversion);
        private static ReadOnlySpan<byte> propName_expected_size => new byte[] { 101, 120, 112, 101, 99, 116, 101, 100, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_expected_size = JsonEncodedText.Encode(propName_expected_size);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputFileGenerated)tlobj;
            writer.WriteString(encodedPropName_original_path, obj.OriginalPath);
            writer.WriteString(encodedPropName_conversion, obj.Conversion);
            writer.WriteNumber(encodedPropName_expected_size, obj.ExpectedSize);
        }
    }

    partial class PhotoSizeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 104, 111, 116, 111, 83, 105, 122, 101 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_progressive_sizes => new byte[] { 112, 114, 111, 103, 114, 101, 115, 115, 105, 118, 101, 95, 115, 105, 122, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_progressive_sizes = JsonEncodedText.Encode(propName_progressive_sizes);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PhotoSize)tlobj;
            writer.WriteString(encodedPropName_type, obj.Type);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            if (obj.ProgressiveSizes != null)
            {
                writer.WritePropertyName(encodedPropName_progressive_sizes);
                writer.WriteArray(obj.ProgressiveSizes);
            }
        }
    }

    partial class MinithumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 105, 110, 105, 116, 104, 117, 109, 98, 110, 97, 105, 108 }));
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Minithumbnail)tlobj;
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
        }
    }

    partial class ThumbnailFormatJpegConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 70, 111, 114, 109, 97, 116, 74, 112, 101, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailFormatPngConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 70, 111, 114, 109, 97, 116, 80, 110, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailFormatWebpConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 70, 111, 114, 109, 97, 116, 87, 101, 98, 112 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailFormatGifConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 70, 111, 114, 109, 97, 116, 71, 105, 102 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailFormatTgsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 70, 111, 114, 109, 97, 116, 84, 103, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailFormatMpeg4Converter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 70, 111, 114, 109, 97, 116, 77, 112, 101, 103, 52 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 }));
        private static ReadOnlySpan<byte> propName_format => new byte[] { 102, 111, 114, 109, 97, 116 };
        private static readonly JsonEncodedText encodedPropName_format = JsonEncodedText.Encode(propName_format);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_file => new byte[] { 102, 105, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_file = JsonEncodedText.Encode(propName_file);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Thumbnail)tlobj;
            if (obj.Format != null)
            {
                writer.WritePropertyName(encodedPropName_format);
                writer.WriteTLObjectValue(obj.Format);
            }
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            if (obj.File != null)
            {
                writer.WritePropertyName(encodedPropName_file);
                writer.WriteTLObjectValue(obj.File);
            }
        }
    }

    partial class MaskPointForeheadConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 97, 115, 107, 80, 111, 105, 110, 116, 70, 111, 114, 101, 104, 101, 97, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MaskPointEyesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 97, 115, 107, 80, 111, 105, 110, 116, 69, 121, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MaskPointMouthConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 97, 115, 107, 80, 111, 105, 110, 116, 77, 111, 117, 116, 104 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MaskPointChinConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 97, 115, 107, 80, 111, 105, 110, 116, 67, 104, 105, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MaskPositionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 97, 115, 107, 80, 111, 115, 105, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_point => new byte[] { 112, 111, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_point = JsonEncodedText.Encode(propName_point);
        private static ReadOnlySpan<byte> propName_x_shift => new byte[] { 120, 95, 115, 104, 105, 102, 116 };
        private static readonly JsonEncodedText encodedPropName_x_shift = JsonEncodedText.Encode(propName_x_shift);
        private static ReadOnlySpan<byte> propName_y_shift => new byte[] { 121, 95, 115, 104, 105, 102, 116 };
        private static readonly JsonEncodedText encodedPropName_y_shift = JsonEncodedText.Encode(propName_y_shift);
        private static ReadOnlySpan<byte> propName_scale => new byte[] { 115, 99, 97, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_scale = JsonEncodedText.Encode(propName_scale);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MaskPosition)tlobj;
            if (obj.Point != null)
            {
                writer.WritePropertyName(encodedPropName_point);
                writer.WriteTLObjectValue(obj.Point);
            }
            writer.WriteNumber(encodedPropName_x_shift, obj.XShift);
            writer.WriteNumber(encodedPropName_y_shift, obj.YShift);
            writer.WriteNumber(encodedPropName_scale, obj.Scale);
        }
    }

    partial class ColorReplacementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 108, 111, 114, 82, 101, 112, 108, 97, 99, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_old_color => new byte[] { 111, 108, 100, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_old_color = JsonEncodedText.Encode(propName_old_color);
        private static ReadOnlySpan<byte> propName_new_color => new byte[] { 110, 101, 119, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_new_color = JsonEncodedText.Encode(propName_new_color);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ColorReplacement)tlobj;
            writer.WriteNumber(encodedPropName_old_color, obj.OldColor);
            writer.WriteNumber(encodedPropName_new_color, obj.NewColor);
        }
    }

    partial class ClosedVectorPathConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 108, 111, 115, 101, 100, 86, 101, 99, 116, 111, 114, 80, 97, 116, 104 }));
        private static ReadOnlySpan<byte> propName_commands => new byte[] { 99, 111, 109, 109, 97, 110, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_commands = JsonEncodedText.Encode(propName_commands);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ClosedVectorPath)tlobj;
            if (obj.Commands != null)
            {
                writer.WritePropertyName(encodedPropName_commands);
                writer.WriteArray(obj.Commands);
            }
        }
    }

    partial class PollOptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 111, 108, 108, 79, 112, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_voter_count => new byte[] { 118, 111, 116, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_voter_count = JsonEncodedText.Encode(propName_voter_count);
        private static ReadOnlySpan<byte> propName_vote_percentage => new byte[] { 118, 111, 116, 101, 95, 112, 101, 114, 99, 101, 110, 116, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_vote_percentage = JsonEncodedText.Encode(propName_vote_percentage);
        private static ReadOnlySpan<byte> propName_is_chosen => new byte[] { 105, 115, 95, 99, 104, 111, 115, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_is_chosen = JsonEncodedText.Encode(propName_is_chosen);
        private static ReadOnlySpan<byte> propName_is_being_chosen => new byte[] { 105, 115, 95, 98, 101, 105, 110, 103, 95, 99, 104, 111, 115, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_is_being_chosen = JsonEncodedText.Encode(propName_is_being_chosen);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PollOption)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
            writer.WriteNumber(encodedPropName_voter_count, obj.VoterCount);
            writer.WriteNumber(encodedPropName_vote_percentage, obj.VotePercentage);
            writer.WriteBoolean(encodedPropName_is_chosen, obj.IsChosen);
            writer.WriteBoolean(encodedPropName_is_being_chosen, obj.IsBeingChosen);
        }
    }

    partial class PollTypeRegularConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 111, 108, 108, 84, 121, 112, 101, 82, 101, 103, 117, 108, 97, 114 }));
        private static ReadOnlySpan<byte> propName_allow_multiple_answers => new byte[] { 97, 108, 108, 111, 119, 95, 109, 117, 108, 116, 105, 112, 108, 101, 95, 97, 110, 115, 119, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_allow_multiple_answers = JsonEncodedText.Encode(propName_allow_multiple_answers);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PollTypeRegular)tlobj;
            writer.WriteBoolean(encodedPropName_allow_multiple_answers, obj.AllowMultipleAnswers);
        }
    }

    partial class PollTypeQuizConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 111, 108, 108, 84, 121, 112, 101, 81, 117, 105, 122 }));
        private static ReadOnlySpan<byte> propName_correct_option_id => new byte[] { 99, 111, 114, 114, 101, 99, 116, 95, 111, 112, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_correct_option_id = JsonEncodedText.Encode(propName_correct_option_id);
        private static ReadOnlySpan<byte> propName_explanation => new byte[] { 101, 120, 112, 108, 97, 110, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_explanation = JsonEncodedText.Encode(propName_explanation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PollTypeQuiz)tlobj;
            writer.WriteNumber(encodedPropName_correct_option_id, obj.CorrectOptionId);
            if (obj.Explanation != null)
            {
                writer.WritePropertyName(encodedPropName_explanation);
                writer.WriteTLObjectValue(obj.Explanation);
            }
        }
    }

    partial class AnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_file_name => new byte[] { 102, 105, 108, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_file_name = JsonEncodedText.Encode(propName_file_name);
        private static ReadOnlySpan<byte> propName_mime_type => new byte[] { 109, 105, 109, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_mime_type = JsonEncodedText.Encode(propName_mime_type);
        private static ReadOnlySpan<byte> propName_has_stickers => new byte[] { 104, 97, 115, 95, 115, 116, 105, 99, 107, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_has_stickers = JsonEncodedText.Encode(propName_has_stickers);
        private static ReadOnlySpan<byte> propName_minithumbnail => new byte[] { 109, 105, 110, 105, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_minithumbnail = JsonEncodedText.Encode(propName_minithumbnail);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Animation)tlobj;
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            writer.WriteString(encodedPropName_file_name, obj.FileName);
            writer.WriteString(encodedPropName_mime_type, obj.MimeType);
            writer.WriteBoolean(encodedPropName_has_stickers, obj.HasStickers);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.Animation_ != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation_);
            }
        }
    }

    partial class AudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 100, 105, 111 }));
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_performer => new byte[] { 112, 101, 114, 102, 111, 114, 109, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_performer = JsonEncodedText.Encode(propName_performer);
        private static ReadOnlySpan<byte> propName_file_name => new byte[] { 102, 105, 108, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_file_name = JsonEncodedText.Encode(propName_file_name);
        private static ReadOnlySpan<byte> propName_mime_type => new byte[] { 109, 105, 109, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_mime_type = JsonEncodedText.Encode(propName_mime_type);
        private static ReadOnlySpan<byte> propName_album_cover_minithumbnail => new byte[] { 97, 108, 98, 117, 109, 95, 99, 111, 118, 101, 114, 95, 109, 105, 110, 105, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_album_cover_minithumbnail = JsonEncodedText.Encode(propName_album_cover_minithumbnail);
        private static ReadOnlySpan<byte> propName_album_cover_thumbnail => new byte[] { 97, 108, 98, 117, 109, 95, 99, 111, 118, 101, 114, 95, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_album_cover_thumbnail = JsonEncodedText.Encode(propName_album_cover_thumbnail);
        private static ReadOnlySpan<byte> propName_audio => new byte[] { 97, 117, 100, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_audio = JsonEncodedText.Encode(propName_audio);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Audio)tlobj;
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_performer, obj.Performer);
            writer.WriteString(encodedPropName_file_name, obj.FileName);
            writer.WriteString(encodedPropName_mime_type, obj.MimeType);
            if (obj.AlbumCoverMinithumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_album_cover_minithumbnail);
                writer.WriteTLObjectValue(obj.AlbumCoverMinithumbnail);
            }
            if (obj.AlbumCoverThumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_album_cover_thumbnail);
                writer.WriteTLObjectValue(obj.AlbumCoverThumbnail);
            }
            if (obj.Audio_ != null)
            {
                writer.WritePropertyName(encodedPropName_audio);
                writer.WriteTLObjectValue(obj.Audio_);
            }
        }
    }

    partial class DocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_file_name => new byte[] { 102, 105, 108, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_file_name = JsonEncodedText.Encode(propName_file_name);
        private static ReadOnlySpan<byte> propName_mime_type => new byte[] { 109, 105, 109, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_mime_type = JsonEncodedText.Encode(propName_mime_type);
        private static ReadOnlySpan<byte> propName_minithumbnail => new byte[] { 109, 105, 110, 105, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_minithumbnail = JsonEncodedText.Encode(propName_minithumbnail);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_document => new byte[] { 100, 111, 99, 117, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_document = JsonEncodedText.Encode(propName_document);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Document)tlobj;
            writer.WriteString(encodedPropName_file_name, obj.FileName);
            writer.WriteString(encodedPropName_mime_type, obj.MimeType);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.Document_ != null)
            {
                writer.WritePropertyName(encodedPropName_document);
                writer.WriteTLObjectValue(obj.Document_);
            }
        }
    }

    partial class PhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_has_stickers => new byte[] { 104, 97, 115, 95, 115, 116, 105, 99, 107, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_has_stickers = JsonEncodedText.Encode(propName_has_stickers);
        private static ReadOnlySpan<byte> propName_minithumbnail => new byte[] { 109, 105, 110, 105, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_minithumbnail = JsonEncodedText.Encode(propName_minithumbnail);
        private static ReadOnlySpan<byte> propName_sizes => new byte[] { 115, 105, 122, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_sizes = JsonEncodedText.Encode(propName_sizes);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Photo)tlobj;
            writer.WriteBoolean(encodedPropName_has_stickers, obj.HasStickers);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Sizes != null)
            {
                writer.WritePropertyName(encodedPropName_sizes);
                writer.WriteArray(obj.Sizes);
            }
        }
    }

    partial class StickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_set_id => new byte[] { 115, 101, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_set_id = JsonEncodedText.Encode(propName_set_id);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_emoji => new byte[] { 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_emoji = JsonEncodedText.Encode(propName_emoji);
        private static ReadOnlySpan<byte> propName_is_animated => new byte[] { 105, 115, 95, 97, 110, 105, 109, 97, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_animated = JsonEncodedText.Encode(propName_is_animated);
        private static ReadOnlySpan<byte> propName_is_mask => new byte[] { 105, 115, 95, 109, 97, 115, 107 };
        private static readonly JsonEncodedText encodedPropName_is_mask = JsonEncodedText.Encode(propName_is_mask);
        private static ReadOnlySpan<byte> propName_mask_position => new byte[] { 109, 97, 115, 107, 95, 112, 111, 115, 105, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_mask_position = JsonEncodedText.Encode(propName_mask_position);
        private static ReadOnlySpan<byte> propName_outline => new byte[] { 111, 117, 116, 108, 105, 110, 101 };
        private static readonly JsonEncodedText encodedPropName_outline = JsonEncodedText.Encode(propName_outline);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Sticker)tlobj;
            writer.WritePropertyName(encodedPropName_set_id);
            writer.WriteInt64String(obj.SetId);
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            writer.WriteString(encodedPropName_emoji, obj.Emoji);
            writer.WriteBoolean(encodedPropName_is_animated, obj.IsAnimated);
            writer.WriteBoolean(encodedPropName_is_mask, obj.IsMask);
            if (obj.MaskPosition != null)
            {
                writer.WritePropertyName(encodedPropName_mask_position);
                writer.WriteTLObjectValue(obj.MaskPosition);
            }
            if (obj.Outline != null)
            {
                writer.WritePropertyName(encodedPropName_outline);
                writer.WriteArray(obj.Outline);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.Sticker_ != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker_);
            }
        }
    }

    partial class VideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 105, 100, 101, 111 }));
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_file_name => new byte[] { 102, 105, 108, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_file_name = JsonEncodedText.Encode(propName_file_name);
        private static ReadOnlySpan<byte> propName_mime_type => new byte[] { 109, 105, 109, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_mime_type = JsonEncodedText.Encode(propName_mime_type);
        private static ReadOnlySpan<byte> propName_has_stickers => new byte[] { 104, 97, 115, 95, 115, 116, 105, 99, 107, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_has_stickers = JsonEncodedText.Encode(propName_has_stickers);
        private static ReadOnlySpan<byte> propName_supports_streaming => new byte[] { 115, 117, 112, 112, 111, 114, 116, 115, 95, 115, 116, 114, 101, 97, 109, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_supports_streaming = JsonEncodedText.Encode(propName_supports_streaming);
        private static ReadOnlySpan<byte> propName_minithumbnail => new byte[] { 109, 105, 110, 105, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_minithumbnail = JsonEncodedText.Encode(propName_minithumbnail);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_video => new byte[] { 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_video = JsonEncodedText.Encode(propName_video);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Video)tlobj;
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            writer.WriteString(encodedPropName_file_name, obj.FileName);
            writer.WriteString(encodedPropName_mime_type, obj.MimeType);
            writer.WriteBoolean(encodedPropName_has_stickers, obj.HasStickers);
            writer.WriteBoolean(encodedPropName_supports_streaming, obj.SupportsStreaming);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.Video_ != null)
            {
                writer.WritePropertyName(encodedPropName_video);
                writer.WriteTLObjectValue(obj.Video_);
            }
        }
    }

    partial class VideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 105, 100, 101, 111, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_length => new byte[] { 108, 101, 110, 103, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_length = JsonEncodedText.Encode(propName_length);
        private static ReadOnlySpan<byte> propName_minithumbnail => new byte[] { 109, 105, 110, 105, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_minithumbnail = JsonEncodedText.Encode(propName_minithumbnail);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_video => new byte[] { 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_video = JsonEncodedText.Encode(propName_video);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (VideoNote)tlobj;
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            writer.WriteNumber(encodedPropName_length, obj.Length);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.Video != null)
            {
                writer.WritePropertyName(encodedPropName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
        }
    }

    partial class VoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 111, 105, 99, 101, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_waveform => new byte[] { 119, 97, 118, 101, 102, 111, 114, 109 };
        private static readonly JsonEncodedText encodedPropName_waveform = JsonEncodedText.Encode(propName_waveform);
        private static ReadOnlySpan<byte> propName_mime_type => new byte[] { 109, 105, 109, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_mime_type = JsonEncodedText.Encode(propName_mime_type);
        private static ReadOnlySpan<byte> propName_voice => new byte[] { 118, 111, 105, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_voice = JsonEncodedText.Encode(propName_voice);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (VoiceNote)tlobj;
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            if (!obj.Waveform.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_waveform, obj.Waveform.Span);
            }
            writer.WriteString(encodedPropName_mime_type, obj.MimeType);
            if (obj.Voice != null)
            {
                writer.WritePropertyName(encodedPropName_voice);
                writer.WriteTLObjectValue(obj.Voice);
            }
        }
    }

    partial class AnimatedEmojiConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 110, 105, 109, 97, 116, 101, 100, 69, 109, 111, 106, 105 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        private static ReadOnlySpan<byte> propName_color_replacements => new byte[] { 99, 111, 108, 111, 114, 95, 114, 101, 112, 108, 97, 99, 101, 109, 101, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_color_replacements = JsonEncodedText.Encode(propName_color_replacements);
        private static ReadOnlySpan<byte> propName_sound => new byte[] { 115, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_sound = JsonEncodedText.Encode(propName_sound);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnimatedEmoji)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            if (obj.ColorReplacements != null)
            {
                writer.WritePropertyName(encodedPropName_color_replacements);
                writer.WriteArray(obj.ColorReplacements);
            }
            if (obj.Sound != null)
            {
                writer.WritePropertyName(encodedPropName_sound);
                writer.WriteTLObjectValue(obj.Sound);
            }
        }
    }

    partial class ContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 110, 116, 97, 99, 116 }));
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        private static ReadOnlySpan<byte> propName_first_name => new byte[] { 102, 105, 114, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_first_name = JsonEncodedText.Encode(propName_first_name);
        private static ReadOnlySpan<byte> propName_last_name => new byte[] { 108, 97, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_last_name = JsonEncodedText.Encode(propName_last_name);
        private static ReadOnlySpan<byte> propName_vcard => new byte[] { 118, 99, 97, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_vcard = JsonEncodedText.Encode(propName_vcard);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Contact)tlobj;
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
            writer.WriteString(encodedPropName_first_name, obj.FirstName);
            writer.WriteString(encodedPropName_last_name, obj.LastName);
            writer.WriteString(encodedPropName_vcard, obj.Vcard);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class LocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_latitude => new byte[] { 108, 97, 116, 105, 116, 117, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_latitude = JsonEncodedText.Encode(propName_latitude);
        private static ReadOnlySpan<byte> propName_longitude => new byte[] { 108, 111, 110, 103, 105, 116, 117, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_longitude = JsonEncodedText.Encode(propName_longitude);
        private static ReadOnlySpan<byte> propName_horizontal_accuracy => new byte[] { 104, 111, 114, 105, 122, 111, 110, 116, 97, 108, 95, 97, 99, 99, 117, 114, 97, 99, 121 };
        private static readonly JsonEncodedText encodedPropName_horizontal_accuracy = JsonEncodedText.Encode(propName_horizontal_accuracy);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Location)tlobj;
            writer.WriteNumber(encodedPropName_latitude, obj.Latitude);
            writer.WriteNumber(encodedPropName_longitude, obj.Longitude);
            writer.WriteNumber(encodedPropName_horizontal_accuracy, obj.HorizontalAccuracy);
        }
    }

    partial class VenueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 101, 110, 117, 101 }));
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_address => new byte[] { 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_address = JsonEncodedText.Encode(propName_address);
        private static ReadOnlySpan<byte> propName_provider => new byte[] { 112, 114, 111, 118, 105, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_provider = JsonEncodedText.Encode(propName_provider);
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Venue)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_address, obj.Address);
            writer.WriteString(encodedPropName_provider, obj.Provider);
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_type, obj.Type);
        }
    }

    partial class GameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_short_name => new byte[] { 115, 104, 111, 114, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_short_name = JsonEncodedText.Encode(propName_short_name);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Game)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(encodedPropName_short_name, obj.ShortName);
            writer.WriteString(encodedPropName_title, obj.Title);
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(encodedPropName_description, obj.Description);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
        }
    }

    partial class PollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 111, 108, 108 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_question => new byte[] { 113, 117, 101, 115, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_question = JsonEncodedText.Encode(propName_question);
        private static ReadOnlySpan<byte> propName_options => new byte[] { 111, 112, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_options = JsonEncodedText.Encode(propName_options);
        private static ReadOnlySpan<byte> propName_total_voter_count => new byte[] { 116, 111, 116, 97, 108, 95, 118, 111, 116, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_voter_count = JsonEncodedText.Encode(propName_total_voter_count);
        private static ReadOnlySpan<byte> propName_recent_voter_user_ids => new byte[] { 114, 101, 99, 101, 110, 116, 95, 118, 111, 116, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_recent_voter_user_ids = JsonEncodedText.Encode(propName_recent_voter_user_ids);
        private static ReadOnlySpan<byte> propName_is_anonymous => new byte[] { 105, 115, 95, 97, 110, 111, 110, 121, 109, 111, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_is_anonymous = JsonEncodedText.Encode(propName_is_anonymous);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_open_period => new byte[] { 111, 112, 101, 110, 95, 112, 101, 114, 105, 111, 100 };
        private static readonly JsonEncodedText encodedPropName_open_period = JsonEncodedText.Encode(propName_open_period);
        private static ReadOnlySpan<byte> propName_close_date => new byte[] { 99, 108, 111, 115, 101, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_close_date = JsonEncodedText.Encode(propName_close_date);
        private static ReadOnlySpan<byte> propName_is_closed => new byte[] { 105, 115, 95, 99, 108, 111, 115, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_closed = JsonEncodedText.Encode(propName_is_closed);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Poll)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(encodedPropName_question, obj.Question);
            if (obj.Options != null)
            {
                writer.WritePropertyName(encodedPropName_options);
                writer.WriteArray(obj.Options);
            }
            writer.WriteNumber(encodedPropName_total_voter_count, obj.TotalVoterCount);
            if (obj.RecentVoterUserIds != null)
            {
                writer.WritePropertyName(encodedPropName_recent_voter_user_ids);
                writer.WriteArray(obj.RecentVoterUserIds);
            }
            writer.WriteBoolean(encodedPropName_is_anonymous, obj.IsAnonymous);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteNumber(encodedPropName_open_period, obj.OpenPeriod);
            writer.WriteNumber(encodedPropName_close_date, obj.CloseDate);
            writer.WriteBoolean(encodedPropName_is_closed, obj.IsClosed);
        }
    }

    partial class ProfilePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 114, 111, 102, 105, 108, 101, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_small => new byte[] { 115, 109, 97, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_small = JsonEncodedText.Encode(propName_small);
        private static ReadOnlySpan<byte> propName_big => new byte[] { 98, 105, 103 };
        private static readonly JsonEncodedText encodedPropName_big = JsonEncodedText.Encode(propName_big);
        private static ReadOnlySpan<byte> propName_minithumbnail => new byte[] { 109, 105, 110, 105, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_minithumbnail = JsonEncodedText.Encode(propName_minithumbnail);
        private static ReadOnlySpan<byte> propName_has_animation => new byte[] { 104, 97, 115, 95, 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_has_animation = JsonEncodedText.Encode(propName_has_animation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ProfilePhoto)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            if (obj.Small != null)
            {
                writer.WritePropertyName(encodedPropName_small);
                writer.WriteTLObjectValue(obj.Small);
            }
            if (obj.Big != null)
            {
                writer.WritePropertyName(encodedPropName_big);
                writer.WriteTLObjectValue(obj.Big);
            }
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            writer.WriteBoolean(encodedPropName_has_animation, obj.HasAnimation);
        }
    }

    partial class ChatPhotoInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 80, 104, 111, 116, 111, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_small => new byte[] { 115, 109, 97, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_small = JsonEncodedText.Encode(propName_small);
        private static ReadOnlySpan<byte> propName_big => new byte[] { 98, 105, 103 };
        private static readonly JsonEncodedText encodedPropName_big = JsonEncodedText.Encode(propName_big);
        private static ReadOnlySpan<byte> propName_minithumbnail => new byte[] { 109, 105, 110, 105, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_minithumbnail = JsonEncodedText.Encode(propName_minithumbnail);
        private static ReadOnlySpan<byte> propName_has_animation => new byte[] { 104, 97, 115, 95, 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_has_animation = JsonEncodedText.Encode(propName_has_animation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatPhotoInfo)tlobj;
            if (obj.Small != null)
            {
                writer.WritePropertyName(encodedPropName_small);
                writer.WriteTLObjectValue(obj.Small);
            }
            if (obj.Big != null)
            {
                writer.WritePropertyName(encodedPropName_big);
                writer.WriteTLObjectValue(obj.Big);
            }
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            writer.WriteBoolean(encodedPropName_has_animation, obj.HasAnimation);
        }
    }

    partial class UserTypeRegularConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 84, 121, 112, 101, 82, 101, 103, 117, 108, 97, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserTypeDeletedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 84, 121, 112, 101, 68, 101, 108, 101, 116, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserTypeBotConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 84, 121, 112, 101, 66, 111, 116 }));
        private static ReadOnlySpan<byte> propName_can_join_groups => new byte[] { 99, 97, 110, 95, 106, 111, 105, 110, 95, 103, 114, 111, 117, 112, 115 };
        private static readonly JsonEncodedText encodedPropName_can_join_groups = JsonEncodedText.Encode(propName_can_join_groups);
        private static ReadOnlySpan<byte> propName_can_read_all_group_messages => new byte[] { 99, 97, 110, 95, 114, 101, 97, 100, 95, 97, 108, 108, 95, 103, 114, 111, 117, 112, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_can_read_all_group_messages = JsonEncodedText.Encode(propName_can_read_all_group_messages);
        private static ReadOnlySpan<byte> propName_is_inline => new byte[] { 105, 115, 95, 105, 110, 108, 105, 110, 101 };
        private static readonly JsonEncodedText encodedPropName_is_inline = JsonEncodedText.Encode(propName_is_inline);
        private static ReadOnlySpan<byte> propName_inline_query_placeholder => new byte[] { 105, 110, 108, 105, 110, 101, 95, 113, 117, 101, 114, 121, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_inline_query_placeholder = JsonEncodedText.Encode(propName_inline_query_placeholder);
        private static ReadOnlySpan<byte> propName_need_location => new byte[] { 110, 101, 101, 100, 95, 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_need_location = JsonEncodedText.Encode(propName_need_location);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserTypeBot)tlobj;
            writer.WriteBoolean(encodedPropName_can_join_groups, obj.CanJoinGroups);
            writer.WriteBoolean(encodedPropName_can_read_all_group_messages, obj.CanReadAllGroupMessages);
            writer.WriteBoolean(encodedPropName_is_inline, obj.IsInline);
            writer.WriteString(encodedPropName_inline_query_placeholder, obj.InlineQueryPlaceholder);
            writer.WriteBoolean(encodedPropName_need_location, obj.NeedLocation);
        }
    }

    partial class UserTypeUnknownConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 84, 121, 112, 101, 85, 110, 107, 110, 111, 119, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class BotCommandConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 111, 116, 67, 111, 109, 109, 97, 110, 100 }));
        private static ReadOnlySpan<byte> propName_command => new byte[] { 99, 111, 109, 109, 97, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_command = JsonEncodedText.Encode(propName_command);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BotCommand)tlobj;
            writer.WriteString(encodedPropName_command, obj.Command);
            writer.WriteString(encodedPropName_description, obj.Description);
        }
    }

    partial class BotCommandsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 111, 116, 67, 111, 109, 109, 97, 110, 100, 115 }));
        private static ReadOnlySpan<byte> propName_bot_user_id => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_bot_user_id = JsonEncodedText.Encode(propName_bot_user_id);
        private static ReadOnlySpan<byte> propName_commands => new byte[] { 99, 111, 109, 109, 97, 110, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_commands = JsonEncodedText.Encode(propName_commands);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BotCommands)tlobj;
            writer.WriteNumber(encodedPropName_bot_user_id, obj.BotUserId);
            if (obj.Commands != null)
            {
                writer.WritePropertyName(encodedPropName_commands);
                writer.WriteArray(obj.Commands);
            }
        }
    }

    partial class ChatLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 76, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_address => new byte[] { 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_address = JsonEncodedText.Encode(propName_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatLocation)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteString(encodedPropName_address, obj.Address);
        }
    }

    partial class AnimatedChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 110, 105, 109, 97, 116, 101, 100, 67, 104, 97, 116, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_length => new byte[] { 108, 101, 110, 103, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_length = JsonEncodedText.Encode(propName_length);
        private static ReadOnlySpan<byte> propName_file => new byte[] { 102, 105, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_file = JsonEncodedText.Encode(propName_file);
        private static ReadOnlySpan<byte> propName_main_frame_timestamp => new byte[] { 109, 97, 105, 110, 95, 102, 114, 97, 109, 101, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112 };
        private static readonly JsonEncodedText encodedPropName_main_frame_timestamp = JsonEncodedText.Encode(propName_main_frame_timestamp);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnimatedChatPhoto)tlobj;
            writer.WriteNumber(encodedPropName_length, obj.Length);
            if (obj.File != null)
            {
                writer.WritePropertyName(encodedPropName_file);
                writer.WriteTLObjectValue(obj.File);
            }
            writer.WriteNumber(encodedPropName_main_frame_timestamp, obj.MainFrameTimestamp);
        }
    }

    partial class ChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_added_date => new byte[] { 97, 100, 100, 101, 100, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_added_date = JsonEncodedText.Encode(propName_added_date);
        private static ReadOnlySpan<byte> propName_minithumbnail => new byte[] { 109, 105, 110, 105, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_minithumbnail = JsonEncodedText.Encode(propName_minithumbnail);
        private static ReadOnlySpan<byte> propName_sizes => new byte[] { 115, 105, 122, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_sizes = JsonEncodedText.Encode(propName_sizes);
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatPhoto)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(encodedPropName_added_date, obj.AddedDate);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Sizes != null)
            {
                writer.WritePropertyName(encodedPropName_sizes);
                writer.WriteArray(obj.Sizes);
            }
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
        }
    }

    partial class ChatPhotosConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 80, 104, 111, 116, 111, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_photos => new byte[] { 112, 104, 111, 116, 111, 115 };
        private static readonly JsonEncodedText encodedPropName_photos = JsonEncodedText.Encode(propName_photos);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatPhotos)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Photos != null)
            {
                writer.WritePropertyName(encodedPropName_photos);
                writer.WriteArray(obj.Photos);
            }
        }
    }

    partial class InputChatPhotoPreviousConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 67, 104, 97, 116, 80, 104, 111, 116, 111, 80, 114, 101, 118, 105, 111, 117, 115 }));
        private static ReadOnlySpan<byte> propName_chat_photo_id => new byte[] { 99, 104, 97, 116, 95, 112, 104, 111, 116, 111, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_photo_id = JsonEncodedText.Encode(propName_chat_photo_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputChatPhotoPrevious)tlobj;
            writer.WritePropertyName(encodedPropName_chat_photo_id);
            writer.WriteInt64String(obj.ChatPhotoId);
        }
    }

    partial class InputChatPhotoStaticConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 67, 104, 97, 116, 80, 104, 111, 116, 111, 83, 116, 97, 116, 105, 99 }));
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputChatPhotoStatic)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
        }
    }

    partial class InputChatPhotoAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 67, 104, 97, 116, 80, 104, 111, 116, 111, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        private static ReadOnlySpan<byte> propName_main_frame_timestamp => new byte[] { 109, 97, 105, 110, 95, 102, 114, 97, 109, 101, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112 };
        private static readonly JsonEncodedText encodedPropName_main_frame_timestamp = JsonEncodedText.Encode(propName_main_frame_timestamp);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputChatPhotoAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            writer.WriteNumber(encodedPropName_main_frame_timestamp, obj.MainFrameTimestamp);
        }
    }

    partial class UserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_first_name => new byte[] { 102, 105, 114, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_first_name = JsonEncodedText.Encode(propName_first_name);
        private static ReadOnlySpan<byte> propName_last_name => new byte[] { 108, 97, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_last_name = JsonEncodedText.Encode(propName_last_name);
        private static ReadOnlySpan<byte> propName_username => new byte[] { 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_username = JsonEncodedText.Encode(propName_username);
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        private static ReadOnlySpan<byte> propName_status => new byte[] { 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_status = JsonEncodedText.Encode(propName_status);
        private static ReadOnlySpan<byte> propName_profile_photo => new byte[] { 112, 114, 111, 102, 105, 108, 101, 95, 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_profile_photo = JsonEncodedText.Encode(propName_profile_photo);
        private static ReadOnlySpan<byte> propName_is_contact => new byte[] { 105, 115, 95, 99, 111, 110, 116, 97, 99, 116 };
        private static readonly JsonEncodedText encodedPropName_is_contact = JsonEncodedText.Encode(propName_is_contact);
        private static ReadOnlySpan<byte> propName_is_mutual_contact => new byte[] { 105, 115, 95, 109, 117, 116, 117, 97, 108, 95, 99, 111, 110, 116, 97, 99, 116 };
        private static readonly JsonEncodedText encodedPropName_is_mutual_contact = JsonEncodedText.Encode(propName_is_mutual_contact);
        private static ReadOnlySpan<byte> propName_is_verified => new byte[] { 105, 115, 95, 118, 101, 114, 105, 102, 105, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_verified = JsonEncodedText.Encode(propName_is_verified);
        private static ReadOnlySpan<byte> propName_is_support => new byte[] { 105, 115, 95, 115, 117, 112, 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_is_support = JsonEncodedText.Encode(propName_is_support);
        private static ReadOnlySpan<byte> propName_restriction_reason => new byte[] { 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 95, 114, 101, 97, 115, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_restriction_reason = JsonEncodedText.Encode(propName_restriction_reason);
        private static ReadOnlySpan<byte> propName_is_scam => new byte[] { 105, 115, 95, 115, 99, 97, 109 };
        private static readonly JsonEncodedText encodedPropName_is_scam = JsonEncodedText.Encode(propName_is_scam);
        private static ReadOnlySpan<byte> propName_is_fake => new byte[] { 105, 115, 95, 102, 97, 107, 101 };
        private static readonly JsonEncodedText encodedPropName_is_fake = JsonEncodedText.Encode(propName_is_fake);
        private static ReadOnlySpan<byte> propName_have_access => new byte[] { 104, 97, 118, 101, 95, 97, 99, 99, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_have_access = JsonEncodedText.Encode(propName_have_access);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_language_code => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_language_code = JsonEncodedText.Encode(propName_language_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (User)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_first_name, obj.FirstName);
            writer.WriteString(encodedPropName_last_name, obj.LastName);
            writer.WriteString(encodedPropName_username, obj.Username);
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
            if (obj.Status != null)
            {
                writer.WritePropertyName(encodedPropName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
            if (obj.ProfilePhoto != null)
            {
                writer.WritePropertyName(encodedPropName_profile_photo);
                writer.WriteTLObjectValue(obj.ProfilePhoto);
            }
            writer.WriteBoolean(encodedPropName_is_contact, obj.IsContact);
            writer.WriteBoolean(encodedPropName_is_mutual_contact, obj.IsMutualContact);
            writer.WriteBoolean(encodedPropName_is_verified, obj.IsVerified);
            writer.WriteBoolean(encodedPropName_is_support, obj.IsSupport);
            writer.WriteString(encodedPropName_restriction_reason, obj.RestrictionReason);
            writer.WriteBoolean(encodedPropName_is_scam, obj.IsScam);
            writer.WriteBoolean(encodedPropName_is_fake, obj.IsFake);
            writer.WriteBoolean(encodedPropName_have_access, obj.HaveAccess);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(encodedPropName_language_code, obj.LanguageCode);
        }
    }

    partial class UserFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 70, 117, 108, 108, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_is_blocked => new byte[] { 105, 115, 95, 98, 108, 111, 99, 107, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_blocked = JsonEncodedText.Encode(propName_is_blocked);
        private static ReadOnlySpan<byte> propName_can_be_called => new byte[] { 99, 97, 110, 95, 98, 101, 95, 99, 97, 108, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_can_be_called = JsonEncodedText.Encode(propName_can_be_called);
        private static ReadOnlySpan<byte> propName_supports_video_calls => new byte[] { 115, 117, 112, 112, 111, 114, 116, 115, 95, 118, 105, 100, 101, 111, 95, 99, 97, 108, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_supports_video_calls = JsonEncodedText.Encode(propName_supports_video_calls);
        private static ReadOnlySpan<byte> propName_has_private_calls => new byte[] { 104, 97, 115, 95, 112, 114, 105, 118, 97, 116, 101, 95, 99, 97, 108, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_has_private_calls = JsonEncodedText.Encode(propName_has_private_calls);
        private static ReadOnlySpan<byte> propName_need_phone_number_privacy_exception => new byte[] { 110, 101, 101, 100, 95, 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114, 95, 112, 114, 105, 118, 97, 99, 121, 95, 101, 120, 99, 101, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_need_phone_number_privacy_exception = JsonEncodedText.Encode(propName_need_phone_number_privacy_exception);
        private static ReadOnlySpan<byte> propName_bio => new byte[] { 98, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_bio = JsonEncodedText.Encode(propName_bio);
        private static ReadOnlySpan<byte> propName_share_text => new byte[] { 115, 104, 97, 114, 101, 95, 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_share_text = JsonEncodedText.Encode(propName_share_text);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_group_in_common_count => new byte[] { 103, 114, 111, 117, 112, 95, 105, 110, 95, 99, 111, 109, 109, 111, 110, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_group_in_common_count = JsonEncodedText.Encode(propName_group_in_common_count);
        private static ReadOnlySpan<byte> propName_commands => new byte[] { 99, 111, 109, 109, 97, 110, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_commands = JsonEncodedText.Encode(propName_commands);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserFullInfo)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteBoolean(encodedPropName_is_blocked, obj.IsBlocked);
            writer.WriteBoolean(encodedPropName_can_be_called, obj.CanBeCalled);
            writer.WriteBoolean(encodedPropName_supports_video_calls, obj.SupportsVideoCalls);
            writer.WriteBoolean(encodedPropName_has_private_calls, obj.HasPrivateCalls);
            writer.WriteBoolean(encodedPropName_need_phone_number_privacy_exception, obj.NeedPhoneNumberPrivacyException);
            writer.WriteString(encodedPropName_bio, obj.Bio);
            writer.WriteString(encodedPropName_share_text, obj.ShareText);
            writer.WriteString(encodedPropName_description, obj.Description);
            writer.WriteNumber(encodedPropName_group_in_common_count, obj.GroupInCommonCount);
            if (obj.Commands != null)
            {
                writer.WritePropertyName(encodedPropName_commands);
                writer.WriteArray(obj.Commands);
            }
        }
    }

    partial class UsersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Users)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class ChatAdministratorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_custom_title => new byte[] { 99, 117, 115, 116, 111, 109, 95, 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_custom_title = JsonEncodedText.Encode(propName_custom_title);
        private static ReadOnlySpan<byte> propName_is_owner => new byte[] { 105, 115, 95, 111, 119, 110, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_is_owner = JsonEncodedText.Encode(propName_is_owner);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatAdministrator)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteString(encodedPropName_custom_title, obj.CustomTitle);
            writer.WriteBoolean(encodedPropName_is_owner, obj.IsOwner);
        }
    }

    partial class ChatAdministratorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 115 }));
        private static ReadOnlySpan<byte> propName_administrators => new byte[] { 97, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_administrators = JsonEncodedText.Encode(propName_administrators);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatAdministrators)tlobj;
            if (obj.Administrators != null)
            {
                writer.WritePropertyName(encodedPropName_administrators);
                writer.WriteArray(obj.Administrators);
            }
        }
    }

    partial class ChatPermissionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_can_send_messages => new byte[] { 99, 97, 110, 95, 115, 101, 110, 100, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_can_send_messages = JsonEncodedText.Encode(propName_can_send_messages);
        private static ReadOnlySpan<byte> propName_can_send_media_messages => new byte[] { 99, 97, 110, 95, 115, 101, 110, 100, 95, 109, 101, 100, 105, 97, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_can_send_media_messages = JsonEncodedText.Encode(propName_can_send_media_messages);
        private static ReadOnlySpan<byte> propName_can_send_polls => new byte[] { 99, 97, 110, 95, 115, 101, 110, 100, 95, 112, 111, 108, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_can_send_polls = JsonEncodedText.Encode(propName_can_send_polls);
        private static ReadOnlySpan<byte> propName_can_send_other_messages => new byte[] { 99, 97, 110, 95, 115, 101, 110, 100, 95, 111, 116, 104, 101, 114, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_can_send_other_messages = JsonEncodedText.Encode(propName_can_send_other_messages);
        private static ReadOnlySpan<byte> propName_can_add_web_page_previews => new byte[] { 99, 97, 110, 95, 97, 100, 100, 95, 119, 101, 98, 95, 112, 97, 103, 101, 95, 112, 114, 101, 118, 105, 101, 119, 115 };
        private static readonly JsonEncodedText encodedPropName_can_add_web_page_previews = JsonEncodedText.Encode(propName_can_add_web_page_previews);
        private static ReadOnlySpan<byte> propName_can_change_info => new byte[] { 99, 97, 110, 95, 99, 104, 97, 110, 103, 101, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_can_change_info = JsonEncodedText.Encode(propName_can_change_info);
        private static ReadOnlySpan<byte> propName_can_invite_users => new byte[] { 99, 97, 110, 95, 105, 110, 118, 105, 116, 101, 95, 117, 115, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_invite_users = JsonEncodedText.Encode(propName_can_invite_users);
        private static ReadOnlySpan<byte> propName_can_pin_messages => new byte[] { 99, 97, 110, 95, 112, 105, 110, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_can_pin_messages = JsonEncodedText.Encode(propName_can_pin_messages);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatPermissions)tlobj;
            writer.WriteBoolean(encodedPropName_can_send_messages, obj.CanSendMessages);
            writer.WriteBoolean(encodedPropName_can_send_media_messages, obj.CanSendMediaMessages);
            writer.WriteBoolean(encodedPropName_can_send_polls, obj.CanSendPolls);
            writer.WriteBoolean(encodedPropName_can_send_other_messages, obj.CanSendOtherMessages);
            writer.WriteBoolean(encodedPropName_can_add_web_page_previews, obj.CanAddWebPagePreviews);
            writer.WriteBoolean(encodedPropName_can_change_info, obj.CanChangeInfo);
            writer.WriteBoolean(encodedPropName_can_invite_users, obj.CanInviteUsers);
            writer.WriteBoolean(encodedPropName_can_pin_messages, obj.CanPinMessages);
        }
    }

    partial class ChatMemberStatusCreatorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 83, 116, 97, 116, 117, 115, 67, 114, 101, 97, 116, 111, 114 }));
        private static ReadOnlySpan<byte> propName_custom_title => new byte[] { 99, 117, 115, 116, 111, 109, 95, 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_custom_title = JsonEncodedText.Encode(propName_custom_title);
        private static ReadOnlySpan<byte> propName_is_anonymous => new byte[] { 105, 115, 95, 97, 110, 111, 110, 121, 109, 111, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_is_anonymous = JsonEncodedText.Encode(propName_is_anonymous);
        private static ReadOnlySpan<byte> propName_is_member => new byte[] { 105, 115, 95, 109, 101, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_is_member = JsonEncodedText.Encode(propName_is_member);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMemberStatusCreator)tlobj;
            writer.WriteString(encodedPropName_custom_title, obj.CustomTitle);
            writer.WriteBoolean(encodedPropName_is_anonymous, obj.IsAnonymous);
            writer.WriteBoolean(encodedPropName_is_member, obj.IsMember);
        }
    }

    partial class ChatMemberStatusAdministratorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 83, 116, 97, 116, 117, 115, 65, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114 }));
        private static ReadOnlySpan<byte> propName_custom_title => new byte[] { 99, 117, 115, 116, 111, 109, 95, 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_custom_title = JsonEncodedText.Encode(propName_custom_title);
        private static ReadOnlySpan<byte> propName_can_be_edited => new byte[] { 99, 97, 110, 95, 98, 101, 95, 101, 100, 105, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_can_be_edited = JsonEncodedText.Encode(propName_can_be_edited);
        private static ReadOnlySpan<byte> propName_can_manage_chat => new byte[] { 99, 97, 110, 95, 109, 97, 110, 97, 103, 101, 95, 99, 104, 97, 116 };
        private static readonly JsonEncodedText encodedPropName_can_manage_chat = JsonEncodedText.Encode(propName_can_manage_chat);
        private static ReadOnlySpan<byte> propName_can_change_info => new byte[] { 99, 97, 110, 95, 99, 104, 97, 110, 103, 101, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_can_change_info = JsonEncodedText.Encode(propName_can_change_info);
        private static ReadOnlySpan<byte> propName_can_post_messages => new byte[] { 99, 97, 110, 95, 112, 111, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_can_post_messages = JsonEncodedText.Encode(propName_can_post_messages);
        private static ReadOnlySpan<byte> propName_can_edit_messages => new byte[] { 99, 97, 110, 95, 101, 100, 105, 116, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_can_edit_messages = JsonEncodedText.Encode(propName_can_edit_messages);
        private static ReadOnlySpan<byte> propName_can_delete_messages => new byte[] { 99, 97, 110, 95, 100, 101, 108, 101, 116, 101, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_can_delete_messages = JsonEncodedText.Encode(propName_can_delete_messages);
        private static ReadOnlySpan<byte> propName_can_invite_users => new byte[] { 99, 97, 110, 95, 105, 110, 118, 105, 116, 101, 95, 117, 115, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_invite_users = JsonEncodedText.Encode(propName_can_invite_users);
        private static ReadOnlySpan<byte> propName_can_restrict_members => new byte[] { 99, 97, 110, 95, 114, 101, 115, 116, 114, 105, 99, 116, 95, 109, 101, 109, 98, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_restrict_members = JsonEncodedText.Encode(propName_can_restrict_members);
        private static ReadOnlySpan<byte> propName_can_pin_messages => new byte[] { 99, 97, 110, 95, 112, 105, 110, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_can_pin_messages = JsonEncodedText.Encode(propName_can_pin_messages);
        private static ReadOnlySpan<byte> propName_can_promote_members => new byte[] { 99, 97, 110, 95, 112, 114, 111, 109, 111, 116, 101, 95, 109, 101, 109, 98, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_promote_members = JsonEncodedText.Encode(propName_can_promote_members);
        private static ReadOnlySpan<byte> propName_can_manage_video_chats => new byte[] { 99, 97, 110, 95, 109, 97, 110, 97, 103, 101, 95, 118, 105, 100, 101, 111, 95, 99, 104, 97, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_can_manage_video_chats = JsonEncodedText.Encode(propName_can_manage_video_chats);
        private static ReadOnlySpan<byte> propName_is_anonymous => new byte[] { 105, 115, 95, 97, 110, 111, 110, 121, 109, 111, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_is_anonymous = JsonEncodedText.Encode(propName_is_anonymous);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMemberStatusAdministrator)tlobj;
            writer.WriteString(encodedPropName_custom_title, obj.CustomTitle);
            writer.WriteBoolean(encodedPropName_can_be_edited, obj.CanBeEdited);
            writer.WriteBoolean(encodedPropName_can_manage_chat, obj.CanManageChat);
            writer.WriteBoolean(encodedPropName_can_change_info, obj.CanChangeInfo);
            writer.WriteBoolean(encodedPropName_can_post_messages, obj.CanPostMessages);
            writer.WriteBoolean(encodedPropName_can_edit_messages, obj.CanEditMessages);
            writer.WriteBoolean(encodedPropName_can_delete_messages, obj.CanDeleteMessages);
            writer.WriteBoolean(encodedPropName_can_invite_users, obj.CanInviteUsers);
            writer.WriteBoolean(encodedPropName_can_restrict_members, obj.CanRestrictMembers);
            writer.WriteBoolean(encodedPropName_can_pin_messages, obj.CanPinMessages);
            writer.WriteBoolean(encodedPropName_can_promote_members, obj.CanPromoteMembers);
            writer.WriteBoolean(encodedPropName_can_manage_video_chats, obj.CanManageVideoChats);
            writer.WriteBoolean(encodedPropName_is_anonymous, obj.IsAnonymous);
        }
    }

    partial class ChatMemberStatusMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 83, 116, 97, 116, 117, 115, 77, 101, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMemberStatusRestrictedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 83, 116, 97, 116, 117, 115, 82, 101, 115, 116, 114, 105, 99, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_is_member => new byte[] { 105, 115, 95, 109, 101, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_is_member = JsonEncodedText.Encode(propName_is_member);
        private static ReadOnlySpan<byte> propName_restricted_until_date => new byte[] { 114, 101, 115, 116, 114, 105, 99, 116, 101, 100, 95, 117, 110, 116, 105, 108, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_restricted_until_date = JsonEncodedText.Encode(propName_restricted_until_date);
        private static ReadOnlySpan<byte> propName_permissions => new byte[] { 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_permissions = JsonEncodedText.Encode(propName_permissions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMemberStatusRestricted)tlobj;
            writer.WriteBoolean(encodedPropName_is_member, obj.IsMember);
            writer.WriteNumber(encodedPropName_restricted_until_date, obj.RestrictedUntilDate);
            if (obj.Permissions != null)
            {
                writer.WritePropertyName(encodedPropName_permissions);
                writer.WriteTLObjectValue(obj.Permissions);
            }
        }
    }

    partial class ChatMemberStatusLeftConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 83, 116, 97, 116, 117, 115, 76, 101, 102, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMemberStatusBannedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 83, 116, 97, 116, 117, 115, 66, 97, 110, 110, 101, 100 }));
        private static ReadOnlySpan<byte> propName_banned_until_date => new byte[] { 98, 97, 110, 110, 101, 100, 95, 117, 110, 116, 105, 108, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_banned_until_date = JsonEncodedText.Encode(propName_banned_until_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMemberStatusBanned)tlobj;
            writer.WriteNumber(encodedPropName_banned_until_date, obj.BannedUntilDate);
        }
    }

    partial class ChatMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_member_id => new byte[] { 109, 101, 109, 98, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_member_id = JsonEncodedText.Encode(propName_member_id);
        private static ReadOnlySpan<byte> propName_inviter_user_id => new byte[] { 105, 110, 118, 105, 116, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inviter_user_id = JsonEncodedText.Encode(propName_inviter_user_id);
        private static ReadOnlySpan<byte> propName_joined_chat_date => new byte[] { 106, 111, 105, 110, 101, 100, 95, 99, 104, 97, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_joined_chat_date = JsonEncodedText.Encode(propName_joined_chat_date);
        private static ReadOnlySpan<byte> propName_status => new byte[] { 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_status = JsonEncodedText.Encode(propName_status);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMember)tlobj;
            if (obj.MemberId != null)
            {
                writer.WritePropertyName(encodedPropName_member_id);
                writer.WriteTLObjectValue(obj.MemberId);
            }
            writer.WriteNumber(encodedPropName_inviter_user_id, obj.InviterUserId);
            writer.WriteNumber(encodedPropName_joined_chat_date, obj.JoinedChatDate);
            if (obj.Status != null)
            {
                writer.WritePropertyName(encodedPropName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
        }
    }

    partial class ChatMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_members => new byte[] { 109, 101, 109, 98, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_members = JsonEncodedText.Encode(propName_members);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMembers)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Members != null)
            {
                writer.WritePropertyName(encodedPropName_members);
                writer.WriteArray(obj.Members);
            }
        }
    }

    partial class ChatMembersFilterContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 67, 111, 110, 116, 97, 99, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMembersFilterAdministratorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 65, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMembersFilterMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 77, 101, 109, 98, 101, 114, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMembersFilterMentionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 77, 101, 110, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMembersFilterMention)tlobj;
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
        }
    }

    partial class ChatMembersFilterRestrictedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 82, 101, 115, 116, 114, 105, 99, 116, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMembersFilterBannedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 66, 97, 110, 110, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMembersFilterBotsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 66, 111, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SupergroupMembersFilterRecentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 82, 101, 99, 101, 110, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SupergroupMembersFilterContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 67, 111, 110, 116, 97, 99, 116, 115 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupMembersFilterContacts)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
        }
    }

    partial class SupergroupMembersFilterAdministratorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 65, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SupergroupMembersFilterSearchConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 83, 101, 97, 114, 99, 104 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupMembersFilterSearch)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
        }
    }

    partial class SupergroupMembersFilterRestrictedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 82, 101, 115, 116, 114, 105, 99, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupMembersFilterRestricted)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
        }
    }

    partial class SupergroupMembersFilterBannedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 66, 97, 110, 110, 101, 100 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupMembersFilterBanned)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
        }
    }

    partial class SupergroupMembersFilterMentionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 77, 101, 110, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupMembersFilterMention)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
        }
    }

    partial class SupergroupMembersFilterBotsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 77, 101, 109, 98, 101, 114, 115, 70, 105, 108, 116, 101, 114, 66, 111, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_creator_user_id => new byte[] { 99, 114, 101, 97, 116, 111, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_creator_user_id = JsonEncodedText.Encode(propName_creator_user_id);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_edit_date => new byte[] { 101, 100, 105, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_edit_date = JsonEncodedText.Encode(propName_edit_date);
        private static ReadOnlySpan<byte> propName_expire_date => new byte[] { 101, 120, 112, 105, 114, 101, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_expire_date = JsonEncodedText.Encode(propName_expire_date);
        private static ReadOnlySpan<byte> propName_member_limit => new byte[] { 109, 101, 109, 98, 101, 114, 95, 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_member_limit = JsonEncodedText.Encode(propName_member_limit);
        private static ReadOnlySpan<byte> propName_member_count => new byte[] { 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_member_count = JsonEncodedText.Encode(propName_member_count);
        private static ReadOnlySpan<byte> propName_pending_join_request_count => new byte[] { 112, 101, 110, 100, 105, 110, 103, 95, 106, 111, 105, 110, 95, 114, 101, 113, 117, 101, 115, 116, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_pending_join_request_count = JsonEncodedText.Encode(propName_pending_join_request_count);
        private static ReadOnlySpan<byte> propName_creates_join_request => new byte[] { 99, 114, 101, 97, 116, 101, 115, 95, 106, 111, 105, 110, 95, 114, 101, 113, 117, 101, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_creates_join_request = JsonEncodedText.Encode(propName_creates_join_request);
        private static ReadOnlySpan<byte> propName_is_primary => new byte[] { 105, 115, 95, 112, 114, 105, 109, 97, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_is_primary = JsonEncodedText.Encode(propName_is_primary);
        private static ReadOnlySpan<byte> propName_is_revoked => new byte[] { 105, 115, 95, 114, 101, 118, 111, 107, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_revoked = JsonEncodedText.Encode(propName_is_revoked);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatInviteLink)tlobj;
            writer.WriteString(encodedPropName_invite_link, obj.InviteLink);
            writer.WriteString(encodedPropName_name, obj.Name);
            writer.WriteNumber(encodedPropName_creator_user_id, obj.CreatorUserId);
            writer.WriteNumber(encodedPropName_date, obj.Date);
            writer.WriteNumber(encodedPropName_edit_date, obj.EditDate);
            writer.WriteNumber(encodedPropName_expire_date, obj.ExpireDate);
            writer.WriteNumber(encodedPropName_member_limit, obj.MemberLimit);
            writer.WriteNumber(encodedPropName_member_count, obj.MemberCount);
            writer.WriteNumber(encodedPropName_pending_join_request_count, obj.PendingJoinRequestCount);
            writer.WriteBoolean(encodedPropName_creates_join_request, obj.CreatesJoinRequest);
            writer.WriteBoolean(encodedPropName_is_primary, obj.IsPrimary);
            writer.WriteBoolean(encodedPropName_is_revoked, obj.IsRevoked);
        }
    }

    partial class ChatInviteLinksConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_invite_links => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_invite_links = JsonEncodedText.Encode(propName_invite_links);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatInviteLinks)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.InviteLinks != null)
            {
                writer.WritePropertyName(encodedPropName_invite_links);
                writer.WriteArray(obj.InviteLinks);
            }
        }
    }

    partial class ChatInviteLinkCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 67, 111, 117, 110, 116 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_invite_link_count => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_invite_link_count = JsonEncodedText.Encode(propName_invite_link_count);
        private static ReadOnlySpan<byte> propName_revoked_invite_link_count => new byte[] { 114, 101, 118, 111, 107, 101, 100, 95, 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_revoked_invite_link_count = JsonEncodedText.Encode(propName_revoked_invite_link_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatInviteLinkCount)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_invite_link_count, obj.InviteLinkCount);
            writer.WriteNumber(encodedPropName_revoked_invite_link_count, obj.RevokedInviteLinkCount);
        }
    }

    partial class ChatInviteLinkCountsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 67, 111, 117, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_invite_link_counts => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107, 95, 99, 111, 117, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_invite_link_counts = JsonEncodedText.Encode(propName_invite_link_counts);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatInviteLinkCounts)tlobj;
            if (obj.InviteLinkCounts != null)
            {
                writer.WritePropertyName(encodedPropName_invite_link_counts);
                writer.WriteArray(obj.InviteLinkCounts);
            }
        }
    }

    partial class ChatInviteLinkMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 77, 101, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_joined_chat_date => new byte[] { 106, 111, 105, 110, 101, 100, 95, 99, 104, 97, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_joined_chat_date = JsonEncodedText.Encode(propName_joined_chat_date);
        private static ReadOnlySpan<byte> propName_approver_user_id => new byte[] { 97, 112, 112, 114, 111, 118, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_approver_user_id = JsonEncodedText.Encode(propName_approver_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatInviteLinkMember)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_joined_chat_date, obj.JoinedChatDate);
            writer.WriteNumber(encodedPropName_approver_user_id, obj.ApproverUserId);
        }
    }

    partial class ChatInviteLinkMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 77, 101, 109, 98, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_members => new byte[] { 109, 101, 109, 98, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_members = JsonEncodedText.Encode(propName_members);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatInviteLinkMembers)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Members != null)
            {
                writer.WritePropertyName(encodedPropName_members);
                writer.WriteArray(obj.Members);
            }
        }
    }

    partial class ChatInviteLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_accessible_for => new byte[] { 97, 99, 99, 101, 115, 115, 105, 98, 108, 101, 95, 102, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_accessible_for = JsonEncodedText.Encode(propName_accessible_for);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_member_count => new byte[] { 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_member_count = JsonEncodedText.Encode(propName_member_count);
        private static ReadOnlySpan<byte> propName_member_user_ids => new byte[] { 109, 101, 109, 98, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_member_user_ids = JsonEncodedText.Encode(propName_member_user_ids);
        private static ReadOnlySpan<byte> propName_creates_join_request => new byte[] { 99, 114, 101, 97, 116, 101, 115, 95, 106, 111, 105, 110, 95, 114, 101, 113, 117, 101, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_creates_join_request = JsonEncodedText.Encode(propName_creates_join_request);
        private static ReadOnlySpan<byte> propName_is_public => new byte[] { 105, 115, 95, 112, 117, 98, 108, 105, 99 };
        private static readonly JsonEncodedText encodedPropName_is_public = JsonEncodedText.Encode(propName_is_public);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatInviteLinkInfo)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_accessible_for, obj.AccessibleFor);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(encodedPropName_description, obj.Description);
            writer.WriteNumber(encodedPropName_member_count, obj.MemberCount);
            if (obj.MemberUserIds != null)
            {
                writer.WritePropertyName(encodedPropName_member_user_ids);
                writer.WriteArray(obj.MemberUserIds);
            }
            writer.WriteBoolean(encodedPropName_creates_join_request, obj.CreatesJoinRequest);
            writer.WriteBoolean(encodedPropName_is_public, obj.IsPublic);
        }
    }

    partial class ChatJoinRequestConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 74, 111, 105, 110, 82, 101, 113, 117, 101, 115, 116 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_bio => new byte[] { 98, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_bio = JsonEncodedText.Encode(propName_bio);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatJoinRequest)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_date, obj.Date);
            writer.WriteString(encodedPropName_bio, obj.Bio);
        }
    }

    partial class ChatJoinRequestsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 74, 111, 105, 110, 82, 101, 113, 117, 101, 115, 116, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_requests => new byte[] { 114, 101, 113, 117, 101, 115, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_requests = JsonEncodedText.Encode(propName_requests);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatJoinRequests)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Requests != null)
            {
                writer.WritePropertyName(encodedPropName_requests);
                writer.WriteArray(obj.Requests);
            }
        }
    }

    partial class ChatJoinRequestsInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 74, 111, 105, 110, 82, 101, 113, 117, 101, 115, 116, 115, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatJoinRequestsInfo)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class BasicGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 115, 105, 99, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_member_count => new byte[] { 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_member_count = JsonEncodedText.Encode(propName_member_count);
        private static ReadOnlySpan<byte> propName_status => new byte[] { 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_status = JsonEncodedText.Encode(propName_status);
        private static ReadOnlySpan<byte> propName_is_active => new byte[] { 105, 115, 95, 97, 99, 116, 105, 118, 101 };
        private static readonly JsonEncodedText encodedPropName_is_active = JsonEncodedText.Encode(propName_is_active);
        private static ReadOnlySpan<byte> propName_upgraded_to_supergroup_id => new byte[] { 117, 112, 103, 114, 97, 100, 101, 100, 95, 116, 111, 95, 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_upgraded_to_supergroup_id = JsonEncodedText.Encode(propName_upgraded_to_supergroup_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BasicGroup)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteNumber(encodedPropName_member_count, obj.MemberCount);
            if (obj.Status != null)
            {
                writer.WritePropertyName(encodedPropName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
            writer.WriteBoolean(encodedPropName_is_active, obj.IsActive);
            writer.WriteNumber(encodedPropName_upgraded_to_supergroup_id, obj.UpgradedToSupergroupId);
        }
    }

    partial class BasicGroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 115, 105, 99, 71, 114, 111, 117, 112, 70, 117, 108, 108, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_creator_user_id => new byte[] { 99, 114, 101, 97, 116, 111, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_creator_user_id = JsonEncodedText.Encode(propName_creator_user_id);
        private static ReadOnlySpan<byte> propName_members => new byte[] { 109, 101, 109, 98, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_members = JsonEncodedText.Encode(propName_members);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        private static ReadOnlySpan<byte> propName_bot_commands => new byte[] { 98, 111, 116, 95, 99, 111, 109, 109, 97, 110, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_bot_commands = JsonEncodedText.Encode(propName_bot_commands);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BasicGroupFullInfo)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(encodedPropName_description, obj.Description);
            writer.WriteNumber(encodedPropName_creator_user_id, obj.CreatorUserId);
            if (obj.Members != null)
            {
                writer.WritePropertyName(encodedPropName_members);
                writer.WriteArray(obj.Members);
            }
            if (obj.InviteLink != null)
            {
                writer.WritePropertyName(encodedPropName_invite_link);
                writer.WriteTLObjectValue(obj.InviteLink);
            }
            if (obj.BotCommands != null)
            {
                writer.WritePropertyName(encodedPropName_bot_commands);
                writer.WriteArray(obj.BotCommands);
            }
        }
    }

    partial class SupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_username => new byte[] { 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_username = JsonEncodedText.Encode(propName_username);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_status => new byte[] { 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_status = JsonEncodedText.Encode(propName_status);
        private static ReadOnlySpan<byte> propName_member_count => new byte[] { 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_member_count = JsonEncodedText.Encode(propName_member_count);
        private static ReadOnlySpan<byte> propName_has_linked_chat => new byte[] { 104, 97, 115, 95, 108, 105, 110, 107, 101, 100, 95, 99, 104, 97, 116 };
        private static readonly JsonEncodedText encodedPropName_has_linked_chat = JsonEncodedText.Encode(propName_has_linked_chat);
        private static ReadOnlySpan<byte> propName_has_location => new byte[] { 104, 97, 115, 95, 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_has_location = JsonEncodedText.Encode(propName_has_location);
        private static ReadOnlySpan<byte> propName_sign_messages => new byte[] { 115, 105, 103, 110, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_sign_messages = JsonEncodedText.Encode(propName_sign_messages);
        private static ReadOnlySpan<byte> propName_is_slow_mode_enabled => new byte[] { 105, 115, 95, 115, 108, 111, 119, 95, 109, 111, 100, 101, 95, 101, 110, 97, 98, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_slow_mode_enabled = JsonEncodedText.Encode(propName_is_slow_mode_enabled);
        private static ReadOnlySpan<byte> propName_is_channel => new byte[] { 105, 115, 95, 99, 104, 97, 110, 110, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_is_channel = JsonEncodedText.Encode(propName_is_channel);
        private static ReadOnlySpan<byte> propName_is_broadcast_group => new byte[] { 105, 115, 95, 98, 114, 111, 97, 100, 99, 97, 115, 116, 95, 103, 114, 111, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_is_broadcast_group = JsonEncodedText.Encode(propName_is_broadcast_group);
        private static ReadOnlySpan<byte> propName_is_verified => new byte[] { 105, 115, 95, 118, 101, 114, 105, 102, 105, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_verified = JsonEncodedText.Encode(propName_is_verified);
        private static ReadOnlySpan<byte> propName_restriction_reason => new byte[] { 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 95, 114, 101, 97, 115, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_restriction_reason = JsonEncodedText.Encode(propName_restriction_reason);
        private static ReadOnlySpan<byte> propName_is_scam => new byte[] { 105, 115, 95, 115, 99, 97, 109 };
        private static readonly JsonEncodedText encodedPropName_is_scam = JsonEncodedText.Encode(propName_is_scam);
        private static ReadOnlySpan<byte> propName_is_fake => new byte[] { 105, 115, 95, 102, 97, 107, 101 };
        private static readonly JsonEncodedText encodedPropName_is_fake = JsonEncodedText.Encode(propName_is_fake);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Supergroup)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_username, obj.Username);
            writer.WriteNumber(encodedPropName_date, obj.Date);
            if (obj.Status != null)
            {
                writer.WritePropertyName(encodedPropName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
            writer.WriteNumber(encodedPropName_member_count, obj.MemberCount);
            writer.WriteBoolean(encodedPropName_has_linked_chat, obj.HasLinkedChat);
            writer.WriteBoolean(encodedPropName_has_location, obj.HasLocation);
            writer.WriteBoolean(encodedPropName_sign_messages, obj.SignMessages);
            writer.WriteBoolean(encodedPropName_is_slow_mode_enabled, obj.IsSlowModeEnabled);
            writer.WriteBoolean(encodedPropName_is_channel, obj.IsChannel);
            writer.WriteBoolean(encodedPropName_is_broadcast_group, obj.IsBroadcastGroup);
            writer.WriteBoolean(encodedPropName_is_verified, obj.IsVerified);
            writer.WriteString(encodedPropName_restriction_reason, obj.RestrictionReason);
            writer.WriteBoolean(encodedPropName_is_scam, obj.IsScam);
            writer.WriteBoolean(encodedPropName_is_fake, obj.IsFake);
        }
    }

    partial class SupergroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 70, 117, 108, 108, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_member_count => new byte[] { 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_member_count = JsonEncodedText.Encode(propName_member_count);
        private static ReadOnlySpan<byte> propName_administrator_count => new byte[] { 97, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_administrator_count = JsonEncodedText.Encode(propName_administrator_count);
        private static ReadOnlySpan<byte> propName_restricted_count => new byte[] { 114, 101, 115, 116, 114, 105, 99, 116, 101, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_restricted_count = JsonEncodedText.Encode(propName_restricted_count);
        private static ReadOnlySpan<byte> propName_banned_count => new byte[] { 98, 97, 110, 110, 101, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_banned_count = JsonEncodedText.Encode(propName_banned_count);
        private static ReadOnlySpan<byte> propName_linked_chat_id => new byte[] { 108, 105, 110, 107, 101, 100, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_linked_chat_id = JsonEncodedText.Encode(propName_linked_chat_id);
        private static ReadOnlySpan<byte> propName_slow_mode_delay => new byte[] { 115, 108, 111, 119, 95, 109, 111, 100, 101, 95, 100, 101, 108, 97, 121 };
        private static readonly JsonEncodedText encodedPropName_slow_mode_delay = JsonEncodedText.Encode(propName_slow_mode_delay);
        private static ReadOnlySpan<byte> propName_slow_mode_delay_expires_in => new byte[] { 115, 108, 111, 119, 95, 109, 111, 100, 101, 95, 100, 101, 108, 97, 121, 95, 101, 120, 112, 105, 114, 101, 115, 95, 105, 110 };
        private static readonly JsonEncodedText encodedPropName_slow_mode_delay_expires_in = JsonEncodedText.Encode(propName_slow_mode_delay_expires_in);
        private static ReadOnlySpan<byte> propName_can_get_members => new byte[] { 99, 97, 110, 95, 103, 101, 116, 95, 109, 101, 109, 98, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_get_members = JsonEncodedText.Encode(propName_can_get_members);
        private static ReadOnlySpan<byte> propName_can_set_username => new byte[] { 99, 97, 110, 95, 115, 101, 116, 95, 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_can_set_username = JsonEncodedText.Encode(propName_can_set_username);
        private static ReadOnlySpan<byte> propName_can_set_sticker_set => new byte[] { 99, 97, 110, 95, 115, 101, 116, 95, 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_can_set_sticker_set = JsonEncodedText.Encode(propName_can_set_sticker_set);
        private static ReadOnlySpan<byte> propName_can_set_location => new byte[] { 99, 97, 110, 95, 115, 101, 116, 95, 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_can_set_location = JsonEncodedText.Encode(propName_can_set_location);
        private static ReadOnlySpan<byte> propName_can_get_statistics => new byte[] { 99, 97, 110, 95, 103, 101, 116, 95, 115, 116, 97, 116, 105, 115, 116, 105, 99, 115 };
        private static readonly JsonEncodedText encodedPropName_can_get_statistics = JsonEncodedText.Encode(propName_can_get_statistics);
        private static ReadOnlySpan<byte> propName_is_all_history_available => new byte[] { 105, 115, 95, 97, 108, 108, 95, 104, 105, 115, 116, 111, 114, 121, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_is_all_history_available = JsonEncodedText.Encode(propName_is_all_history_available);
        private static ReadOnlySpan<byte> propName_sticker_set_id => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sticker_set_id = JsonEncodedText.Encode(propName_sticker_set_id);
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        private static ReadOnlySpan<byte> propName_bot_commands => new byte[] { 98, 111, 116, 95, 99, 111, 109, 109, 97, 110, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_bot_commands = JsonEncodedText.Encode(propName_bot_commands);
        private static ReadOnlySpan<byte> propName_upgraded_from_basic_group_id => new byte[] { 117, 112, 103, 114, 97, 100, 101, 100, 95, 102, 114, 111, 109, 95, 98, 97, 115, 105, 99, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_upgraded_from_basic_group_id = JsonEncodedText.Encode(propName_upgraded_from_basic_group_id);
        private static ReadOnlySpan<byte> propName_upgraded_from_max_message_id => new byte[] { 117, 112, 103, 114, 97, 100, 101, 100, 95, 102, 114, 111, 109, 95, 109, 97, 120, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_upgraded_from_max_message_id = JsonEncodedText.Encode(propName_upgraded_from_max_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupFullInfo)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(encodedPropName_description, obj.Description);
            writer.WriteNumber(encodedPropName_member_count, obj.MemberCount);
            writer.WriteNumber(encodedPropName_administrator_count, obj.AdministratorCount);
            writer.WriteNumber(encodedPropName_restricted_count, obj.RestrictedCount);
            writer.WriteNumber(encodedPropName_banned_count, obj.BannedCount);
            writer.WriteNumber(encodedPropName_linked_chat_id, obj.LinkedChatId);
            writer.WriteNumber(encodedPropName_slow_mode_delay, obj.SlowModeDelay);
            writer.WriteNumber(encodedPropName_slow_mode_delay_expires_in, obj.SlowModeDelayExpiresIn);
            writer.WriteBoolean(encodedPropName_can_get_members, obj.CanGetMembers);
            writer.WriteBoolean(encodedPropName_can_set_username, obj.CanSetUsername);
            writer.WriteBoolean(encodedPropName_can_set_sticker_set, obj.CanSetStickerSet);
            writer.WriteBoolean(encodedPropName_can_set_location, obj.CanSetLocation);
            writer.WriteBoolean(encodedPropName_can_get_statistics, obj.CanGetStatistics);
            writer.WriteBoolean(encodedPropName_is_all_history_available, obj.IsAllHistoryAvailable);
            writer.WritePropertyName(encodedPropName_sticker_set_id);
            writer.WriteInt64String(obj.StickerSetId);
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            if (obj.InviteLink != null)
            {
                writer.WritePropertyName(encodedPropName_invite_link);
                writer.WriteTLObjectValue(obj.InviteLink);
            }
            if (obj.BotCommands != null)
            {
                writer.WritePropertyName(encodedPropName_bot_commands);
                writer.WriteArray(obj.BotCommands);
            }
            writer.WriteNumber(encodedPropName_upgraded_from_basic_group_id, obj.UpgradedFromBasicGroupId);
            writer.WriteNumber(encodedPropName_upgraded_from_max_message_id, obj.UpgradedFromMaxMessageId);
        }
    }

    partial class SecretChatStatePendingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 99, 114, 101, 116, 67, 104, 97, 116, 83, 116, 97, 116, 101, 80, 101, 110, 100, 105, 110, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SecretChatStateReadyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 99, 114, 101, 116, 67, 104, 97, 116, 83, 116, 97, 116, 101, 82, 101, 97, 100, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SecretChatStateClosedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 99, 114, 101, 116, 67, 104, 97, 116, 83, 116, 97, 116, 101, 67, 108, 111, 115, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 99, 114, 101, 116, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_state => new byte[] { 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_state = JsonEncodedText.Encode(propName_state);
        private static ReadOnlySpan<byte> propName_is_outbound => new byte[] { 105, 115, 95, 111, 117, 116, 98, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_is_outbound = JsonEncodedText.Encode(propName_is_outbound);
        private static ReadOnlySpan<byte> propName_key_hash => new byte[] { 107, 101, 121, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_key_hash = JsonEncodedText.Encode(propName_key_hash);
        private static ReadOnlySpan<byte> propName_layer => new byte[] { 108, 97, 121, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_layer = JsonEncodedText.Encode(propName_layer);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SecretChat)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.State != null)
            {
                writer.WritePropertyName(encodedPropName_state);
                writer.WriteTLObjectValue(obj.State);
            }
            writer.WriteBoolean(encodedPropName_is_outbound, obj.IsOutbound);
            if (!obj.KeyHash.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_key_hash, obj.KeyHash.Span);
            }
            writer.WriteNumber(encodedPropName_layer, obj.Layer);
        }
    }

    partial class MessageSenderUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 101, 114, 85, 115, 101, 114 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSenderUser)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class MessageSenderChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 101, 114, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSenderChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class MessageSendersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_senders => new byte[] { 115, 101, 110, 100, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_senders = JsonEncodedText.Encode(propName_senders);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSenders)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Senders != null)
            {
                writer.WritePropertyName(encodedPropName_senders);
                writer.WriteArray(obj.Senders);
            }
        }
    }

    partial class MessageForwardOriginUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 70, 111, 114, 119, 97, 114, 100, 79, 114, 105, 103, 105, 110, 85, 115, 101, 114 }));
        private static ReadOnlySpan<byte> propName_sender_user_id => new byte[] { 115, 101, 110, 100, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sender_user_id = JsonEncodedText.Encode(propName_sender_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardOriginUser)tlobj;
            writer.WriteNumber(encodedPropName_sender_user_id, obj.SenderUserId);
        }
    }

    partial class MessageForwardOriginChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 70, 111, 114, 119, 97, 114, 100, 79, 114, 105, 103, 105, 110, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_sender_chat_id => new byte[] { 115, 101, 110, 100, 101, 114, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sender_chat_id = JsonEncodedText.Encode(propName_sender_chat_id);
        private static ReadOnlySpan<byte> propName_author_signature => new byte[] { 97, 117, 116, 104, 111, 114, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101 };
        private static readonly JsonEncodedText encodedPropName_author_signature = JsonEncodedText.Encode(propName_author_signature);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardOriginChat)tlobj;
            writer.WriteNumber(encodedPropName_sender_chat_id, obj.SenderChatId);
            writer.WriteString(encodedPropName_author_signature, obj.AuthorSignature);
        }
    }

    partial class MessageForwardOriginHiddenUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 70, 111, 114, 119, 97, 114, 100, 79, 114, 105, 103, 105, 110, 72, 105, 100, 100, 101, 110, 85, 115, 101, 114 }));
        private static ReadOnlySpan<byte> propName_sender_name => new byte[] { 115, 101, 110, 100, 101, 114, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_sender_name = JsonEncodedText.Encode(propName_sender_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardOriginHiddenUser)tlobj;
            writer.WriteString(encodedPropName_sender_name, obj.SenderName);
        }
    }

    partial class MessageForwardOriginChannelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 70, 111, 114, 119, 97, 114, 100, 79, 114, 105, 103, 105, 110, 67, 104, 97, 110, 110, 101, 108 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_author_signature => new byte[] { 97, 117, 116, 104, 111, 114, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101 };
        private static readonly JsonEncodedText encodedPropName_author_signature = JsonEncodedText.Encode(propName_author_signature);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardOriginChannel)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteString(encodedPropName_author_signature, obj.AuthorSignature);
        }
    }

    partial class MessageForwardOriginMessageImportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 70, 111, 114, 119, 97, 114, 100, 79, 114, 105, 103, 105, 110, 77, 101, 115, 115, 97, 103, 101, 73, 109, 112, 111, 114, 116 }));
        private static ReadOnlySpan<byte> propName_sender_name => new byte[] { 115, 101, 110, 100, 101, 114, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_sender_name = JsonEncodedText.Encode(propName_sender_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardOriginMessageImport)tlobj;
            writer.WriteString(encodedPropName_sender_name, obj.SenderName);
        }
    }

    partial class MessageForwardInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 70, 111, 114, 119, 97, 114, 100, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_origin => new byte[] { 111, 114, 105, 103, 105, 110 };
        private static readonly JsonEncodedText encodedPropName_origin = JsonEncodedText.Encode(propName_origin);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_public_service_announcement_type => new byte[] { 112, 117, 98, 108, 105, 99, 95, 115, 101, 114, 118, 105, 99, 101, 95, 97, 110, 110, 111, 117, 110, 99, 101, 109, 101, 110, 116, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_public_service_announcement_type = JsonEncodedText.Encode(propName_public_service_announcement_type);
        private static ReadOnlySpan<byte> propName_from_chat_id => new byte[] { 102, 114, 111, 109, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_chat_id = JsonEncodedText.Encode(propName_from_chat_id);
        private static ReadOnlySpan<byte> propName_from_message_id => new byte[] { 102, 114, 111, 109, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_message_id = JsonEncodedText.Encode(propName_from_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardInfo)tlobj;
            if (obj.Origin != null)
            {
                writer.WritePropertyName(encodedPropName_origin);
                writer.WriteTLObjectValue(obj.Origin);
            }
            writer.WriteNumber(encodedPropName_date, obj.Date);
            writer.WriteString(encodedPropName_public_service_announcement_type, obj.PublicServiceAnnouncementType);
            writer.WriteNumber(encodedPropName_from_chat_id, obj.FromChatId);
            writer.WriteNumber(encodedPropName_from_message_id, obj.FromMessageId);
        }
    }

    partial class MessageReplyInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 82, 101, 112, 108, 121, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_reply_count => new byte[] { 114, 101, 112, 108, 121, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_reply_count = JsonEncodedText.Encode(propName_reply_count);
        private static ReadOnlySpan<byte> propName_recent_repliers => new byte[] { 114, 101, 99, 101, 110, 116, 95, 114, 101, 112, 108, 105, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_recent_repliers = JsonEncodedText.Encode(propName_recent_repliers);
        private static ReadOnlySpan<byte> propName_last_read_inbox_message_id => new byte[] { 108, 97, 115, 116, 95, 114, 101, 97, 100, 95, 105, 110, 98, 111, 120, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_last_read_inbox_message_id = JsonEncodedText.Encode(propName_last_read_inbox_message_id);
        private static ReadOnlySpan<byte> propName_last_read_outbox_message_id => new byte[] { 108, 97, 115, 116, 95, 114, 101, 97, 100, 95, 111, 117, 116, 98, 111, 120, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_last_read_outbox_message_id = JsonEncodedText.Encode(propName_last_read_outbox_message_id);
        private static ReadOnlySpan<byte> propName_last_message_id => new byte[] { 108, 97, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_last_message_id = JsonEncodedText.Encode(propName_last_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageReplyInfo)tlobj;
            writer.WriteNumber(encodedPropName_reply_count, obj.ReplyCount);
            if (obj.RecentRepliers != null)
            {
                writer.WritePropertyName(encodedPropName_recent_repliers);
                writer.WriteArray(obj.RecentRepliers);
            }
            writer.WriteNumber(encodedPropName_last_read_inbox_message_id, obj.LastReadInboxMessageId);
            writer.WriteNumber(encodedPropName_last_read_outbox_message_id, obj.LastReadOutboxMessageId);
            writer.WriteNumber(encodedPropName_last_message_id, obj.LastMessageId);
        }
    }

    partial class MessageInteractionInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 73, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_view_count => new byte[] { 118, 105, 101, 119, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_view_count = JsonEncodedText.Encode(propName_view_count);
        private static ReadOnlySpan<byte> propName_forward_count => new byte[] { 102, 111, 114, 119, 97, 114, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_forward_count = JsonEncodedText.Encode(propName_forward_count);
        private static ReadOnlySpan<byte> propName_reply_info => new byte[] { 114, 101, 112, 108, 121, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_reply_info = JsonEncodedText.Encode(propName_reply_info);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageInteractionInfo)tlobj;
            writer.WriteNumber(encodedPropName_view_count, obj.ViewCount);
            writer.WriteNumber(encodedPropName_forward_count, obj.ForwardCount);
            if (obj.ReplyInfo != null)
            {
                writer.WritePropertyName(encodedPropName_reply_info);
                writer.WriteTLObjectValue(obj.ReplyInfo);
            }
        }
    }

    partial class MessageSendingStatePendingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 105, 110, 103, 83, 116, 97, 116, 101, 80, 101, 110, 100, 105, 110, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageSendingStateFailedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 105, 110, 103, 83, 116, 97, 116, 101, 70, 97, 105, 108, 101, 100 }));
        private static ReadOnlySpan<byte> propName_error_code => new byte[] { 101, 114, 114, 111, 114, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_error_code = JsonEncodedText.Encode(propName_error_code);
        private static ReadOnlySpan<byte> propName_error_message => new byte[] { 101, 114, 114, 111, 114, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_error_message = JsonEncodedText.Encode(propName_error_message);
        private static ReadOnlySpan<byte> propName_can_retry => new byte[] { 99, 97, 110, 95, 114, 101, 116, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_can_retry = JsonEncodedText.Encode(propName_can_retry);
        private static ReadOnlySpan<byte> propName_retry_after => new byte[] { 114, 101, 116, 114, 121, 95, 97, 102, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_retry_after = JsonEncodedText.Encode(propName_retry_after);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSendingStateFailed)tlobj;
            writer.WriteNumber(encodedPropName_error_code, obj.ErrorCode);
            writer.WriteString(encodedPropName_error_message, obj.ErrorMessage);
            writer.WriteBoolean(encodedPropName_can_retry, obj.CanRetry);
            writer.WriteNumber(encodedPropName_retry_after, obj.RetryAfter);
        }
    }

    partial class MessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_sender => new byte[] { 115, 101, 110, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sender = JsonEncodedText.Encode(propName_sender);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_sending_state => new byte[] { 115, 101, 110, 100, 105, 110, 103, 95, 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_sending_state = JsonEncodedText.Encode(propName_sending_state);
        private static ReadOnlySpan<byte> propName_scheduling_state => new byte[] { 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 95, 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_scheduling_state = JsonEncodedText.Encode(propName_scheduling_state);
        private static ReadOnlySpan<byte> propName_is_outgoing => new byte[] { 105, 115, 95, 111, 117, 116, 103, 111, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_is_outgoing = JsonEncodedText.Encode(propName_is_outgoing);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        private static ReadOnlySpan<byte> propName_can_be_edited => new byte[] { 99, 97, 110, 95, 98, 101, 95, 101, 100, 105, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_can_be_edited = JsonEncodedText.Encode(propName_can_be_edited);
        private static ReadOnlySpan<byte> propName_can_be_forwarded => new byte[] { 99, 97, 110, 95, 98, 101, 95, 102, 111, 114, 119, 97, 114, 100, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_can_be_forwarded = JsonEncodedText.Encode(propName_can_be_forwarded);
        private static ReadOnlySpan<byte> propName_can_be_deleted_only_for_self => new byte[] { 99, 97, 110, 95, 98, 101, 95, 100, 101, 108, 101, 116, 101, 100, 95, 111, 110, 108, 121, 95, 102, 111, 114, 95, 115, 101, 108, 102 };
        private static readonly JsonEncodedText encodedPropName_can_be_deleted_only_for_self = JsonEncodedText.Encode(propName_can_be_deleted_only_for_self);
        private static ReadOnlySpan<byte> propName_can_be_deleted_for_all_users => new byte[] { 99, 97, 110, 95, 98, 101, 95, 100, 101, 108, 101, 116, 101, 100, 95, 102, 111, 114, 95, 97, 108, 108, 95, 117, 115, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_be_deleted_for_all_users = JsonEncodedText.Encode(propName_can_be_deleted_for_all_users);
        private static ReadOnlySpan<byte> propName_can_get_statistics => new byte[] { 99, 97, 110, 95, 103, 101, 116, 95, 115, 116, 97, 116, 105, 115, 116, 105, 99, 115 };
        private static readonly JsonEncodedText encodedPropName_can_get_statistics = JsonEncodedText.Encode(propName_can_get_statistics);
        private static ReadOnlySpan<byte> propName_can_get_message_thread => new byte[] { 99, 97, 110, 95, 103, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_can_get_message_thread = JsonEncodedText.Encode(propName_can_get_message_thread);
        private static ReadOnlySpan<byte> propName_can_get_viewers => new byte[] { 99, 97, 110, 95, 103, 101, 116, 95, 118, 105, 101, 119, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_get_viewers = JsonEncodedText.Encode(propName_can_get_viewers);
        private static ReadOnlySpan<byte> propName_can_get_media_timestamp_links => new byte[] { 99, 97, 110, 95, 103, 101, 116, 95, 109, 101, 100, 105, 97, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 95, 108, 105, 110, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_can_get_media_timestamp_links = JsonEncodedText.Encode(propName_can_get_media_timestamp_links);
        private static ReadOnlySpan<byte> propName_has_timestamped_media => new byte[] { 104, 97, 115, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 101, 100, 95, 109, 101, 100, 105, 97 };
        private static readonly JsonEncodedText encodedPropName_has_timestamped_media = JsonEncodedText.Encode(propName_has_timestamped_media);
        private static ReadOnlySpan<byte> propName_is_channel_post => new byte[] { 105, 115, 95, 99, 104, 97, 110, 110, 101, 108, 95, 112, 111, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_is_channel_post = JsonEncodedText.Encode(propName_is_channel_post);
        private static ReadOnlySpan<byte> propName_contains_unread_mention => new byte[] { 99, 111, 110, 116, 97, 105, 110, 115, 95, 117, 110, 114, 101, 97, 100, 95, 109, 101, 110, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_contains_unread_mention = JsonEncodedText.Encode(propName_contains_unread_mention);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_edit_date => new byte[] { 101, 100, 105, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_edit_date = JsonEncodedText.Encode(propName_edit_date);
        private static ReadOnlySpan<byte> propName_forward_info => new byte[] { 102, 111, 114, 119, 97, 114, 100, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_forward_info = JsonEncodedText.Encode(propName_forward_info);
        private static ReadOnlySpan<byte> propName_interaction_info => new byte[] { 105, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_interaction_info = JsonEncodedText.Encode(propName_interaction_info);
        private static ReadOnlySpan<byte> propName_reply_in_chat_id => new byte[] { 114, 101, 112, 108, 121, 95, 105, 110, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_reply_in_chat_id = JsonEncodedText.Encode(propName_reply_in_chat_id);
        private static ReadOnlySpan<byte> propName_reply_to_message_id => new byte[] { 114, 101, 112, 108, 121, 95, 116, 111, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_reply_to_message_id = JsonEncodedText.Encode(propName_reply_to_message_id);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        private static ReadOnlySpan<byte> propName_ttl => new byte[] { 116, 116, 108 };
        private static readonly JsonEncodedText encodedPropName_ttl = JsonEncodedText.Encode(propName_ttl);
        private static ReadOnlySpan<byte> propName_ttl_expires_in => new byte[] { 116, 116, 108, 95, 101, 120, 112, 105, 114, 101, 115, 95, 105, 110 };
        private static readonly JsonEncodedText encodedPropName_ttl_expires_in = JsonEncodedText.Encode(propName_ttl_expires_in);
        private static ReadOnlySpan<byte> propName_via_bot_user_id => new byte[] { 118, 105, 97, 95, 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_via_bot_user_id = JsonEncodedText.Encode(propName_via_bot_user_id);
        private static ReadOnlySpan<byte> propName_author_signature => new byte[] { 97, 117, 116, 104, 111, 114, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101 };
        private static readonly JsonEncodedText encodedPropName_author_signature = JsonEncodedText.Encode(propName_author_signature);
        private static ReadOnlySpan<byte> propName_media_album_id => new byte[] { 109, 101, 100, 105, 97, 95, 97, 108, 98, 117, 109, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_media_album_id = JsonEncodedText.Encode(propName_media_album_id);
        private static ReadOnlySpan<byte> propName_restriction_reason => new byte[] { 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 95, 114, 101, 97, 115, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_restriction_reason = JsonEncodedText.Encode(propName_restriction_reason);
        private static ReadOnlySpan<byte> propName_content => new byte[] { 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_content = JsonEncodedText.Encode(propName_content);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Message)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            if (obj.Sender != null)
            {
                writer.WritePropertyName(encodedPropName_sender);
                writer.WriteTLObjectValue(obj.Sender);
            }
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.SendingState != null)
            {
                writer.WritePropertyName(encodedPropName_sending_state);
                writer.WriteTLObjectValue(obj.SendingState);
            }
            if (obj.SchedulingState != null)
            {
                writer.WritePropertyName(encodedPropName_scheduling_state);
                writer.WriteTLObjectValue(obj.SchedulingState);
            }
            writer.WriteBoolean(encodedPropName_is_outgoing, obj.IsOutgoing);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
            writer.WriteBoolean(encodedPropName_can_be_edited, obj.CanBeEdited);
            writer.WriteBoolean(encodedPropName_can_be_forwarded, obj.CanBeForwarded);
            writer.WriteBoolean(encodedPropName_can_be_deleted_only_for_self, obj.CanBeDeletedOnlyForSelf);
            writer.WriteBoolean(encodedPropName_can_be_deleted_for_all_users, obj.CanBeDeletedForAllUsers);
            writer.WriteBoolean(encodedPropName_can_get_statistics, obj.CanGetStatistics);
            writer.WriteBoolean(encodedPropName_can_get_message_thread, obj.CanGetMessageThread);
            writer.WriteBoolean(encodedPropName_can_get_viewers, obj.CanGetViewers);
            writer.WriteBoolean(encodedPropName_can_get_media_timestamp_links, obj.CanGetMediaTimestampLinks);
            writer.WriteBoolean(encodedPropName_has_timestamped_media, obj.HasTimestampedMedia);
            writer.WriteBoolean(encodedPropName_is_channel_post, obj.IsChannelPost);
            writer.WriteBoolean(encodedPropName_contains_unread_mention, obj.ContainsUnreadMention);
            writer.WriteNumber(encodedPropName_date, obj.Date);
            writer.WriteNumber(encodedPropName_edit_date, obj.EditDate);
            if (obj.ForwardInfo != null)
            {
                writer.WritePropertyName(encodedPropName_forward_info);
                writer.WriteTLObjectValue(obj.ForwardInfo);
            }
            if (obj.InteractionInfo != null)
            {
                writer.WritePropertyName(encodedPropName_interaction_info);
                writer.WriteTLObjectValue(obj.InteractionInfo);
            }
            writer.WriteNumber(encodedPropName_reply_in_chat_id, obj.ReplyInChatId);
            writer.WriteNumber(encodedPropName_reply_to_message_id, obj.ReplyToMessageId);
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
            writer.WriteNumber(encodedPropName_ttl, obj.Ttl);
            writer.WriteNumber(encodedPropName_ttl_expires_in, obj.TtlExpiresIn);
            writer.WriteNumber(encodedPropName_via_bot_user_id, obj.ViaBotUserId);
            writer.WriteString(encodedPropName_author_signature, obj.AuthorSignature);
            writer.WritePropertyName(encodedPropName_media_album_id);
            writer.WriteInt64String(obj.MediaAlbumId);
            writer.WriteString(encodedPropName_restriction_reason, obj.RestrictionReason);
            if (obj.Content != null)
            {
                writer.WritePropertyName(encodedPropName_content);
                writer.WriteTLObjectValue(obj.Content);
            }
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class MessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_messages => new byte[] { 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_messages = JsonEncodedText.Encode(propName_messages);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Messages)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Messages_ != null)
            {
                writer.WritePropertyName(encodedPropName_messages);
                writer.WriteArray(obj.Messages_);
            }
        }
    }

    partial class FoundMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 111, 117, 110, 100, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_messages => new byte[] { 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_messages = JsonEncodedText.Encode(propName_messages);
        private static ReadOnlySpan<byte> propName_next_offset => new byte[] { 110, 101, 120, 116, 95, 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_next_offset = JsonEncodedText.Encode(propName_next_offset);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (FoundMessages)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Messages != null)
            {
                writer.WritePropertyName(encodedPropName_messages);
                writer.WriteArray(obj.Messages);
            }
            writer.WriteString(encodedPropName_next_offset, obj.NextOffset);
        }
    }

    partial class MessagePositionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 80, 111, 115, 105, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_position => new byte[] { 112, 111, 115, 105, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_position = JsonEncodedText.Encode(propName_position);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePosition)tlobj;
            writer.WriteNumber(encodedPropName_position, obj.Position);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteNumber(encodedPropName_date, obj.Date);
        }
    }

    partial class MessagePositionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 80, 111, 115, 105, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_positions => new byte[] { 112, 111, 115, 105, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_positions = JsonEncodedText.Encode(propName_positions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePositions)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Positions != null)
            {
                writer.WritePropertyName(encodedPropName_positions);
                writer.WriteArray(obj.Positions);
            }
        }
    }

    partial class MessageCalendarDayConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 97, 108, 101, 110, 100, 97, 114, 68, 97, 121 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageCalendarDay)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Message != null)
            {
                writer.WritePropertyName(encodedPropName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class MessageCalendarConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 97, 108, 101, 110, 100, 97, 114 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_days => new byte[] { 100, 97, 121, 115 };
        private static readonly JsonEncodedText encodedPropName_days = JsonEncodedText.Encode(propName_days);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageCalendar)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Days != null)
            {
                writer.WritePropertyName(encodedPropName_days);
                writer.WriteArray(obj.Days);
            }
        }
    }

    partial class SponsoredMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 112, 111, 110, 115, 111, 114, 101, 100, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_sponsor_chat_id => new byte[] { 115, 112, 111, 110, 115, 111, 114, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sponsor_chat_id = JsonEncodedText.Encode(propName_sponsor_chat_id);
        private static ReadOnlySpan<byte> propName_link => new byte[] { 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_link = JsonEncodedText.Encode(propName_link);
        private static ReadOnlySpan<byte> propName_content => new byte[] { 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_content = JsonEncodedText.Encode(propName_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SponsoredMessage)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteNumber(encodedPropName_sponsor_chat_id, obj.SponsorChatId);
            if (obj.Link != null)
            {
                writer.WritePropertyName(encodedPropName_link);
                writer.WriteTLObjectValue(obj.Link);
            }
            if (obj.Content != null)
            {
                writer.WritePropertyName(encodedPropName_content);
                writer.WriteTLObjectValue(obj.Content);
            }
        }
    }

    partial class SponsoredMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 112, 111, 110, 115, 111, 114, 101, 100, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_messages => new byte[] { 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_messages = JsonEncodedText.Encode(propName_messages);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SponsoredMessages)tlobj;
            if (obj.Messages != null)
            {
                writer.WritePropertyName(encodedPropName_messages);
                writer.WriteArray(obj.Messages);
            }
        }
    }

    partial class NotificationSettingsScopePrivateChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115, 83, 99, 111, 112, 101, 80, 114, 105, 118, 97, 116, 101, 67, 104, 97, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationSettingsScopeGroupChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115, 83, 99, 111, 112, 101, 71, 114, 111, 117, 112, 67, 104, 97, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationSettingsScopeChannelChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115, 83, 99, 111, 112, 101, 67, 104, 97, 110, 110, 101, 108, 67, 104, 97, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_use_default_mute_for => new byte[] { 117, 115, 101, 95, 100, 101, 102, 97, 117, 108, 116, 95, 109, 117, 116, 101, 95, 102, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_use_default_mute_for = JsonEncodedText.Encode(propName_use_default_mute_for);
        private static ReadOnlySpan<byte> propName_mute_for => new byte[] { 109, 117, 116, 101, 95, 102, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_mute_for = JsonEncodedText.Encode(propName_mute_for);
        private static ReadOnlySpan<byte> propName_use_default_sound => new byte[] { 117, 115, 101, 95, 100, 101, 102, 97, 117, 108, 116, 95, 115, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_use_default_sound = JsonEncodedText.Encode(propName_use_default_sound);
        private static ReadOnlySpan<byte> propName_sound => new byte[] { 115, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_sound = JsonEncodedText.Encode(propName_sound);
        private static ReadOnlySpan<byte> propName_use_default_show_preview => new byte[] { 117, 115, 101, 95, 100, 101, 102, 97, 117, 108, 116, 95, 115, 104, 111, 119, 95, 112, 114, 101, 118, 105, 101, 119 };
        private static readonly JsonEncodedText encodedPropName_use_default_show_preview = JsonEncodedText.Encode(propName_use_default_show_preview);
        private static ReadOnlySpan<byte> propName_show_preview => new byte[] { 115, 104, 111, 119, 95, 112, 114, 101, 118, 105, 101, 119 };
        private static readonly JsonEncodedText encodedPropName_show_preview = JsonEncodedText.Encode(propName_show_preview);
        private static ReadOnlySpan<byte> propName_use_default_disable_pinned_message_notifications => new byte[] { 117, 115, 101, 95, 100, 101, 102, 97, 117, 108, 116, 95, 100, 105, 115, 97, 98, 108, 101, 95, 112, 105, 110, 110, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_use_default_disable_pinned_message_notifications = JsonEncodedText.Encode(propName_use_default_disable_pinned_message_notifications);
        private static ReadOnlySpan<byte> propName_disable_pinned_message_notifications => new byte[] { 100, 105, 115, 97, 98, 108, 101, 95, 112, 105, 110, 110, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_disable_pinned_message_notifications = JsonEncodedText.Encode(propName_disable_pinned_message_notifications);
        private static ReadOnlySpan<byte> propName_use_default_disable_mention_notifications => new byte[] { 117, 115, 101, 95, 100, 101, 102, 97, 117, 108, 116, 95, 100, 105, 115, 97, 98, 108, 101, 95, 109, 101, 110, 116, 105, 111, 110, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_use_default_disable_mention_notifications = JsonEncodedText.Encode(propName_use_default_disable_mention_notifications);
        private static ReadOnlySpan<byte> propName_disable_mention_notifications => new byte[] { 100, 105, 115, 97, 98, 108, 101, 95, 109, 101, 110, 116, 105, 111, 110, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_disable_mention_notifications = JsonEncodedText.Encode(propName_disable_mention_notifications);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatNotificationSettings)tlobj;
            writer.WriteBoolean(encodedPropName_use_default_mute_for, obj.UseDefaultMuteFor);
            writer.WriteNumber(encodedPropName_mute_for, obj.MuteFor);
            writer.WriteBoolean(encodedPropName_use_default_sound, obj.UseDefaultSound);
            writer.WriteString(encodedPropName_sound, obj.Sound);
            writer.WriteBoolean(encodedPropName_use_default_show_preview, obj.UseDefaultShowPreview);
            writer.WriteBoolean(encodedPropName_show_preview, obj.ShowPreview);
            writer.WriteBoolean(encodedPropName_use_default_disable_pinned_message_notifications, obj.UseDefaultDisablePinnedMessageNotifications);
            writer.WriteBoolean(encodedPropName_disable_pinned_message_notifications, obj.DisablePinnedMessageNotifications);
            writer.WriteBoolean(encodedPropName_use_default_disable_mention_notifications, obj.UseDefaultDisableMentionNotifications);
            writer.WriteBoolean(encodedPropName_disable_mention_notifications, obj.DisableMentionNotifications);
        }
    }

    partial class ScopeNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 99, 111, 112, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_mute_for => new byte[] { 109, 117, 116, 101, 95, 102, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_mute_for = JsonEncodedText.Encode(propName_mute_for);
        private static ReadOnlySpan<byte> propName_sound => new byte[] { 115, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_sound = JsonEncodedText.Encode(propName_sound);
        private static ReadOnlySpan<byte> propName_show_preview => new byte[] { 115, 104, 111, 119, 95, 112, 114, 101, 118, 105, 101, 119 };
        private static readonly JsonEncodedText encodedPropName_show_preview = JsonEncodedText.Encode(propName_show_preview);
        private static ReadOnlySpan<byte> propName_disable_pinned_message_notifications => new byte[] { 100, 105, 115, 97, 98, 108, 101, 95, 112, 105, 110, 110, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_disable_pinned_message_notifications = JsonEncodedText.Encode(propName_disable_pinned_message_notifications);
        private static ReadOnlySpan<byte> propName_disable_mention_notifications => new byte[] { 100, 105, 115, 97, 98, 108, 101, 95, 109, 101, 110, 116, 105, 111, 110, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_disable_mention_notifications = JsonEncodedText.Encode(propName_disable_mention_notifications);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ScopeNotificationSettings)tlobj;
            writer.WriteNumber(encodedPropName_mute_for, obj.MuteFor);
            writer.WriteString(encodedPropName_sound, obj.Sound);
            writer.WriteBoolean(encodedPropName_show_preview, obj.ShowPreview);
            writer.WriteBoolean(encodedPropName_disable_pinned_message_notifications, obj.DisablePinnedMessageNotifications);
            writer.WriteBoolean(encodedPropName_disable_mention_notifications, obj.DisableMentionNotifications);
        }
    }

    partial class DraftMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 114, 97, 102, 116, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_reply_to_message_id => new byte[] { 114, 101, 112, 108, 121, 95, 116, 111, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_reply_to_message_id = JsonEncodedText.Encode(propName_reply_to_message_id);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_input_message_text => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_text = JsonEncodedText.Encode(propName_input_message_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DraftMessage)tlobj;
            writer.WriteNumber(encodedPropName_reply_to_message_id, obj.ReplyToMessageId);
            writer.WriteNumber(encodedPropName_date, obj.Date);
            if (obj.InputMessageText != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_text);
                writer.WriteTLObjectValue(obj.InputMessageText);
            }
        }
    }

    partial class ChatTypePrivateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 84, 121, 112, 101, 80, 114, 105, 118, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatTypePrivate)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class ChatTypeBasicGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 84, 121, 112, 101, 66, 97, 115, 105, 99, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_basic_group_id => new byte[] { 98, 97, 115, 105, 99, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_basic_group_id = JsonEncodedText.Encode(propName_basic_group_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatTypeBasicGroup)tlobj;
            writer.WriteNumber(encodedPropName_basic_group_id, obj.BasicGroupId);
        }
    }

    partial class ChatTypeSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 84, 121, 112, 101, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        private static ReadOnlySpan<byte> propName_is_channel => new byte[] { 105, 115, 95, 99, 104, 97, 110, 110, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_is_channel = JsonEncodedText.Encode(propName_is_channel);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatTypeSupergroup)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
            writer.WriteBoolean(encodedPropName_is_channel, obj.IsChannel);
        }
    }

    partial class ChatTypeSecretConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 84, 121, 112, 101, 83, 101, 99, 114, 101, 116 }));
        private static ReadOnlySpan<byte> propName_secret_chat_id => new byte[] { 115, 101, 99, 114, 101, 116, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_secret_chat_id = JsonEncodedText.Encode(propName_secret_chat_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatTypeSecret)tlobj;
            writer.WriteNumber(encodedPropName_secret_chat_id, obj.SecretChatId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class ChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 70, 105, 108, 116, 101, 114 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_icon_name => new byte[] { 105, 99, 111, 110, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_icon_name = JsonEncodedText.Encode(propName_icon_name);
        private static ReadOnlySpan<byte> propName_pinned_chat_ids => new byte[] { 112, 105, 110, 110, 101, 100, 95, 99, 104, 97, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_pinned_chat_ids = JsonEncodedText.Encode(propName_pinned_chat_ids);
        private static ReadOnlySpan<byte> propName_included_chat_ids => new byte[] { 105, 110, 99, 108, 117, 100, 101, 100, 95, 99, 104, 97, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_included_chat_ids = JsonEncodedText.Encode(propName_included_chat_ids);
        private static ReadOnlySpan<byte> propName_excluded_chat_ids => new byte[] { 101, 120, 99, 108, 117, 100, 101, 100, 95, 99, 104, 97, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_excluded_chat_ids = JsonEncodedText.Encode(propName_excluded_chat_ids);
        private static ReadOnlySpan<byte> propName_exclude_muted => new byte[] { 101, 120, 99, 108, 117, 100, 101, 95, 109, 117, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_exclude_muted = JsonEncodedText.Encode(propName_exclude_muted);
        private static ReadOnlySpan<byte> propName_exclude_read => new byte[] { 101, 120, 99, 108, 117, 100, 101, 95, 114, 101, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_exclude_read = JsonEncodedText.Encode(propName_exclude_read);
        private static ReadOnlySpan<byte> propName_exclude_archived => new byte[] { 101, 120, 99, 108, 117, 100, 101, 95, 97, 114, 99, 104, 105, 118, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_exclude_archived = JsonEncodedText.Encode(propName_exclude_archived);
        private static ReadOnlySpan<byte> propName_include_contacts => new byte[] { 105, 110, 99, 108, 117, 100, 101, 95, 99, 111, 110, 116, 97, 99, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_include_contacts = JsonEncodedText.Encode(propName_include_contacts);
        private static ReadOnlySpan<byte> propName_include_non_contacts => new byte[] { 105, 110, 99, 108, 117, 100, 101, 95, 110, 111, 110, 95, 99, 111, 110, 116, 97, 99, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_include_non_contacts = JsonEncodedText.Encode(propName_include_non_contacts);
        private static ReadOnlySpan<byte> propName_include_bots => new byte[] { 105, 110, 99, 108, 117, 100, 101, 95, 98, 111, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_include_bots = JsonEncodedText.Encode(propName_include_bots);
        private static ReadOnlySpan<byte> propName_include_groups => new byte[] { 105, 110, 99, 108, 117, 100, 101, 95, 103, 114, 111, 117, 112, 115 };
        private static readonly JsonEncodedText encodedPropName_include_groups = JsonEncodedText.Encode(propName_include_groups);
        private static ReadOnlySpan<byte> propName_include_channels => new byte[] { 105, 110, 99, 108, 117, 100, 101, 95, 99, 104, 97, 110, 110, 101, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_include_channels = JsonEncodedText.Encode(propName_include_channels);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatFilter)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_icon_name, obj.IconName);
            if (obj.PinnedChatIds != null)
            {
                writer.WritePropertyName(encodedPropName_pinned_chat_ids);
                writer.WriteArray(obj.PinnedChatIds);
            }
            if (obj.IncludedChatIds != null)
            {
                writer.WritePropertyName(encodedPropName_included_chat_ids);
                writer.WriteArray(obj.IncludedChatIds);
            }
            if (obj.ExcludedChatIds != null)
            {
                writer.WritePropertyName(encodedPropName_excluded_chat_ids);
                writer.WriteArray(obj.ExcludedChatIds);
            }
            writer.WriteBoolean(encodedPropName_exclude_muted, obj.ExcludeMuted);
            writer.WriteBoolean(encodedPropName_exclude_read, obj.ExcludeRead);
            writer.WriteBoolean(encodedPropName_exclude_archived, obj.ExcludeArchived);
            writer.WriteBoolean(encodedPropName_include_contacts, obj.IncludeContacts);
            writer.WriteBoolean(encodedPropName_include_non_contacts, obj.IncludeNonContacts);
            writer.WriteBoolean(encodedPropName_include_bots, obj.IncludeBots);
            writer.WriteBoolean(encodedPropName_include_groups, obj.IncludeGroups);
            writer.WriteBoolean(encodedPropName_include_channels, obj.IncludeChannels);
        }
    }

    partial class ChatFilterInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 70, 105, 108, 116, 101, 114, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_icon_name => new byte[] { 105, 99, 111, 110, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_icon_name = JsonEncodedText.Encode(propName_icon_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatFilterInfo)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_icon_name, obj.IconName);
        }
    }

    partial class RecommendedChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 99, 111, 109, 109, 101, 110, 100, 101, 100, 67, 104, 97, 116, 70, 105, 108, 116, 101, 114 }));
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RecommendedChatFilter)tlobj;
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteString(encodedPropName_description, obj.Description);
        }
    }

    partial class RecommendedChatFiltersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 99, 111, 109, 109, 101, 110, 100, 101, 100, 67, 104, 97, 116, 70, 105, 108, 116, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_filters => new byte[] { 99, 104, 97, 116, 95, 102, 105, 108, 116, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_chat_filters = JsonEncodedText.Encode(propName_chat_filters);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RecommendedChatFilters)tlobj;
            if (obj.ChatFilters != null)
            {
                writer.WritePropertyName(encodedPropName_chat_filters);
                writer.WriteArray(obj.ChatFilters);
            }
        }
    }

    partial class ChatListMainConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 76, 105, 115, 116, 77, 97, 105, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatListArchiveConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 76, 105, 115, 116, 65, 114, 99, 104, 105, 118, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatListFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 76, 105, 115, 116, 70, 105, 108, 116, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_filter_id => new byte[] { 99, 104, 97, 116, 95, 102, 105, 108, 116, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_filter_id = JsonEncodedText.Encode(propName_chat_filter_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatListFilter)tlobj;
            writer.WriteNumber(encodedPropName_chat_filter_id, obj.ChatFilterId);
        }
    }

    partial class ChatListsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 76, 105, 115, 116, 115 }));
        private static ReadOnlySpan<byte> propName_chat_lists => new byte[] { 99, 104, 97, 116, 95, 108, 105, 115, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_chat_lists = JsonEncodedText.Encode(propName_chat_lists);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatLists)tlobj;
            if (obj.ChatLists_ != null)
            {
                writer.WritePropertyName(encodedPropName_chat_lists);
                writer.WriteArray(obj.ChatLists_);
            }
        }
    }

    partial class ChatSourceMtprotoProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 83, 111, 117, 114, 99, 101, 77, 116, 112, 114, 111, 116, 111, 80, 114, 111, 120, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatSourcePublicServiceAnnouncementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 83, 111, 117, 114, 99, 101, 80, 117, 98, 108, 105, 99, 83, 101, 114, 118, 105, 99, 101, 65, 110, 110, 111, 117, 110, 99, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatSourcePublicServiceAnnouncement)tlobj;
            writer.WriteString(encodedPropName_type, obj.Type);
            writer.WriteString(encodedPropName_text, obj.Text);
        }
    }

    partial class ChatPositionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 80, 111, 115, 105, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_list => new byte[] { 108, 105, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_list = JsonEncodedText.Encode(propName_list);
        private static ReadOnlySpan<byte> propName_order => new byte[] { 111, 114, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_order = JsonEncodedText.Encode(propName_order);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        private static ReadOnlySpan<byte> propName_source => new byte[] { 115, 111, 117, 114, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_source = JsonEncodedText.Encode(propName_source);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatPosition)tlobj;
            if (obj.List != null)
            {
                writer.WritePropertyName(encodedPropName_list);
                writer.WriteTLObjectValue(obj.List);
            }
            writer.WritePropertyName(encodedPropName_order);
            writer.WriteInt64String(obj.Order);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
            if (obj.Source != null)
            {
                writer.WritePropertyName(encodedPropName_source);
                writer.WriteTLObjectValue(obj.Source);
            }
        }
    }

    partial class VideoChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 105, 100, 101, 111, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_has_participants => new byte[] { 104, 97, 115, 95, 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_has_participants = JsonEncodedText.Encode(propName_has_participants);
        private static ReadOnlySpan<byte> propName_default_participant_id => new byte[] { 100, 101, 102, 97, 117, 108, 116, 95, 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_default_participant_id = JsonEncodedText.Encode(propName_default_participant_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (VideoChat)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteBoolean(encodedPropName_has_participants, obj.HasParticipants);
            if (obj.DefaultParticipantId != null)
            {
                writer.WritePropertyName(encodedPropName_default_participant_id);
                writer.WriteTLObjectValue(obj.DefaultParticipantId);
            }
        }
    }

    partial class ChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_permissions => new byte[] { 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_permissions = JsonEncodedText.Encode(propName_permissions);
        private static ReadOnlySpan<byte> propName_last_message => new byte[] { 108, 97, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_last_message = JsonEncodedText.Encode(propName_last_message);
        private static ReadOnlySpan<byte> propName_positions => new byte[] { 112, 111, 115, 105, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_positions = JsonEncodedText.Encode(propName_positions);
        private static ReadOnlySpan<byte> propName_is_marked_as_unread => new byte[] { 105, 115, 95, 109, 97, 114, 107, 101, 100, 95, 97, 115, 95, 117, 110, 114, 101, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_is_marked_as_unread = JsonEncodedText.Encode(propName_is_marked_as_unread);
        private static ReadOnlySpan<byte> propName_is_blocked => new byte[] { 105, 115, 95, 98, 108, 111, 99, 107, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_blocked = JsonEncodedText.Encode(propName_is_blocked);
        private static ReadOnlySpan<byte> propName_has_scheduled_messages => new byte[] { 104, 97, 115, 95, 115, 99, 104, 101, 100, 117, 108, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_has_scheduled_messages = JsonEncodedText.Encode(propName_has_scheduled_messages);
        private static ReadOnlySpan<byte> propName_can_be_deleted_only_for_self => new byte[] { 99, 97, 110, 95, 98, 101, 95, 100, 101, 108, 101, 116, 101, 100, 95, 111, 110, 108, 121, 95, 102, 111, 114, 95, 115, 101, 108, 102 };
        private static readonly JsonEncodedText encodedPropName_can_be_deleted_only_for_self = JsonEncodedText.Encode(propName_can_be_deleted_only_for_self);
        private static ReadOnlySpan<byte> propName_can_be_deleted_for_all_users => new byte[] { 99, 97, 110, 95, 98, 101, 95, 100, 101, 108, 101, 116, 101, 100, 95, 102, 111, 114, 95, 97, 108, 108, 95, 117, 115, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_be_deleted_for_all_users = JsonEncodedText.Encode(propName_can_be_deleted_for_all_users);
        private static ReadOnlySpan<byte> propName_can_be_reported => new byte[] { 99, 97, 110, 95, 98, 101, 95, 114, 101, 112, 111, 114, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_can_be_reported = JsonEncodedText.Encode(propName_can_be_reported);
        private static ReadOnlySpan<byte> propName_default_disable_notification => new byte[] { 100, 101, 102, 97, 117, 108, 116, 95, 100, 105, 115, 97, 98, 108, 101, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_default_disable_notification = JsonEncodedText.Encode(propName_default_disable_notification);
        private static ReadOnlySpan<byte> propName_unread_count => new byte[] { 117, 110, 114, 101, 97, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_unread_count = JsonEncodedText.Encode(propName_unread_count);
        private static ReadOnlySpan<byte> propName_last_read_inbox_message_id => new byte[] { 108, 97, 115, 116, 95, 114, 101, 97, 100, 95, 105, 110, 98, 111, 120, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_last_read_inbox_message_id = JsonEncodedText.Encode(propName_last_read_inbox_message_id);
        private static ReadOnlySpan<byte> propName_last_read_outbox_message_id => new byte[] { 108, 97, 115, 116, 95, 114, 101, 97, 100, 95, 111, 117, 116, 98, 111, 120, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_last_read_outbox_message_id = JsonEncodedText.Encode(propName_last_read_outbox_message_id);
        private static ReadOnlySpan<byte> propName_unread_mention_count => new byte[] { 117, 110, 114, 101, 97, 100, 95, 109, 101, 110, 116, 105, 111, 110, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_unread_mention_count = JsonEncodedText.Encode(propName_unread_mention_count);
        private static ReadOnlySpan<byte> propName_notification_settings => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_notification_settings = JsonEncodedText.Encode(propName_notification_settings);
        private static ReadOnlySpan<byte> propName_message_ttl_setting => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 116, 108, 95, 115, 101, 116, 116, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_message_ttl_setting = JsonEncodedText.Encode(propName_message_ttl_setting);
        private static ReadOnlySpan<byte> propName_theme_name => new byte[] { 116, 104, 101, 109, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_theme_name = JsonEncodedText.Encode(propName_theme_name);
        private static ReadOnlySpan<byte> propName_action_bar => new byte[] { 97, 99, 116, 105, 111, 110, 95, 98, 97, 114 };
        private static readonly JsonEncodedText encodedPropName_action_bar = JsonEncodedText.Encode(propName_action_bar);
        private static ReadOnlySpan<byte> propName_video_chat => new byte[] { 118, 105, 100, 101, 111, 95, 99, 104, 97, 116 };
        private static readonly JsonEncodedText encodedPropName_video_chat = JsonEncodedText.Encode(propName_video_chat);
        private static ReadOnlySpan<byte> propName_pending_join_requests => new byte[] { 112, 101, 110, 100, 105, 110, 103, 95, 106, 111, 105, 110, 95, 114, 101, 113, 117, 101, 115, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_pending_join_requests = JsonEncodedText.Encode(propName_pending_join_requests);
        private static ReadOnlySpan<byte> propName_reply_markup_message_id => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_reply_markup_message_id = JsonEncodedText.Encode(propName_reply_markup_message_id);
        private static ReadOnlySpan<byte> propName_draft_message => new byte[] { 100, 114, 97, 102, 116, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_draft_message = JsonEncodedText.Encode(propName_draft_message);
        private static ReadOnlySpan<byte> propName_client_data => new byte[] { 99, 108, 105, 101, 110, 116, 95, 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_client_data = JsonEncodedText.Encode(propName_client_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Chat)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            if (obj.Permissions != null)
            {
                writer.WritePropertyName(encodedPropName_permissions);
                writer.WriteTLObjectValue(obj.Permissions);
            }
            if (obj.LastMessage != null)
            {
                writer.WritePropertyName(encodedPropName_last_message);
                writer.WriteTLObjectValue(obj.LastMessage);
            }
            if (obj.Positions != null)
            {
                writer.WritePropertyName(encodedPropName_positions);
                writer.WriteArray(obj.Positions);
            }
            writer.WriteBoolean(encodedPropName_is_marked_as_unread, obj.IsMarkedAsUnread);
            writer.WriteBoolean(encodedPropName_is_blocked, obj.IsBlocked);
            writer.WriteBoolean(encodedPropName_has_scheduled_messages, obj.HasScheduledMessages);
            writer.WriteBoolean(encodedPropName_can_be_deleted_only_for_self, obj.CanBeDeletedOnlyForSelf);
            writer.WriteBoolean(encodedPropName_can_be_deleted_for_all_users, obj.CanBeDeletedForAllUsers);
            writer.WriteBoolean(encodedPropName_can_be_reported, obj.CanBeReported);
            writer.WriteBoolean(encodedPropName_default_disable_notification, obj.DefaultDisableNotification);
            writer.WriteNumber(encodedPropName_unread_count, obj.UnreadCount);
            writer.WriteNumber(encodedPropName_last_read_inbox_message_id, obj.LastReadInboxMessageId);
            writer.WriteNumber(encodedPropName_last_read_outbox_message_id, obj.LastReadOutboxMessageId);
            writer.WriteNumber(encodedPropName_unread_mention_count, obj.UnreadMentionCount);
            if (obj.NotificationSettings != null)
            {
                writer.WritePropertyName(encodedPropName_notification_settings);
                writer.WriteTLObjectValue(obj.NotificationSettings);
            }
            writer.WriteNumber(encodedPropName_message_ttl_setting, obj.MessageTtlSetting);
            writer.WriteString(encodedPropName_theme_name, obj.ThemeName);
            if (obj.ActionBar != null)
            {
                writer.WritePropertyName(encodedPropName_action_bar);
                writer.WriteTLObjectValue(obj.ActionBar);
            }
            if (obj.VideoChat != null)
            {
                writer.WritePropertyName(encodedPropName_video_chat);
                writer.WriteTLObjectValue(obj.VideoChat);
            }
            if (obj.PendingJoinRequests != null)
            {
                writer.WritePropertyName(encodedPropName_pending_join_requests);
                writer.WriteTLObjectValue(obj.PendingJoinRequests);
            }
            writer.WriteNumber(encodedPropName_reply_markup_message_id, obj.ReplyMarkupMessageId);
            if (obj.DraftMessage != null)
            {
                writer.WritePropertyName(encodedPropName_draft_message);
                writer.WriteTLObjectValue(obj.DraftMessage);
            }
            writer.WriteString(encodedPropName_client_data, obj.ClientData);
        }
    }

    partial class ChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_chat_ids => new byte[] { 99, 104, 97, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_chat_ids = JsonEncodedText.Encode(propName_chat_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Chats)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.ChatIds != null)
            {
                writer.WritePropertyName(encodedPropName_chat_ids);
                writer.WriteArray(obj.ChatIds);
            }
        }
    }

    partial class ChatNearbyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 78, 101, 97, 114, 98, 121 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_distance => new byte[] { 100, 105, 115, 116, 97, 110, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_distance = JsonEncodedText.Encode(propName_distance);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatNearby)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_distance, obj.Distance);
        }
    }

    partial class ChatsNearbyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 115, 78, 101, 97, 114, 98, 121 }));
        private static ReadOnlySpan<byte> propName_users_nearby => new byte[] { 117, 115, 101, 114, 115, 95, 110, 101, 97, 114, 98, 121 };
        private static readonly JsonEncodedText encodedPropName_users_nearby = JsonEncodedText.Encode(propName_users_nearby);
        private static ReadOnlySpan<byte> propName_supergroups_nearby => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 115, 95, 110, 101, 97, 114, 98, 121 };
        private static readonly JsonEncodedText encodedPropName_supergroups_nearby = JsonEncodedText.Encode(propName_supergroups_nearby);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatsNearby)tlobj;
            if (obj.UsersNearby != null)
            {
                writer.WritePropertyName(encodedPropName_users_nearby);
                writer.WriteArray(obj.UsersNearby);
            }
            if (obj.SupergroupsNearby != null)
            {
                writer.WritePropertyName(encodedPropName_supergroups_nearby);
                writer.WriteArray(obj.SupergroupsNearby);
            }
        }
    }

    partial class PublicChatTypeHasUsernameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 98, 108, 105, 99, 67, 104, 97, 116, 84, 121, 112, 101, 72, 97, 115, 85, 115, 101, 114, 110, 97, 109, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PublicChatTypeIsLocationBasedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 98, 108, 105, 99, 67, 104, 97, 116, 84, 121, 112, 101, 73, 115, 76, 111, 99, 97, 116, 105, 111, 110, 66, 97, 115, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionBarReportSpamConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 66, 97, 114, 82, 101, 112, 111, 114, 116, 83, 112, 97, 109 }));
        private static ReadOnlySpan<byte> propName_can_unarchive => new byte[] { 99, 97, 110, 95, 117, 110, 97, 114, 99, 104, 105, 118, 101 };
        private static readonly JsonEncodedText encodedPropName_can_unarchive = JsonEncodedText.Encode(propName_can_unarchive);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionBarReportSpam)tlobj;
            writer.WriteBoolean(encodedPropName_can_unarchive, obj.CanUnarchive);
        }
    }

    partial class ChatActionBarReportUnrelatedLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 66, 97, 114, 82, 101, 112, 111, 114, 116, 85, 110, 114, 101, 108, 97, 116, 101, 100, 76, 111, 99, 97, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionBarInviteMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 66, 97, 114, 73, 110, 118, 105, 116, 101, 77, 101, 109, 98, 101, 114, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionBarReportAddBlockConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 66, 97, 114, 82, 101, 112, 111, 114, 116, 65, 100, 100, 66, 108, 111, 99, 107 }));
        private static ReadOnlySpan<byte> propName_can_unarchive => new byte[] { 99, 97, 110, 95, 117, 110, 97, 114, 99, 104, 105, 118, 101 };
        private static readonly JsonEncodedText encodedPropName_can_unarchive = JsonEncodedText.Encode(propName_can_unarchive);
        private static ReadOnlySpan<byte> propName_distance => new byte[] { 100, 105, 115, 116, 97, 110, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_distance = JsonEncodedText.Encode(propName_distance);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionBarReportAddBlock)tlobj;
            writer.WriteBoolean(encodedPropName_can_unarchive, obj.CanUnarchive);
            writer.WriteNumber(encodedPropName_distance, obj.Distance);
        }
    }

    partial class ChatActionBarAddContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 66, 97, 114, 65, 100, 100, 67, 111, 110, 116, 97, 99, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionBarSharePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 66, 97, 114, 83, 104, 97, 114, 101, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class KeyboardButtonTypeTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 107, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 84, 101, 120, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class KeyboardButtonTypeRequestPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 107, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 82, 101, 113, 117, 101, 115, 116, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class KeyboardButtonTypeRequestLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 107, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 82, 101, 113, 117, 101, 115, 116, 76, 111, 99, 97, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class KeyboardButtonTypeRequestPollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 107, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 82, 101, 113, 117, 101, 115, 116, 80, 111, 108, 108 }));
        private static ReadOnlySpan<byte> propName_force_regular => new byte[] { 102, 111, 114, 99, 101, 95, 114, 101, 103, 117, 108, 97, 114 };
        private static readonly JsonEncodedText encodedPropName_force_regular = JsonEncodedText.Encode(propName_force_regular);
        private static ReadOnlySpan<byte> propName_force_quiz => new byte[] { 102, 111, 114, 99, 101, 95, 113, 117, 105, 122 };
        private static readonly JsonEncodedText encodedPropName_force_quiz = JsonEncodedText.Encode(propName_force_quiz);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (KeyboardButtonTypeRequestPoll)tlobj;
            writer.WriteBoolean(encodedPropName_force_regular, obj.ForceRegular);
            writer.WriteBoolean(encodedPropName_force_quiz, obj.ForceQuiz);
        }
    }

    partial class KeyboardButtonConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 107, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (KeyboardButton)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class InlineKeyboardButtonTypeUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 75, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 85, 114, 108 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButtonTypeUrl)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
        }
    }

    partial class InlineKeyboardButtonTypeLoginUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 75, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 76, 111, 103, 105, 110, 85, 114, 108 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_forward_text => new byte[] { 102, 111, 114, 119, 97, 114, 100, 95, 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_forward_text = JsonEncodedText.Encode(propName_forward_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButtonTypeLoginUrl)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_forward_text, obj.ForwardText);
        }
    }

    partial class InlineKeyboardButtonTypeCallbackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 75, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 67, 97, 108, 108, 98, 97, 99, 107 }));
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButtonTypeCallback)tlobj;
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
        }
    }

    partial class InlineKeyboardButtonTypeCallbackWithPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 75, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 67, 97, 108, 108, 98, 97, 99, 107, 87, 105, 116, 104, 80, 97, 115, 115, 119, 111, 114, 100 }));
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButtonTypeCallbackWithPassword)tlobj;
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
        }
    }

    partial class InlineKeyboardButtonTypeCallbackGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 75, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 67, 97, 108, 108, 98, 97, 99, 107, 71, 97, 109, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InlineKeyboardButtonTypeSwitchInlineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 75, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 83, 119, 105, 116, 99, 104, 73, 110, 108, 105, 110, 101 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_in_current_chat => new byte[] { 105, 110, 95, 99, 117, 114, 114, 101, 110, 116, 95, 99, 104, 97, 116 };
        private static readonly JsonEncodedText encodedPropName_in_current_chat = JsonEncodedText.Encode(propName_in_current_chat);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButtonTypeSwitchInline)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteBoolean(encodedPropName_in_current_chat, obj.InCurrentChat);
        }
    }

    partial class InlineKeyboardButtonTypeBuyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 75, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110, 84, 121, 112, 101, 66, 117, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InlineKeyboardButtonConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 75, 101, 121, 98, 111, 97, 114, 100, 66, 117, 116, 116, 111, 110 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButton)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class ReplyMarkupRemoveKeyboardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 112, 108, 121, 77, 97, 114, 107, 117, 112, 82, 101, 109, 111, 118, 101, 75, 101, 121, 98, 111, 97, 114, 100 }));
        private static ReadOnlySpan<byte> propName_is_personal => new byte[] { 105, 115, 95, 112, 101, 114, 115, 111, 110, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_is_personal = JsonEncodedText.Encode(propName_is_personal);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReplyMarkupRemoveKeyboard)tlobj;
            writer.WriteBoolean(encodedPropName_is_personal, obj.IsPersonal);
        }
    }

    partial class ReplyMarkupForceReplyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 112, 108, 121, 77, 97, 114, 107, 117, 112, 70, 111, 114, 99, 101, 82, 101, 112, 108, 121 }));
        private static ReadOnlySpan<byte> propName_is_personal => new byte[] { 105, 115, 95, 112, 101, 114, 115, 111, 110, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_is_personal = JsonEncodedText.Encode(propName_is_personal);
        private static ReadOnlySpan<byte> propName_input_field_placeholder => new byte[] { 105, 110, 112, 117, 116, 95, 102, 105, 101, 108, 100, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_input_field_placeholder = JsonEncodedText.Encode(propName_input_field_placeholder);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReplyMarkupForceReply)tlobj;
            writer.WriteBoolean(encodedPropName_is_personal, obj.IsPersonal);
            writer.WriteString(encodedPropName_input_field_placeholder, obj.InputFieldPlaceholder);
        }
    }

    partial class ReplyMarkupShowKeyboardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 112, 108, 121, 77, 97, 114, 107, 117, 112, 83, 104, 111, 119, 75, 101, 121, 98, 111, 97, 114, 100 }));
        private static ReadOnlySpan<byte> propName_rows => new byte[] { 114, 111, 119, 115 };
        private static readonly JsonEncodedText encodedPropName_rows = JsonEncodedText.Encode(propName_rows);
        private static ReadOnlySpan<byte> propName_resize_keyboard => new byte[] { 114, 101, 115, 105, 122, 101, 95, 107, 101, 121, 98, 111, 97, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_resize_keyboard = JsonEncodedText.Encode(propName_resize_keyboard);
        private static ReadOnlySpan<byte> propName_one_time => new byte[] { 111, 110, 101, 95, 116, 105, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_one_time = JsonEncodedText.Encode(propName_one_time);
        private static ReadOnlySpan<byte> propName_is_personal => new byte[] { 105, 115, 95, 112, 101, 114, 115, 111, 110, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_is_personal = JsonEncodedText.Encode(propName_is_personal);
        private static ReadOnlySpan<byte> propName_input_field_placeholder => new byte[] { 105, 110, 112, 117, 116, 95, 102, 105, 101, 108, 100, 95, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_input_field_placeholder = JsonEncodedText.Encode(propName_input_field_placeholder);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReplyMarkupShowKeyboard)tlobj;
            if (obj.Rows != null)
            {
                writer.WritePropertyName(encodedPropName_rows);
                writer.WriteArray(obj.Rows);
            }
            writer.WriteBoolean(encodedPropName_resize_keyboard, obj.ResizeKeyboard);
            writer.WriteBoolean(encodedPropName_one_time, obj.OneTime);
            writer.WriteBoolean(encodedPropName_is_personal, obj.IsPersonal);
            writer.WriteString(encodedPropName_input_field_placeholder, obj.InputFieldPlaceholder);
        }
    }

    partial class ReplyMarkupInlineKeyboardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 112, 108, 121, 77, 97, 114, 107, 117, 112, 73, 110, 108, 105, 110, 101, 75, 101, 121, 98, 111, 97, 114, 100 }));
        private static ReadOnlySpan<byte> propName_rows => new byte[] { 114, 111, 119, 115 };
        private static readonly JsonEncodedText encodedPropName_rows = JsonEncodedText.Encode(propName_rows);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReplyMarkupInlineKeyboard)tlobj;
            if (obj.Rows != null)
            {
                writer.WritePropertyName(encodedPropName_rows);
                writer.WriteArray(obj.Rows);
            }
        }
    }

    partial class LoginUrlInfoOpenConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 103, 105, 110, 85, 114, 108, 73, 110, 102, 111, 79, 112, 101, 110 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_skip_confirm => new byte[] { 115, 107, 105, 112, 95, 99, 111, 110, 102, 105, 114, 109 };
        private static readonly JsonEncodedText encodedPropName_skip_confirm = JsonEncodedText.Encode(propName_skip_confirm);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LoginUrlInfoOpen)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteBoolean(encodedPropName_skip_confirm, obj.SkipConfirm);
        }
    }

    partial class LoginUrlInfoRequestConfirmationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 103, 105, 110, 85, 114, 108, 73, 110, 102, 111, 82, 101, 113, 117, 101, 115, 116, 67, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_domain => new byte[] { 100, 111, 109, 97, 105, 110 };
        private static readonly JsonEncodedText encodedPropName_domain = JsonEncodedText.Encode(propName_domain);
        private static ReadOnlySpan<byte> propName_bot_user_id => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_bot_user_id = JsonEncodedText.Encode(propName_bot_user_id);
        private static ReadOnlySpan<byte> propName_request_write_access => new byte[] { 114, 101, 113, 117, 101, 115, 116, 95, 119, 114, 105, 116, 101, 95, 97, 99, 99, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_request_write_access = JsonEncodedText.Encode(propName_request_write_access);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LoginUrlInfoRequestConfirmation)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteString(encodedPropName_domain, obj.Domain);
            writer.WriteNumber(encodedPropName_bot_user_id, obj.BotUserId);
            writer.WriteBoolean(encodedPropName_request_write_access, obj.RequestWriteAccess);
        }
    }

    partial class MessageThreadInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 84, 104, 114, 101, 97, 100, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        private static ReadOnlySpan<byte> propName_reply_info => new byte[] { 114, 101, 112, 108, 121, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_reply_info = JsonEncodedText.Encode(propName_reply_info);
        private static ReadOnlySpan<byte> propName_unread_message_count => new byte[] { 117, 110, 114, 101, 97, 100, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_unread_message_count = JsonEncodedText.Encode(propName_unread_message_count);
        private static ReadOnlySpan<byte> propName_messages => new byte[] { 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_messages = JsonEncodedText.Encode(propName_messages);
        private static ReadOnlySpan<byte> propName_draft_message => new byte[] { 100, 114, 97, 102, 116, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_draft_message = JsonEncodedText.Encode(propName_draft_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageThreadInfo)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
            if (obj.ReplyInfo != null)
            {
                writer.WritePropertyName(encodedPropName_reply_info);
                writer.WriteTLObjectValue(obj.ReplyInfo);
            }
            writer.WriteNumber(encodedPropName_unread_message_count, obj.UnreadMessageCount);
            if (obj.Messages != null)
            {
                writer.WritePropertyName(encodedPropName_messages);
                writer.WriteArray(obj.Messages);
            }
            if (obj.DraftMessage != null)
            {
                writer.WritePropertyName(encodedPropName_draft_message);
                writer.WriteTLObjectValue(obj.DraftMessage);
            }
        }
    }

    partial class RichTextPlainConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 80, 108, 97, 105, 110 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextPlain)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
        }
    }

    partial class RichTextBoldConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 66, 111, 108, 100 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextBold)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextItalicConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 73, 116, 97, 108, 105, 99 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextItalic)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextUnderlineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 85, 110, 100, 101, 114, 108, 105, 110, 101 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextUnderline)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextStrikethroughConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 83, 116, 114, 105, 107, 101, 116, 104, 114, 111, 117, 103, 104 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextStrikethrough)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextFixedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 70, 105, 120, 101, 100 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextFixed)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 85, 114, 108 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_is_cached => new byte[] { 105, 115, 95, 99, 97, 99, 104, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_cached = JsonEncodedText.Encode(propName_is_cached);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextUrl)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteBoolean(encodedPropName_is_cached, obj.IsCached);
        }
    }

    partial class RichTextEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_email_address => new byte[] { 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_email_address = JsonEncodedText.Encode(propName_email_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextEmailAddress)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(encodedPropName_email_address, obj.EmailAddress);
        }
    }

    partial class RichTextSubscriptConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 83, 117, 98, 115, 99, 114, 105, 112, 116 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextSubscript)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextSuperscriptConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 83, 117, 112, 101, 114, 115, 99, 114, 105, 112, 116 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextSuperscript)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextMarkedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 77, 97, 114, 107, 101, 100 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextMarked)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextPhoneNumber)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
        }
    }

    partial class RichTextIconConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 73, 99, 111, 110 }));
        private static ReadOnlySpan<byte> propName_document => new byte[] { 100, 111, 99, 117, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_document = JsonEncodedText.Encode(propName_document);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextIcon)tlobj;
            if (obj.Document != null)
            {
                writer.WritePropertyName(encodedPropName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
        }
    }

    partial class RichTextReferenceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 82, 101, 102, 101, 114, 101, 110, 99, 101 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_anchor_name => new byte[] { 97, 110, 99, 104, 111, 114, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_anchor_name = JsonEncodedText.Encode(propName_anchor_name);
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextReference)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(encodedPropName_anchor_name, obj.AnchorName);
            writer.WriteString(encodedPropName_url, obj.Url);
        }
    }

    partial class RichTextAnchorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 65, 110, 99, 104, 111, 114 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextAnchor)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
        }
    }

    partial class RichTextAnchorLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 65, 110, 99, 104, 111, 114, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_anchor_name => new byte[] { 97, 110, 99, 104, 111, 114, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_anchor_name = JsonEncodedText.Encode(propName_anchor_name);
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextAnchorLink)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(encodedPropName_anchor_name, obj.AnchorName);
            writer.WriteString(encodedPropName_url, obj.Url);
        }
    }

    partial class RichTextsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 105, 99, 104, 84, 101, 120, 116, 115 }));
        private static ReadOnlySpan<byte> propName_texts => new byte[] { 116, 101, 120, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_texts = JsonEncodedText.Encode(propName_texts);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTexts)tlobj;
            if (obj.Texts != null)
            {
                writer.WritePropertyName(encodedPropName_texts);
                writer.WriteArray(obj.Texts);
            }
        }
    }

    partial class PageBlockCaptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 67, 97, 112, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_credit => new byte[] { 99, 114, 101, 100, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_credit = JsonEncodedText.Encode(propName_credit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockCaption)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            if (obj.Credit != null)
            {
                writer.WritePropertyName(encodedPropName_credit);
                writer.WriteTLObjectValue(obj.Credit);
            }
        }
    }

    partial class PageBlockListItemConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 76, 105, 115, 116, 73, 116, 101, 109 }));
        private static ReadOnlySpan<byte> propName_label => new byte[] { 108, 97, 98, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_label = JsonEncodedText.Encode(propName_label);
        private static ReadOnlySpan<byte> propName_page_blocks => new byte[] { 112, 97, 103, 101, 95, 98, 108, 111, 99, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_page_blocks = JsonEncodedText.Encode(propName_page_blocks);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockListItem)tlobj;
            writer.WriteString(encodedPropName_label, obj.Label);
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(encodedPropName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
        }
    }

    partial class PageBlockHorizontalAlignmentLeftConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 72, 111, 114, 105, 122, 111, 110, 116, 97, 108, 65, 108, 105, 103, 110, 109, 101, 110, 116, 76, 101, 102, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockHorizontalAlignmentCenterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 72, 111, 114, 105, 122, 111, 110, 116, 97, 108, 65, 108, 105, 103, 110, 109, 101, 110, 116, 67, 101, 110, 116, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockHorizontalAlignmentRightConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 72, 111, 114, 105, 122, 111, 110, 116, 97, 108, 65, 108, 105, 103, 110, 109, 101, 110, 116, 82, 105, 103, 104, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockVerticalAlignmentTopConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 86, 101, 114, 116, 105, 99, 97, 108, 65, 108, 105, 103, 110, 109, 101, 110, 116, 84, 111, 112 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockVerticalAlignmentMiddleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 86, 101, 114, 116, 105, 99, 97, 108, 65, 108, 105, 103, 110, 109, 101, 110, 116, 77, 105, 100, 100, 108, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockVerticalAlignmentBottomConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 86, 101, 114, 116, 105, 99, 97, 108, 65, 108, 105, 103, 110, 109, 101, 110, 116, 66, 111, 116, 116, 111, 109 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockTableCellConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 84, 97, 98, 108, 101, 67, 101, 108, 108 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_is_header => new byte[] { 105, 115, 95, 104, 101, 97, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_is_header = JsonEncodedText.Encode(propName_is_header);
        private static ReadOnlySpan<byte> propName_colspan => new byte[] { 99, 111, 108, 115, 112, 97, 110 };
        private static readonly JsonEncodedText encodedPropName_colspan = JsonEncodedText.Encode(propName_colspan);
        private static ReadOnlySpan<byte> propName_rowspan => new byte[] { 114, 111, 119, 115, 112, 97, 110 };
        private static readonly JsonEncodedText encodedPropName_rowspan = JsonEncodedText.Encode(propName_rowspan);
        private static ReadOnlySpan<byte> propName_align => new byte[] { 97, 108, 105, 103, 110 };
        private static readonly JsonEncodedText encodedPropName_align = JsonEncodedText.Encode(propName_align);
        private static ReadOnlySpan<byte> propName_valign => new byte[] { 118, 97, 108, 105, 103, 110 };
        private static readonly JsonEncodedText encodedPropName_valign = JsonEncodedText.Encode(propName_valign);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockTableCell)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteBoolean(encodedPropName_is_header, obj.IsHeader);
            writer.WriteNumber(encodedPropName_colspan, obj.Colspan);
            writer.WriteNumber(encodedPropName_rowspan, obj.Rowspan);
            if (obj.Align != null)
            {
                writer.WritePropertyName(encodedPropName_align);
                writer.WriteTLObjectValue(obj.Align);
            }
            if (obj.Valign != null)
            {
                writer.WritePropertyName(encodedPropName_valign);
                writer.WriteTLObjectValue(obj.Valign);
            }
        }
    }

    partial class PageBlockRelatedArticleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 82, 101, 108, 97, 116, 101, 100, 65, 114, 116, 105, 99, 108, 101 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_author => new byte[] { 97, 117, 116, 104, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_author = JsonEncodedText.Encode(propName_author);
        private static ReadOnlySpan<byte> propName_publish_date => new byte[] { 112, 117, 98, 108, 105, 115, 104, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_publish_date = JsonEncodedText.Encode(propName_publish_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockRelatedArticle)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(encodedPropName_author, obj.Author);
            writer.WriteNumber(encodedPropName_publish_date, obj.PublishDate);
        }
    }

    partial class PageBlockTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 84, 105, 116, 108, 101 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockTitle)tlobj;
            if (obj.Title != null)
            {
                writer.WritePropertyName(encodedPropName_title);
                writer.WriteTLObjectValue(obj.Title);
            }
        }
    }

    partial class PageBlockSubtitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 83, 117, 98, 116, 105, 116, 108, 101 }));
        private static ReadOnlySpan<byte> propName_subtitle => new byte[] { 115, 117, 98, 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_subtitle = JsonEncodedText.Encode(propName_subtitle);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockSubtitle)tlobj;
            if (obj.Subtitle != null)
            {
                writer.WritePropertyName(encodedPropName_subtitle);
                writer.WriteTLObjectValue(obj.Subtitle);
            }
        }
    }

    partial class PageBlockAuthorDateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 65, 117, 116, 104, 111, 114, 68, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_author => new byte[] { 97, 117, 116, 104, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_author = JsonEncodedText.Encode(propName_author);
        private static ReadOnlySpan<byte> propName_publish_date => new byte[] { 112, 117, 98, 108, 105, 115, 104, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_publish_date = JsonEncodedText.Encode(propName_publish_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockAuthorDate)tlobj;
            if (obj.Author != null)
            {
                writer.WritePropertyName(encodedPropName_author);
                writer.WriteTLObjectValue(obj.Author);
            }
            writer.WriteNumber(encodedPropName_publish_date, obj.PublishDate);
        }
    }

    partial class PageBlockHeaderConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 72, 101, 97, 100, 101, 114 }));
        private static ReadOnlySpan<byte> propName_header => new byte[] { 104, 101, 97, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_header = JsonEncodedText.Encode(propName_header);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockHeader)tlobj;
            if (obj.Header != null)
            {
                writer.WritePropertyName(encodedPropName_header);
                writer.WriteTLObjectValue(obj.Header);
            }
        }
    }

    partial class PageBlockSubheaderConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 83, 117, 98, 104, 101, 97, 100, 101, 114 }));
        private static ReadOnlySpan<byte> propName_subheader => new byte[] { 115, 117, 98, 104, 101, 97, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_subheader = JsonEncodedText.Encode(propName_subheader);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockSubheader)tlobj;
            if (obj.Subheader != null)
            {
                writer.WritePropertyName(encodedPropName_subheader);
                writer.WriteTLObjectValue(obj.Subheader);
            }
        }
    }

    partial class PageBlockKickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 75, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_kicker => new byte[] { 107, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_kicker = JsonEncodedText.Encode(propName_kicker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockKicker)tlobj;
            if (obj.Kicker != null)
            {
                writer.WritePropertyName(encodedPropName_kicker);
                writer.WriteTLObjectValue(obj.Kicker);
            }
        }
    }

    partial class PageBlockParagraphConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 80, 97, 114, 97, 103, 114, 97, 112, 104 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockParagraph)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class PageBlockPreformattedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 80, 114, 101, 102, 111, 114, 109, 97, 116, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_language => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_language = JsonEncodedText.Encode(propName_language);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockPreformatted)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(encodedPropName_language, obj.Language);
        }
    }

    partial class PageBlockFooterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 70, 111, 111, 116, 101, 114 }));
        private static ReadOnlySpan<byte> propName_footer => new byte[] { 102, 111, 111, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_footer = JsonEncodedText.Encode(propName_footer);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockFooter)tlobj;
            if (obj.Footer != null)
            {
                writer.WritePropertyName(encodedPropName_footer);
                writer.WriteTLObjectValue(obj.Footer);
            }
        }
    }

    partial class PageBlockDividerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 68, 105, 118, 105, 100, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockAnchorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 65, 110, 99, 104, 111, 114 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockAnchor)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
        }
    }

    partial class PageBlockListConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 76, 105, 115, 116 }));
        private static ReadOnlySpan<byte> propName_items => new byte[] { 105, 116, 101, 109, 115 };
        private static readonly JsonEncodedText encodedPropName_items = JsonEncodedText.Encode(propName_items);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockList)tlobj;
            if (obj.Items != null)
            {
                writer.WritePropertyName(encodedPropName_items);
                writer.WriteArray(obj.Items);
            }
        }
    }

    partial class PageBlockBlockQuoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 66, 108, 111, 99, 107, 81, 117, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_credit => new byte[] { 99, 114, 101, 100, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_credit = JsonEncodedText.Encode(propName_credit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockBlockQuote)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            if (obj.Credit != null)
            {
                writer.WritePropertyName(encodedPropName_credit);
                writer.WriteTLObjectValue(obj.Credit);
            }
        }
    }

    partial class PageBlockPullQuoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 80, 117, 108, 108, 81, 117, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_credit => new byte[] { 99, 114, 101, 100, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_credit = JsonEncodedText.Encode(propName_credit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockPullQuote)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            if (obj.Credit != null)
            {
                writer.WritePropertyName(encodedPropName_credit);
                writer.WriteTLObjectValue(obj.Credit);
            }
        }
    }

    partial class PageBlockAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_need_autoplay => new byte[] { 110, 101, 101, 100, 95, 97, 117, 116, 111, 112, 108, 97, 121 };
        private static readonly JsonEncodedText encodedPropName_need_autoplay = JsonEncodedText.Encode(propName_need_autoplay);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(encodedPropName_need_autoplay, obj.NeedAutoplay);
        }
    }

    partial class PageBlockAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 65, 117, 100, 105, 111 }));
        private static ReadOnlySpan<byte> propName_audio => new byte[] { 97, 117, 100, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_audio = JsonEncodedText.Encode(propName_audio);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockAudio)tlobj;
            if (obj.Audio != null)
            {
                writer.WritePropertyName(encodedPropName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class PageBlockPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockPhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteString(encodedPropName_url, obj.Url);
        }
    }

    partial class PageBlockVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 86, 105, 100, 101, 111 }));
        private static ReadOnlySpan<byte> propName_video => new byte[] { 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_video = JsonEncodedText.Encode(propName_video);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_need_autoplay => new byte[] { 110, 101, 101, 100, 95, 97, 117, 116, 111, 112, 108, 97, 121 };
        private static readonly JsonEncodedText encodedPropName_need_autoplay = JsonEncodedText.Encode(propName_need_autoplay);
        private static ReadOnlySpan<byte> propName_is_looped => new byte[] { 105, 115, 95, 108, 111, 111, 112, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_looped = JsonEncodedText.Encode(propName_is_looped);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockVideo)tlobj;
            if (obj.Video != null)
            {
                writer.WritePropertyName(encodedPropName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(encodedPropName_need_autoplay, obj.NeedAutoplay);
            writer.WriteBoolean(encodedPropName_is_looped, obj.IsLooped);
        }
    }

    partial class PageBlockVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 86, 111, 105, 99, 101, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_voice_note => new byte[] { 118, 111, 105, 99, 101, 95, 110, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_voice_note = JsonEncodedText.Encode(propName_voice_note);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockVoiceNote)tlobj;
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(encodedPropName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class PageBlockCoverConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 67, 111, 118, 101, 114 }));
        private static ReadOnlySpan<byte> propName_cover => new byte[] { 99, 111, 118, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_cover = JsonEncodedText.Encode(propName_cover);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockCover)tlobj;
            if (obj.Cover != null)
            {
                writer.WritePropertyName(encodedPropName_cover);
                writer.WriteTLObjectValue(obj.Cover);
            }
        }
    }

    partial class PageBlockEmbeddedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 69, 109, 98, 101, 100, 100, 101, 100 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_html => new byte[] { 104, 116, 109, 108 };
        private static readonly JsonEncodedText encodedPropName_html = JsonEncodedText.Encode(propName_html);
        private static ReadOnlySpan<byte> propName_poster_photo => new byte[] { 112, 111, 115, 116, 101, 114, 95, 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_poster_photo = JsonEncodedText.Encode(propName_poster_photo);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_is_full_width => new byte[] { 105, 115, 95, 102, 117, 108, 108, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_is_full_width = JsonEncodedText.Encode(propName_is_full_width);
        private static ReadOnlySpan<byte> propName_allow_scrolling => new byte[] { 97, 108, 108, 111, 119, 95, 115, 99, 114, 111, 108, 108, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_allow_scrolling = JsonEncodedText.Encode(propName_allow_scrolling);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockEmbedded)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteString(encodedPropName_html, obj.Html);
            if (obj.PosterPhoto != null)
            {
                writer.WritePropertyName(encodedPropName_poster_photo);
                writer.WriteTLObjectValue(obj.PosterPhoto);
            }
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(encodedPropName_is_full_width, obj.IsFullWidth);
            writer.WriteBoolean(encodedPropName_allow_scrolling, obj.AllowScrolling);
        }
    }

    partial class PageBlockEmbeddedPostConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 69, 109, 98, 101, 100, 100, 101, 100, 80, 111, 115, 116 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_author => new byte[] { 97, 117, 116, 104, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_author = JsonEncodedText.Encode(propName_author);
        private static ReadOnlySpan<byte> propName_author_photo => new byte[] { 97, 117, 116, 104, 111, 114, 95, 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_author_photo = JsonEncodedText.Encode(propName_author_photo);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_page_blocks => new byte[] { 112, 97, 103, 101, 95, 98, 108, 111, 99, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_page_blocks = JsonEncodedText.Encode(propName_page_blocks);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockEmbeddedPost)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteString(encodedPropName_author, obj.Author);
            if (obj.AuthorPhoto != null)
            {
                writer.WritePropertyName(encodedPropName_author_photo);
                writer.WriteTLObjectValue(obj.AuthorPhoto);
            }
            writer.WriteNumber(encodedPropName_date, obj.Date);
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(encodedPropName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class PageBlockCollageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 67, 111, 108, 108, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_page_blocks => new byte[] { 112, 97, 103, 101, 95, 98, 108, 111, 99, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_page_blocks = JsonEncodedText.Encode(propName_page_blocks);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockCollage)tlobj;
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(encodedPropName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class PageBlockSlideshowConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 83, 108, 105, 100, 101, 115, 104, 111, 119 }));
        private static ReadOnlySpan<byte> propName_page_blocks => new byte[] { 112, 97, 103, 101, 95, 98, 108, 111, 99, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_page_blocks = JsonEncodedText.Encode(propName_page_blocks);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockSlideshow)tlobj;
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(encodedPropName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class PageBlockChatLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 67, 104, 97, 116, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_username => new byte[] { 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_username = JsonEncodedText.Encode(propName_username);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockChatLink)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(encodedPropName_username, obj.Username);
        }
    }

    partial class PageBlockTableConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 84, 97, 98, 108, 101 }));
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_cells => new byte[] { 99, 101, 108, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_cells = JsonEncodedText.Encode(propName_cells);
        private static ReadOnlySpan<byte> propName_is_bordered => new byte[] { 105, 115, 95, 98, 111, 114, 100, 101, 114, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_bordered = JsonEncodedText.Encode(propName_is_bordered);
        private static ReadOnlySpan<byte> propName_is_striped => new byte[] { 105, 115, 95, 115, 116, 114, 105, 112, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_striped = JsonEncodedText.Encode(propName_is_striped);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockTable)tlobj;
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            if (obj.Cells != null)
            {
                writer.WritePropertyName(encodedPropName_cells);
                writer.WriteArray(obj.Cells);
            }
            writer.WriteBoolean(encodedPropName_is_bordered, obj.IsBordered);
            writer.WriteBoolean(encodedPropName_is_striped, obj.IsStriped);
        }
    }

    partial class PageBlockDetailsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 68, 101, 116, 97, 105, 108, 115 }));
        private static ReadOnlySpan<byte> propName_header => new byte[] { 104, 101, 97, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_header = JsonEncodedText.Encode(propName_header);
        private static ReadOnlySpan<byte> propName_page_blocks => new byte[] { 112, 97, 103, 101, 95, 98, 108, 111, 99, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_page_blocks = JsonEncodedText.Encode(propName_page_blocks);
        private static ReadOnlySpan<byte> propName_is_open => new byte[] { 105, 115, 95, 111, 112, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_is_open = JsonEncodedText.Encode(propName_is_open);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockDetails)tlobj;
            if (obj.Header != null)
            {
                writer.WritePropertyName(encodedPropName_header);
                writer.WriteTLObjectValue(obj.Header);
            }
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(encodedPropName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
            writer.WriteBoolean(encodedPropName_is_open, obj.IsOpen);
        }
    }

    partial class PageBlockRelatedArticlesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 82, 101, 108, 97, 116, 101, 100, 65, 114, 116, 105, 99, 108, 101, 115 }));
        private static ReadOnlySpan<byte> propName_header => new byte[] { 104, 101, 97, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_header = JsonEncodedText.Encode(propName_header);
        private static ReadOnlySpan<byte> propName_articles => new byte[] { 97, 114, 116, 105, 99, 108, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_articles = JsonEncodedText.Encode(propName_articles);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockRelatedArticles)tlobj;
            if (obj.Header != null)
            {
                writer.WritePropertyName(encodedPropName_header);
                writer.WriteTLObjectValue(obj.Header);
            }
            if (obj.Articles != null)
            {
                writer.WritePropertyName(encodedPropName_articles);
                writer.WriteArray(obj.Articles);
            }
        }
    }

    partial class PageBlockMapConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 103, 101, 66, 108, 111, 99, 107, 77, 97, 112 }));
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_zoom => new byte[] { 122, 111, 111, 109 };
        private static readonly JsonEncodedText encodedPropName_zoom = JsonEncodedText.Encode(propName_zoom);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockMap)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(encodedPropName_zoom, obj.Zoom);
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class WebPageInstantViewConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 119, 101, 98, 80, 97, 103, 101, 73, 110, 115, 116, 97, 110, 116, 86, 105, 101, 119 }));
        private static ReadOnlySpan<byte> propName_page_blocks => new byte[] { 112, 97, 103, 101, 95, 98, 108, 111, 99, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_page_blocks = JsonEncodedText.Encode(propName_page_blocks);
        private static ReadOnlySpan<byte> propName_view_count => new byte[] { 118, 105, 101, 119, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_view_count = JsonEncodedText.Encode(propName_view_count);
        private static ReadOnlySpan<byte> propName_version => new byte[] { 118, 101, 114, 115, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_version = JsonEncodedText.Encode(propName_version);
        private static ReadOnlySpan<byte> propName_is_rtl => new byte[] { 105, 115, 95, 114, 116, 108 };
        private static readonly JsonEncodedText encodedPropName_is_rtl = JsonEncodedText.Encode(propName_is_rtl);
        private static ReadOnlySpan<byte> propName_is_full => new byte[] { 105, 115, 95, 102, 117, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_is_full = JsonEncodedText.Encode(propName_is_full);
        private static ReadOnlySpan<byte> propName_feedback_link => new byte[] { 102, 101, 101, 100, 98, 97, 99, 107, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_feedback_link = JsonEncodedText.Encode(propName_feedback_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (WebPageInstantView)tlobj;
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(encodedPropName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
            writer.WriteNumber(encodedPropName_view_count, obj.ViewCount);
            writer.WriteNumber(encodedPropName_version, obj.Version);
            writer.WriteBoolean(encodedPropName_is_rtl, obj.IsRtl);
            writer.WriteBoolean(encodedPropName_is_full, obj.IsFull);
            if (obj.FeedbackLink != null)
            {
                writer.WritePropertyName(encodedPropName_feedback_link);
                writer.WriteTLObjectValue(obj.FeedbackLink);
            }
        }
    }

    partial class WebPageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 119, 101, 98, 80, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_display_url => new byte[] { 100, 105, 115, 112, 108, 97, 121, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_display_url = JsonEncodedText.Encode(propName_display_url);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_site_name => new byte[] { 115, 105, 116, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_site_name = JsonEncodedText.Encode(propName_site_name);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_embed_url => new byte[] { 101, 109, 98, 101, 100, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_embed_url = JsonEncodedText.Encode(propName_embed_url);
        private static ReadOnlySpan<byte> propName_embed_type => new byte[] { 101, 109, 98, 101, 100, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_embed_type = JsonEncodedText.Encode(propName_embed_type);
        private static ReadOnlySpan<byte> propName_embed_width => new byte[] { 101, 109, 98, 101, 100, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_embed_width = JsonEncodedText.Encode(propName_embed_width);
        private static ReadOnlySpan<byte> propName_embed_height => new byte[] { 101, 109, 98, 101, 100, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_embed_height = JsonEncodedText.Encode(propName_embed_height);
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_author => new byte[] { 97, 117, 116, 104, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_author = JsonEncodedText.Encode(propName_author);
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        private static ReadOnlySpan<byte> propName_audio => new byte[] { 97, 117, 100, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_audio = JsonEncodedText.Encode(propName_audio);
        private static ReadOnlySpan<byte> propName_document => new byte[] { 100, 111, 99, 117, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_document = JsonEncodedText.Encode(propName_document);
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        private static ReadOnlySpan<byte> propName_video => new byte[] { 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_video = JsonEncodedText.Encode(propName_video);
        private static ReadOnlySpan<byte> propName_video_note => new byte[] { 118, 105, 100, 101, 111, 95, 110, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_video_note = JsonEncodedText.Encode(propName_video_note);
        private static ReadOnlySpan<byte> propName_voice_note => new byte[] { 118, 111, 105, 99, 101, 95, 110, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_voice_note = JsonEncodedText.Encode(propName_voice_note);
        private static ReadOnlySpan<byte> propName_instant_view_version => new byte[] { 105, 110, 115, 116, 97, 110, 116, 95, 118, 105, 101, 119, 95, 118, 101, 114, 115, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_instant_view_version = JsonEncodedText.Encode(propName_instant_view_version);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (WebPage)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteString(encodedPropName_display_url, obj.DisplayUrl);
            writer.WriteString(encodedPropName_type, obj.Type);
            writer.WriteString(encodedPropName_site_name, obj.SiteName);
            writer.WriteString(encodedPropName_title, obj.Title);
            if (obj.Description != null)
            {
                writer.WritePropertyName(encodedPropName_description);
                writer.WriteTLObjectValue(obj.Description);
            }
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(encodedPropName_embed_url, obj.EmbedUrl);
            writer.WriteString(encodedPropName_embed_type, obj.EmbedType);
            writer.WriteNumber(encodedPropName_embed_width, obj.EmbedWidth);
            writer.WriteNumber(encodedPropName_embed_height, obj.EmbedHeight);
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            writer.WriteString(encodedPropName_author, obj.Author);
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            if (obj.Audio != null)
            {
                writer.WritePropertyName(encodedPropName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
            if (obj.Document != null)
            {
                writer.WritePropertyName(encodedPropName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            if (obj.Video != null)
            {
                writer.WritePropertyName(encodedPropName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            if (obj.VideoNote != null)
            {
                writer.WritePropertyName(encodedPropName_video_note);
                writer.WriteTLObjectValue(obj.VideoNote);
            }
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(encodedPropName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            writer.WriteNumber(encodedPropName_instant_view_version, obj.InstantViewVersion);
        }
    }

    partial class CountryInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 117, 110, 116, 114, 121, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_country_code => new byte[] { 99, 111, 117, 110, 116, 114, 121, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_country_code = JsonEncodedText.Encode(propName_country_code);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_english_name => new byte[] { 101, 110, 103, 108, 105, 115, 104, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_english_name = JsonEncodedText.Encode(propName_english_name);
        private static ReadOnlySpan<byte> propName_is_hidden => new byte[] { 105, 115, 95, 104, 105, 100, 100, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_is_hidden = JsonEncodedText.Encode(propName_is_hidden);
        private static ReadOnlySpan<byte> propName_calling_codes => new byte[] { 99, 97, 108, 108, 105, 110, 103, 95, 99, 111, 100, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_calling_codes = JsonEncodedText.Encode(propName_calling_codes);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CountryInfo)tlobj;
            writer.WriteString(encodedPropName_country_code, obj.CountryCode);
            writer.WriteString(encodedPropName_name, obj.Name);
            writer.WriteString(encodedPropName_english_name, obj.EnglishName);
            writer.WriteBoolean(encodedPropName_is_hidden, obj.IsHidden);
            if (obj.CallingCodes != null)
            {
                writer.WritePropertyName(encodedPropName_calling_codes);
                writer.WriteArray(obj.CallingCodes);
            }
        }
    }

    partial class CountriesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 117, 110, 116, 114, 105, 101, 115 }));
        private static ReadOnlySpan<byte> propName_countries => new byte[] { 99, 111, 117, 110, 116, 114, 105, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_countries = JsonEncodedText.Encode(propName_countries);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Countries)tlobj;
            if (obj.Countries_ != null)
            {
                writer.WritePropertyName(encodedPropName_countries);
                writer.WriteArray(obj.Countries_);
            }
        }
    }

    partial class PhoneNumberInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_country => new byte[] { 99, 111, 117, 110, 116, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_country = JsonEncodedText.Encode(propName_country);
        private static ReadOnlySpan<byte> propName_country_calling_code => new byte[] { 99, 111, 117, 110, 116, 114, 121, 95, 99, 97, 108, 108, 105, 110, 103, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_country_calling_code = JsonEncodedText.Encode(propName_country_calling_code);
        private static ReadOnlySpan<byte> propName_formatted_phone_number => new byte[] { 102, 111, 114, 109, 97, 116, 116, 101, 100, 95, 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_formatted_phone_number = JsonEncodedText.Encode(propName_formatted_phone_number);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PhoneNumberInfo)tlobj;
            if (obj.Country != null)
            {
                writer.WritePropertyName(encodedPropName_country);
                writer.WriteTLObjectValue(obj.Country);
            }
            writer.WriteString(encodedPropName_country_calling_code, obj.CountryCallingCode);
            writer.WriteString(encodedPropName_formatted_phone_number, obj.FormattedPhoneNumber);
        }
    }

    partial class BankCardActionOpenUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 110, 107, 67, 97, 114, 100, 65, 99, 116, 105, 111, 110, 79, 112, 101, 110, 85, 114, 108 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BankCardActionOpenUrl)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
            writer.WriteString(encodedPropName_url, obj.Url);
        }
    }

    partial class BankCardInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 110, 107, 67, 97, 114, 100, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_actions => new byte[] { 97, 99, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_actions = JsonEncodedText.Encode(propName_actions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BankCardInfo)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
            if (obj.Actions != null)
            {
                writer.WritePropertyName(encodedPropName_actions);
                writer.WriteArray(obj.Actions);
            }
        }
    }

    partial class AddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 114, 101, 115, 115 }));
        private static ReadOnlySpan<byte> propName_country_code => new byte[] { 99, 111, 117, 110, 116, 114, 121, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_country_code = JsonEncodedText.Encode(propName_country_code);
        private static ReadOnlySpan<byte> propName_state => new byte[] { 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_state = JsonEncodedText.Encode(propName_state);
        private static ReadOnlySpan<byte> propName_city => new byte[] { 99, 105, 116, 121 };
        private static readonly JsonEncodedText encodedPropName_city = JsonEncodedText.Encode(propName_city);
        private static ReadOnlySpan<byte> propName_street_line1 => new byte[] { 115, 116, 114, 101, 101, 116, 95, 108, 105, 110, 101, 49 };
        private static readonly JsonEncodedText encodedPropName_street_line1 = JsonEncodedText.Encode(propName_street_line1);
        private static ReadOnlySpan<byte> propName_street_line2 => new byte[] { 115, 116, 114, 101, 101, 116, 95, 108, 105, 110, 101, 50 };
        private static readonly JsonEncodedText encodedPropName_street_line2 = JsonEncodedText.Encode(propName_street_line2);
        private static ReadOnlySpan<byte> propName_postal_code => new byte[] { 112, 111, 115, 116, 97, 108, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_postal_code = JsonEncodedText.Encode(propName_postal_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Address)tlobj;
            writer.WriteString(encodedPropName_country_code, obj.CountryCode);
            writer.WriteString(encodedPropName_state, obj.State);
            writer.WriteString(encodedPropName_city, obj.City);
            writer.WriteString(encodedPropName_street_line1, obj.StreetLine1);
            writer.WriteString(encodedPropName_street_line2, obj.StreetLine2);
            writer.WriteString(encodedPropName_postal_code, obj.PostalCode);
        }
    }

    partial class LabeledPricePartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 97, 98, 101, 108, 101, 100, 80, 114, 105, 99, 101, 80, 97, 114, 116 }));
        private static ReadOnlySpan<byte> propName_label => new byte[] { 108, 97, 98, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_label = JsonEncodedText.Encode(propName_label);
        private static ReadOnlySpan<byte> propName_amount => new byte[] { 97, 109, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_amount = JsonEncodedText.Encode(propName_amount);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LabeledPricePart)tlobj;
            writer.WriteString(encodedPropName_label, obj.Label);
            writer.WriteNumber(encodedPropName_amount, obj.Amount);
        }
    }

    partial class InvoiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 118, 111, 105, 99, 101 }));
        private static ReadOnlySpan<byte> propName_currency => new byte[] { 99, 117, 114, 114, 101, 110, 99, 121 };
        private static readonly JsonEncodedText encodedPropName_currency = JsonEncodedText.Encode(propName_currency);
        private static ReadOnlySpan<byte> propName_price_parts => new byte[] { 112, 114, 105, 99, 101, 95, 112, 97, 114, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_price_parts = JsonEncodedText.Encode(propName_price_parts);
        private static ReadOnlySpan<byte> propName_max_tip_amount => new byte[] { 109, 97, 120, 95, 116, 105, 112, 95, 97, 109, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_max_tip_amount = JsonEncodedText.Encode(propName_max_tip_amount);
        private static ReadOnlySpan<byte> propName_suggested_tip_amounts => new byte[] { 115, 117, 103, 103, 101, 115, 116, 101, 100, 95, 116, 105, 112, 95, 97, 109, 111, 117, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_suggested_tip_amounts = JsonEncodedText.Encode(propName_suggested_tip_amounts);
        private static ReadOnlySpan<byte> propName_is_test => new byte[] { 105, 115, 95, 116, 101, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_is_test = JsonEncodedText.Encode(propName_is_test);
        private static ReadOnlySpan<byte> propName_need_name => new byte[] { 110, 101, 101, 100, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_need_name = JsonEncodedText.Encode(propName_need_name);
        private static ReadOnlySpan<byte> propName_need_phone_number => new byte[] { 110, 101, 101, 100, 95, 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_need_phone_number = JsonEncodedText.Encode(propName_need_phone_number);
        private static ReadOnlySpan<byte> propName_need_email_address => new byte[] { 110, 101, 101, 100, 95, 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_need_email_address = JsonEncodedText.Encode(propName_need_email_address);
        private static ReadOnlySpan<byte> propName_need_shipping_address => new byte[] { 110, 101, 101, 100, 95, 115, 104, 105, 112, 112, 105, 110, 103, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_need_shipping_address = JsonEncodedText.Encode(propName_need_shipping_address);
        private static ReadOnlySpan<byte> propName_send_phone_number_to_provider => new byte[] { 115, 101, 110, 100, 95, 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114, 95, 116, 111, 95, 112, 114, 111, 118, 105, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_send_phone_number_to_provider = JsonEncodedText.Encode(propName_send_phone_number_to_provider);
        private static ReadOnlySpan<byte> propName_send_email_address_to_provider => new byte[] { 115, 101, 110, 100, 95, 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115, 95, 116, 111, 95, 112, 114, 111, 118, 105, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_send_email_address_to_provider = JsonEncodedText.Encode(propName_send_email_address_to_provider);
        private static ReadOnlySpan<byte> propName_is_flexible => new byte[] { 105, 115, 95, 102, 108, 101, 120, 105, 98, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_is_flexible = JsonEncodedText.Encode(propName_is_flexible);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Invoice)tlobj;
            writer.WriteString(encodedPropName_currency, obj.Currency);
            if (obj.PriceParts != null)
            {
                writer.WritePropertyName(encodedPropName_price_parts);
                writer.WriteArray(obj.PriceParts);
            }
            writer.WriteNumber(encodedPropName_max_tip_amount, obj.MaxTipAmount);
            if (obj.SuggestedTipAmounts != null)
            {
                writer.WritePropertyName(encodedPropName_suggested_tip_amounts);
                writer.WriteArray(obj.SuggestedTipAmounts);
            }
            writer.WriteBoolean(encodedPropName_is_test, obj.IsTest);
            writer.WriteBoolean(encodedPropName_need_name, obj.NeedName);
            writer.WriteBoolean(encodedPropName_need_phone_number, obj.NeedPhoneNumber);
            writer.WriteBoolean(encodedPropName_need_email_address, obj.NeedEmailAddress);
            writer.WriteBoolean(encodedPropName_need_shipping_address, obj.NeedShippingAddress);
            writer.WriteBoolean(encodedPropName_send_phone_number_to_provider, obj.SendPhoneNumberToProvider);
            writer.WriteBoolean(encodedPropName_send_email_address_to_provider, obj.SendEmailAddressToProvider);
            writer.WriteBoolean(encodedPropName_is_flexible, obj.IsFlexible);
        }
    }

    partial class OrderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 111, 114, 100, 101, 114, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        private static ReadOnlySpan<byte> propName_email_address => new byte[] { 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_email_address = JsonEncodedText.Encode(propName_email_address);
        private static ReadOnlySpan<byte> propName_shipping_address => new byte[] { 115, 104, 105, 112, 112, 105, 110, 103, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_shipping_address = JsonEncodedText.Encode(propName_shipping_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OrderInfo)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
            writer.WriteString(encodedPropName_email_address, obj.EmailAddress);
            if (obj.ShippingAddress != null)
            {
                writer.WritePropertyName(encodedPropName_shipping_address);
                writer.WriteTLObjectValue(obj.ShippingAddress);
            }
        }
    }

    partial class ShippingOptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 104, 105, 112, 112, 105, 110, 103, 79, 112, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_price_parts => new byte[] { 112, 114, 105, 99, 101, 95, 112, 97, 114, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_price_parts = JsonEncodedText.Encode(propName_price_parts);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ShippingOption)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            if (obj.PriceParts != null)
            {
                writer.WritePropertyName(encodedPropName_price_parts);
                writer.WriteArray(obj.PriceParts);
            }
        }
    }

    partial class SavedCredentialsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 97, 118, 101, 100, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SavedCredentials)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class InputCredentialsSavedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 83, 97, 118, 101, 100 }));
        private static ReadOnlySpan<byte> propName_saved_credentials_id => new byte[] { 115, 97, 118, 101, 100, 95, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_saved_credentials_id = JsonEncodedText.Encode(propName_saved_credentials_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputCredentialsSaved)tlobj;
            writer.WriteString(encodedPropName_saved_credentials_id, obj.SavedCredentialsId);
        }
    }

    partial class InputCredentialsNewConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 78, 101, 119 }));
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        private static ReadOnlySpan<byte> propName_allow_save => new byte[] { 97, 108, 108, 111, 119, 95, 115, 97, 118, 101 };
        private static readonly JsonEncodedText encodedPropName_allow_save = JsonEncodedText.Encode(propName_allow_save);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputCredentialsNew)tlobj;
            writer.WriteString(encodedPropName_data, obj.Data);
            writer.WriteBoolean(encodedPropName_allow_save, obj.AllowSave);
        }
    }

    partial class InputCredentialsApplePayConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 65, 112, 112, 108, 101, 80, 97, 121 }));
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputCredentialsApplePay)tlobj;
            writer.WriteString(encodedPropName_data, obj.Data);
        }
    }

    partial class InputCredentialsGooglePayConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 71, 111, 111, 103, 108, 101, 80, 97, 121 }));
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputCredentialsGooglePay)tlobj;
            writer.WriteString(encodedPropName_data, obj.Data);
        }
    }

    partial class PaymentsProviderStripeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 121, 109, 101, 110, 116, 115, 80, 114, 111, 118, 105, 100, 101, 114, 83, 116, 114, 105, 112, 101 }));
        private static ReadOnlySpan<byte> propName_publishable_key => new byte[] { 112, 117, 98, 108, 105, 115, 104, 97, 98, 108, 101, 95, 107, 101, 121 };
        private static readonly JsonEncodedText encodedPropName_publishable_key = JsonEncodedText.Encode(propName_publishable_key);
        private static ReadOnlySpan<byte> propName_need_country => new byte[] { 110, 101, 101, 100, 95, 99, 111, 117, 110, 116, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_need_country = JsonEncodedText.Encode(propName_need_country);
        private static ReadOnlySpan<byte> propName_need_postal_code => new byte[] { 110, 101, 101, 100, 95, 112, 111, 115, 116, 97, 108, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_need_postal_code = JsonEncodedText.Encode(propName_need_postal_code);
        private static ReadOnlySpan<byte> propName_need_cardholder_name => new byte[] { 110, 101, 101, 100, 95, 99, 97, 114, 100, 104, 111, 108, 100, 101, 114, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_need_cardholder_name = JsonEncodedText.Encode(propName_need_cardholder_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PaymentsProviderStripe)tlobj;
            writer.WriteString(encodedPropName_publishable_key, obj.PublishableKey);
            writer.WriteBoolean(encodedPropName_need_country, obj.NeedCountry);
            writer.WriteBoolean(encodedPropName_need_postal_code, obj.NeedPostalCode);
            writer.WriteBoolean(encodedPropName_need_cardholder_name, obj.NeedCardholderName);
        }
    }

    partial class PaymentFormThemeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 121, 109, 101, 110, 116, 70, 111, 114, 109, 84, 104, 101, 109, 101 }));
        private static ReadOnlySpan<byte> propName_background_color => new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_background_color = JsonEncodedText.Encode(propName_background_color);
        private static ReadOnlySpan<byte> propName_text_color => new byte[] { 116, 101, 120, 116, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_text_color = JsonEncodedText.Encode(propName_text_color);
        private static ReadOnlySpan<byte> propName_hint_color => new byte[] { 104, 105, 110, 116, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_hint_color = JsonEncodedText.Encode(propName_hint_color);
        private static ReadOnlySpan<byte> propName_link_color => new byte[] { 108, 105, 110, 107, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_link_color = JsonEncodedText.Encode(propName_link_color);
        private static ReadOnlySpan<byte> propName_button_color => new byte[] { 98, 117, 116, 116, 111, 110, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_button_color = JsonEncodedText.Encode(propName_button_color);
        private static ReadOnlySpan<byte> propName_button_text_color => new byte[] { 98, 117, 116, 116, 111, 110, 95, 116, 101, 120, 116, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_button_text_color = JsonEncodedText.Encode(propName_button_text_color);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PaymentFormTheme)tlobj;
            writer.WriteNumber(encodedPropName_background_color, obj.BackgroundColor);
            writer.WriteNumber(encodedPropName_text_color, obj.TextColor);
            writer.WriteNumber(encodedPropName_hint_color, obj.HintColor);
            writer.WriteNumber(encodedPropName_link_color, obj.LinkColor);
            writer.WriteNumber(encodedPropName_button_color, obj.ButtonColor);
            writer.WriteNumber(encodedPropName_button_text_color, obj.ButtonTextColor);
        }
    }

    partial class PaymentFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 121, 109, 101, 110, 116, 70, 111, 114, 109 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_invoice => new byte[] { 105, 110, 118, 111, 105, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_invoice = JsonEncodedText.Encode(propName_invoice);
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_seller_bot_user_id => new byte[] { 115, 101, 108, 108, 101, 114, 95, 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_seller_bot_user_id = JsonEncodedText.Encode(propName_seller_bot_user_id);
        private static ReadOnlySpan<byte> propName_payments_provider_user_id => new byte[] { 112, 97, 121, 109, 101, 110, 116, 115, 95, 112, 114, 111, 118, 105, 100, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_payments_provider_user_id = JsonEncodedText.Encode(propName_payments_provider_user_id);
        private static ReadOnlySpan<byte> propName_payments_provider => new byte[] { 112, 97, 121, 109, 101, 110, 116, 115, 95, 112, 114, 111, 118, 105, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_payments_provider = JsonEncodedText.Encode(propName_payments_provider);
        private static ReadOnlySpan<byte> propName_saved_order_info => new byte[] { 115, 97, 118, 101, 100, 95, 111, 114, 100, 101, 114, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_saved_order_info = JsonEncodedText.Encode(propName_saved_order_info);
        private static ReadOnlySpan<byte> propName_saved_credentials => new byte[] { 115, 97, 118, 101, 100, 95, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_saved_credentials = JsonEncodedText.Encode(propName_saved_credentials);
        private static ReadOnlySpan<byte> propName_can_save_credentials => new byte[] { 99, 97, 110, 95, 115, 97, 118, 101, 95, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_can_save_credentials = JsonEncodedText.Encode(propName_can_save_credentials);
        private static ReadOnlySpan<byte> propName_need_password => new byte[] { 110, 101, 101, 100, 95, 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_need_password = JsonEncodedText.Encode(propName_need_password);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PaymentForm)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            if (obj.Invoice != null)
            {
                writer.WritePropertyName(encodedPropName_invoice);
                writer.WriteTLObjectValue(obj.Invoice);
            }
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteNumber(encodedPropName_seller_bot_user_id, obj.SellerBotUserId);
            writer.WriteNumber(encodedPropName_payments_provider_user_id, obj.PaymentsProviderUserId);
            if (obj.PaymentsProvider != null)
            {
                writer.WritePropertyName(encodedPropName_payments_provider);
                writer.WriteTLObjectValue(obj.PaymentsProvider);
            }
            if (obj.SavedOrderInfo != null)
            {
                writer.WritePropertyName(encodedPropName_saved_order_info);
                writer.WriteTLObjectValue(obj.SavedOrderInfo);
            }
            if (obj.SavedCredentials != null)
            {
                writer.WritePropertyName(encodedPropName_saved_credentials);
                writer.WriteTLObjectValue(obj.SavedCredentials);
            }
            writer.WriteBoolean(encodedPropName_can_save_credentials, obj.CanSaveCredentials);
            writer.WriteBoolean(encodedPropName_need_password, obj.NeedPassword);
        }
    }

    partial class ValidatedOrderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 97, 108, 105, 100, 97, 116, 101, 100, 79, 114, 100, 101, 114, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_order_info_id => new byte[] { 111, 114, 100, 101, 114, 95, 105, 110, 102, 111, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_order_info_id = JsonEncodedText.Encode(propName_order_info_id);
        private static ReadOnlySpan<byte> propName_shipping_options => new byte[] { 115, 104, 105, 112, 112, 105, 110, 103, 95, 111, 112, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_shipping_options = JsonEncodedText.Encode(propName_shipping_options);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ValidatedOrderInfo)tlobj;
            writer.WriteString(encodedPropName_order_info_id, obj.OrderInfoId);
            if (obj.ShippingOptions != null)
            {
                writer.WritePropertyName(encodedPropName_shipping_options);
                writer.WriteArray(obj.ShippingOptions);
            }
        }
    }

    partial class PaymentResultConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 121, 109, 101, 110, 116, 82, 101, 115, 117, 108, 116 }));
        private static ReadOnlySpan<byte> propName_success => new byte[] { 115, 117, 99, 99, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_success = JsonEncodedText.Encode(propName_success);
        private static ReadOnlySpan<byte> propName_verification_url => new byte[] { 118, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_verification_url = JsonEncodedText.Encode(propName_verification_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PaymentResult)tlobj;
            writer.WriteBoolean(encodedPropName_success, obj.Success);
            writer.WriteString(encodedPropName_verification_url, obj.VerificationUrl);
        }
    }

    partial class PaymentReceiptConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 121, 109, 101, 110, 116, 82, 101, 99, 101, 105, 112, 116 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_seller_bot_user_id => new byte[] { 115, 101, 108, 108, 101, 114, 95, 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_seller_bot_user_id = JsonEncodedText.Encode(propName_seller_bot_user_id);
        private static ReadOnlySpan<byte> propName_payments_provider_user_id => new byte[] { 112, 97, 121, 109, 101, 110, 116, 115, 95, 112, 114, 111, 118, 105, 100, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_payments_provider_user_id = JsonEncodedText.Encode(propName_payments_provider_user_id);
        private static ReadOnlySpan<byte> propName_invoice => new byte[] { 105, 110, 118, 111, 105, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_invoice = JsonEncodedText.Encode(propName_invoice);
        private static ReadOnlySpan<byte> propName_order_info => new byte[] { 111, 114, 100, 101, 114, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_order_info = JsonEncodedText.Encode(propName_order_info);
        private static ReadOnlySpan<byte> propName_shipping_option => new byte[] { 115, 104, 105, 112, 112, 105, 110, 103, 95, 111, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_shipping_option = JsonEncodedText.Encode(propName_shipping_option);
        private static ReadOnlySpan<byte> propName_credentials_title => new byte[] { 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 95, 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_credentials_title = JsonEncodedText.Encode(propName_credentials_title);
        private static ReadOnlySpan<byte> propName_tip_amount => new byte[] { 116, 105, 112, 95, 97, 109, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_tip_amount = JsonEncodedText.Encode(propName_tip_amount);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PaymentReceipt)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteNumber(encodedPropName_date, obj.Date);
            writer.WriteNumber(encodedPropName_seller_bot_user_id, obj.SellerBotUserId);
            writer.WriteNumber(encodedPropName_payments_provider_user_id, obj.PaymentsProviderUserId);
            if (obj.Invoice != null)
            {
                writer.WritePropertyName(encodedPropName_invoice);
                writer.WriteTLObjectValue(obj.Invoice);
            }
            if (obj.OrderInfo != null)
            {
                writer.WritePropertyName(encodedPropName_order_info);
                writer.WriteTLObjectValue(obj.OrderInfo);
            }
            if (obj.ShippingOption != null)
            {
                writer.WritePropertyName(encodedPropName_shipping_option);
                writer.WriteTLObjectValue(obj.ShippingOption);
            }
            writer.WriteString(encodedPropName_credentials_title, obj.CredentialsTitle);
            writer.WriteNumber(encodedPropName_tip_amount, obj.TipAmount);
        }
    }

    partial class DatedFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 97, 116, 101, 100, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file => new byte[] { 102, 105, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_file = JsonEncodedText.Encode(propName_file);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DatedFile)tlobj;
            if (obj.File != null)
            {
                writer.WritePropertyName(encodedPropName_file);
                writer.WriteTLObjectValue(obj.File);
            }
            writer.WriteNumber(encodedPropName_date, obj.Date);
        }
    }

    partial class PassportElementTypePersonalDetailsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 80, 101, 114, 115, 111, 110, 97, 108, 68, 101, 116, 97, 105, 108, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypePassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 80, 97, 115, 115, 112, 111, 114, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeDriverLicenseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 68, 114, 105, 118, 101, 114, 76, 105, 99, 101, 110, 115, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeIdentityCardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 73, 100, 101, 110, 116, 105, 116, 121, 67, 97, 114, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeInternalPassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 73, 110, 116, 101, 114, 110, 97, 108, 80, 97, 115, 115, 112, 111, 114, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 65, 100, 100, 114, 101, 115, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeUtilityBillConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 85, 116, 105, 108, 105, 116, 121, 66, 105, 108, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeBankStatementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 66, 97, 110, 107, 83, 116, 97, 116, 101, 109, 101, 110, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeRentalAgreementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 82, 101, 110, 116, 97, 108, 65, 103, 114, 101, 101, 109, 101, 110, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypePassportRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 80, 97, 115, 115, 112, 111, 114, 116, 82, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeTemporaryRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 84, 101, 109, 112, 111, 114, 97, 114, 121, 82, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 121, 112, 101, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_day => new byte[] { 100, 97, 121 };
        private static readonly JsonEncodedText encodedPropName_day = JsonEncodedText.Encode(propName_day);
        private static ReadOnlySpan<byte> propName_month => new byte[] { 109, 111, 110, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_month = JsonEncodedText.Encode(propName_month);
        private static ReadOnlySpan<byte> propName_year => new byte[] { 121, 101, 97, 114 };
        private static readonly JsonEncodedText encodedPropName_year = JsonEncodedText.Encode(propName_year);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Date)tlobj;
            writer.WriteNumber(encodedPropName_day, obj.Day);
            writer.WriteNumber(encodedPropName_month, obj.Month);
            writer.WriteNumber(encodedPropName_year, obj.Year);
        }
    }

    partial class PersonalDetailsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 101, 114, 115, 111, 110, 97, 108, 68, 101, 116, 97, 105, 108, 115 }));
        private static ReadOnlySpan<byte> propName_first_name => new byte[] { 102, 105, 114, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_first_name = JsonEncodedText.Encode(propName_first_name);
        private static ReadOnlySpan<byte> propName_middle_name => new byte[] { 109, 105, 100, 100, 108, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_middle_name = JsonEncodedText.Encode(propName_middle_name);
        private static ReadOnlySpan<byte> propName_last_name => new byte[] { 108, 97, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_last_name = JsonEncodedText.Encode(propName_last_name);
        private static ReadOnlySpan<byte> propName_native_first_name => new byte[] { 110, 97, 116, 105, 118, 101, 95, 102, 105, 114, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_native_first_name = JsonEncodedText.Encode(propName_native_first_name);
        private static ReadOnlySpan<byte> propName_native_middle_name => new byte[] { 110, 97, 116, 105, 118, 101, 95, 109, 105, 100, 100, 108, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_native_middle_name = JsonEncodedText.Encode(propName_native_middle_name);
        private static ReadOnlySpan<byte> propName_native_last_name => new byte[] { 110, 97, 116, 105, 118, 101, 95, 108, 97, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_native_last_name = JsonEncodedText.Encode(propName_native_last_name);
        private static ReadOnlySpan<byte> propName_birthdate => new byte[] { 98, 105, 114, 116, 104, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_birthdate = JsonEncodedText.Encode(propName_birthdate);
        private static ReadOnlySpan<byte> propName_gender => new byte[] { 103, 101, 110, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_gender = JsonEncodedText.Encode(propName_gender);
        private static ReadOnlySpan<byte> propName_country_code => new byte[] { 99, 111, 117, 110, 116, 114, 121, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_country_code = JsonEncodedText.Encode(propName_country_code);
        private static ReadOnlySpan<byte> propName_residence_country_code => new byte[] { 114, 101, 115, 105, 100, 101, 110, 99, 101, 95, 99, 111, 117, 110, 116, 114, 121, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_residence_country_code = JsonEncodedText.Encode(propName_residence_country_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PersonalDetails)tlobj;
            writer.WriteString(encodedPropName_first_name, obj.FirstName);
            writer.WriteString(encodedPropName_middle_name, obj.MiddleName);
            writer.WriteString(encodedPropName_last_name, obj.LastName);
            writer.WriteString(encodedPropName_native_first_name, obj.NativeFirstName);
            writer.WriteString(encodedPropName_native_middle_name, obj.NativeMiddleName);
            writer.WriteString(encodedPropName_native_last_name, obj.NativeLastName);
            if (obj.Birthdate != null)
            {
                writer.WritePropertyName(encodedPropName_birthdate);
                writer.WriteTLObjectValue(obj.Birthdate);
            }
            writer.WriteString(encodedPropName_gender, obj.Gender);
            writer.WriteString(encodedPropName_country_code, obj.CountryCode);
            writer.WriteString(encodedPropName_residence_country_code, obj.ResidenceCountryCode);
        }
    }

    partial class IdentityDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 100, 101, 110, 116, 105, 116, 121, 68, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_number => new byte[] { 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_number = JsonEncodedText.Encode(propName_number);
        private static ReadOnlySpan<byte> propName_expiry_date => new byte[] { 101, 120, 112, 105, 114, 121, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_expiry_date = JsonEncodedText.Encode(propName_expiry_date);
        private static ReadOnlySpan<byte> propName_front_side => new byte[] { 102, 114, 111, 110, 116, 95, 115, 105, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_front_side = JsonEncodedText.Encode(propName_front_side);
        private static ReadOnlySpan<byte> propName_reverse_side => new byte[] { 114, 101, 118, 101, 114, 115, 101, 95, 115, 105, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_reverse_side = JsonEncodedText.Encode(propName_reverse_side);
        private static ReadOnlySpan<byte> propName_selfie => new byte[] { 115, 101, 108, 102, 105, 101 };
        private static readonly JsonEncodedText encodedPropName_selfie = JsonEncodedText.Encode(propName_selfie);
        private static ReadOnlySpan<byte> propName_translation => new byte[] { 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_translation = JsonEncodedText.Encode(propName_translation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (IdentityDocument)tlobj;
            writer.WriteString(encodedPropName_number, obj.Number);
            if (obj.ExpiryDate != null)
            {
                writer.WritePropertyName(encodedPropName_expiry_date);
                writer.WriteTLObjectValue(obj.ExpiryDate);
            }
            if (obj.FrontSide != null)
            {
                writer.WritePropertyName(encodedPropName_front_side);
                writer.WriteTLObjectValue(obj.FrontSide);
            }
            if (obj.ReverseSide != null)
            {
                writer.WritePropertyName(encodedPropName_reverse_side);
                writer.WriteTLObjectValue(obj.ReverseSide);
            }
            if (obj.Selfie != null)
            {
                writer.WritePropertyName(encodedPropName_selfie);
                writer.WriteTLObjectValue(obj.Selfie);
            }
            if (obj.Translation != null)
            {
                writer.WritePropertyName(encodedPropName_translation);
                writer.WriteArray(obj.Translation);
            }
        }
    }

    partial class InputIdentityDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 100, 101, 110, 116, 105, 116, 121, 68, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_number => new byte[] { 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_number = JsonEncodedText.Encode(propName_number);
        private static ReadOnlySpan<byte> propName_expiry_date => new byte[] { 101, 120, 112, 105, 114, 121, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_expiry_date = JsonEncodedText.Encode(propName_expiry_date);
        private static ReadOnlySpan<byte> propName_front_side => new byte[] { 102, 114, 111, 110, 116, 95, 115, 105, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_front_side = JsonEncodedText.Encode(propName_front_side);
        private static ReadOnlySpan<byte> propName_reverse_side => new byte[] { 114, 101, 118, 101, 114, 115, 101, 95, 115, 105, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_reverse_side = JsonEncodedText.Encode(propName_reverse_side);
        private static ReadOnlySpan<byte> propName_selfie => new byte[] { 115, 101, 108, 102, 105, 101 };
        private static readonly JsonEncodedText encodedPropName_selfie = JsonEncodedText.Encode(propName_selfie);
        private static ReadOnlySpan<byte> propName_translation => new byte[] { 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_translation = JsonEncodedText.Encode(propName_translation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputIdentityDocument)tlobj;
            writer.WriteString(encodedPropName_number, obj.Number);
            if (obj.ExpiryDate != null)
            {
                writer.WritePropertyName(encodedPropName_expiry_date);
                writer.WriteTLObjectValue(obj.ExpiryDate);
            }
            if (obj.FrontSide != null)
            {
                writer.WritePropertyName(encodedPropName_front_side);
                writer.WriteTLObjectValue(obj.FrontSide);
            }
            if (obj.ReverseSide != null)
            {
                writer.WritePropertyName(encodedPropName_reverse_side);
                writer.WriteTLObjectValue(obj.ReverseSide);
            }
            if (obj.Selfie != null)
            {
                writer.WritePropertyName(encodedPropName_selfie);
                writer.WriteTLObjectValue(obj.Selfie);
            }
            if (obj.Translation != null)
            {
                writer.WritePropertyName(encodedPropName_translation);
                writer.WriteArray(obj.Translation);
            }
        }
    }

    partial class PersonalDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 101, 114, 115, 111, 110, 97, 108, 68, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_files => new byte[] { 102, 105, 108, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_files = JsonEncodedText.Encode(propName_files);
        private static ReadOnlySpan<byte> propName_translation => new byte[] { 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_translation = JsonEncodedText.Encode(propName_translation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PersonalDocument)tlobj;
            if (obj.Files != null)
            {
                writer.WritePropertyName(encodedPropName_files);
                writer.WriteArray(obj.Files);
            }
            if (obj.Translation != null)
            {
                writer.WritePropertyName(encodedPropName_translation);
                writer.WriteArray(obj.Translation);
            }
        }
    }

    partial class InputPersonalDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 101, 114, 115, 111, 110, 97, 108, 68, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_files => new byte[] { 102, 105, 108, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_files = JsonEncodedText.Encode(propName_files);
        private static ReadOnlySpan<byte> propName_translation => new byte[] { 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_translation = JsonEncodedText.Encode(propName_translation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPersonalDocument)tlobj;
            if (obj.Files != null)
            {
                writer.WritePropertyName(encodedPropName_files);
                writer.WriteArray(obj.Files);
            }
            if (obj.Translation != null)
            {
                writer.WritePropertyName(encodedPropName_translation);
                writer.WriteArray(obj.Translation);
            }
        }
    }

    partial class PassportElementPersonalDetailsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 80, 101, 114, 115, 111, 110, 97, 108, 68, 101, 116, 97, 105, 108, 115 }));
        private static ReadOnlySpan<byte> propName_personal_details => new byte[] { 112, 101, 114, 115, 111, 110, 97, 108, 95, 100, 101, 116, 97, 105, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_personal_details = JsonEncodedText.Encode(propName_personal_details);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementPersonalDetails)tlobj;
            if (obj.PersonalDetails != null)
            {
                writer.WritePropertyName(encodedPropName_personal_details);
                writer.WriteTLObjectValue(obj.PersonalDetails);
            }
        }
    }

    partial class PassportElementPassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 80, 97, 115, 115, 112, 111, 114, 116 }));
        private static ReadOnlySpan<byte> propName_passport => new byte[] { 112, 97, 115, 115, 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_passport = JsonEncodedText.Encode(propName_passport);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementPassport)tlobj;
            if (obj.Passport != null)
            {
                writer.WritePropertyName(encodedPropName_passport);
                writer.WriteTLObjectValue(obj.Passport);
            }
        }
    }

    partial class PassportElementDriverLicenseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 68, 114, 105, 118, 101, 114, 76, 105, 99, 101, 110, 115, 101 }));
        private static ReadOnlySpan<byte> propName_driver_license => new byte[] { 100, 114, 105, 118, 101, 114, 95, 108, 105, 99, 101, 110, 115, 101 };
        private static readonly JsonEncodedText encodedPropName_driver_license = JsonEncodedText.Encode(propName_driver_license);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementDriverLicense)tlobj;
            if (obj.DriverLicense != null)
            {
                writer.WritePropertyName(encodedPropName_driver_license);
                writer.WriteTLObjectValue(obj.DriverLicense);
            }
        }
    }

    partial class PassportElementIdentityCardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 73, 100, 101, 110, 116, 105, 116, 121, 67, 97, 114, 100 }));
        private static ReadOnlySpan<byte> propName_identity_card => new byte[] { 105, 100, 101, 110, 116, 105, 116, 121, 95, 99, 97, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_identity_card = JsonEncodedText.Encode(propName_identity_card);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementIdentityCard)tlobj;
            if (obj.IdentityCard != null)
            {
                writer.WritePropertyName(encodedPropName_identity_card);
                writer.WriteTLObjectValue(obj.IdentityCard);
            }
        }
    }

    partial class PassportElementInternalPassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 73, 110, 116, 101, 114, 110, 97, 108, 80, 97, 115, 115, 112, 111, 114, 116 }));
        private static ReadOnlySpan<byte> propName_internal_passport => new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 95, 112, 97, 115, 115, 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_internal_passport = JsonEncodedText.Encode(propName_internal_passport);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementInternalPassport)tlobj;
            if (obj.InternalPassport != null)
            {
                writer.WritePropertyName(encodedPropName_internal_passport);
                writer.WriteTLObjectValue(obj.InternalPassport);
            }
        }
    }

    partial class PassportElementAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 65, 100, 100, 114, 101, 115, 115 }));
        private static ReadOnlySpan<byte> propName_address => new byte[] { 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_address = JsonEncodedText.Encode(propName_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementAddress)tlobj;
            if (obj.Address != null)
            {
                writer.WritePropertyName(encodedPropName_address);
                writer.WriteTLObjectValue(obj.Address);
            }
        }
    }

    partial class PassportElementUtilityBillConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 85, 116, 105, 108, 105, 116, 121, 66, 105, 108, 108 }));
        private static ReadOnlySpan<byte> propName_utility_bill => new byte[] { 117, 116, 105, 108, 105, 116, 121, 95, 98, 105, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_utility_bill = JsonEncodedText.Encode(propName_utility_bill);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementUtilityBill)tlobj;
            if (obj.UtilityBill != null)
            {
                writer.WritePropertyName(encodedPropName_utility_bill);
                writer.WriteTLObjectValue(obj.UtilityBill);
            }
        }
    }

    partial class PassportElementBankStatementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 66, 97, 110, 107, 83, 116, 97, 116, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_bank_statement => new byte[] { 98, 97, 110, 107, 95, 115, 116, 97, 116, 101, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_bank_statement = JsonEncodedText.Encode(propName_bank_statement);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementBankStatement)tlobj;
            if (obj.BankStatement != null)
            {
                writer.WritePropertyName(encodedPropName_bank_statement);
                writer.WriteTLObjectValue(obj.BankStatement);
            }
        }
    }

    partial class PassportElementRentalAgreementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 82, 101, 110, 116, 97, 108, 65, 103, 114, 101, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_rental_agreement => new byte[] { 114, 101, 110, 116, 97, 108, 95, 97, 103, 114, 101, 101, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_rental_agreement = JsonEncodedText.Encode(propName_rental_agreement);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementRentalAgreement)tlobj;
            if (obj.RentalAgreement != null)
            {
                writer.WritePropertyName(encodedPropName_rental_agreement);
                writer.WriteTLObjectValue(obj.RentalAgreement);
            }
        }
    }

    partial class PassportElementPassportRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 80, 97, 115, 115, 112, 111, 114, 116, 82, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_passport_registration => new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 95, 114, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_passport_registration = JsonEncodedText.Encode(propName_passport_registration);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementPassportRegistration)tlobj;
            if (obj.PassportRegistration != null)
            {
                writer.WritePropertyName(encodedPropName_passport_registration);
                writer.WriteTLObjectValue(obj.PassportRegistration);
            }
        }
    }

    partial class PassportElementTemporaryRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 101, 109, 112, 111, 114, 97, 114, 121, 82, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_temporary_registration => new byte[] { 116, 101, 109, 112, 111, 114, 97, 114, 121, 95, 114, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_temporary_registration = JsonEncodedText.Encode(propName_temporary_registration);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementTemporaryRegistration)tlobj;
            if (obj.TemporaryRegistration != null)
            {
                writer.WritePropertyName(encodedPropName_temporary_registration);
                writer.WriteTLObjectValue(obj.TemporaryRegistration);
            }
        }
    }

    partial class PassportElementPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementPhoneNumber)tlobj;
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
        }
    }

    partial class PassportElementEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115 }));
        private static ReadOnlySpan<byte> propName_email_address => new byte[] { 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_email_address = JsonEncodedText.Encode(propName_email_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementEmailAddress)tlobj;
            writer.WriteString(encodedPropName_email_address, obj.EmailAddress);
        }
    }

    partial class InputPassportElementPersonalDetailsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 80, 101, 114, 115, 111, 110, 97, 108, 68, 101, 116, 97, 105, 108, 115 }));
        private static ReadOnlySpan<byte> propName_personal_details => new byte[] { 112, 101, 114, 115, 111, 110, 97, 108, 95, 100, 101, 116, 97, 105, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_personal_details = JsonEncodedText.Encode(propName_personal_details);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementPersonalDetails)tlobj;
            if (obj.PersonalDetails != null)
            {
                writer.WritePropertyName(encodedPropName_personal_details);
                writer.WriteTLObjectValue(obj.PersonalDetails);
            }
        }
    }

    partial class InputPassportElementPassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 80, 97, 115, 115, 112, 111, 114, 116 }));
        private static ReadOnlySpan<byte> propName_passport => new byte[] { 112, 97, 115, 115, 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_passport = JsonEncodedText.Encode(propName_passport);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementPassport)tlobj;
            if (obj.Passport != null)
            {
                writer.WritePropertyName(encodedPropName_passport);
                writer.WriteTLObjectValue(obj.Passport);
            }
        }
    }

    partial class InputPassportElementDriverLicenseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 68, 114, 105, 118, 101, 114, 76, 105, 99, 101, 110, 115, 101 }));
        private static ReadOnlySpan<byte> propName_driver_license => new byte[] { 100, 114, 105, 118, 101, 114, 95, 108, 105, 99, 101, 110, 115, 101 };
        private static readonly JsonEncodedText encodedPropName_driver_license = JsonEncodedText.Encode(propName_driver_license);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementDriverLicense)tlobj;
            if (obj.DriverLicense != null)
            {
                writer.WritePropertyName(encodedPropName_driver_license);
                writer.WriteTLObjectValue(obj.DriverLicense);
            }
        }
    }

    partial class InputPassportElementIdentityCardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 73, 100, 101, 110, 116, 105, 116, 121, 67, 97, 114, 100 }));
        private static ReadOnlySpan<byte> propName_identity_card => new byte[] { 105, 100, 101, 110, 116, 105, 116, 121, 95, 99, 97, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_identity_card = JsonEncodedText.Encode(propName_identity_card);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementIdentityCard)tlobj;
            if (obj.IdentityCard != null)
            {
                writer.WritePropertyName(encodedPropName_identity_card);
                writer.WriteTLObjectValue(obj.IdentityCard);
            }
        }
    }

    partial class InputPassportElementInternalPassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 73, 110, 116, 101, 114, 110, 97, 108, 80, 97, 115, 115, 112, 111, 114, 116 }));
        private static ReadOnlySpan<byte> propName_internal_passport => new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 95, 112, 97, 115, 115, 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_internal_passport = JsonEncodedText.Encode(propName_internal_passport);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementInternalPassport)tlobj;
            if (obj.InternalPassport != null)
            {
                writer.WritePropertyName(encodedPropName_internal_passport);
                writer.WriteTLObjectValue(obj.InternalPassport);
            }
        }
    }

    partial class InputPassportElementAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 65, 100, 100, 114, 101, 115, 115 }));
        private static ReadOnlySpan<byte> propName_address => new byte[] { 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_address = JsonEncodedText.Encode(propName_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementAddress)tlobj;
            if (obj.Address != null)
            {
                writer.WritePropertyName(encodedPropName_address);
                writer.WriteTLObjectValue(obj.Address);
            }
        }
    }

    partial class InputPassportElementUtilityBillConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 85, 116, 105, 108, 105, 116, 121, 66, 105, 108, 108 }));
        private static ReadOnlySpan<byte> propName_utility_bill => new byte[] { 117, 116, 105, 108, 105, 116, 121, 95, 98, 105, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_utility_bill = JsonEncodedText.Encode(propName_utility_bill);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementUtilityBill)tlobj;
            if (obj.UtilityBill != null)
            {
                writer.WritePropertyName(encodedPropName_utility_bill);
                writer.WriteTLObjectValue(obj.UtilityBill);
            }
        }
    }

    partial class InputPassportElementBankStatementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 66, 97, 110, 107, 83, 116, 97, 116, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_bank_statement => new byte[] { 98, 97, 110, 107, 95, 115, 116, 97, 116, 101, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_bank_statement = JsonEncodedText.Encode(propName_bank_statement);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementBankStatement)tlobj;
            if (obj.BankStatement != null)
            {
                writer.WritePropertyName(encodedPropName_bank_statement);
                writer.WriteTLObjectValue(obj.BankStatement);
            }
        }
    }

    partial class InputPassportElementRentalAgreementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 82, 101, 110, 116, 97, 108, 65, 103, 114, 101, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_rental_agreement => new byte[] { 114, 101, 110, 116, 97, 108, 95, 97, 103, 114, 101, 101, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_rental_agreement = JsonEncodedText.Encode(propName_rental_agreement);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementRentalAgreement)tlobj;
            if (obj.RentalAgreement != null)
            {
                writer.WritePropertyName(encodedPropName_rental_agreement);
                writer.WriteTLObjectValue(obj.RentalAgreement);
            }
        }
    }

    partial class InputPassportElementPassportRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 80, 97, 115, 115, 112, 111, 114, 116, 82, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_passport_registration => new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 95, 114, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_passport_registration = JsonEncodedText.Encode(propName_passport_registration);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementPassportRegistration)tlobj;
            if (obj.PassportRegistration != null)
            {
                writer.WritePropertyName(encodedPropName_passport_registration);
                writer.WriteTLObjectValue(obj.PassportRegistration);
            }
        }
    }

    partial class InputPassportElementTemporaryRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 84, 101, 109, 112, 111, 114, 97, 114, 121, 82, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_temporary_registration => new byte[] { 116, 101, 109, 112, 111, 114, 97, 114, 121, 95, 114, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_temporary_registration = JsonEncodedText.Encode(propName_temporary_registration);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementTemporaryRegistration)tlobj;
            if (obj.TemporaryRegistration != null)
            {
                writer.WritePropertyName(encodedPropName_temporary_registration);
                writer.WriteTLObjectValue(obj.TemporaryRegistration);
            }
        }
    }

    partial class InputPassportElementPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementPhoneNumber)tlobj;
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
        }
    }

    partial class InputPassportElementEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115 }));
        private static ReadOnlySpan<byte> propName_email_address => new byte[] { 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_email_address = JsonEncodedText.Encode(propName_email_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementEmailAddress)tlobj;
            writer.WriteString(encodedPropName_email_address, obj.EmailAddress);
        }
    }

    partial class PassportElementsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_elements => new byte[] { 101, 108, 101, 109, 101, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_elements = JsonEncodedText.Encode(propName_elements);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElements)tlobj;
            if (obj.Elements != null)
            {
                writer.WritePropertyName(encodedPropName_elements);
                writer.WriteArray(obj.Elements);
            }
        }
    }

    partial class PassportElementErrorSourceUnspecifiedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 85, 110, 115, 112, 101, 99, 105, 102, 105, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorSourceDataFieldConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 68, 97, 116, 97, 70, 105, 101, 108, 100 }));
        private static ReadOnlySpan<byte> propName_field_name => new byte[] { 102, 105, 101, 108, 100, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_field_name = JsonEncodedText.Encode(propName_field_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementErrorSourceDataField)tlobj;
            writer.WriteString(encodedPropName_field_name, obj.FieldName);
        }
    }

    partial class PassportElementErrorSourceFrontSideConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 70, 114, 111, 110, 116, 83, 105, 100, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorSourceReverseSideConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 82, 101, 118, 101, 114, 115, 101, 83, 105, 100, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorSourceSelfieConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 83, 101, 108, 102, 105, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorSourceTranslationFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file_index => new byte[] { 102, 105, 108, 101, 95, 105, 110, 100, 101, 120 };
        private static readonly JsonEncodedText encodedPropName_file_index = JsonEncodedText.Encode(propName_file_index);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementErrorSourceTranslationFile)tlobj;
            writer.WriteNumber(encodedPropName_file_index, obj.FileIndex);
        }
    }

    partial class PassportElementErrorSourceTranslationFilesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 70, 105, 108, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorSourceFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file_index => new byte[] { 102, 105, 108, 101, 95, 105, 110, 100, 101, 120 };
        private static readonly JsonEncodedText encodedPropName_file_index = JsonEncodedText.Encode(propName_file_index);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementErrorSourceFile)tlobj;
            writer.WriteNumber(encodedPropName_file_index, obj.FileIndex);
        }
    }

    partial class PassportElementErrorSourceFilesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        private static ReadOnlySpan<byte> propName_source => new byte[] { 115, 111, 117, 114, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_source = JsonEncodedText.Encode(propName_source);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementError)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(encodedPropName_message, obj.Message);
            if (obj.Source != null)
            {
                writer.WritePropertyName(encodedPropName_source);
                writer.WriteTLObjectValue(obj.Source);
            }
        }
    }

    partial class PassportSuitableElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 83, 117, 105, 116, 97, 98, 108, 101, 69, 108, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_is_selfie_required => new byte[] { 105, 115, 95, 115, 101, 108, 102, 105, 101, 95, 114, 101, 113, 117, 105, 114, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_selfie_required = JsonEncodedText.Encode(propName_is_selfie_required);
        private static ReadOnlySpan<byte> propName_is_translation_required => new byte[] { 105, 115, 95, 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 95, 114, 101, 113, 117, 105, 114, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_translation_required = JsonEncodedText.Encode(propName_is_translation_required);
        private static ReadOnlySpan<byte> propName_is_native_name_required => new byte[] { 105, 115, 95, 110, 97, 116, 105, 118, 101, 95, 110, 97, 109, 101, 95, 114, 101, 113, 117, 105, 114, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_native_name_required = JsonEncodedText.Encode(propName_is_native_name_required);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportSuitableElement)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteBoolean(encodedPropName_is_selfie_required, obj.IsSelfieRequired);
            writer.WriteBoolean(encodedPropName_is_translation_required, obj.IsTranslationRequired);
            writer.WriteBoolean(encodedPropName_is_native_name_required, obj.IsNativeNameRequired);
        }
    }

    partial class PassportRequiredElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 82, 101, 113, 117, 105, 114, 101, 100, 69, 108, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_suitable_elements => new byte[] { 115, 117, 105, 116, 97, 98, 108, 101, 95, 101, 108, 101, 109, 101, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_suitable_elements = JsonEncodedText.Encode(propName_suitable_elements);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportRequiredElement)tlobj;
            if (obj.SuitableElements != null)
            {
                writer.WritePropertyName(encodedPropName_suitable_elements);
                writer.WriteArray(obj.SuitableElements);
            }
        }
    }

    partial class PassportAuthorizationFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 65, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 70, 111, 114, 109 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_required_elements => new byte[] { 114, 101, 113, 117, 105, 114, 101, 100, 95, 101, 108, 101, 109, 101, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_required_elements = JsonEncodedText.Encode(propName_required_elements);
        private static ReadOnlySpan<byte> propName_privacy_policy_url => new byte[] { 112, 114, 105, 118, 97, 99, 121, 95, 112, 111, 108, 105, 99, 121, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_privacy_policy_url = JsonEncodedText.Encode(propName_privacy_policy_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportAuthorizationForm)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            if (obj.RequiredElements != null)
            {
                writer.WritePropertyName(encodedPropName_required_elements);
                writer.WriteArray(obj.RequiredElements);
            }
            writer.WriteString(encodedPropName_privacy_policy_url, obj.PrivacyPolicyUrl);
        }
    }

    partial class PassportElementsWithErrorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 115, 87, 105, 116, 104, 69, 114, 114, 111, 114, 115 }));
        private static ReadOnlySpan<byte> propName_elements => new byte[] { 101, 108, 101, 109, 101, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_elements = JsonEncodedText.Encode(propName_elements);
        private static ReadOnlySpan<byte> propName_errors => new byte[] { 101, 114, 114, 111, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_errors = JsonEncodedText.Encode(propName_errors);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementsWithErrors)tlobj;
            if (obj.Elements != null)
            {
                writer.WritePropertyName(encodedPropName_elements);
                writer.WriteArray(obj.Elements);
            }
            if (obj.Errors != null)
            {
                writer.WritePropertyName(encodedPropName_errors);
                writer.WriteArray(obj.Errors);
            }
        }
    }

    partial class EncryptedCredentialsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 110, 99, 114, 121, 112, 116, 101, 100, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115 }));
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        private static ReadOnlySpan<byte> propName_hash => new byte[] { 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_hash = JsonEncodedText.Encode(propName_hash);
        private static ReadOnlySpan<byte> propName_secret => new byte[] { 115, 101, 99, 114, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_secret = JsonEncodedText.Encode(propName_secret);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EncryptedCredentials)tlobj;
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
            if (!obj.Hash.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_hash, obj.Hash.Span);
            }
            if (!obj.Secret.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_secret, obj.Secret.Span);
            }
        }
    }

    partial class EncryptedPassportElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 110, 99, 114, 121, 112, 116, 101, 100, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        private static ReadOnlySpan<byte> propName_front_side => new byte[] { 102, 114, 111, 110, 116, 95, 115, 105, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_front_side = JsonEncodedText.Encode(propName_front_side);
        private static ReadOnlySpan<byte> propName_reverse_side => new byte[] { 114, 101, 118, 101, 114, 115, 101, 95, 115, 105, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_reverse_side = JsonEncodedText.Encode(propName_reverse_side);
        private static ReadOnlySpan<byte> propName_selfie => new byte[] { 115, 101, 108, 102, 105, 101 };
        private static readonly JsonEncodedText encodedPropName_selfie = JsonEncodedText.Encode(propName_selfie);
        private static ReadOnlySpan<byte> propName_translation => new byte[] { 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_translation = JsonEncodedText.Encode(propName_translation);
        private static ReadOnlySpan<byte> propName_files => new byte[] { 102, 105, 108, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_files = JsonEncodedText.Encode(propName_files);
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        private static ReadOnlySpan<byte> propName_hash => new byte[] { 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_hash = JsonEncodedText.Encode(propName_hash);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EncryptedPassportElement)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
            if (obj.FrontSide != null)
            {
                writer.WritePropertyName(encodedPropName_front_side);
                writer.WriteTLObjectValue(obj.FrontSide);
            }
            if (obj.ReverseSide != null)
            {
                writer.WritePropertyName(encodedPropName_reverse_side);
                writer.WriteTLObjectValue(obj.ReverseSide);
            }
            if (obj.Selfie != null)
            {
                writer.WritePropertyName(encodedPropName_selfie);
                writer.WriteTLObjectValue(obj.Selfie);
            }
            if (obj.Translation != null)
            {
                writer.WritePropertyName(encodedPropName_translation);
                writer.WriteArray(obj.Translation);
            }
            if (obj.Files != null)
            {
                writer.WritePropertyName(encodedPropName_files);
                writer.WriteArray(obj.Files);
            }
            writer.WriteString(encodedPropName_value, obj.Value);
            writer.WriteString(encodedPropName_hash, obj.Hash);
        }
    }

    partial class InputPassportElementErrorSourceUnspecifiedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 85, 110, 115, 112, 101, 99, 105, 102, 105, 101, 100 }));
        private static ReadOnlySpan<byte> propName_element_hash => new byte[] { 101, 108, 101, 109, 101, 110, 116, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_element_hash = JsonEncodedText.Encode(propName_element_hash);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceUnspecified)tlobj;
            if (!obj.ElementHash.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_element_hash, obj.ElementHash.Span);
            }
        }
    }

    partial class InputPassportElementErrorSourceDataFieldConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 68, 97, 116, 97, 70, 105, 101, 108, 100 }));
        private static ReadOnlySpan<byte> propName_field_name => new byte[] { 102, 105, 101, 108, 100, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_field_name = JsonEncodedText.Encode(propName_field_name);
        private static ReadOnlySpan<byte> propName_data_hash => new byte[] { 100, 97, 116, 97, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_data_hash = JsonEncodedText.Encode(propName_data_hash);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceDataField)tlobj;
            writer.WriteString(encodedPropName_field_name, obj.FieldName);
            if (!obj.DataHash.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data_hash, obj.DataHash.Span);
            }
        }
    }

    partial class InputPassportElementErrorSourceFrontSideConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 70, 114, 111, 110, 116, 83, 105, 100, 101 }));
        private static ReadOnlySpan<byte> propName_file_hash => new byte[] { 102, 105, 108, 101, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_file_hash = JsonEncodedText.Encode(propName_file_hash);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceFrontSide)tlobj;
            if (!obj.FileHash.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_file_hash, obj.FileHash.Span);
            }
        }
    }

    partial class InputPassportElementErrorSourceReverseSideConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 82, 101, 118, 101, 114, 115, 101, 83, 105, 100, 101 }));
        private static ReadOnlySpan<byte> propName_file_hash => new byte[] { 102, 105, 108, 101, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_file_hash = JsonEncodedText.Encode(propName_file_hash);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceReverseSide)tlobj;
            if (!obj.FileHash.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_file_hash, obj.FileHash.Span);
            }
        }
    }

    partial class InputPassportElementErrorSourceSelfieConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 83, 101, 108, 102, 105, 101 }));
        private static ReadOnlySpan<byte> propName_file_hash => new byte[] { 102, 105, 108, 101, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_file_hash = JsonEncodedText.Encode(propName_file_hash);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceSelfie)tlobj;
            if (!obj.FileHash.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_file_hash, obj.FileHash.Span);
            }
        }
    }

    partial class InputPassportElementErrorSourceTranslationFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file_hash => new byte[] { 102, 105, 108, 101, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_file_hash = JsonEncodedText.Encode(propName_file_hash);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceTranslationFile)tlobj;
            if (!obj.FileHash.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_file_hash, obj.FileHash.Span);
            }
        }
    }

    partial class InputPassportElementErrorSourceTranslationFilesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 70, 105, 108, 101, 115 }));
        private static ReadOnlySpan<byte> propName_file_hashes => new byte[] { 102, 105, 108, 101, 95, 104, 97, 115, 104, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_file_hashes = JsonEncodedText.Encode(propName_file_hashes);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceTranslationFiles)tlobj;
            if (obj.FileHashes != null)
            {
                writer.WritePropertyName(encodedPropName_file_hashes);
                writer.WriteArray(obj.FileHashes);
            }
        }
    }

    partial class InputPassportElementErrorSourceFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file_hash => new byte[] { 102, 105, 108, 101, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_file_hash = JsonEncodedText.Encode(propName_file_hash);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceFile)tlobj;
            if (!obj.FileHash.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_file_hash, obj.FileHash.Span);
            }
        }
    }

    partial class InputPassportElementErrorSourceFilesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 115 }));
        private static ReadOnlySpan<byte> propName_file_hashes => new byte[] { 102, 105, 108, 101, 95, 104, 97, 115, 104, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_file_hashes = JsonEncodedText.Encode(propName_file_hashes);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceFiles)tlobj;
            if (obj.FileHashes != null)
            {
                writer.WritePropertyName(encodedPropName_file_hashes);
                writer.WriteArray(obj.FileHashes);
            }
        }
    }

    partial class InputPassportElementErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        private static ReadOnlySpan<byte> propName_source => new byte[] { 115, 111, 117, 114, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_source = JsonEncodedText.Encode(propName_source);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementError)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(encodedPropName_message, obj.Message);
            if (obj.Source != null)
            {
                writer.WritePropertyName(encodedPropName_source);
                writer.WriteTLObjectValue(obj.Source);
            }
        }
    }

    partial class MessageTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 84, 101, 120, 116 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_web_page => new byte[] { 119, 101, 98, 95, 112, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_web_page = JsonEncodedText.Encode(propName_web_page);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageText)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            if (obj.WebPage != null)
            {
                writer.WritePropertyName(encodedPropName_web_page);
                writer.WriteTLObjectValue(obj.WebPage);
            }
        }
    }

    partial class MessageAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_is_secret => new byte[] { 105, 115, 95, 115, 101, 99, 114, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_is_secret = JsonEncodedText.Encode(propName_is_secret);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(encodedPropName_is_secret, obj.IsSecret);
        }
    }

    partial class MessageAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 65, 117, 100, 105, 111 }));
        private static ReadOnlySpan<byte> propName_audio => new byte[] { 97, 117, 100, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_audio = JsonEncodedText.Encode(propName_audio);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageAudio)tlobj;
            if (obj.Audio != null)
            {
                writer.WritePropertyName(encodedPropName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class MessageDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 68, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_document => new byte[] { 100, 111, 99, 117, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_document = JsonEncodedText.Encode(propName_document);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageDocument)tlobj;
            if (obj.Document != null)
            {
                writer.WritePropertyName(encodedPropName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class MessagePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_is_secret => new byte[] { 105, 115, 95, 115, 101, 99, 114, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_is_secret = JsonEncodedText.Encode(propName_is_secret);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(encodedPropName_is_secret, obj.IsSecret);
        }
    }

    partial class MessageExpiredPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 69, 120, 112, 105, 114, 101, 100, 80, 104, 111, 116, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 116, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSticker)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class MessageVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 86, 105, 100, 101, 111 }));
        private static ReadOnlySpan<byte> propName_video => new byte[] { 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_video = JsonEncodedText.Encode(propName_video);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_is_secret => new byte[] { 105, 115, 95, 115, 101, 99, 114, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_is_secret = JsonEncodedText.Encode(propName_is_secret);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVideo)tlobj;
            if (obj.Video != null)
            {
                writer.WritePropertyName(encodedPropName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(encodedPropName_is_secret, obj.IsSecret);
        }
    }

    partial class MessageExpiredVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 69, 120, 112, 105, 114, 101, 100, 86, 105, 100, 101, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 86, 105, 100, 101, 111, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_video_note => new byte[] { 118, 105, 100, 101, 111, 95, 110, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_video_note = JsonEncodedText.Encode(propName_video_note);
        private static ReadOnlySpan<byte> propName_is_viewed => new byte[] { 105, 115, 95, 118, 105, 101, 119, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_viewed = JsonEncodedText.Encode(propName_is_viewed);
        private static ReadOnlySpan<byte> propName_is_secret => new byte[] { 105, 115, 95, 115, 101, 99, 114, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_is_secret = JsonEncodedText.Encode(propName_is_secret);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVideoNote)tlobj;
            if (obj.VideoNote != null)
            {
                writer.WritePropertyName(encodedPropName_video_note);
                writer.WriteTLObjectValue(obj.VideoNote);
            }
            writer.WriteBoolean(encodedPropName_is_viewed, obj.IsViewed);
            writer.WriteBoolean(encodedPropName_is_secret, obj.IsSecret);
        }
    }

    partial class MessageVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 86, 111, 105, 99, 101, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_voice_note => new byte[] { 118, 111, 105, 99, 101, 95, 110, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_voice_note = JsonEncodedText.Encode(propName_voice_note);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_is_listened => new byte[] { 105, 115, 95, 108, 105, 115, 116, 101, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_listened = JsonEncodedText.Encode(propName_is_listened);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVoiceNote)tlobj;
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(encodedPropName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(encodedPropName_is_listened, obj.IsListened);
        }
    }

    partial class MessageLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 76, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_live_period => new byte[] { 108, 105, 118, 101, 95, 112, 101, 114, 105, 111, 100 };
        private static readonly JsonEncodedText encodedPropName_live_period = JsonEncodedText.Encode(propName_live_period);
        private static ReadOnlySpan<byte> propName_expires_in => new byte[] { 101, 120, 112, 105, 114, 101, 115, 95, 105, 110 };
        private static readonly JsonEncodedText encodedPropName_expires_in = JsonEncodedText.Encode(propName_expires_in);
        private static ReadOnlySpan<byte> propName_heading => new byte[] { 104, 101, 97, 100, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_heading = JsonEncodedText.Encode(propName_heading);
        private static ReadOnlySpan<byte> propName_proximity_alert_radius => new byte[] { 112, 114, 111, 120, 105, 109, 105, 116, 121, 95, 97, 108, 101, 114, 116, 95, 114, 97, 100, 105, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_proximity_alert_radius = JsonEncodedText.Encode(propName_proximity_alert_radius);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageLocation)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(encodedPropName_live_period, obj.LivePeriod);
            writer.WriteNumber(encodedPropName_expires_in, obj.ExpiresIn);
            writer.WriteNumber(encodedPropName_heading, obj.Heading);
            writer.WriteNumber(encodedPropName_proximity_alert_radius, obj.ProximityAlertRadius);
        }
    }

    partial class MessageVenueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 86, 101, 110, 117, 101 }));
        private static ReadOnlySpan<byte> propName_venue => new byte[] { 118, 101, 110, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_venue = JsonEncodedText.Encode(propName_venue);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVenue)tlobj;
            if (obj.Venue != null)
            {
                writer.WritePropertyName(encodedPropName_venue);
                writer.WriteTLObjectValue(obj.Venue);
            }
        }
    }

    partial class MessageContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 97, 99, 116 }));
        private static ReadOnlySpan<byte> propName_contact => new byte[] { 99, 111, 110, 116, 97, 99, 116 };
        private static readonly JsonEncodedText encodedPropName_contact = JsonEncodedText.Encode(propName_contact);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageContact)tlobj;
            if (obj.Contact != null)
            {
                writer.WritePropertyName(encodedPropName_contact);
                writer.WriteTLObjectValue(obj.Contact);
            }
        }
    }

    partial class MessageAnimatedEmojiConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 65, 110, 105, 109, 97, 116, 101, 100, 69, 109, 111, 106, 105 }));
        private static ReadOnlySpan<byte> propName_animated_emoji => new byte[] { 97, 110, 105, 109, 97, 116, 101, 100, 95, 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_animated_emoji = JsonEncodedText.Encode(propName_animated_emoji);
        private static ReadOnlySpan<byte> propName_emoji => new byte[] { 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_emoji = JsonEncodedText.Encode(propName_emoji);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageAnimatedEmoji)tlobj;
            if (obj.AnimatedEmoji != null)
            {
                writer.WritePropertyName(encodedPropName_animated_emoji);
                writer.WriteTLObjectValue(obj.AnimatedEmoji);
            }
            writer.WriteString(encodedPropName_emoji, obj.Emoji);
        }
    }

    partial class MessageDiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 68, 105, 99, 101 }));
        private static ReadOnlySpan<byte> propName_initial_state => new byte[] { 105, 110, 105, 116, 105, 97, 108, 95, 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_initial_state = JsonEncodedText.Encode(propName_initial_state);
        private static ReadOnlySpan<byte> propName_final_state => new byte[] { 102, 105, 110, 97, 108, 95, 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_final_state = JsonEncodedText.Encode(propName_final_state);
        private static ReadOnlySpan<byte> propName_emoji => new byte[] { 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_emoji = JsonEncodedText.Encode(propName_emoji);
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        private static ReadOnlySpan<byte> propName_success_animation_frame_number => new byte[] { 115, 117, 99, 99, 101, 115, 115, 95, 97, 110, 105, 109, 97, 116, 105, 111, 110, 95, 102, 114, 97, 109, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_success_animation_frame_number = JsonEncodedText.Encode(propName_success_animation_frame_number);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageDice)tlobj;
            if (obj.InitialState != null)
            {
                writer.WritePropertyName(encodedPropName_initial_state);
                writer.WriteTLObjectValue(obj.InitialState);
            }
            if (obj.FinalState != null)
            {
                writer.WritePropertyName(encodedPropName_final_state);
                writer.WriteTLObjectValue(obj.FinalState);
            }
            writer.WriteString(encodedPropName_emoji, obj.Emoji);
            writer.WriteNumber(encodedPropName_value, obj.Value);
            writer.WriteNumber(encodedPropName_success_animation_frame_number, obj.SuccessAnimationFrameNumber);
        }
    }

    partial class MessageGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 71, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_game => new byte[] { 103, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_game = JsonEncodedText.Encode(propName_game);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageGame)tlobj;
            if (obj.Game != null)
            {
                writer.WritePropertyName(encodedPropName_game);
                writer.WriteTLObjectValue(obj.Game);
            }
        }
    }

    partial class MessagePollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 80, 111, 108, 108 }));
        private static ReadOnlySpan<byte> propName_poll => new byte[] { 112, 111, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_poll = JsonEncodedText.Encode(propName_poll);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePoll)tlobj;
            if (obj.Poll != null)
            {
                writer.WritePropertyName(encodedPropName_poll);
                writer.WriteTLObjectValue(obj.Poll);
            }
        }
    }

    partial class MessageInvoiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 73, 110, 118, 111, 105, 99, 101 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_currency => new byte[] { 99, 117, 114, 114, 101, 110, 99, 121 };
        private static readonly JsonEncodedText encodedPropName_currency = JsonEncodedText.Encode(propName_currency);
        private static ReadOnlySpan<byte> propName_total_amount => new byte[] { 116, 111, 116, 97, 108, 95, 97, 109, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_amount = JsonEncodedText.Encode(propName_total_amount);
        private static ReadOnlySpan<byte> propName_start_parameter => new byte[] { 115, 116, 97, 114, 116, 95, 112, 97, 114, 97, 109, 101, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_start_parameter = JsonEncodedText.Encode(propName_start_parameter);
        private static ReadOnlySpan<byte> propName_is_test => new byte[] { 105, 115, 95, 116, 101, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_is_test = JsonEncodedText.Encode(propName_is_test);
        private static ReadOnlySpan<byte> propName_need_shipping_address => new byte[] { 110, 101, 101, 100, 95, 115, 104, 105, 112, 112, 105, 110, 103, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_need_shipping_address = JsonEncodedText.Encode(propName_need_shipping_address);
        private static ReadOnlySpan<byte> propName_receipt_message_id => new byte[] { 114, 101, 99, 101, 105, 112, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_receipt_message_id = JsonEncodedText.Encode(propName_receipt_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageInvoice)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(encodedPropName_currency, obj.Currency);
            writer.WriteNumber(encodedPropName_total_amount, obj.TotalAmount);
            writer.WriteString(encodedPropName_start_parameter, obj.StartParameter);
            writer.WriteBoolean(encodedPropName_is_test, obj.IsTest);
            writer.WriteBoolean(encodedPropName_need_shipping_address, obj.NeedShippingAddress);
            writer.WriteNumber(encodedPropName_receipt_message_id, obj.ReceiptMessageId);
        }
    }

    partial class MessageCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_is_video => new byte[] { 105, 115, 95, 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_is_video = JsonEncodedText.Encode(propName_is_video);
        private static ReadOnlySpan<byte> propName_discard_reason => new byte[] { 100, 105, 115, 99, 97, 114, 100, 95, 114, 101, 97, 115, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_discard_reason = JsonEncodedText.Encode(propName_discard_reason);
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageCall)tlobj;
            writer.WriteBoolean(encodedPropName_is_video, obj.IsVideo);
            if (obj.DiscardReason != null)
            {
                writer.WritePropertyName(encodedPropName_discard_reason);
                writer.WriteTLObjectValue(obj.DiscardReason);
            }
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
        }
    }

    partial class MessageVideoChatScheduledConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 86, 105, 100, 101, 111, 67, 104, 97, 116, 83, 99, 104, 101, 100, 117, 108, 101, 100 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_start_date => new byte[] { 115, 116, 97, 114, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_start_date = JsonEncodedText.Encode(propName_start_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVideoChatScheduled)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteNumber(encodedPropName_start_date, obj.StartDate);
        }
    }

    partial class MessageVideoChatStartedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 86, 105, 100, 101, 111, 67, 104, 97, 116, 83, 116, 97, 114, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVideoChatStarted)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
        }
    }

    partial class MessageVideoChatEndedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 86, 105, 100, 101, 111, 67, 104, 97, 116, 69, 110, 100, 101, 100 }));
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVideoChatEnded)tlobj;
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
        }
    }

    partial class MessageInviteVideoChatParticipantsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 73, 110, 118, 105, 116, 101, 86, 105, 100, 101, 111, 67, 104, 97, 116, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageInviteVideoChatParticipants)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class MessageBasicGroupChatCreateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 66, 97, 115, 105, 99, 71, 114, 111, 117, 112, 67, 104, 97, 116, 67, 114, 101, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_member_user_ids => new byte[] { 109, 101, 109, 98, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_member_user_ids = JsonEncodedText.Encode(propName_member_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageBasicGroupChatCreate)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
            if (obj.MemberUserIds != null)
            {
                writer.WritePropertyName(encodedPropName_member_user_ids);
                writer.WriteArray(obj.MemberUserIds);
            }
        }
    }

    partial class MessageSupergroupChatCreateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 67, 104, 97, 116, 67, 114, 101, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSupergroupChatCreate)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class MessageChatChangeTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 67, 104, 97, 110, 103, 101, 84, 105, 116, 108, 101 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatChangeTitle)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class MessageChatChangePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 67, 104, 97, 110, 103, 101, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatChangePhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
        }
    }

    partial class MessageChatDeletePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 68, 101, 108, 101, 116, 101, 80, 104, 111, 116, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageChatAddMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 65, 100, 100, 77, 101, 109, 98, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_member_user_ids => new byte[] { 109, 101, 109, 98, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_member_user_ids = JsonEncodedText.Encode(propName_member_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatAddMembers)tlobj;
            if (obj.MemberUserIds != null)
            {
                writer.WritePropertyName(encodedPropName_member_user_ids);
                writer.WriteArray(obj.MemberUserIds);
            }
        }
    }

    partial class MessageChatJoinByLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 74, 111, 105, 110, 66, 121, 76, 105, 110, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageChatJoinByRequestConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 74, 111, 105, 110, 66, 121, 82, 101, 113, 117, 101, 115, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageChatDeleteMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 68, 101, 108, 101, 116, 101, 77, 101, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatDeleteMember)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class MessageChatUpgradeToConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 85, 112, 103, 114, 97, 100, 101, 84, 111 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatUpgradeTo)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class MessageChatUpgradeFromConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 85, 112, 103, 114, 97, 100, 101, 70, 114, 111, 109 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_basic_group_id => new byte[] { 98, 97, 115, 105, 99, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_basic_group_id = JsonEncodedText.Encode(propName_basic_group_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatUpgradeFrom)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteNumber(encodedPropName_basic_group_id, obj.BasicGroupId);
        }
    }

    partial class MessagePinMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 80, 105, 110, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePinMessage)tlobj;
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class MessageScreenshotTakenConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 99, 114, 101, 101, 110, 115, 104, 111, 116, 84, 97, 107, 101, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageChatSetThemeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 83, 101, 116, 84, 104, 101, 109, 101 }));
        private static ReadOnlySpan<byte> propName_theme_name => new byte[] { 116, 104, 101, 109, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_theme_name = JsonEncodedText.Encode(propName_theme_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatSetTheme)tlobj;
            writer.WriteString(encodedPropName_theme_name, obj.ThemeName);
        }
    }

    partial class MessageChatSetTtlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 104, 97, 116, 83, 101, 116, 84, 116, 108 }));
        private static ReadOnlySpan<byte> propName_ttl => new byte[] { 116, 116, 108 };
        private static readonly JsonEncodedText encodedPropName_ttl = JsonEncodedText.Encode(propName_ttl);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatSetTtl)tlobj;
            writer.WriteNumber(encodedPropName_ttl, obj.Ttl);
        }
    }

    partial class MessageCustomServiceActionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 117, 115, 116, 111, 109, 83, 101, 114, 118, 105, 99, 101, 65, 99, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageCustomServiceAction)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
        }
    }

    partial class MessageGameScoreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 71, 97, 109, 101, 83, 99, 111, 114, 101 }));
        private static ReadOnlySpan<byte> propName_game_message_id => new byte[] { 103, 97, 109, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_game_message_id = JsonEncodedText.Encode(propName_game_message_id);
        private static ReadOnlySpan<byte> propName_game_id => new byte[] { 103, 97, 109, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_game_id = JsonEncodedText.Encode(propName_game_id);
        private static ReadOnlySpan<byte> propName_score => new byte[] { 115, 99, 111, 114, 101 };
        private static readonly JsonEncodedText encodedPropName_score = JsonEncodedText.Encode(propName_score);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageGameScore)tlobj;
            writer.WriteNumber(encodedPropName_game_message_id, obj.GameMessageId);
            writer.WritePropertyName(encodedPropName_game_id);
            writer.WriteInt64String(obj.GameId);
            writer.WriteNumber(encodedPropName_score, obj.Score);
        }
    }

    partial class MessagePaymentSuccessfulConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 80, 97, 121, 109, 101, 110, 116, 83, 117, 99, 99, 101, 115, 115, 102, 117, 108 }));
        private static ReadOnlySpan<byte> propName_invoice_chat_id => new byte[] { 105, 110, 118, 111, 105, 99, 101, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_invoice_chat_id = JsonEncodedText.Encode(propName_invoice_chat_id);
        private static ReadOnlySpan<byte> propName_invoice_message_id => new byte[] { 105, 110, 118, 111, 105, 99, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_invoice_message_id = JsonEncodedText.Encode(propName_invoice_message_id);
        private static ReadOnlySpan<byte> propName_currency => new byte[] { 99, 117, 114, 114, 101, 110, 99, 121 };
        private static readonly JsonEncodedText encodedPropName_currency = JsonEncodedText.Encode(propName_currency);
        private static ReadOnlySpan<byte> propName_total_amount => new byte[] { 116, 111, 116, 97, 108, 95, 97, 109, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_amount = JsonEncodedText.Encode(propName_total_amount);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePaymentSuccessful)tlobj;
            writer.WriteNumber(encodedPropName_invoice_chat_id, obj.InvoiceChatId);
            writer.WriteNumber(encodedPropName_invoice_message_id, obj.InvoiceMessageId);
            writer.WriteString(encodedPropName_currency, obj.Currency);
            writer.WriteNumber(encodedPropName_total_amount, obj.TotalAmount);
        }
    }

    partial class MessagePaymentSuccessfulBotConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 80, 97, 121, 109, 101, 110, 116, 83, 117, 99, 99, 101, 115, 115, 102, 117, 108, 66, 111, 116 }));
        private static ReadOnlySpan<byte> propName_currency => new byte[] { 99, 117, 114, 114, 101, 110, 99, 121 };
        private static readonly JsonEncodedText encodedPropName_currency = JsonEncodedText.Encode(propName_currency);
        private static ReadOnlySpan<byte> propName_total_amount => new byte[] { 116, 111, 116, 97, 108, 95, 97, 109, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_amount = JsonEncodedText.Encode(propName_total_amount);
        private static ReadOnlySpan<byte> propName_invoice_payload => new byte[] { 105, 110, 118, 111, 105, 99, 101, 95, 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_invoice_payload = JsonEncodedText.Encode(propName_invoice_payload);
        private static ReadOnlySpan<byte> propName_shipping_option_id => new byte[] { 115, 104, 105, 112, 112, 105, 110, 103, 95, 111, 112, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_shipping_option_id = JsonEncodedText.Encode(propName_shipping_option_id);
        private static ReadOnlySpan<byte> propName_order_info => new byte[] { 111, 114, 100, 101, 114, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_order_info = JsonEncodedText.Encode(propName_order_info);
        private static ReadOnlySpan<byte> propName_telegram_payment_charge_id => new byte[] { 116, 101, 108, 101, 103, 114, 97, 109, 95, 112, 97, 121, 109, 101, 110, 116, 95, 99, 104, 97, 114, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_telegram_payment_charge_id = JsonEncodedText.Encode(propName_telegram_payment_charge_id);
        private static ReadOnlySpan<byte> propName_provider_payment_charge_id => new byte[] { 112, 114, 111, 118, 105, 100, 101, 114, 95, 112, 97, 121, 109, 101, 110, 116, 95, 99, 104, 97, 114, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_provider_payment_charge_id = JsonEncodedText.Encode(propName_provider_payment_charge_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePaymentSuccessfulBot)tlobj;
            writer.WriteString(encodedPropName_currency, obj.Currency);
            writer.WriteNumber(encodedPropName_total_amount, obj.TotalAmount);
            if (!obj.InvoicePayload.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_invoice_payload, obj.InvoicePayload.Span);
            }
            writer.WriteString(encodedPropName_shipping_option_id, obj.ShippingOptionId);
            if (obj.OrderInfo != null)
            {
                writer.WritePropertyName(encodedPropName_order_info);
                writer.WriteTLObjectValue(obj.OrderInfo);
            }
            writer.WriteString(encodedPropName_telegram_payment_charge_id, obj.TelegramPaymentChargeId);
            writer.WriteString(encodedPropName_provider_payment_charge_id, obj.ProviderPaymentChargeId);
        }
    }

    partial class MessageContactRegisteredConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 97, 99, 116, 82, 101, 103, 105, 115, 116, 101, 114, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageWebsiteConnectedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 87, 101, 98, 115, 105, 116, 101, 67, 111, 110, 110, 101, 99, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_domain_name => new byte[] { 100, 111, 109, 97, 105, 110, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_domain_name = JsonEncodedText.Encode(propName_domain_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageWebsiteConnected)tlobj;
            writer.WriteString(encodedPropName_domain_name, obj.DomainName);
        }
    }

    partial class MessagePassportDataSentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 80, 97, 115, 115, 112, 111, 114, 116, 68, 97, 116, 97, 83, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_types => new byte[] { 116, 121, 112, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_types = JsonEncodedText.Encode(propName_types);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePassportDataSent)tlobj;
            if (obj.Types != null)
            {
                writer.WritePropertyName(encodedPropName_types);
                writer.WriteArray(obj.Types);
            }
        }
    }

    partial class MessagePassportDataReceivedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 80, 97, 115, 115, 112, 111, 114, 116, 68, 97, 116, 97, 82, 101, 99, 101, 105, 118, 101, 100 }));
        private static ReadOnlySpan<byte> propName_elements => new byte[] { 101, 108, 101, 109, 101, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_elements = JsonEncodedText.Encode(propName_elements);
        private static ReadOnlySpan<byte> propName_credentials => new byte[] { 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_credentials = JsonEncodedText.Encode(propName_credentials);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePassportDataReceived)tlobj;
            if (obj.Elements != null)
            {
                writer.WritePropertyName(encodedPropName_elements);
                writer.WriteArray(obj.Elements);
            }
            if (obj.Credentials != null)
            {
                writer.WritePropertyName(encodedPropName_credentials);
                writer.WriteTLObjectValue(obj.Credentials);
            }
        }
    }

    partial class MessageProximityAlertTriggeredConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 80, 114, 111, 120, 105, 109, 105, 116, 121, 65, 108, 101, 114, 116, 84, 114, 105, 103, 103, 101, 114, 101, 100 }));
        private static ReadOnlySpan<byte> propName_traveler => new byte[] { 116, 114, 97, 118, 101, 108, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_traveler = JsonEncodedText.Encode(propName_traveler);
        private static ReadOnlySpan<byte> propName_watcher => new byte[] { 119, 97, 116, 99, 104, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_watcher = JsonEncodedText.Encode(propName_watcher);
        private static ReadOnlySpan<byte> propName_distance => new byte[] { 100, 105, 115, 116, 97, 110, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_distance = JsonEncodedText.Encode(propName_distance);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageProximityAlertTriggered)tlobj;
            if (obj.Traveler != null)
            {
                writer.WritePropertyName(encodedPropName_traveler);
                writer.WriteTLObjectValue(obj.Traveler);
            }
            if (obj.Watcher != null)
            {
                writer.WritePropertyName(encodedPropName_watcher);
                writer.WriteTLObjectValue(obj.Watcher);
            }
            writer.WriteNumber(encodedPropName_distance, obj.Distance);
        }
    }

    partial class MessageUnsupportedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 85, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeMentionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 77, 101, 110, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeHashtagConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 72, 97, 115, 104, 116, 97, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeCashtagConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 67, 97, 115, 104, 116, 97, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeBotCommandConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 66, 111, 116, 67, 111, 109, 109, 97, 110, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 85, 114, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeBankCardNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 66, 97, 110, 107, 67, 97, 114, 100, 78, 117, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeBoldConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 66, 111, 108, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeItalicConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 73, 116, 97, 108, 105, 99 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeUnderlineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 85, 110, 100, 101, 114, 108, 105, 110, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeStrikethroughConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 83, 116, 114, 105, 107, 101, 116, 104, 114, 111, 117, 103, 104 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 67, 111, 100, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypePreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 80, 114, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypePreCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 80, 114, 101, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_language => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_language = JsonEncodedText.Encode(propName_language);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntityTypePreCode)tlobj;
            writer.WriteString(encodedPropName_language, obj.Language);
        }
    }

    partial class TextEntityTypeTextUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 84, 101, 120, 116, 85, 114, 108 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntityTypeTextUrl)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
        }
    }

    partial class TextEntityTypeMentionNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 77, 101, 110, 116, 105, 111, 110, 78, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntityTypeMentionName)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class TextEntityTypeMediaTimestampConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 69, 110, 116, 105, 116, 121, 84, 121, 112, 101, 77, 101, 100, 105, 97, 84, 105, 109, 101, 115, 116, 97, 109, 112 }));
        private static ReadOnlySpan<byte> propName_media_timestamp => new byte[] { 109, 101, 100, 105, 97, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112 };
        private static readonly JsonEncodedText encodedPropName_media_timestamp = JsonEncodedText.Encode(propName_media_timestamp);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntityTypeMediaTimestamp)tlobj;
            writer.WriteNumber(encodedPropName_media_timestamp, obj.MediaTimestamp);
        }
    }

    partial class InputThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 84, 104, 117, 109, 98, 110, 97, 105, 108 }));
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputThumbnail)tlobj;
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
        }
    }

    partial class MessageSchedulingStateSendAtDateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 99, 104, 101, 100, 117, 108, 105, 110, 103, 83, 116, 97, 116, 101, 83, 101, 110, 100, 65, 116, 68, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_send_date => new byte[] { 115, 101, 110, 100, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_send_date = JsonEncodedText.Encode(propName_send_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSchedulingStateSendAtDate)tlobj;
            writer.WriteNumber(encodedPropName_send_date, obj.SendDate);
        }
    }

    partial class MessageSchedulingStateSendWhenOnlineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 99, 104, 101, 100, 117, 108, 105, 110, 103, 83, 116, 97, 116, 101, 83, 101, 110, 100, 87, 104, 101, 110, 79, 110, 108, 105, 110, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageSendOptionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 79, 112, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_disable_notification => new byte[] { 100, 105, 115, 97, 98, 108, 101, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_disable_notification = JsonEncodedText.Encode(propName_disable_notification);
        private static ReadOnlySpan<byte> propName_from_background => new byte[] { 102, 114, 111, 109, 95, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_from_background = JsonEncodedText.Encode(propName_from_background);
        private static ReadOnlySpan<byte> propName_scheduling_state => new byte[] { 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 95, 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_scheduling_state = JsonEncodedText.Encode(propName_scheduling_state);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSendOptions)tlobj;
            writer.WriteBoolean(encodedPropName_disable_notification, obj.DisableNotification);
            writer.WriteBoolean(encodedPropName_from_background, obj.FromBackground);
            if (obj.SchedulingState != null)
            {
                writer.WritePropertyName(encodedPropName_scheduling_state);
                writer.WriteTLObjectValue(obj.SchedulingState);
            }
        }
    }

    partial class MessageCopyOptionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 67, 111, 112, 121, 79, 112, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_send_copy => new byte[] { 115, 101, 110, 100, 95, 99, 111, 112, 121 };
        private static readonly JsonEncodedText encodedPropName_send_copy = JsonEncodedText.Encode(propName_send_copy);
        private static ReadOnlySpan<byte> propName_replace_caption => new byte[] { 114, 101, 112, 108, 97, 99, 101, 95, 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_replace_caption = JsonEncodedText.Encode(propName_replace_caption);
        private static ReadOnlySpan<byte> propName_new_caption => new byte[] { 110, 101, 119, 95, 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_new_caption = JsonEncodedText.Encode(propName_new_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageCopyOptions)tlobj;
            writer.WriteBoolean(encodedPropName_send_copy, obj.SendCopy);
            writer.WriteBoolean(encodedPropName_replace_caption, obj.ReplaceCaption);
            if (obj.NewCaption != null)
            {
                writer.WritePropertyName(encodedPropName_new_caption);
                writer.WriteTLObjectValue(obj.NewCaption);
            }
        }
    }

    partial class InputMessageTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 84, 101, 120, 116 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_disable_web_page_preview => new byte[] { 100, 105, 115, 97, 98, 108, 101, 95, 119, 101, 98, 95, 112, 97, 103, 101, 95, 112, 114, 101, 118, 105, 101, 119 };
        private static readonly JsonEncodedText encodedPropName_disable_web_page_preview = JsonEncodedText.Encode(propName_disable_web_page_preview);
        private static ReadOnlySpan<byte> propName_clear_draft => new byte[] { 99, 108, 101, 97, 114, 95, 100, 114, 97, 102, 116 };
        private static readonly JsonEncodedText encodedPropName_clear_draft = JsonEncodedText.Encode(propName_clear_draft);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageText)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteBoolean(encodedPropName_disable_web_page_preview, obj.DisableWebPagePreview);
            writer.WriteBoolean(encodedPropName_clear_draft, obj.ClearDraft);
        }
    }

    partial class InputMessageAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_added_sticker_file_ids => new byte[] { 97, 100, 100, 101, 100, 95, 115, 116, 105, 99, 107, 101, 114, 95, 102, 105, 108, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_added_sticker_file_ids = JsonEncodedText.Encode(propName_added_sticker_file_ids);
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.AddedStickerFileIds != null)
            {
                writer.WritePropertyName(encodedPropName_added_sticker_file_ids);
                writer.WriteArray(obj.AddedStickerFileIds);
            }
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class InputMessageAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 65, 117, 100, 105, 111 }));
        private static ReadOnlySpan<byte> propName_audio => new byte[] { 97, 117, 100, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_audio = JsonEncodedText.Encode(propName_audio);
        private static ReadOnlySpan<byte> propName_album_cover_thumbnail => new byte[] { 97, 108, 98, 117, 109, 95, 99, 111, 118, 101, 114, 95, 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_album_cover_thumbnail = JsonEncodedText.Encode(propName_album_cover_thumbnail);
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_performer => new byte[] { 112, 101, 114, 102, 111, 114, 109, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_performer = JsonEncodedText.Encode(propName_performer);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageAudio)tlobj;
            if (obj.Audio != null)
            {
                writer.WritePropertyName(encodedPropName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
            if (obj.AlbumCoverThumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_album_cover_thumbnail);
                writer.WriteTLObjectValue(obj.AlbumCoverThumbnail);
            }
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_performer, obj.Performer);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class InputMessageDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 68, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_document => new byte[] { 100, 111, 99, 117, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_document = JsonEncodedText.Encode(propName_document);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_disable_content_type_detection => new byte[] { 100, 105, 115, 97, 98, 108, 101, 95, 99, 111, 110, 116, 101, 110, 116, 95, 116, 121, 112, 101, 95, 100, 101, 116, 101, 99, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_disable_content_type_detection = JsonEncodedText.Encode(propName_disable_content_type_detection);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageDocument)tlobj;
            if (obj.Document != null)
            {
                writer.WritePropertyName(encodedPropName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            writer.WriteBoolean(encodedPropName_disable_content_type_detection, obj.DisableContentTypeDetection);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class InputMessagePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_added_sticker_file_ids => new byte[] { 97, 100, 100, 101, 100, 95, 115, 116, 105, 99, 107, 101, 114, 95, 102, 105, 108, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_added_sticker_file_ids = JsonEncodedText.Encode(propName_added_sticker_file_ids);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_ttl => new byte[] { 116, 116, 108 };
        private static readonly JsonEncodedText encodedPropName_ttl = JsonEncodedText.Encode(propName_ttl);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessagePhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.AddedStickerFileIds != null)
            {
                writer.WritePropertyName(encodedPropName_added_sticker_file_ids);
                writer.WriteArray(obj.AddedStickerFileIds);
            }
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteNumber(encodedPropName_ttl, obj.Ttl);
        }
    }

    partial class InputMessageStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 83, 116, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_emoji => new byte[] { 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_emoji = JsonEncodedText.Encode(propName_emoji);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageSticker)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            writer.WriteString(encodedPropName_emoji, obj.Emoji);
        }
    }

    partial class InputMessageVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 86, 105, 100, 101, 111 }));
        private static ReadOnlySpan<byte> propName_video => new byte[] { 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_video = JsonEncodedText.Encode(propName_video);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_added_sticker_file_ids => new byte[] { 97, 100, 100, 101, 100, 95, 115, 116, 105, 99, 107, 101, 114, 95, 102, 105, 108, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_added_sticker_file_ids = JsonEncodedText.Encode(propName_added_sticker_file_ids);
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_supports_streaming => new byte[] { 115, 117, 112, 112, 111, 114, 116, 115, 95, 115, 116, 114, 101, 97, 109, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_supports_streaming = JsonEncodedText.Encode(propName_supports_streaming);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_ttl => new byte[] { 116, 116, 108 };
        private static readonly JsonEncodedText encodedPropName_ttl = JsonEncodedText.Encode(propName_ttl);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageVideo)tlobj;
            if (obj.Video != null)
            {
                writer.WritePropertyName(encodedPropName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.AddedStickerFileIds != null)
            {
                writer.WritePropertyName(encodedPropName_added_sticker_file_ids);
                writer.WriteArray(obj.AddedStickerFileIds);
            }
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            writer.WriteBoolean(encodedPropName_supports_streaming, obj.SupportsStreaming);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteNumber(encodedPropName_ttl, obj.Ttl);
        }
    }

    partial class InputMessageVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 86, 105, 100, 101, 111, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_video_note => new byte[] { 118, 105, 100, 101, 111, 95, 110, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_video_note = JsonEncodedText.Encode(propName_video_note);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_length => new byte[] { 108, 101, 110, 103, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_length = JsonEncodedText.Encode(propName_length);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageVideoNote)tlobj;
            if (obj.VideoNote != null)
            {
                writer.WritePropertyName(encodedPropName_video_note);
                writer.WriteTLObjectValue(obj.VideoNote);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            writer.WriteNumber(encodedPropName_length, obj.Length);
        }
    }

    partial class InputMessageVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 86, 111, 105, 99, 101, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_voice_note => new byte[] { 118, 111, 105, 99, 101, 95, 110, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_voice_note = JsonEncodedText.Encode(propName_voice_note);
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_waveform => new byte[] { 119, 97, 118, 101, 102, 111, 114, 109 };
        private static readonly JsonEncodedText encodedPropName_waveform = JsonEncodedText.Encode(propName_waveform);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageVoiceNote)tlobj;
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(encodedPropName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            if (!obj.Waveform.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_waveform, obj.Waveform.Span);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class InputMessageLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 76, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_live_period => new byte[] { 108, 105, 118, 101, 95, 112, 101, 114, 105, 111, 100 };
        private static readonly JsonEncodedText encodedPropName_live_period = JsonEncodedText.Encode(propName_live_period);
        private static ReadOnlySpan<byte> propName_heading => new byte[] { 104, 101, 97, 100, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_heading = JsonEncodedText.Encode(propName_heading);
        private static ReadOnlySpan<byte> propName_proximity_alert_radius => new byte[] { 112, 114, 111, 120, 105, 109, 105, 116, 121, 95, 97, 108, 101, 114, 116, 95, 114, 97, 100, 105, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_proximity_alert_radius = JsonEncodedText.Encode(propName_proximity_alert_radius);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageLocation)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(encodedPropName_live_period, obj.LivePeriod);
            writer.WriteNumber(encodedPropName_heading, obj.Heading);
            writer.WriteNumber(encodedPropName_proximity_alert_radius, obj.ProximityAlertRadius);
        }
    }

    partial class InputMessageVenueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 86, 101, 110, 117, 101 }));
        private static ReadOnlySpan<byte> propName_venue => new byte[] { 118, 101, 110, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_venue = JsonEncodedText.Encode(propName_venue);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageVenue)tlobj;
            if (obj.Venue != null)
            {
                writer.WritePropertyName(encodedPropName_venue);
                writer.WriteTLObjectValue(obj.Venue);
            }
        }
    }

    partial class InputMessageContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 97, 99, 116 }));
        private static ReadOnlySpan<byte> propName_contact => new byte[] { 99, 111, 110, 116, 97, 99, 116 };
        private static readonly JsonEncodedText encodedPropName_contact = JsonEncodedText.Encode(propName_contact);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageContact)tlobj;
            if (obj.Contact != null)
            {
                writer.WritePropertyName(encodedPropName_contact);
                writer.WriteTLObjectValue(obj.Contact);
            }
        }
    }

    partial class InputMessageDiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 68, 105, 99, 101 }));
        private static ReadOnlySpan<byte> propName_emoji => new byte[] { 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_emoji = JsonEncodedText.Encode(propName_emoji);
        private static ReadOnlySpan<byte> propName_clear_draft => new byte[] { 99, 108, 101, 97, 114, 95, 100, 114, 97, 102, 116 };
        private static readonly JsonEncodedText encodedPropName_clear_draft = JsonEncodedText.Encode(propName_clear_draft);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageDice)tlobj;
            writer.WriteString(encodedPropName_emoji, obj.Emoji);
            writer.WriteBoolean(encodedPropName_clear_draft, obj.ClearDraft);
        }
    }

    partial class InputMessageGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 71, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_bot_user_id => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_bot_user_id = JsonEncodedText.Encode(propName_bot_user_id);
        private static ReadOnlySpan<byte> propName_game_short_name => new byte[] { 103, 97, 109, 101, 95, 115, 104, 111, 114, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_game_short_name = JsonEncodedText.Encode(propName_game_short_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageGame)tlobj;
            writer.WriteNumber(encodedPropName_bot_user_id, obj.BotUserId);
            writer.WriteString(encodedPropName_game_short_name, obj.GameShortName);
        }
    }

    partial class InputMessageInvoiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 73, 110, 118, 111, 105, 99, 101 }));
        private static ReadOnlySpan<byte> propName_invoice => new byte[] { 105, 110, 118, 111, 105, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_invoice = JsonEncodedText.Encode(propName_invoice);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_photo_url => new byte[] { 112, 104, 111, 116, 111, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_photo_url = JsonEncodedText.Encode(propName_photo_url);
        private static ReadOnlySpan<byte> propName_photo_size => new byte[] { 112, 104, 111, 116, 111, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_photo_size = JsonEncodedText.Encode(propName_photo_size);
        private static ReadOnlySpan<byte> propName_photo_width => new byte[] { 112, 104, 111, 116, 111, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_photo_width = JsonEncodedText.Encode(propName_photo_width);
        private static ReadOnlySpan<byte> propName_photo_height => new byte[] { 112, 104, 111, 116, 111, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_photo_height = JsonEncodedText.Encode(propName_photo_height);
        private static ReadOnlySpan<byte> propName_payload => new byte[] { 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_payload = JsonEncodedText.Encode(propName_payload);
        private static ReadOnlySpan<byte> propName_provider_token => new byte[] { 112, 114, 111, 118, 105, 100, 101, 114, 95, 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_provider_token = JsonEncodedText.Encode(propName_provider_token);
        private static ReadOnlySpan<byte> propName_provider_data => new byte[] { 112, 114, 111, 118, 105, 100, 101, 114, 95, 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_provider_data = JsonEncodedText.Encode(propName_provider_data);
        private static ReadOnlySpan<byte> propName_start_parameter => new byte[] { 115, 116, 97, 114, 116, 95, 112, 97, 114, 97, 109, 101, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_start_parameter = JsonEncodedText.Encode(propName_start_parameter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageInvoice)tlobj;
            if (obj.Invoice != null)
            {
                writer.WritePropertyName(encodedPropName_invoice);
                writer.WriteTLObjectValue(obj.Invoice);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
            writer.WriteString(encodedPropName_photo_url, obj.PhotoUrl);
            writer.WriteNumber(encodedPropName_photo_size, obj.PhotoSize);
            writer.WriteNumber(encodedPropName_photo_width, obj.PhotoWidth);
            writer.WriteNumber(encodedPropName_photo_height, obj.PhotoHeight);
            if (!obj.Payload.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_payload, obj.Payload.Span);
            }
            writer.WriteString(encodedPropName_provider_token, obj.ProviderToken);
            writer.WriteString(encodedPropName_provider_data, obj.ProviderData);
            writer.WriteString(encodedPropName_start_parameter, obj.StartParameter);
        }
    }

    partial class InputMessagePollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 80, 111, 108, 108 }));
        private static ReadOnlySpan<byte> propName_question => new byte[] { 113, 117, 101, 115, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_question = JsonEncodedText.Encode(propName_question);
        private static ReadOnlySpan<byte> propName_options => new byte[] { 111, 112, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_options = JsonEncodedText.Encode(propName_options);
        private static ReadOnlySpan<byte> propName_is_anonymous => new byte[] { 105, 115, 95, 97, 110, 111, 110, 121, 109, 111, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_is_anonymous = JsonEncodedText.Encode(propName_is_anonymous);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_open_period => new byte[] { 111, 112, 101, 110, 95, 112, 101, 114, 105, 111, 100 };
        private static readonly JsonEncodedText encodedPropName_open_period = JsonEncodedText.Encode(propName_open_period);
        private static ReadOnlySpan<byte> propName_close_date => new byte[] { 99, 108, 111, 115, 101, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_close_date = JsonEncodedText.Encode(propName_close_date);
        private static ReadOnlySpan<byte> propName_is_closed => new byte[] { 105, 115, 95, 99, 108, 111, 115, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_closed = JsonEncodedText.Encode(propName_is_closed);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessagePoll)tlobj;
            writer.WriteString(encodedPropName_question, obj.Question);
            if (obj.Options != null)
            {
                writer.WritePropertyName(encodedPropName_options);
                writer.WriteArray(obj.Options);
            }
            writer.WriteBoolean(encodedPropName_is_anonymous, obj.IsAnonymous);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteNumber(encodedPropName_open_period, obj.OpenPeriod);
            writer.WriteNumber(encodedPropName_close_date, obj.CloseDate);
            writer.WriteBoolean(encodedPropName_is_closed, obj.IsClosed);
        }
    }

    partial class InputMessageForwardedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 77, 101, 115, 115, 97, 103, 101, 70, 111, 114, 119, 97, 114, 100, 101, 100 }));
        private static ReadOnlySpan<byte> propName_from_chat_id => new byte[] { 102, 114, 111, 109, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_chat_id = JsonEncodedText.Encode(propName_from_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_in_game_share => new byte[] { 105, 110, 95, 103, 97, 109, 101, 95, 115, 104, 97, 114, 101 };
        private static readonly JsonEncodedText encodedPropName_in_game_share = JsonEncodedText.Encode(propName_in_game_share);
        private static ReadOnlySpan<byte> propName_copy_options => new byte[] { 99, 111, 112, 121, 95, 111, 112, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_copy_options = JsonEncodedText.Encode(propName_copy_options);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageForwarded)tlobj;
            writer.WriteNumber(encodedPropName_from_chat_id, obj.FromChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteBoolean(encodedPropName_in_game_share, obj.InGameShare);
            if (obj.CopyOptions != null)
            {
                writer.WritePropertyName(encodedPropName_copy_options);
                writer.WriteTLObjectValue(obj.CopyOptions);
            }
        }
    }

    partial class SearchMessagesFilterEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 69, 109, 112, 116, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 65, 117, 100, 105, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 68, 111, 99, 117, 109, 101, 110, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 80, 104, 111, 116, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 86, 105, 100, 101, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 86, 111, 105, 99, 101, 78, 111, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterPhotoAndVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 80, 104, 111, 116, 111, 65, 110, 100, 86, 105, 100, 101, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 85, 114, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 67, 104, 97, 116, 80, 104, 111, 116, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 67, 97, 108, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterMissedCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 77, 105, 115, 115, 101, 100, 67, 97, 108, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 86, 105, 100, 101, 111, 78, 111, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterVoiceAndVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 86, 111, 105, 99, 101, 65, 110, 100, 86, 105, 100, 101, 111, 78, 111, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterMentionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 77, 101, 110, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterUnreadMentionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 85, 110, 114, 101, 97, 100, 77, 101, 110, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterFailedToSendConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 70, 97, 105, 108, 101, 100, 84, 111, 83, 101, 110, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterPinnedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115, 70, 105, 108, 116, 101, 114, 80, 105, 110, 110, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionTypingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 84, 121, 112, 105, 110, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionRecordingVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 82, 101, 99, 111, 114, 100, 105, 110, 103, 86, 105, 100, 101, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionUploadingVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 85, 112, 108, 111, 97, 100, 105, 110, 103, 86, 105, 100, 101, 111 }));
        private static ReadOnlySpan<byte> propName_progress => new byte[] { 112, 114, 111, 103, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_progress = JsonEncodedText.Encode(propName_progress);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionUploadingVideo)tlobj;
            writer.WriteNumber(encodedPropName_progress, obj.Progress);
        }
    }

    partial class ChatActionRecordingVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 82, 101, 99, 111, 114, 100, 105, 110, 103, 86, 111, 105, 99, 101, 78, 111, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionUploadingVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 85, 112, 108, 111, 97, 100, 105, 110, 103, 86, 111, 105, 99, 101, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_progress => new byte[] { 112, 114, 111, 103, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_progress = JsonEncodedText.Encode(propName_progress);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionUploadingVoiceNote)tlobj;
            writer.WriteNumber(encodedPropName_progress, obj.Progress);
        }
    }

    partial class ChatActionUploadingPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 85, 112, 108, 111, 97, 100, 105, 110, 103, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_progress => new byte[] { 112, 114, 111, 103, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_progress = JsonEncodedText.Encode(propName_progress);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionUploadingPhoto)tlobj;
            writer.WriteNumber(encodedPropName_progress, obj.Progress);
        }
    }

    partial class ChatActionUploadingDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 85, 112, 108, 111, 97, 100, 105, 110, 103, 68, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_progress => new byte[] { 112, 114, 111, 103, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_progress = JsonEncodedText.Encode(propName_progress);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionUploadingDocument)tlobj;
            writer.WriteNumber(encodedPropName_progress, obj.Progress);
        }
    }

    partial class ChatActionChoosingStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 67, 104, 111, 111, 115, 105, 110, 103, 83, 116, 105, 99, 107, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionChoosingLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 67, 104, 111, 111, 115, 105, 110, 103, 76, 111, 99, 97, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionChoosingContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 67, 104, 111, 111, 115, 105, 110, 103, 67, 111, 110, 116, 97, 99, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionStartPlayingGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 83, 116, 97, 114, 116, 80, 108, 97, 121, 105, 110, 103, 71, 97, 109, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionRecordingVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 82, 101, 99, 111, 114, 100, 105, 110, 103, 86, 105, 100, 101, 111, 78, 111, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionUploadingVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 85, 112, 108, 111, 97, 100, 105, 110, 103, 86, 105, 100, 101, 111, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_progress => new byte[] { 112, 114, 111, 103, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_progress = JsonEncodedText.Encode(propName_progress);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionUploadingVideoNote)tlobj;
            writer.WriteNumber(encodedPropName_progress, obj.Progress);
        }
    }

    partial class ChatActionWatchingAnimationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 87, 97, 116, 99, 104, 105, 110, 103, 65, 110, 105, 109, 97, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_emoji => new byte[] { 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_emoji = JsonEncodedText.Encode(propName_emoji);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionWatchingAnimations)tlobj;
            writer.WriteString(encodedPropName_emoji, obj.Emoji);
        }
    }

    partial class ChatActionCancelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 65, 99, 116, 105, 111, 110, 67, 97, 110, 99, 101, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserStatusEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 83, 116, 97, 116, 117, 115, 69, 109, 112, 116, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserStatusOnlineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 83, 116, 97, 116, 117, 115, 79, 110, 108, 105, 110, 101 }));
        private static ReadOnlySpan<byte> propName_expires => new byte[] { 101, 120, 112, 105, 114, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_expires = JsonEncodedText.Encode(propName_expires);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserStatusOnline)tlobj;
            writer.WriteNumber(encodedPropName_expires, obj.Expires);
        }
    }

    partial class UserStatusOfflineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 83, 116, 97, 116, 117, 115, 79, 102, 102, 108, 105, 110, 101 }));
        private static ReadOnlySpan<byte> propName_was_online => new byte[] { 119, 97, 115, 95, 111, 110, 108, 105, 110, 101 };
        private static readonly JsonEncodedText encodedPropName_was_online = JsonEncodedText.Encode(propName_was_online);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserStatusOffline)tlobj;
            writer.WriteNumber(encodedPropName_was_online, obj.WasOnline);
        }
    }

    partial class UserStatusRecentlyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 83, 116, 97, 116, 117, 115, 82, 101, 99, 101, 110, 116, 108, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserStatusLastWeekConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 83, 116, 97, 116, 117, 115, 76, 97, 115, 116, 87, 101, 101, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserStatusLastMonthConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 83, 116, 97, 116, 117, 115, 76, 97, 115, 116, 77, 111, 110, 116, 104 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class StickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 105, 99, 107, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_stickers => new byte[] { 115, 116, 105, 99, 107, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_stickers = JsonEncodedText.Encode(propName_stickers);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Stickers)tlobj;
            if (obj.Stickers_ != null)
            {
                writer.WritePropertyName(encodedPropName_stickers);
                writer.WriteArray(obj.Stickers_);
            }
        }
    }

    partial class EmojisConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 109, 111, 106, 105, 115 }));
        private static ReadOnlySpan<byte> propName_emojis => new byte[] { 101, 109, 111, 106, 105, 115 };
        private static readonly JsonEncodedText encodedPropName_emojis = JsonEncodedText.Encode(propName_emojis);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Emojis)tlobj;
            if (obj.Emojis_ != null)
            {
                writer.WritePropertyName(encodedPropName_emojis);
                writer.WriteArray(obj.Emojis_);
            }
        }
    }

    partial class StickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 105, 99, 107, 101, 114, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_thumbnail_outline => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 111, 117, 116, 108, 105, 110, 101 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_outline = JsonEncodedText.Encode(propName_thumbnail_outline);
        private static ReadOnlySpan<byte> propName_is_installed => new byte[] { 105, 115, 95, 105, 110, 115, 116, 97, 108, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_installed = JsonEncodedText.Encode(propName_is_installed);
        private static ReadOnlySpan<byte> propName_is_archived => new byte[] { 105, 115, 95, 97, 114, 99, 104, 105, 118, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_archived = JsonEncodedText.Encode(propName_is_archived);
        private static ReadOnlySpan<byte> propName_is_official => new byte[] { 105, 115, 95, 111, 102, 102, 105, 99, 105, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_is_official = JsonEncodedText.Encode(propName_is_official);
        private static ReadOnlySpan<byte> propName_is_animated => new byte[] { 105, 115, 95, 97, 110, 105, 109, 97, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_animated = JsonEncodedText.Encode(propName_is_animated);
        private static ReadOnlySpan<byte> propName_is_masks => new byte[] { 105, 115, 95, 109, 97, 115, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_is_masks = JsonEncodedText.Encode(propName_is_masks);
        private static ReadOnlySpan<byte> propName_is_viewed => new byte[] { 105, 115, 95, 118, 105, 101, 119, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_viewed = JsonEncodedText.Encode(propName_is_viewed);
        private static ReadOnlySpan<byte> propName_stickers => new byte[] { 115, 116, 105, 99, 107, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_stickers = JsonEncodedText.Encode(propName_stickers);
        private static ReadOnlySpan<byte> propName_emojis => new byte[] { 101, 109, 111, 106, 105, 115 };
        private static readonly JsonEncodedText encodedPropName_emojis = JsonEncodedText.Encode(propName_emojis);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StickerSet)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_name, obj.Name);
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.ThumbnailOutline != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail_outline);
                writer.WriteArray(obj.ThumbnailOutline);
            }
            writer.WriteBoolean(encodedPropName_is_installed, obj.IsInstalled);
            writer.WriteBoolean(encodedPropName_is_archived, obj.IsArchived);
            writer.WriteBoolean(encodedPropName_is_official, obj.IsOfficial);
            writer.WriteBoolean(encodedPropName_is_animated, obj.IsAnimated);
            writer.WriteBoolean(encodedPropName_is_masks, obj.IsMasks);
            writer.WriteBoolean(encodedPropName_is_viewed, obj.IsViewed);
            if (obj.Stickers != null)
            {
                writer.WritePropertyName(encodedPropName_stickers);
                writer.WriteArray(obj.Stickers);
            }
            if (obj.Emojis != null)
            {
                writer.WritePropertyName(encodedPropName_emojis);
                writer.WriteArray(obj.Emojis);
            }
        }
    }

    partial class StickerSetInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 105, 99, 107, 101, 114, 83, 101, 116, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        private static ReadOnlySpan<byte> propName_thumbnail_outline => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 111, 117, 116, 108, 105, 110, 101 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_outline = JsonEncodedText.Encode(propName_thumbnail_outline);
        private static ReadOnlySpan<byte> propName_is_installed => new byte[] { 105, 115, 95, 105, 110, 115, 116, 97, 108, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_installed = JsonEncodedText.Encode(propName_is_installed);
        private static ReadOnlySpan<byte> propName_is_archived => new byte[] { 105, 115, 95, 97, 114, 99, 104, 105, 118, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_archived = JsonEncodedText.Encode(propName_is_archived);
        private static ReadOnlySpan<byte> propName_is_official => new byte[] { 105, 115, 95, 111, 102, 102, 105, 99, 105, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_is_official = JsonEncodedText.Encode(propName_is_official);
        private static ReadOnlySpan<byte> propName_is_animated => new byte[] { 105, 115, 95, 97, 110, 105, 109, 97, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_animated = JsonEncodedText.Encode(propName_is_animated);
        private static ReadOnlySpan<byte> propName_is_masks => new byte[] { 105, 115, 95, 109, 97, 115, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_is_masks = JsonEncodedText.Encode(propName_is_masks);
        private static ReadOnlySpan<byte> propName_is_viewed => new byte[] { 105, 115, 95, 118, 105, 101, 119, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_viewed = JsonEncodedText.Encode(propName_is_viewed);
        private static ReadOnlySpan<byte> propName_size => new byte[] { 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_size = JsonEncodedText.Encode(propName_size);
        private static ReadOnlySpan<byte> propName_covers => new byte[] { 99, 111, 118, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_covers = JsonEncodedText.Encode(propName_covers);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StickerSetInfo)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_name, obj.Name);
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.ThumbnailOutline != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail_outline);
                writer.WriteArray(obj.ThumbnailOutline);
            }
            writer.WriteBoolean(encodedPropName_is_installed, obj.IsInstalled);
            writer.WriteBoolean(encodedPropName_is_archived, obj.IsArchived);
            writer.WriteBoolean(encodedPropName_is_official, obj.IsOfficial);
            writer.WriteBoolean(encodedPropName_is_animated, obj.IsAnimated);
            writer.WriteBoolean(encodedPropName_is_masks, obj.IsMasks);
            writer.WriteBoolean(encodedPropName_is_viewed, obj.IsViewed);
            writer.WriteNumber(encodedPropName_size, obj.Size);
            if (obj.Covers != null)
            {
                writer.WritePropertyName(encodedPropName_covers);
                writer.WriteArray(obj.Covers);
            }
        }
    }

    partial class StickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_sets => new byte[] { 115, 101, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_sets = JsonEncodedText.Encode(propName_sets);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StickerSets)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Sets != null)
            {
                writer.WritePropertyName(encodedPropName_sets);
                writer.WriteArray(obj.Sets);
            }
        }
    }

    partial class CallDiscardReasonEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 68, 105, 115, 99, 97, 114, 100, 82, 101, 97, 115, 111, 110, 69, 109, 112, 116, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallDiscardReasonMissedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 68, 105, 115, 99, 97, 114, 100, 82, 101, 97, 115, 111, 110, 77, 105, 115, 115, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallDiscardReasonDeclinedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 68, 105, 115, 99, 97, 114, 100, 82, 101, 97, 115, 111, 110, 68, 101, 99, 108, 105, 110, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallDiscardReasonDisconnectedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 68, 105, 115, 99, 97, 114, 100, 82, 101, 97, 115, 111, 110, 68, 105, 115, 99, 111, 110, 110, 101, 99, 116, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallDiscardReasonHungUpConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 68, 105, 115, 99, 97, 114, 100, 82, 101, 97, 115, 111, 110, 72, 117, 110, 103, 85, 112 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProtocolConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 80, 114, 111, 116, 111, 99, 111, 108 }));
        private static ReadOnlySpan<byte> propName_udp_p2p => new byte[] { 117, 100, 112, 95, 112, 50, 112 };
        private static readonly JsonEncodedText encodedPropName_udp_p2p = JsonEncodedText.Encode(propName_udp_p2p);
        private static ReadOnlySpan<byte> propName_udp_reflector => new byte[] { 117, 100, 112, 95, 114, 101, 102, 108, 101, 99, 116, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_udp_reflector = JsonEncodedText.Encode(propName_udp_reflector);
        private static ReadOnlySpan<byte> propName_min_layer => new byte[] { 109, 105, 110, 95, 108, 97, 121, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_min_layer = JsonEncodedText.Encode(propName_min_layer);
        private static ReadOnlySpan<byte> propName_max_layer => new byte[] { 109, 97, 120, 95, 108, 97, 121, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_max_layer = JsonEncodedText.Encode(propName_max_layer);
        private static ReadOnlySpan<byte> propName_library_versions => new byte[] { 108, 105, 98, 114, 97, 114, 121, 95, 118, 101, 114, 115, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_library_versions = JsonEncodedText.Encode(propName_library_versions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallProtocol)tlobj;
            writer.WriteBoolean(encodedPropName_udp_p2p, obj.UdpP2p);
            writer.WriteBoolean(encodedPropName_udp_reflector, obj.UdpReflector);
            writer.WriteNumber(encodedPropName_min_layer, obj.MinLayer);
            writer.WriteNumber(encodedPropName_max_layer, obj.MaxLayer);
            if (obj.LibraryVersions != null)
            {
                writer.WritePropertyName(encodedPropName_library_versions);
                writer.WriteArray(obj.LibraryVersions);
            }
        }
    }

    partial class CallServerTypeTelegramReflectorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 83, 101, 114, 118, 101, 114, 84, 121, 112, 101, 84, 101, 108, 101, 103, 114, 97, 109, 82, 101, 102, 108, 101, 99, 116, 111, 114 }));
        private static ReadOnlySpan<byte> propName_peer_tag => new byte[] { 112, 101, 101, 114, 95, 116, 97, 103 };
        private static readonly JsonEncodedText encodedPropName_peer_tag = JsonEncodedText.Encode(propName_peer_tag);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallServerTypeTelegramReflector)tlobj;
            if (!obj.PeerTag.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_peer_tag, obj.PeerTag.Span);
            }
        }
    }

    partial class CallServerTypeWebrtcConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 83, 101, 114, 118, 101, 114, 84, 121, 112, 101, 87, 101, 98, 114, 116, 99 }));
        private static ReadOnlySpan<byte> propName_username => new byte[] { 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_username = JsonEncodedText.Encode(propName_username);
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        private static ReadOnlySpan<byte> propName_supports_turn => new byte[] { 115, 117, 112, 112, 111, 114, 116, 115, 95, 116, 117, 114, 110 };
        private static readonly JsonEncodedText encodedPropName_supports_turn = JsonEncodedText.Encode(propName_supports_turn);
        private static ReadOnlySpan<byte> propName_supports_stun => new byte[] { 115, 117, 112, 112, 111, 114, 116, 115, 95, 115, 116, 117, 110 };
        private static readonly JsonEncodedText encodedPropName_supports_stun = JsonEncodedText.Encode(propName_supports_stun);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallServerTypeWebrtc)tlobj;
            writer.WriteString(encodedPropName_username, obj.Username);
            writer.WriteString(encodedPropName_password, obj.Password);
            writer.WriteBoolean(encodedPropName_supports_turn, obj.SupportsTurn);
            writer.WriteBoolean(encodedPropName_supports_stun, obj.SupportsStun);
        }
    }

    partial class CallServerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 83, 101, 114, 118, 101, 114 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_ip_address => new byte[] { 105, 112, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_ip_address = JsonEncodedText.Encode(propName_ip_address);
        private static ReadOnlySpan<byte> propName_ipv6_address => new byte[] { 105, 112, 118, 54, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_ipv6_address = JsonEncodedText.Encode(propName_ipv6_address);
        private static ReadOnlySpan<byte> propName_port => new byte[] { 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_port = JsonEncodedText.Encode(propName_port);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallServer)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(encodedPropName_ip_address, obj.IpAddress);
            writer.WriteString(encodedPropName_ipv6_address, obj.Ipv6Address);
            writer.WriteNumber(encodedPropName_port, obj.Port);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class CallIdConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 73, 100 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallId)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
        }
    }

    partial class GroupCallIdConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 114, 111, 117, 112, 67, 97, 108, 108, 73, 100 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GroupCallId)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
        }
    }

    partial class CallStatePendingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 83, 116, 97, 116, 101, 80, 101, 110, 100, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_is_created => new byte[] { 105, 115, 95, 99, 114, 101, 97, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_created = JsonEncodedText.Encode(propName_is_created);
        private static ReadOnlySpan<byte> propName_is_received => new byte[] { 105, 115, 95, 114, 101, 99, 101, 105, 118, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_received = JsonEncodedText.Encode(propName_is_received);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallStatePending)tlobj;
            writer.WriteBoolean(encodedPropName_is_created, obj.IsCreated);
            writer.WriteBoolean(encodedPropName_is_received, obj.IsReceived);
        }
    }

    partial class CallStateExchangingKeysConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 83, 116, 97, 116, 101, 69, 120, 99, 104, 97, 110, 103, 105, 110, 103, 75, 101, 121, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallStateReadyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 83, 116, 97, 116, 101, 82, 101, 97, 100, 121 }));
        private static ReadOnlySpan<byte> propName_protocol => new byte[] { 112, 114, 111, 116, 111, 99, 111, 108 };
        private static readonly JsonEncodedText encodedPropName_protocol = JsonEncodedText.Encode(propName_protocol);
        private static ReadOnlySpan<byte> propName_servers => new byte[] { 115, 101, 114, 118, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_servers = JsonEncodedText.Encode(propName_servers);
        private static ReadOnlySpan<byte> propName_config => new byte[] { 99, 111, 110, 102, 105, 103 };
        private static readonly JsonEncodedText encodedPropName_config = JsonEncodedText.Encode(propName_config);
        private static ReadOnlySpan<byte> propName_encryption_key => new byte[] { 101, 110, 99, 114, 121, 112, 116, 105, 111, 110, 95, 107, 101, 121 };
        private static readonly JsonEncodedText encodedPropName_encryption_key = JsonEncodedText.Encode(propName_encryption_key);
        private static ReadOnlySpan<byte> propName_emojis => new byte[] { 101, 109, 111, 106, 105, 115 };
        private static readonly JsonEncodedText encodedPropName_emojis = JsonEncodedText.Encode(propName_emojis);
        private static ReadOnlySpan<byte> propName_allow_p2p => new byte[] { 97, 108, 108, 111, 119, 95, 112, 50, 112 };
        private static readonly JsonEncodedText encodedPropName_allow_p2p = JsonEncodedText.Encode(propName_allow_p2p);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallStateReady)tlobj;
            if (obj.Protocol != null)
            {
                writer.WritePropertyName(encodedPropName_protocol);
                writer.WriteTLObjectValue(obj.Protocol);
            }
            if (obj.Servers != null)
            {
                writer.WritePropertyName(encodedPropName_servers);
                writer.WriteArray(obj.Servers);
            }
            writer.WriteString(encodedPropName_config, obj.Config);
            if (!obj.EncryptionKey.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_encryption_key, obj.EncryptionKey.Span);
            }
            if (obj.Emojis != null)
            {
                writer.WritePropertyName(encodedPropName_emojis);
                writer.WriteArray(obj.Emojis);
            }
            writer.WriteBoolean(encodedPropName_allow_p2p, obj.AllowP2p);
        }
    }

    partial class CallStateHangingUpConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 83, 116, 97, 116, 101, 72, 97, 110, 103, 105, 110, 103, 85, 112 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallStateDiscardedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 83, 116, 97, 116, 101, 68, 105, 115, 99, 97, 114, 100, 101, 100 }));
        private static ReadOnlySpan<byte> propName_reason => new byte[] { 114, 101, 97, 115, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_reason = JsonEncodedText.Encode(propName_reason);
        private static ReadOnlySpan<byte> propName_need_rating => new byte[] { 110, 101, 101, 100, 95, 114, 97, 116, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_need_rating = JsonEncodedText.Encode(propName_need_rating);
        private static ReadOnlySpan<byte> propName_need_debug_information => new byte[] { 110, 101, 101, 100, 95, 100, 101, 98, 117, 103, 95, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_need_debug_information = JsonEncodedText.Encode(propName_need_debug_information);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallStateDiscarded)tlobj;
            if (obj.Reason != null)
            {
                writer.WritePropertyName(encodedPropName_reason);
                writer.WriteTLObjectValue(obj.Reason);
            }
            writer.WriteBoolean(encodedPropName_need_rating, obj.NeedRating);
            writer.WriteBoolean(encodedPropName_need_debug_information, obj.NeedDebugInformation);
        }
    }

    partial class CallStateErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 83, 116, 97, 116, 101, 69, 114, 114, 111, 114 }));
        private static ReadOnlySpan<byte> propName_error => new byte[] { 101, 114, 114, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_error = JsonEncodedText.Encode(propName_error);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallStateError)tlobj;
            if (obj.Error != null)
            {
                writer.WritePropertyName(encodedPropName_error);
                writer.WriteTLObjectValue(obj.Error);
            }
        }
    }

    partial class GroupCallVideoQualityThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 114, 111, 117, 112, 67, 97, 108, 108, 86, 105, 100, 101, 111, 81, 117, 97, 108, 105, 116, 121, 84, 104, 117, 109, 98, 110, 97, 105, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GroupCallVideoQualityMediumConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 114, 111, 117, 112, 67, 97, 108, 108, 86, 105, 100, 101, 111, 81, 117, 97, 108, 105, 116, 121, 77, 101, 100, 105, 117, 109 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GroupCallVideoQualityFullConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 114, 111, 117, 112, 67, 97, 108, 108, 86, 105, 100, 101, 111, 81, 117, 97, 108, 105, 116, 121, 70, 117, 108, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GroupCallRecentSpeakerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 114, 111, 117, 112, 67, 97, 108, 108, 82, 101, 99, 101, 110, 116, 83, 112, 101, 97, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_participant_id => new byte[] { 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_participant_id = JsonEncodedText.Encode(propName_participant_id);
        private static ReadOnlySpan<byte> propName_is_speaking => new byte[] { 105, 115, 95, 115, 112, 101, 97, 107, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_is_speaking = JsonEncodedText.Encode(propName_is_speaking);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GroupCallRecentSpeaker)tlobj;
            if (obj.ParticipantId != null)
            {
                writer.WritePropertyName(encodedPropName_participant_id);
                writer.WriteTLObjectValue(obj.ParticipantId);
            }
            writer.WriteBoolean(encodedPropName_is_speaking, obj.IsSpeaking);
        }
    }

    partial class GroupCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 114, 111, 117, 112, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_scheduled_start_date => new byte[] { 115, 99, 104, 101, 100, 117, 108, 101, 100, 95, 115, 116, 97, 114, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_scheduled_start_date = JsonEncodedText.Encode(propName_scheduled_start_date);
        private static ReadOnlySpan<byte> propName_enabled_start_notification => new byte[] { 101, 110, 97, 98, 108, 101, 100, 95, 115, 116, 97, 114, 116, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_enabled_start_notification = JsonEncodedText.Encode(propName_enabled_start_notification);
        private static ReadOnlySpan<byte> propName_is_active => new byte[] { 105, 115, 95, 97, 99, 116, 105, 118, 101 };
        private static readonly JsonEncodedText encodedPropName_is_active = JsonEncodedText.Encode(propName_is_active);
        private static ReadOnlySpan<byte> propName_is_joined => new byte[] { 105, 115, 95, 106, 111, 105, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_joined = JsonEncodedText.Encode(propName_is_joined);
        private static ReadOnlySpan<byte> propName_need_rejoin => new byte[] { 110, 101, 101, 100, 95, 114, 101, 106, 111, 105, 110 };
        private static readonly JsonEncodedText encodedPropName_need_rejoin = JsonEncodedText.Encode(propName_need_rejoin);
        private static ReadOnlySpan<byte> propName_can_be_managed => new byte[] { 99, 97, 110, 95, 98, 101, 95, 109, 97, 110, 97, 103, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_can_be_managed = JsonEncodedText.Encode(propName_can_be_managed);
        private static ReadOnlySpan<byte> propName_participant_count => new byte[] { 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_participant_count = JsonEncodedText.Encode(propName_participant_count);
        private static ReadOnlySpan<byte> propName_loaded_all_participants => new byte[] { 108, 111, 97, 100, 101, 100, 95, 97, 108, 108, 95, 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_loaded_all_participants = JsonEncodedText.Encode(propName_loaded_all_participants);
        private static ReadOnlySpan<byte> propName_recent_speakers => new byte[] { 114, 101, 99, 101, 110, 116, 95, 115, 112, 101, 97, 107, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_recent_speakers = JsonEncodedText.Encode(propName_recent_speakers);
        private static ReadOnlySpan<byte> propName_is_my_video_enabled => new byte[] { 105, 115, 95, 109, 121, 95, 118, 105, 100, 101, 111, 95, 101, 110, 97, 98, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_my_video_enabled = JsonEncodedText.Encode(propName_is_my_video_enabled);
        private static ReadOnlySpan<byte> propName_is_my_video_paused => new byte[] { 105, 115, 95, 109, 121, 95, 118, 105, 100, 101, 111, 95, 112, 97, 117, 115, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_my_video_paused = JsonEncodedText.Encode(propName_is_my_video_paused);
        private static ReadOnlySpan<byte> propName_can_enable_video => new byte[] { 99, 97, 110, 95, 101, 110, 97, 98, 108, 101, 95, 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_can_enable_video = JsonEncodedText.Encode(propName_can_enable_video);
        private static ReadOnlySpan<byte> propName_mute_new_participants => new byte[] { 109, 117, 116, 101, 95, 110, 101, 119, 95, 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_mute_new_participants = JsonEncodedText.Encode(propName_mute_new_participants);
        private static ReadOnlySpan<byte> propName_can_toggle_mute_new_participants => new byte[] { 99, 97, 110, 95, 116, 111, 103, 103, 108, 101, 95, 109, 117, 116, 101, 95, 110, 101, 119, 95, 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_can_toggle_mute_new_participants = JsonEncodedText.Encode(propName_can_toggle_mute_new_participants);
        private static ReadOnlySpan<byte> propName_record_duration => new byte[] { 114, 101, 99, 111, 114, 100, 95, 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_record_duration = JsonEncodedText.Encode(propName_record_duration);
        private static ReadOnlySpan<byte> propName_is_video_recorded => new byte[] { 105, 115, 95, 118, 105, 100, 101, 111, 95, 114, 101, 99, 111, 114, 100, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_video_recorded = JsonEncodedText.Encode(propName_is_video_recorded);
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GroupCall)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteNumber(encodedPropName_scheduled_start_date, obj.ScheduledStartDate);
            writer.WriteBoolean(encodedPropName_enabled_start_notification, obj.EnabledStartNotification);
            writer.WriteBoolean(encodedPropName_is_active, obj.IsActive);
            writer.WriteBoolean(encodedPropName_is_joined, obj.IsJoined);
            writer.WriteBoolean(encodedPropName_need_rejoin, obj.NeedRejoin);
            writer.WriteBoolean(encodedPropName_can_be_managed, obj.CanBeManaged);
            writer.WriteNumber(encodedPropName_participant_count, obj.ParticipantCount);
            writer.WriteBoolean(encodedPropName_loaded_all_participants, obj.LoadedAllParticipants);
            if (obj.RecentSpeakers != null)
            {
                writer.WritePropertyName(encodedPropName_recent_speakers);
                writer.WriteArray(obj.RecentSpeakers);
            }
            writer.WriteBoolean(encodedPropName_is_my_video_enabled, obj.IsMyVideoEnabled);
            writer.WriteBoolean(encodedPropName_is_my_video_paused, obj.IsMyVideoPaused);
            writer.WriteBoolean(encodedPropName_can_enable_video, obj.CanEnableVideo);
            writer.WriteBoolean(encodedPropName_mute_new_participants, obj.MuteNewParticipants);
            writer.WriteBoolean(encodedPropName_can_toggle_mute_new_participants, obj.CanToggleMuteNewParticipants);
            writer.WriteNumber(encodedPropName_record_duration, obj.RecordDuration);
            writer.WriteBoolean(encodedPropName_is_video_recorded, obj.IsVideoRecorded);
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
        }
    }

    partial class GroupCallVideoSourceGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 114, 111, 117, 112, 67, 97, 108, 108, 86, 105, 100, 101, 111, 83, 111, 117, 114, 99, 101, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_semantics => new byte[] { 115, 101, 109, 97, 110, 116, 105, 99, 115 };
        private static readonly JsonEncodedText encodedPropName_semantics = JsonEncodedText.Encode(propName_semantics);
        private static ReadOnlySpan<byte> propName_source_ids => new byte[] { 115, 111, 117, 114, 99, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_source_ids = JsonEncodedText.Encode(propName_source_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GroupCallVideoSourceGroup)tlobj;
            writer.WriteString(encodedPropName_semantics, obj.Semantics);
            if (obj.SourceIds != null)
            {
                writer.WritePropertyName(encodedPropName_source_ids);
                writer.WriteArray(obj.SourceIds);
            }
        }
    }

    partial class GroupCallParticipantVideoInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 114, 111, 117, 112, 67, 97, 108, 108, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 86, 105, 100, 101, 111, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_source_groups => new byte[] { 115, 111, 117, 114, 99, 101, 95, 103, 114, 111, 117, 112, 115 };
        private static readonly JsonEncodedText encodedPropName_source_groups = JsonEncodedText.Encode(propName_source_groups);
        private static ReadOnlySpan<byte> propName_endpoint_id => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_endpoint_id = JsonEncodedText.Encode(propName_endpoint_id);
        private static ReadOnlySpan<byte> propName_is_paused => new byte[] { 105, 115, 95, 112, 97, 117, 115, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_paused = JsonEncodedText.Encode(propName_is_paused);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GroupCallParticipantVideoInfo)tlobj;
            if (obj.SourceGroups != null)
            {
                writer.WritePropertyName(encodedPropName_source_groups);
                writer.WriteArray(obj.SourceGroups);
            }
            writer.WriteString(encodedPropName_endpoint_id, obj.EndpointId);
            writer.WriteBoolean(encodedPropName_is_paused, obj.IsPaused);
        }
    }

    partial class GroupCallParticipantConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 114, 111, 117, 112, 67, 97, 108, 108, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116 }));
        private static ReadOnlySpan<byte> propName_participant_id => new byte[] { 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_participant_id = JsonEncodedText.Encode(propName_participant_id);
        private static ReadOnlySpan<byte> propName_audio_source_id => new byte[] { 97, 117, 100, 105, 111, 95, 115, 111, 117, 114, 99, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_audio_source_id = JsonEncodedText.Encode(propName_audio_source_id);
        private static ReadOnlySpan<byte> propName_screen_sharing_audio_source_id => new byte[] { 115, 99, 114, 101, 101, 110, 95, 115, 104, 97, 114, 105, 110, 103, 95, 97, 117, 100, 105, 111, 95, 115, 111, 117, 114, 99, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_screen_sharing_audio_source_id = JsonEncodedText.Encode(propName_screen_sharing_audio_source_id);
        private static ReadOnlySpan<byte> propName_video_info => new byte[] { 118, 105, 100, 101, 111, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_video_info = JsonEncodedText.Encode(propName_video_info);
        private static ReadOnlySpan<byte> propName_screen_sharing_video_info => new byte[] { 115, 99, 114, 101, 101, 110, 95, 115, 104, 97, 114, 105, 110, 103, 95, 118, 105, 100, 101, 111, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_screen_sharing_video_info = JsonEncodedText.Encode(propName_screen_sharing_video_info);
        private static ReadOnlySpan<byte> propName_bio => new byte[] { 98, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_bio = JsonEncodedText.Encode(propName_bio);
        private static ReadOnlySpan<byte> propName_is_current_user => new byte[] { 105, 115, 95, 99, 117, 114, 114, 101, 110, 116, 95, 117, 115, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_is_current_user = JsonEncodedText.Encode(propName_is_current_user);
        private static ReadOnlySpan<byte> propName_is_speaking => new byte[] { 105, 115, 95, 115, 112, 101, 97, 107, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_is_speaking = JsonEncodedText.Encode(propName_is_speaking);
        private static ReadOnlySpan<byte> propName_is_hand_raised => new byte[] { 105, 115, 95, 104, 97, 110, 100, 95, 114, 97, 105, 115, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_hand_raised = JsonEncodedText.Encode(propName_is_hand_raised);
        private static ReadOnlySpan<byte> propName_can_be_muted_for_all_users => new byte[] { 99, 97, 110, 95, 98, 101, 95, 109, 117, 116, 101, 100, 95, 102, 111, 114, 95, 97, 108, 108, 95, 117, 115, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_be_muted_for_all_users = JsonEncodedText.Encode(propName_can_be_muted_for_all_users);
        private static ReadOnlySpan<byte> propName_can_be_unmuted_for_all_users => new byte[] { 99, 97, 110, 95, 98, 101, 95, 117, 110, 109, 117, 116, 101, 100, 95, 102, 111, 114, 95, 97, 108, 108, 95, 117, 115, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_be_unmuted_for_all_users = JsonEncodedText.Encode(propName_can_be_unmuted_for_all_users);
        private static ReadOnlySpan<byte> propName_can_be_muted_for_current_user => new byte[] { 99, 97, 110, 95, 98, 101, 95, 109, 117, 116, 101, 100, 95, 102, 111, 114, 95, 99, 117, 114, 114, 101, 110, 116, 95, 117, 115, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_can_be_muted_for_current_user = JsonEncodedText.Encode(propName_can_be_muted_for_current_user);
        private static ReadOnlySpan<byte> propName_can_be_unmuted_for_current_user => new byte[] { 99, 97, 110, 95, 98, 101, 95, 117, 110, 109, 117, 116, 101, 100, 95, 102, 111, 114, 95, 99, 117, 114, 114, 101, 110, 116, 95, 117, 115, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_can_be_unmuted_for_current_user = JsonEncodedText.Encode(propName_can_be_unmuted_for_current_user);
        private static ReadOnlySpan<byte> propName_is_muted_for_all_users => new byte[] { 105, 115, 95, 109, 117, 116, 101, 100, 95, 102, 111, 114, 95, 97, 108, 108, 95, 117, 115, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_is_muted_for_all_users = JsonEncodedText.Encode(propName_is_muted_for_all_users);
        private static ReadOnlySpan<byte> propName_is_muted_for_current_user => new byte[] { 105, 115, 95, 109, 117, 116, 101, 100, 95, 102, 111, 114, 95, 99, 117, 114, 114, 101, 110, 116, 95, 117, 115, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_is_muted_for_current_user = JsonEncodedText.Encode(propName_is_muted_for_current_user);
        private static ReadOnlySpan<byte> propName_can_unmute_self => new byte[] { 99, 97, 110, 95, 117, 110, 109, 117, 116, 101, 95, 115, 101, 108, 102 };
        private static readonly JsonEncodedText encodedPropName_can_unmute_self = JsonEncodedText.Encode(propName_can_unmute_self);
        private static ReadOnlySpan<byte> propName_volume_level => new byte[] { 118, 111, 108, 117, 109, 101, 95, 108, 101, 118, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_volume_level = JsonEncodedText.Encode(propName_volume_level);
        private static ReadOnlySpan<byte> propName_order => new byte[] { 111, 114, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_order = JsonEncodedText.Encode(propName_order);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GroupCallParticipant)tlobj;
            if (obj.ParticipantId != null)
            {
                writer.WritePropertyName(encodedPropName_participant_id);
                writer.WriteTLObjectValue(obj.ParticipantId);
            }
            writer.WriteNumber(encodedPropName_audio_source_id, obj.AudioSourceId);
            writer.WriteNumber(encodedPropName_screen_sharing_audio_source_id, obj.ScreenSharingAudioSourceId);
            if (obj.VideoInfo != null)
            {
                writer.WritePropertyName(encodedPropName_video_info);
                writer.WriteTLObjectValue(obj.VideoInfo);
            }
            if (obj.ScreenSharingVideoInfo != null)
            {
                writer.WritePropertyName(encodedPropName_screen_sharing_video_info);
                writer.WriteTLObjectValue(obj.ScreenSharingVideoInfo);
            }
            writer.WriteString(encodedPropName_bio, obj.Bio);
            writer.WriteBoolean(encodedPropName_is_current_user, obj.IsCurrentUser);
            writer.WriteBoolean(encodedPropName_is_speaking, obj.IsSpeaking);
            writer.WriteBoolean(encodedPropName_is_hand_raised, obj.IsHandRaised);
            writer.WriteBoolean(encodedPropName_can_be_muted_for_all_users, obj.CanBeMutedForAllUsers);
            writer.WriteBoolean(encodedPropName_can_be_unmuted_for_all_users, obj.CanBeUnmutedForAllUsers);
            writer.WriteBoolean(encodedPropName_can_be_muted_for_current_user, obj.CanBeMutedForCurrentUser);
            writer.WriteBoolean(encodedPropName_can_be_unmuted_for_current_user, obj.CanBeUnmutedForCurrentUser);
            writer.WriteBoolean(encodedPropName_is_muted_for_all_users, obj.IsMutedForAllUsers);
            writer.WriteBoolean(encodedPropName_is_muted_for_current_user, obj.IsMutedForCurrentUser);
            writer.WriteBoolean(encodedPropName_can_unmute_self, obj.CanUnmuteSelf);
            writer.WriteNumber(encodedPropName_volume_level, obj.VolumeLevel);
            writer.WriteString(encodedPropName_order, obj.Order);
        }
    }

    partial class CallProblemEchoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 80, 114, 111, 98, 108, 101, 109, 69, 99, 104, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemNoiseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 80, 114, 111, 98, 108, 101, 109, 78, 111, 105, 115, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemInterruptionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 80, 114, 111, 98, 108, 101, 109, 73, 110, 116, 101, 114, 114, 117, 112, 116, 105, 111, 110, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemDistortedSpeechConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 80, 114, 111, 98, 108, 101, 109, 68, 105, 115, 116, 111, 114, 116, 101, 100, 83, 112, 101, 101, 99, 104 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemSilentLocalConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 80, 114, 111, 98, 108, 101, 109, 83, 105, 108, 101, 110, 116, 76, 111, 99, 97, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemSilentRemoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 80, 114, 111, 98, 108, 101, 109, 83, 105, 108, 101, 110, 116, 82, 101, 109, 111, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemDroppedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 80, 114, 111, 98, 108, 101, 109, 68, 114, 111, 112, 112, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemDistortedVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 80, 114, 111, 98, 108, 101, 109, 68, 105, 115, 116, 111, 114, 116, 101, 100, 86, 105, 100, 101, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemPixelatedVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 80, 114, 111, 98, 108, 101, 109, 80, 105, 120, 101, 108, 97, 116, 101, 100, 86, 105, 100, 101, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_is_outgoing => new byte[] { 105, 115, 95, 111, 117, 116, 103, 111, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_is_outgoing = JsonEncodedText.Encode(propName_is_outgoing);
        private static ReadOnlySpan<byte> propName_is_video => new byte[] { 105, 115, 95, 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_is_video = JsonEncodedText.Encode(propName_is_video);
        private static ReadOnlySpan<byte> propName_state => new byte[] { 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_state = JsonEncodedText.Encode(propName_state);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Call)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteBoolean(encodedPropName_is_outgoing, obj.IsOutgoing);
            writer.WriteBoolean(encodedPropName_is_video, obj.IsVideo);
            if (obj.State != null)
            {
                writer.WritePropertyName(encodedPropName_state);
                writer.WriteTLObjectValue(obj.State);
            }
        }
    }

    partial class PhoneNumberAuthenticationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_allow_flash_call => new byte[] { 97, 108, 108, 111, 119, 95, 102, 108, 97, 115, 104, 95, 99, 97, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_allow_flash_call = JsonEncodedText.Encode(propName_allow_flash_call);
        private static ReadOnlySpan<byte> propName_is_current_phone_number => new byte[] { 105, 115, 95, 99, 117, 114, 114, 101, 110, 116, 95, 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_is_current_phone_number = JsonEncodedText.Encode(propName_is_current_phone_number);
        private static ReadOnlySpan<byte> propName_allow_sms_retriever_api => new byte[] { 97, 108, 108, 111, 119, 95, 115, 109, 115, 95, 114, 101, 116, 114, 105, 101, 118, 101, 114, 95, 97, 112, 105 };
        private static readonly JsonEncodedText encodedPropName_allow_sms_retriever_api = JsonEncodedText.Encode(propName_allow_sms_retriever_api);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PhoneNumberAuthenticationSettings)tlobj;
            writer.WriteBoolean(encodedPropName_allow_flash_call, obj.AllowFlashCall);
            writer.WriteBoolean(encodedPropName_is_current_phone_number, obj.IsCurrentPhoneNumber);
            writer.WriteBoolean(encodedPropName_allow_sms_retriever_api, obj.AllowSmsRetrieverApi);
        }
    }

    partial class AnimationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_animations => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_animations = JsonEncodedText.Encode(propName_animations);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Animations)tlobj;
            if (obj.Animations_ != null)
            {
                writer.WritePropertyName(encodedPropName_animations);
                writer.WriteArray(obj.Animations_);
            }
        }
    }

    partial class DiceStickersRegularConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 105, 99, 101, 83, 116, 105, 99, 107, 101, 114, 115, 82, 101, 103, 117, 108, 97, 114 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DiceStickersRegular)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class DiceStickersSlotMachineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 105, 99, 101, 83, 116, 105, 99, 107, 101, 114, 115, 83, 108, 111, 116, 77, 97, 99, 104, 105, 110, 101 }));
        private static ReadOnlySpan<byte> propName_background => new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_background = JsonEncodedText.Encode(propName_background);
        private static ReadOnlySpan<byte> propName_lever => new byte[] { 108, 101, 118, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_lever = JsonEncodedText.Encode(propName_lever);
        private static ReadOnlySpan<byte> propName_left_reel => new byte[] { 108, 101, 102, 116, 95, 114, 101, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_left_reel = JsonEncodedText.Encode(propName_left_reel);
        private static ReadOnlySpan<byte> propName_center_reel => new byte[] { 99, 101, 110, 116, 101, 114, 95, 114, 101, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_center_reel = JsonEncodedText.Encode(propName_center_reel);
        private static ReadOnlySpan<byte> propName_right_reel => new byte[] { 114, 105, 103, 104, 116, 95, 114, 101, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_right_reel = JsonEncodedText.Encode(propName_right_reel);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DiceStickersSlotMachine)tlobj;
            if (obj.Background != null)
            {
                writer.WritePropertyName(encodedPropName_background);
                writer.WriteTLObjectValue(obj.Background);
            }
            if (obj.Lever != null)
            {
                writer.WritePropertyName(encodedPropName_lever);
                writer.WriteTLObjectValue(obj.Lever);
            }
            if (obj.LeftReel != null)
            {
                writer.WritePropertyName(encodedPropName_left_reel);
                writer.WriteTLObjectValue(obj.LeftReel);
            }
            if (obj.CenterReel != null)
            {
                writer.WritePropertyName(encodedPropName_center_reel);
                writer.WriteTLObjectValue(obj.CenterReel);
            }
            if (obj.RightReel != null)
            {
                writer.WritePropertyName(encodedPropName_right_reel);
                writer.WriteTLObjectValue(obj.RightReel);
            }
        }
    }

    partial class ImportedContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 109, 112, 111, 114, 116, 101, 100, 67, 111, 110, 116, 97, 99, 116, 115 }));
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        private static ReadOnlySpan<byte> propName_importer_count => new byte[] { 105, 109, 112, 111, 114, 116, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_importer_count = JsonEncodedText.Encode(propName_importer_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ImportedContacts)tlobj;
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
            if (obj.ImporterCount != null)
            {
                writer.WritePropertyName(encodedPropName_importer_count);
                writer.WriteArray(obj.ImporterCount);
            }
        }
    }

    partial class HttpUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 104, 116, 116, 112, 85, 114, 108 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (HttpUrl)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
        }
    }

    partial class InputInlineQueryResultAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_thumbnail_url => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_url = JsonEncodedText.Encode(propName_thumbnail_url);
        private static ReadOnlySpan<byte> propName_thumbnail_mime_type => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 109, 105, 109, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_mime_type = JsonEncodedText.Encode(propName_thumbnail_mime_type);
        private static ReadOnlySpan<byte> propName_video_url => new byte[] { 118, 105, 100, 101, 111, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_video_url = JsonEncodedText.Encode(propName_video_url);
        private static ReadOnlySpan<byte> propName_video_mime_type => new byte[] { 118, 105, 100, 101, 111, 95, 109, 105, 109, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_video_mime_type = JsonEncodedText.Encode(propName_video_mime_type);
        private static ReadOnlySpan<byte> propName_video_duration => new byte[] { 118, 105, 100, 101, 111, 95, 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_video_duration = JsonEncodedText.Encode(propName_video_duration);
        private static ReadOnlySpan<byte> propName_video_width => new byte[] { 118, 105, 100, 101, 111, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_video_width = JsonEncodedText.Encode(propName_video_width);
        private static ReadOnlySpan<byte> propName_video_height => new byte[] { 118, 105, 100, 101, 111, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_video_height = JsonEncodedText.Encode(propName_video_height);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultAnimation)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteString(encodedPropName_thumbnail_mime_type, obj.ThumbnailMimeType);
            writer.WriteString(encodedPropName_video_url, obj.VideoUrl);
            writer.WriteString(encodedPropName_video_mime_type, obj.VideoMimeType);
            writer.WriteNumber(encodedPropName_video_duration, obj.VideoDuration);
            writer.WriteNumber(encodedPropName_video_width, obj.VideoWidth);
            writer.WriteNumber(encodedPropName_video_height, obj.VideoHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultArticleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 65, 114, 116, 105, 99, 108, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_hide_url => new byte[] { 104, 105, 100, 101, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_hide_url = JsonEncodedText.Encode(propName_hide_url);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_thumbnail_url => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_url = JsonEncodedText.Encode(propName_thumbnail_url);
        private static ReadOnlySpan<byte> propName_thumbnail_width => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_width = JsonEncodedText.Encode(propName_thumbnail_width);
        private static ReadOnlySpan<byte> propName_thumbnail_height => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_height = JsonEncodedText.Encode(propName_thumbnail_height);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultArticle)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteBoolean(encodedPropName_hide_url, obj.HideUrl);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
            writer.WriteString(encodedPropName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteNumber(encodedPropName_thumbnail_width, obj.ThumbnailWidth);
            writer.WriteNumber(encodedPropName_thumbnail_height, obj.ThumbnailHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 65, 117, 100, 105, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_performer => new byte[] { 112, 101, 114, 102, 111, 114, 109, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_performer = JsonEncodedText.Encode(propName_performer);
        private static ReadOnlySpan<byte> propName_audio_url => new byte[] { 97, 117, 100, 105, 111, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_audio_url = JsonEncodedText.Encode(propName_audio_url);
        private static ReadOnlySpan<byte> propName_audio_duration => new byte[] { 97, 117, 100, 105, 111, 95, 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_audio_duration = JsonEncodedText.Encode(propName_audio_duration);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultAudio)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_performer, obj.Performer);
            writer.WriteString(encodedPropName_audio_url, obj.AudioUrl);
            writer.WriteNumber(encodedPropName_audio_duration, obj.AudioDuration);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 67, 111, 110, 116, 97, 99, 116 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_contact => new byte[] { 99, 111, 110, 116, 97, 99, 116 };
        private static readonly JsonEncodedText encodedPropName_contact = JsonEncodedText.Encode(propName_contact);
        private static ReadOnlySpan<byte> propName_thumbnail_url => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_url = JsonEncodedText.Encode(propName_thumbnail_url);
        private static ReadOnlySpan<byte> propName_thumbnail_width => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_width = JsonEncodedText.Encode(propName_thumbnail_width);
        private static ReadOnlySpan<byte> propName_thumbnail_height => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_height = JsonEncodedText.Encode(propName_thumbnail_height);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultContact)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Contact != null)
            {
                writer.WritePropertyName(encodedPropName_contact);
                writer.WriteTLObjectValue(obj.Contact);
            }
            writer.WriteString(encodedPropName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteNumber(encodedPropName_thumbnail_width, obj.ThumbnailWidth);
            writer.WriteNumber(encodedPropName_thumbnail_height, obj.ThumbnailHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 68, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_document_url => new byte[] { 100, 111, 99, 117, 109, 101, 110, 116, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_document_url = JsonEncodedText.Encode(propName_document_url);
        private static ReadOnlySpan<byte> propName_mime_type => new byte[] { 109, 105, 109, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_mime_type = JsonEncodedText.Encode(propName_mime_type);
        private static ReadOnlySpan<byte> propName_thumbnail_url => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_url = JsonEncodedText.Encode(propName_thumbnail_url);
        private static ReadOnlySpan<byte> propName_thumbnail_width => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_width = JsonEncodedText.Encode(propName_thumbnail_width);
        private static ReadOnlySpan<byte> propName_thumbnail_height => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_height = JsonEncodedText.Encode(propName_thumbnail_height);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultDocument)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
            writer.WriteString(encodedPropName_document_url, obj.DocumentUrl);
            writer.WriteString(encodedPropName_mime_type, obj.MimeType);
            writer.WriteString(encodedPropName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteNumber(encodedPropName_thumbnail_width, obj.ThumbnailWidth);
            writer.WriteNumber(encodedPropName_thumbnail_height, obj.ThumbnailHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 71, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_game_short_name => new byte[] { 103, 97, 109, 101, 95, 115, 104, 111, 114, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_game_short_name = JsonEncodedText.Encode(propName_game_short_name);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultGame)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_game_short_name, obj.GameShortName);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class InputInlineQueryResultLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 76, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_live_period => new byte[] { 108, 105, 118, 101, 95, 112, 101, 114, 105, 111, 100 };
        private static readonly JsonEncodedText encodedPropName_live_period = JsonEncodedText.Encode(propName_live_period);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_thumbnail_url => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_url = JsonEncodedText.Encode(propName_thumbnail_url);
        private static ReadOnlySpan<byte> propName_thumbnail_width => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_width = JsonEncodedText.Encode(propName_thumbnail_width);
        private static ReadOnlySpan<byte> propName_thumbnail_height => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_height = JsonEncodedText.Encode(propName_thumbnail_height);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultLocation)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(encodedPropName_live_period, obj.LivePeriod);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteNumber(encodedPropName_thumbnail_width, obj.ThumbnailWidth);
            writer.WriteNumber(encodedPropName_thumbnail_height, obj.ThumbnailHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_thumbnail_url => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_url = JsonEncodedText.Encode(propName_thumbnail_url);
        private static ReadOnlySpan<byte> propName_photo_url => new byte[] { 112, 104, 111, 116, 111, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_photo_url = JsonEncodedText.Encode(propName_photo_url);
        private static ReadOnlySpan<byte> propName_photo_width => new byte[] { 112, 104, 111, 116, 111, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_photo_width = JsonEncodedText.Encode(propName_photo_width);
        private static ReadOnlySpan<byte> propName_photo_height => new byte[] { 112, 104, 111, 116, 111, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_photo_height = JsonEncodedText.Encode(propName_photo_height);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultPhoto)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
            writer.WriteString(encodedPropName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteString(encodedPropName_photo_url, obj.PhotoUrl);
            writer.WriteNumber(encodedPropName_photo_width, obj.PhotoWidth);
            writer.WriteNumber(encodedPropName_photo_height, obj.PhotoHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 83, 116, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_thumbnail_url => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_url = JsonEncodedText.Encode(propName_thumbnail_url);
        private static ReadOnlySpan<byte> propName_sticker_url => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_sticker_url = JsonEncodedText.Encode(propName_sticker_url);
        private static ReadOnlySpan<byte> propName_sticker_width => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_sticker_width = JsonEncodedText.Encode(propName_sticker_width);
        private static ReadOnlySpan<byte> propName_sticker_height => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_sticker_height = JsonEncodedText.Encode(propName_sticker_height);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultSticker)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteString(encodedPropName_sticker_url, obj.StickerUrl);
            writer.WriteNumber(encodedPropName_sticker_width, obj.StickerWidth);
            writer.WriteNumber(encodedPropName_sticker_height, obj.StickerHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultVenueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 86, 101, 110, 117, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_venue => new byte[] { 118, 101, 110, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_venue = JsonEncodedText.Encode(propName_venue);
        private static ReadOnlySpan<byte> propName_thumbnail_url => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_url = JsonEncodedText.Encode(propName_thumbnail_url);
        private static ReadOnlySpan<byte> propName_thumbnail_width => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_width = JsonEncodedText.Encode(propName_thumbnail_width);
        private static ReadOnlySpan<byte> propName_thumbnail_height => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_height = JsonEncodedText.Encode(propName_thumbnail_height);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultVenue)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Venue != null)
            {
                writer.WritePropertyName(encodedPropName_venue);
                writer.WriteTLObjectValue(obj.Venue);
            }
            writer.WriteString(encodedPropName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteNumber(encodedPropName_thumbnail_width, obj.ThumbnailWidth);
            writer.WriteNumber(encodedPropName_thumbnail_height, obj.ThumbnailHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 86, 105, 100, 101, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_thumbnail_url => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail_url = JsonEncodedText.Encode(propName_thumbnail_url);
        private static ReadOnlySpan<byte> propName_video_url => new byte[] { 118, 105, 100, 101, 111, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_video_url = JsonEncodedText.Encode(propName_video_url);
        private static ReadOnlySpan<byte> propName_mime_type => new byte[] { 109, 105, 109, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_mime_type = JsonEncodedText.Encode(propName_mime_type);
        private static ReadOnlySpan<byte> propName_video_width => new byte[] { 118, 105, 100, 101, 111, 95, 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_video_width = JsonEncodedText.Encode(propName_video_width);
        private static ReadOnlySpan<byte> propName_video_height => new byte[] { 118, 105, 100, 101, 111, 95, 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_video_height = JsonEncodedText.Encode(propName_video_height);
        private static ReadOnlySpan<byte> propName_video_duration => new byte[] { 118, 105, 100, 101, 111, 95, 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_video_duration = JsonEncodedText.Encode(propName_video_duration);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultVideo)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
            writer.WriteString(encodedPropName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteString(encodedPropName_video_url, obj.VideoUrl);
            writer.WriteString(encodedPropName_mime_type, obj.MimeType);
            writer.WriteNumber(encodedPropName_video_width, obj.VideoWidth);
            writer.WriteNumber(encodedPropName_video_height, obj.VideoHeight);
            writer.WriteNumber(encodedPropName_video_duration, obj.VideoDuration);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 86, 111, 105, 99, 101, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_voice_note_url => new byte[] { 118, 111, 105, 99, 101, 95, 110, 111, 116, 101, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_voice_note_url = JsonEncodedText.Encode(propName_voice_note_url);
        private static ReadOnlySpan<byte> propName_voice_note_duration => new byte[] { 118, 111, 105, 99, 101, 95, 110, 111, 116, 101, 95, 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_voice_note_duration = JsonEncodedText.Encode(propName_voice_note_duration);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultVoiceNote)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_voice_note_url, obj.VoiceNoteUrl);
            writer.WriteNumber(encodedPropName_voice_note_duration, obj.VoiceNoteDuration);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InlineQueryResultArticleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 65, 114, 116, 105, 99, 108, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_hide_url => new byte[] { 104, 105, 100, 101, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_hide_url = JsonEncodedText.Encode(propName_hide_url);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultArticle)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteBoolean(encodedPropName_hide_url, obj.HideUrl);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
        }
    }

    partial class InlineQueryResultContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 67, 111, 110, 116, 97, 99, 116 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_contact => new byte[] { 99, 111, 110, 116, 97, 99, 116 };
        private static readonly JsonEncodedText encodedPropName_contact = JsonEncodedText.Encode(propName_contact);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultContact)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Contact != null)
            {
                writer.WritePropertyName(encodedPropName_contact);
                writer.WriteTLObjectValue(obj.Contact);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
        }
    }

    partial class InlineQueryResultLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 76, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultLocation)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
        }
    }

    partial class InlineQueryResultVenueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 86, 101, 110, 117, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_venue => new byte[] { 118, 101, 110, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_venue = JsonEncodedText.Encode(propName_venue);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultVenue)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Venue != null)
            {
                writer.WritePropertyName(encodedPropName_venue);
                writer.WriteTLObjectValue(obj.Venue);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
        }
    }

    partial class InlineQueryResultGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 71, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_game => new byte[] { 103, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_game = JsonEncodedText.Encode(propName_game);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultGame)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Game != null)
            {
                writer.WritePropertyName(encodedPropName_game);
                writer.WriteTLObjectValue(obj.Game);
            }
        }
    }

    partial class InlineQueryResultAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultAnimation)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class InlineQueryResultAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 65, 117, 100, 105, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_audio => new byte[] { 97, 117, 100, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_audio = JsonEncodedText.Encode(propName_audio);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultAudio)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Audio != null)
            {
                writer.WritePropertyName(encodedPropName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
        }
    }

    partial class InlineQueryResultDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 68, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_document => new byte[] { 100, 111, 99, 117, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_document = JsonEncodedText.Encode(propName_document);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultDocument)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Document != null)
            {
                writer.WritePropertyName(encodedPropName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
        }
    }

    partial class InlineQueryResultPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultPhoto)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
        }
    }

    partial class InlineQueryResultStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 83, 116, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultSticker)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class InlineQueryResultVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 86, 105, 100, 101, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_video => new byte[] { 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_video = JsonEncodedText.Encode(propName_video);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultVideo)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.Video != null)
            {
                writer.WritePropertyName(encodedPropName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_description, obj.Description);
        }
    }

    partial class InlineQueryResultVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 86, 111, 105, 99, 101, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_voice_note => new byte[] { 118, 111, 105, 99, 101, 95, 110, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_voice_note = JsonEncodedText.Encode(propName_voice_note);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultVoiceNote)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(encodedPropName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class InlineQueryResultsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 115 }));
        private static ReadOnlySpan<byte> propName_inline_query_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 113, 117, 101, 114, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_query_id = JsonEncodedText.Encode(propName_inline_query_id);
        private static ReadOnlySpan<byte> propName_next_offset => new byte[] { 110, 101, 120, 116, 95, 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_next_offset = JsonEncodedText.Encode(propName_next_offset);
        private static ReadOnlySpan<byte> propName_results => new byte[] { 114, 101, 115, 117, 108, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_results = JsonEncodedText.Encode(propName_results);
        private static ReadOnlySpan<byte> propName_switch_pm_text => new byte[] { 115, 119, 105, 116, 99, 104, 95, 112, 109, 95, 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_switch_pm_text = JsonEncodedText.Encode(propName_switch_pm_text);
        private static ReadOnlySpan<byte> propName_switch_pm_parameter => new byte[] { 115, 119, 105, 116, 99, 104, 95, 112, 109, 95, 112, 97, 114, 97, 109, 101, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_switch_pm_parameter = JsonEncodedText.Encode(propName_switch_pm_parameter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResults)tlobj;
            writer.WritePropertyName(encodedPropName_inline_query_id);
            writer.WriteInt64String(obj.InlineQueryId);
            writer.WriteString(encodedPropName_next_offset, obj.NextOffset);
            if (obj.Results != null)
            {
                writer.WritePropertyName(encodedPropName_results);
                writer.WriteArray(obj.Results);
            }
            writer.WriteString(encodedPropName_switch_pm_text, obj.SwitchPmText);
            writer.WriteString(encodedPropName_switch_pm_parameter, obj.SwitchPmParameter);
        }
    }

    partial class CallbackQueryPayloadDataConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 98, 97, 99, 107, 81, 117, 101, 114, 121, 80, 97, 121, 108, 111, 97, 100, 68, 97, 116, 97 }));
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallbackQueryPayloadData)tlobj;
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
        }
    }

    partial class CallbackQueryPayloadDataWithPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 98, 97, 99, 107, 81, 117, 101, 114, 121, 80, 97, 121, 108, 111, 97, 100, 68, 97, 116, 97, 87, 105, 116, 104, 80, 97, 115, 115, 119, 111, 114, 100 }));
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallbackQueryPayloadDataWithPassword)tlobj;
            writer.WriteString(encodedPropName_password, obj.Password);
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
        }
    }

    partial class CallbackQueryPayloadGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 98, 97, 99, 107, 81, 117, 101, 114, 121, 80, 97, 121, 108, 111, 97, 100, 71, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_game_short_name => new byte[] { 103, 97, 109, 101, 95, 115, 104, 111, 114, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_game_short_name = JsonEncodedText.Encode(propName_game_short_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallbackQueryPayloadGame)tlobj;
            writer.WriteString(encodedPropName_game_short_name, obj.GameShortName);
        }
    }

    partial class CallbackQueryAnswerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 108, 108, 98, 97, 99, 107, 81, 117, 101, 114, 121, 65, 110, 115, 119, 101, 114 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_show_alert => new byte[] { 115, 104, 111, 119, 95, 97, 108, 101, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_show_alert = JsonEncodedText.Encode(propName_show_alert);
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallbackQueryAnswer)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
            writer.WriteBoolean(encodedPropName_show_alert, obj.ShowAlert);
            writer.WriteString(encodedPropName_url, obj.Url);
        }
    }

    partial class CustomRequestResultConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 117, 115, 116, 111, 109, 82, 101, 113, 117, 101, 115, 116, 82, 101, 115, 117, 108, 116 }));
        private static ReadOnlySpan<byte> propName_result => new byte[] { 114, 101, 115, 117, 108, 116 };
        private static readonly JsonEncodedText encodedPropName_result = JsonEncodedText.Encode(propName_result);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CustomRequestResult)tlobj;
            writer.WriteString(encodedPropName_result, obj.Result);
        }
    }

    partial class GameHighScoreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 97, 109, 101, 72, 105, 103, 104, 83, 99, 111, 114, 101 }));
        private static ReadOnlySpan<byte> propName_position => new byte[] { 112, 111, 115, 105, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_position = JsonEncodedText.Encode(propName_position);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_score => new byte[] { 115, 99, 111, 114, 101 };
        private static readonly JsonEncodedText encodedPropName_score = JsonEncodedText.Encode(propName_score);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GameHighScore)tlobj;
            writer.WriteNumber(encodedPropName_position, obj.Position);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_score, obj.Score);
        }
    }

    partial class GameHighScoresConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 97, 109, 101, 72, 105, 103, 104, 83, 99, 111, 114, 101, 115 }));
        private static ReadOnlySpan<byte> propName_scores => new byte[] { 115, 99, 111, 114, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_scores = JsonEncodedText.Encode(propName_scores);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GameHighScores)tlobj;
            if (obj.Scores != null)
            {
                writer.WritePropertyName(encodedPropName_scores);
                writer.WriteArray(obj.Scores);
            }
        }
    }

    partial class ChatEventMessageEditedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 115, 115, 97, 103, 101, 69, 100, 105, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_message => new byte[] { 111, 108, 100, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_old_message = JsonEncodedText.Encode(propName_old_message);
        private static ReadOnlySpan<byte> propName_new_message => new byte[] { 110, 101, 119, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_new_message = JsonEncodedText.Encode(propName_new_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMessageEdited)tlobj;
            if (obj.OldMessage != null)
            {
                writer.WritePropertyName(encodedPropName_old_message);
                writer.WriteTLObjectValue(obj.OldMessage);
            }
            if (obj.NewMessage != null)
            {
                writer.WritePropertyName(encodedPropName_new_message);
                writer.WriteTLObjectValue(obj.NewMessage);
            }
        }
    }

    partial class ChatEventMessageDeletedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 115, 115, 97, 103, 101, 68, 101, 108, 101, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMessageDeleted)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(encodedPropName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class ChatEventPollStoppedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 80, 111, 108, 108, 83, 116, 111, 112, 112, 101, 100 }));
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventPollStopped)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(encodedPropName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class ChatEventMessagePinnedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 115, 115, 97, 103, 101, 80, 105, 110, 110, 101, 100 }));
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMessagePinned)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(encodedPropName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class ChatEventMessageUnpinnedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 115, 115, 97, 103, 101, 85, 110, 112, 105, 110, 110, 101, 100 }));
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMessageUnpinned)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(encodedPropName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class ChatEventMemberJoinedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 109, 98, 101, 114, 74, 111, 105, 110, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatEventMemberJoinedByInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 109, 98, 101, 114, 74, 111, 105, 110, 101, 100, 66, 121, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMemberJoinedByInviteLink)tlobj;
            if (obj.InviteLink != null)
            {
                writer.WritePropertyName(encodedPropName_invite_link);
                writer.WriteTLObjectValue(obj.InviteLink);
            }
        }
    }

    partial class ChatEventMemberJoinedByRequestConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 109, 98, 101, 114, 74, 111, 105, 110, 101, 100, 66, 121, 82, 101, 113, 117, 101, 115, 116 }));
        private static ReadOnlySpan<byte> propName_approver_user_id => new byte[] { 97, 112, 112, 114, 111, 118, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_approver_user_id = JsonEncodedText.Encode(propName_approver_user_id);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMemberJoinedByRequest)tlobj;
            writer.WriteNumber(encodedPropName_approver_user_id, obj.ApproverUserId);
            if (obj.InviteLink != null)
            {
                writer.WritePropertyName(encodedPropName_invite_link);
                writer.WriteTLObjectValue(obj.InviteLink);
            }
        }
    }

    partial class ChatEventMemberLeftConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 109, 98, 101, 114, 76, 101, 102, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatEventMemberInvitedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 109, 98, 101, 114, 73, 110, 118, 105, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_status => new byte[] { 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_status = JsonEncodedText.Encode(propName_status);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMemberInvited)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.Status != null)
            {
                writer.WritePropertyName(encodedPropName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
        }
    }

    partial class ChatEventMemberPromotedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 109, 98, 101, 114, 80, 114, 111, 109, 111, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_old_status => new byte[] { 111, 108, 100, 95, 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_old_status = JsonEncodedText.Encode(propName_old_status);
        private static ReadOnlySpan<byte> propName_new_status => new byte[] { 110, 101, 119, 95, 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_new_status = JsonEncodedText.Encode(propName_new_status);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMemberPromoted)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.OldStatus != null)
            {
                writer.WritePropertyName(encodedPropName_old_status);
                writer.WriteTLObjectValue(obj.OldStatus);
            }
            if (obj.NewStatus != null)
            {
                writer.WritePropertyName(encodedPropName_new_status);
                writer.WriteTLObjectValue(obj.NewStatus);
            }
        }
    }

    partial class ChatEventMemberRestrictedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 109, 98, 101, 114, 82, 101, 115, 116, 114, 105, 99, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_member_id => new byte[] { 109, 101, 109, 98, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_member_id = JsonEncodedText.Encode(propName_member_id);
        private static ReadOnlySpan<byte> propName_old_status => new byte[] { 111, 108, 100, 95, 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_old_status = JsonEncodedText.Encode(propName_old_status);
        private static ReadOnlySpan<byte> propName_new_status => new byte[] { 110, 101, 119, 95, 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_new_status = JsonEncodedText.Encode(propName_new_status);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMemberRestricted)tlobj;
            if (obj.MemberId != null)
            {
                writer.WritePropertyName(encodedPropName_member_id);
                writer.WriteTLObjectValue(obj.MemberId);
            }
            if (obj.OldStatus != null)
            {
                writer.WritePropertyName(encodedPropName_old_status);
                writer.WriteTLObjectValue(obj.OldStatus);
            }
            if (obj.NewStatus != null)
            {
                writer.WritePropertyName(encodedPropName_new_status);
                writer.WriteTLObjectValue(obj.NewStatus);
            }
        }
    }

    partial class ChatEventTitleChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 84, 105, 116, 108, 101, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_title => new byte[] { 111, 108, 100, 95, 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_old_title = JsonEncodedText.Encode(propName_old_title);
        private static ReadOnlySpan<byte> propName_new_title => new byte[] { 110, 101, 119, 95, 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_new_title = JsonEncodedText.Encode(propName_new_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventTitleChanged)tlobj;
            writer.WriteString(encodedPropName_old_title, obj.OldTitle);
            writer.WriteString(encodedPropName_new_title, obj.NewTitle);
        }
    }

    partial class ChatEventPermissionsChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_permissions => new byte[] { 111, 108, 100, 95, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_old_permissions = JsonEncodedText.Encode(propName_old_permissions);
        private static ReadOnlySpan<byte> propName_new_permissions => new byte[] { 110, 101, 119, 95, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_new_permissions = JsonEncodedText.Encode(propName_new_permissions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventPermissionsChanged)tlobj;
            if (obj.OldPermissions != null)
            {
                writer.WritePropertyName(encodedPropName_old_permissions);
                writer.WriteTLObjectValue(obj.OldPermissions);
            }
            if (obj.NewPermissions != null)
            {
                writer.WritePropertyName(encodedPropName_new_permissions);
                writer.WriteTLObjectValue(obj.NewPermissions);
            }
        }
    }

    partial class ChatEventDescriptionChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_description => new byte[] { 111, 108, 100, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_old_description = JsonEncodedText.Encode(propName_old_description);
        private static ReadOnlySpan<byte> propName_new_description => new byte[] { 110, 101, 119, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_new_description = JsonEncodedText.Encode(propName_new_description);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventDescriptionChanged)tlobj;
            writer.WriteString(encodedPropName_old_description, obj.OldDescription);
            writer.WriteString(encodedPropName_new_description, obj.NewDescription);
        }
    }

    partial class ChatEventUsernameChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 85, 115, 101, 114, 110, 97, 109, 101, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_username => new byte[] { 111, 108, 100, 95, 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_old_username = JsonEncodedText.Encode(propName_old_username);
        private static ReadOnlySpan<byte> propName_new_username => new byte[] { 110, 101, 119, 95, 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_new_username = JsonEncodedText.Encode(propName_new_username);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventUsernameChanged)tlobj;
            writer.WriteString(encodedPropName_old_username, obj.OldUsername);
            writer.WriteString(encodedPropName_new_username, obj.NewUsername);
        }
    }

    partial class ChatEventPhotoChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 80, 104, 111, 116, 111, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_photo => new byte[] { 111, 108, 100, 95, 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_old_photo = JsonEncodedText.Encode(propName_old_photo);
        private static ReadOnlySpan<byte> propName_new_photo => new byte[] { 110, 101, 119, 95, 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_new_photo = JsonEncodedText.Encode(propName_new_photo);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventPhotoChanged)tlobj;
            if (obj.OldPhoto != null)
            {
                writer.WritePropertyName(encodedPropName_old_photo);
                writer.WriteTLObjectValue(obj.OldPhoto);
            }
            if (obj.NewPhoto != null)
            {
                writer.WritePropertyName(encodedPropName_new_photo);
                writer.WriteTLObjectValue(obj.NewPhoto);
            }
        }
    }

    partial class ChatEventInvitesToggledConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 73, 110, 118, 105, 116, 101, 115, 84, 111, 103, 103, 108, 101, 100 }));
        private static ReadOnlySpan<byte> propName_can_invite_users => new byte[] { 99, 97, 110, 95, 105, 110, 118, 105, 116, 101, 95, 117, 115, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_can_invite_users = JsonEncodedText.Encode(propName_can_invite_users);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventInvitesToggled)tlobj;
            writer.WriteBoolean(encodedPropName_can_invite_users, obj.CanInviteUsers);
        }
    }

    partial class ChatEventLinkedChatChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 76, 105, 110, 107, 101, 100, 67, 104, 97, 116, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_linked_chat_id => new byte[] { 111, 108, 100, 95, 108, 105, 110, 107, 101, 100, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_old_linked_chat_id = JsonEncodedText.Encode(propName_old_linked_chat_id);
        private static ReadOnlySpan<byte> propName_new_linked_chat_id => new byte[] { 110, 101, 119, 95, 108, 105, 110, 107, 101, 100, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_new_linked_chat_id = JsonEncodedText.Encode(propName_new_linked_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventLinkedChatChanged)tlobj;
            writer.WriteNumber(encodedPropName_old_linked_chat_id, obj.OldLinkedChatId);
            writer.WriteNumber(encodedPropName_new_linked_chat_id, obj.NewLinkedChatId);
        }
    }

    partial class ChatEventSlowModeDelayChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 83, 108, 111, 119, 77, 111, 100, 101, 68, 101, 108, 97, 121, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_slow_mode_delay => new byte[] { 111, 108, 100, 95, 115, 108, 111, 119, 95, 109, 111, 100, 101, 95, 100, 101, 108, 97, 121 };
        private static readonly JsonEncodedText encodedPropName_old_slow_mode_delay = JsonEncodedText.Encode(propName_old_slow_mode_delay);
        private static ReadOnlySpan<byte> propName_new_slow_mode_delay => new byte[] { 110, 101, 119, 95, 115, 108, 111, 119, 95, 109, 111, 100, 101, 95, 100, 101, 108, 97, 121 };
        private static readonly JsonEncodedText encodedPropName_new_slow_mode_delay = JsonEncodedText.Encode(propName_new_slow_mode_delay);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventSlowModeDelayChanged)tlobj;
            writer.WriteNumber(encodedPropName_old_slow_mode_delay, obj.OldSlowModeDelay);
            writer.WriteNumber(encodedPropName_new_slow_mode_delay, obj.NewSlowModeDelay);
        }
    }

    partial class ChatEventMessageTtlSettingChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 77, 101, 115, 115, 97, 103, 101, 84, 116, 108, 83, 101, 116, 116, 105, 110, 103, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_message_ttl_setting => new byte[] { 111, 108, 100, 95, 109, 101, 115, 115, 97, 103, 101, 95, 116, 116, 108, 95, 115, 101, 116, 116, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_old_message_ttl_setting = JsonEncodedText.Encode(propName_old_message_ttl_setting);
        private static ReadOnlySpan<byte> propName_new_message_ttl_setting => new byte[] { 110, 101, 119, 95, 109, 101, 115, 115, 97, 103, 101, 95, 116, 116, 108, 95, 115, 101, 116, 116, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_new_message_ttl_setting = JsonEncodedText.Encode(propName_new_message_ttl_setting);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMessageTtlSettingChanged)tlobj;
            writer.WriteNumber(encodedPropName_old_message_ttl_setting, obj.OldMessageTtlSetting);
            writer.WriteNumber(encodedPropName_new_message_ttl_setting, obj.NewMessageTtlSetting);
        }
    }

    partial class ChatEventSignMessagesToggledConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 83, 105, 103, 110, 77, 101, 115, 115, 97, 103, 101, 115, 84, 111, 103, 103, 108, 101, 100 }));
        private static ReadOnlySpan<byte> propName_sign_messages => new byte[] { 115, 105, 103, 110, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_sign_messages = JsonEncodedText.Encode(propName_sign_messages);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventSignMessagesToggled)tlobj;
            writer.WriteBoolean(encodedPropName_sign_messages, obj.SignMessages);
        }
    }

    partial class ChatEventStickerSetChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_sticker_set_id => new byte[] { 111, 108, 100, 95, 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_old_sticker_set_id = JsonEncodedText.Encode(propName_old_sticker_set_id);
        private static ReadOnlySpan<byte> propName_new_sticker_set_id => new byte[] { 110, 101, 119, 95, 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_new_sticker_set_id = JsonEncodedText.Encode(propName_new_sticker_set_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventStickerSetChanged)tlobj;
            writer.WritePropertyName(encodedPropName_old_sticker_set_id);
            writer.WriteInt64String(obj.OldStickerSetId);
            writer.WritePropertyName(encodedPropName_new_sticker_set_id);
            writer.WriteInt64String(obj.NewStickerSetId);
        }
    }

    partial class ChatEventLocationChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 76, 111, 99, 97, 116, 105, 111, 110, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_location => new byte[] { 111, 108, 100, 95, 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_old_location = JsonEncodedText.Encode(propName_old_location);
        private static ReadOnlySpan<byte> propName_new_location => new byte[] { 110, 101, 119, 95, 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_new_location = JsonEncodedText.Encode(propName_new_location);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventLocationChanged)tlobj;
            if (obj.OldLocation != null)
            {
                writer.WritePropertyName(encodedPropName_old_location);
                writer.WriteTLObjectValue(obj.OldLocation);
            }
            if (obj.NewLocation != null)
            {
                writer.WritePropertyName(encodedPropName_new_location);
                writer.WriteTLObjectValue(obj.NewLocation);
            }
        }
    }

    partial class ChatEventIsAllHistoryAvailableToggledConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 73, 115, 65, 108, 108, 72, 105, 115, 116, 111, 114, 121, 65, 118, 97, 105, 108, 97, 98, 108, 101, 84, 111, 103, 103, 108, 101, 100 }));
        private static ReadOnlySpan<byte> propName_is_all_history_available => new byte[] { 105, 115, 95, 97, 108, 108, 95, 104, 105, 115, 116, 111, 114, 121, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_is_all_history_available = JsonEncodedText.Encode(propName_is_all_history_available);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventIsAllHistoryAvailableToggled)tlobj;
            writer.WriteBoolean(encodedPropName_is_all_history_available, obj.IsAllHistoryAvailable);
        }
    }

    partial class ChatEventInviteLinkEditedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 69, 100, 105, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_old_invite_link => new byte[] { 111, 108, 100, 95, 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_old_invite_link = JsonEncodedText.Encode(propName_old_invite_link);
        private static ReadOnlySpan<byte> propName_new_invite_link => new byte[] { 110, 101, 119, 95, 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_new_invite_link = JsonEncodedText.Encode(propName_new_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventInviteLinkEdited)tlobj;
            if (obj.OldInviteLink != null)
            {
                writer.WritePropertyName(encodedPropName_old_invite_link);
                writer.WriteTLObjectValue(obj.OldInviteLink);
            }
            if (obj.NewInviteLink != null)
            {
                writer.WritePropertyName(encodedPropName_new_invite_link);
                writer.WriteTLObjectValue(obj.NewInviteLink);
            }
        }
    }

    partial class ChatEventInviteLinkRevokedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 82, 101, 118, 111, 107, 101, 100 }));
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventInviteLinkRevoked)tlobj;
            if (obj.InviteLink != null)
            {
                writer.WritePropertyName(encodedPropName_invite_link);
                writer.WriteTLObjectValue(obj.InviteLink);
            }
        }
    }

    partial class ChatEventInviteLinkDeletedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 68, 101, 108, 101, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventInviteLinkDeleted)tlobj;
            if (obj.InviteLink != null)
            {
                writer.WritePropertyName(encodedPropName_invite_link);
                writer.WriteTLObjectValue(obj.InviteLink);
            }
        }
    }

    partial class ChatEventVideoChatCreatedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 86, 105, 100, 101, 111, 67, 104, 97, 116, 67, 114, 101, 97, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventVideoChatCreated)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
        }
    }

    partial class ChatEventVideoChatDiscardedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 86, 105, 100, 101, 111, 67, 104, 97, 116, 68, 105, 115, 99, 97, 114, 100, 101, 100 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventVideoChatDiscarded)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
        }
    }

    partial class ChatEventVideoChatParticipantIsMutedToggledConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 86, 105, 100, 101, 111, 67, 104, 97, 116, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 73, 115, 77, 117, 116, 101, 100, 84, 111, 103, 103, 108, 101, 100 }));
        private static ReadOnlySpan<byte> propName_participant_id => new byte[] { 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_participant_id = JsonEncodedText.Encode(propName_participant_id);
        private static ReadOnlySpan<byte> propName_is_muted => new byte[] { 105, 115, 95, 109, 117, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_muted = JsonEncodedText.Encode(propName_is_muted);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventVideoChatParticipantIsMutedToggled)tlobj;
            if (obj.ParticipantId != null)
            {
                writer.WritePropertyName(encodedPropName_participant_id);
                writer.WriteTLObjectValue(obj.ParticipantId);
            }
            writer.WriteBoolean(encodedPropName_is_muted, obj.IsMuted);
        }
    }

    partial class ChatEventVideoChatParticipantVolumeLevelChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 86, 105, 100, 101, 111, 67, 104, 97, 116, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 86, 111, 108, 117, 109, 101, 76, 101, 118, 101, 108, 67, 104, 97, 110, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_participant_id => new byte[] { 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_participant_id = JsonEncodedText.Encode(propName_participant_id);
        private static ReadOnlySpan<byte> propName_volume_level => new byte[] { 118, 111, 108, 117, 109, 101, 95, 108, 101, 118, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_volume_level = JsonEncodedText.Encode(propName_volume_level);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventVideoChatParticipantVolumeLevelChanged)tlobj;
            if (obj.ParticipantId != null)
            {
                writer.WritePropertyName(encodedPropName_participant_id);
                writer.WriteTLObjectValue(obj.ParticipantId);
            }
            writer.WriteNumber(encodedPropName_volume_level, obj.VolumeLevel);
        }
    }

    partial class ChatEventVideoChatMuteNewParticipantsToggledConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 86, 105, 100, 101, 111, 67, 104, 97, 116, 77, 117, 116, 101, 78, 101, 119, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115, 84, 111, 103, 103, 108, 101, 100 }));
        private static ReadOnlySpan<byte> propName_mute_new_participants => new byte[] { 109, 117, 116, 101, 95, 110, 101, 119, 95, 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_mute_new_participants = JsonEncodedText.Encode(propName_mute_new_participants);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventVideoChatMuteNewParticipantsToggled)tlobj;
            writer.WriteBoolean(encodedPropName_mute_new_participants, obj.MuteNewParticipants);
        }
    }

    partial class ChatEventConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_action => new byte[] { 97, 99, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_action = JsonEncodedText.Encode(propName_action);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEvent)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(encodedPropName_date, obj.Date);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.Action != null)
            {
                writer.WritePropertyName(encodedPropName_action);
                writer.WriteTLObjectValue(obj.Action);
            }
        }
    }

    partial class ChatEventsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_events => new byte[] { 101, 118, 101, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_events = JsonEncodedText.Encode(propName_events);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEvents)tlobj;
            if (obj.Events != null)
            {
                writer.WritePropertyName(encodedPropName_events);
                writer.WriteArray(obj.Events);
            }
        }
    }

    partial class ChatEventLogFiltersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 69, 118, 101, 110, 116, 76, 111, 103, 70, 105, 108, 116, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_message_edits => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 101, 100, 105, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_message_edits = JsonEncodedText.Encode(propName_message_edits);
        private static ReadOnlySpan<byte> propName_message_deletions => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 100, 101, 108, 101, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_message_deletions = JsonEncodedText.Encode(propName_message_deletions);
        private static ReadOnlySpan<byte> propName_message_pins => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 112, 105, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_message_pins = JsonEncodedText.Encode(propName_message_pins);
        private static ReadOnlySpan<byte> propName_member_joins => new byte[] { 109, 101, 109, 98, 101, 114, 95, 106, 111, 105, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_member_joins = JsonEncodedText.Encode(propName_member_joins);
        private static ReadOnlySpan<byte> propName_member_leaves => new byte[] { 109, 101, 109, 98, 101, 114, 95, 108, 101, 97, 118, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_member_leaves = JsonEncodedText.Encode(propName_member_leaves);
        private static ReadOnlySpan<byte> propName_member_invites => new byte[] { 109, 101, 109, 98, 101, 114, 95, 105, 110, 118, 105, 116, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_member_invites = JsonEncodedText.Encode(propName_member_invites);
        private static ReadOnlySpan<byte> propName_member_promotions => new byte[] { 109, 101, 109, 98, 101, 114, 95, 112, 114, 111, 109, 111, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_member_promotions = JsonEncodedText.Encode(propName_member_promotions);
        private static ReadOnlySpan<byte> propName_member_restrictions => new byte[] { 109, 101, 109, 98, 101, 114, 95, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_member_restrictions = JsonEncodedText.Encode(propName_member_restrictions);
        private static ReadOnlySpan<byte> propName_info_changes => new byte[] { 105, 110, 102, 111, 95, 99, 104, 97, 110, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_info_changes = JsonEncodedText.Encode(propName_info_changes);
        private static ReadOnlySpan<byte> propName_setting_changes => new byte[] { 115, 101, 116, 116, 105, 110, 103, 95, 99, 104, 97, 110, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_setting_changes = JsonEncodedText.Encode(propName_setting_changes);
        private static ReadOnlySpan<byte> propName_invite_link_changes => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107, 95, 99, 104, 97, 110, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_invite_link_changes = JsonEncodedText.Encode(propName_invite_link_changes);
        private static ReadOnlySpan<byte> propName_video_chat_changes => new byte[] { 118, 105, 100, 101, 111, 95, 99, 104, 97, 116, 95, 99, 104, 97, 110, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_video_chat_changes = JsonEncodedText.Encode(propName_video_chat_changes);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventLogFilters)tlobj;
            writer.WriteBoolean(encodedPropName_message_edits, obj.MessageEdits);
            writer.WriteBoolean(encodedPropName_message_deletions, obj.MessageDeletions);
            writer.WriteBoolean(encodedPropName_message_pins, obj.MessagePins);
            writer.WriteBoolean(encodedPropName_member_joins, obj.MemberJoins);
            writer.WriteBoolean(encodedPropName_member_leaves, obj.MemberLeaves);
            writer.WriteBoolean(encodedPropName_member_invites, obj.MemberInvites);
            writer.WriteBoolean(encodedPropName_member_promotions, obj.MemberPromotions);
            writer.WriteBoolean(encodedPropName_member_restrictions, obj.MemberRestrictions);
            writer.WriteBoolean(encodedPropName_info_changes, obj.InfoChanges);
            writer.WriteBoolean(encodedPropName_setting_changes, obj.SettingChanges);
            writer.WriteBoolean(encodedPropName_invite_link_changes, obj.InviteLinkChanges);
            writer.WriteBoolean(encodedPropName_video_chat_changes, obj.VideoChatChanges);
        }
    }

    partial class LanguagePackStringValueOrdinaryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 83, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101, 79, 114, 100, 105, 110, 97, 114, 121 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LanguagePackStringValueOrdinary)tlobj;
            writer.WriteString(encodedPropName_value, obj.Value);
        }
    }

    partial class LanguagePackStringValuePluralizedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 83, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101, 80, 108, 117, 114, 97, 108, 105, 122, 101, 100 }));
        private static ReadOnlySpan<byte> propName_zero_value => new byte[] { 122, 101, 114, 111, 95, 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_zero_value = JsonEncodedText.Encode(propName_zero_value);
        private static ReadOnlySpan<byte> propName_one_value => new byte[] { 111, 110, 101, 95, 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_one_value = JsonEncodedText.Encode(propName_one_value);
        private static ReadOnlySpan<byte> propName_two_value => new byte[] { 116, 119, 111, 95, 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_two_value = JsonEncodedText.Encode(propName_two_value);
        private static ReadOnlySpan<byte> propName_few_value => new byte[] { 102, 101, 119, 95, 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_few_value = JsonEncodedText.Encode(propName_few_value);
        private static ReadOnlySpan<byte> propName_many_value => new byte[] { 109, 97, 110, 121, 95, 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_many_value = JsonEncodedText.Encode(propName_many_value);
        private static ReadOnlySpan<byte> propName_other_value => new byte[] { 111, 116, 104, 101, 114, 95, 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_other_value = JsonEncodedText.Encode(propName_other_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LanguagePackStringValuePluralized)tlobj;
            writer.WriteString(encodedPropName_zero_value, obj.ZeroValue);
            writer.WriteString(encodedPropName_one_value, obj.OneValue);
            writer.WriteString(encodedPropName_two_value, obj.TwoValue);
            writer.WriteString(encodedPropName_few_value, obj.FewValue);
            writer.WriteString(encodedPropName_many_value, obj.ManyValue);
            writer.WriteString(encodedPropName_other_value, obj.OtherValue);
        }
    }

    partial class LanguagePackStringValueDeletedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 83, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101, 68, 101, 108, 101, 116, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class LanguagePackStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 83, 116, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_key => new byte[] { 107, 101, 121 };
        private static readonly JsonEncodedText encodedPropName_key = JsonEncodedText.Encode(propName_key);
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LanguagePackString)tlobj;
            writer.WriteString(encodedPropName_key, obj.Key);
            if (obj.Value != null)
            {
                writer.WritePropertyName(encodedPropName_value);
                writer.WriteTLObjectValue(obj.Value);
            }
        }
    }

    partial class LanguagePackStringsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 83, 116, 114, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_strings => new byte[] { 115, 116, 114, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_strings = JsonEncodedText.Encode(propName_strings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LanguagePackStrings)tlobj;
            if (obj.Strings != null)
            {
                writer.WritePropertyName(encodedPropName_strings);
                writer.WriteArray(obj.Strings);
            }
        }
    }

    partial class LanguagePackInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_base_language_pack_id => new byte[] { 98, 97, 115, 101, 95, 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_base_language_pack_id = JsonEncodedText.Encode(propName_base_language_pack_id);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_native_name => new byte[] { 110, 97, 116, 105, 118, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_native_name = JsonEncodedText.Encode(propName_native_name);
        private static ReadOnlySpan<byte> propName_plural_code => new byte[] { 112, 108, 117, 114, 97, 108, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_plural_code = JsonEncodedText.Encode(propName_plural_code);
        private static ReadOnlySpan<byte> propName_is_official => new byte[] { 105, 115, 95, 111, 102, 102, 105, 99, 105, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_is_official = JsonEncodedText.Encode(propName_is_official);
        private static ReadOnlySpan<byte> propName_is_rtl => new byte[] { 105, 115, 95, 114, 116, 108 };
        private static readonly JsonEncodedText encodedPropName_is_rtl = JsonEncodedText.Encode(propName_is_rtl);
        private static ReadOnlySpan<byte> propName_is_beta => new byte[] { 105, 115, 95, 98, 101, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_is_beta = JsonEncodedText.Encode(propName_is_beta);
        private static ReadOnlySpan<byte> propName_is_installed => new byte[] { 105, 115, 95, 105, 110, 115, 116, 97, 108, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_installed = JsonEncodedText.Encode(propName_is_installed);
        private static ReadOnlySpan<byte> propName_total_string_count => new byte[] { 116, 111, 116, 97, 108, 95, 115, 116, 114, 105, 110, 103, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_string_count = JsonEncodedText.Encode(propName_total_string_count);
        private static ReadOnlySpan<byte> propName_translated_string_count => new byte[] { 116, 114, 97, 110, 115, 108, 97, 116, 101, 100, 95, 115, 116, 114, 105, 110, 103, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_translated_string_count = JsonEncodedText.Encode(propName_translated_string_count);
        private static ReadOnlySpan<byte> propName_local_string_count => new byte[] { 108, 111, 99, 97, 108, 95, 115, 116, 114, 105, 110, 103, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_local_string_count = JsonEncodedText.Encode(propName_local_string_count);
        private static ReadOnlySpan<byte> propName_translation_url => new byte[] { 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_translation_url = JsonEncodedText.Encode(propName_translation_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LanguagePackInfo)tlobj;
            writer.WriteString(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_base_language_pack_id, obj.BaseLanguagePackId);
            writer.WriteString(encodedPropName_name, obj.Name);
            writer.WriteString(encodedPropName_native_name, obj.NativeName);
            writer.WriteString(encodedPropName_plural_code, obj.PluralCode);
            writer.WriteBoolean(encodedPropName_is_official, obj.IsOfficial);
            writer.WriteBoolean(encodedPropName_is_rtl, obj.IsRtl);
            writer.WriteBoolean(encodedPropName_is_beta, obj.IsBeta);
            writer.WriteBoolean(encodedPropName_is_installed, obj.IsInstalled);
            writer.WriteNumber(encodedPropName_total_string_count, obj.TotalStringCount);
            writer.WriteNumber(encodedPropName_translated_string_count, obj.TranslatedStringCount);
            writer.WriteNumber(encodedPropName_local_string_count, obj.LocalStringCount);
            writer.WriteString(encodedPropName_translation_url, obj.TranslationUrl);
        }
    }

    partial class LocalizationTargetInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 99, 97, 108, 105, 122, 97, 116, 105, 111, 110, 84, 97, 114, 103, 101, 116, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_language_packs => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_language_packs = JsonEncodedText.Encode(propName_language_packs);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LocalizationTargetInfo)tlobj;
            if (obj.LanguagePacks != null)
            {
                writer.WritePropertyName(encodedPropName_language_packs);
                writer.WriteArray(obj.LanguagePacks);
            }
        }
    }

    partial class DeviceTokenFirebaseCloudMessagingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 70, 105, 114, 101, 98, 97, 115, 101, 67, 108, 111, 117, 100, 77, 101, 115, 115, 97, 103, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_token => new byte[] { 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_token = JsonEncodedText.Encode(propName_token);
        private static ReadOnlySpan<byte> propName_encrypt => new byte[] { 101, 110, 99, 114, 121, 112, 116 };
        private static readonly JsonEncodedText encodedPropName_encrypt = JsonEncodedText.Encode(propName_encrypt);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenFirebaseCloudMessaging)tlobj;
            writer.WriteString(encodedPropName_token, obj.Token);
            writer.WriteBoolean(encodedPropName_encrypt, obj.Encrypt);
        }
    }

    partial class DeviceTokenApplePushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 65, 112, 112, 108, 101, 80, 117, 115, 104 }));
        private static ReadOnlySpan<byte> propName_device_token => new byte[] { 100, 101, 118, 105, 99, 101, 95, 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_device_token = JsonEncodedText.Encode(propName_device_token);
        private static ReadOnlySpan<byte> propName_is_app_sandbox => new byte[] { 105, 115, 95, 97, 112, 112, 95, 115, 97, 110, 100, 98, 111, 120 };
        private static readonly JsonEncodedText encodedPropName_is_app_sandbox = JsonEncodedText.Encode(propName_is_app_sandbox);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenApplePush)tlobj;
            writer.WriteString(encodedPropName_device_token, obj.DeviceToken);
            writer.WriteBoolean(encodedPropName_is_app_sandbox, obj.IsAppSandbox);
        }
    }

    partial class DeviceTokenApplePushVoIPConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 65, 112, 112, 108, 101, 80, 117, 115, 104, 86, 111, 73, 80 }));
        private static ReadOnlySpan<byte> propName_device_token => new byte[] { 100, 101, 118, 105, 99, 101, 95, 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_device_token = JsonEncodedText.Encode(propName_device_token);
        private static ReadOnlySpan<byte> propName_is_app_sandbox => new byte[] { 105, 115, 95, 97, 112, 112, 95, 115, 97, 110, 100, 98, 111, 120 };
        private static readonly JsonEncodedText encodedPropName_is_app_sandbox = JsonEncodedText.Encode(propName_is_app_sandbox);
        private static ReadOnlySpan<byte> propName_encrypt => new byte[] { 101, 110, 99, 114, 121, 112, 116 };
        private static readonly JsonEncodedText encodedPropName_encrypt = JsonEncodedText.Encode(propName_encrypt);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenApplePushVoIP)tlobj;
            writer.WriteString(encodedPropName_device_token, obj.DeviceToken);
            writer.WriteBoolean(encodedPropName_is_app_sandbox, obj.IsAppSandbox);
            writer.WriteBoolean(encodedPropName_encrypt, obj.Encrypt);
        }
    }

    partial class DeviceTokenWindowsPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 87, 105, 110, 100, 111, 119, 115, 80, 117, 115, 104 }));
        private static ReadOnlySpan<byte> propName_access_token => new byte[] { 97, 99, 99, 101, 115, 115, 95, 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_access_token = JsonEncodedText.Encode(propName_access_token);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenWindowsPush)tlobj;
            writer.WriteString(encodedPropName_access_token, obj.AccessToken);
        }
    }

    partial class DeviceTokenMicrosoftPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 77, 105, 99, 114, 111, 115, 111, 102, 116, 80, 117, 115, 104 }));
        private static ReadOnlySpan<byte> propName_channel_uri => new byte[] { 99, 104, 97, 110, 110, 101, 108, 95, 117, 114, 105 };
        private static readonly JsonEncodedText encodedPropName_channel_uri = JsonEncodedText.Encode(propName_channel_uri);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenMicrosoftPush)tlobj;
            writer.WriteString(encodedPropName_channel_uri, obj.ChannelUri);
        }
    }

    partial class DeviceTokenMicrosoftPushVoIPConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 77, 105, 99, 114, 111, 115, 111, 102, 116, 80, 117, 115, 104, 86, 111, 73, 80 }));
        private static ReadOnlySpan<byte> propName_channel_uri => new byte[] { 99, 104, 97, 110, 110, 101, 108, 95, 117, 114, 105 };
        private static readonly JsonEncodedText encodedPropName_channel_uri = JsonEncodedText.Encode(propName_channel_uri);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenMicrosoftPushVoIP)tlobj;
            writer.WriteString(encodedPropName_channel_uri, obj.ChannelUri);
        }
    }

    partial class DeviceTokenWebPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 87, 101, 98, 80, 117, 115, 104 }));
        private static ReadOnlySpan<byte> propName_endpoint => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_endpoint = JsonEncodedText.Encode(propName_endpoint);
        private static ReadOnlySpan<byte> propName_p256dh_base64url => new byte[] { 112, 50, 53, 54, 100, 104, 95, 98, 97, 115, 101, 54, 52, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_p256dh_base64url = JsonEncodedText.Encode(propName_p256dh_base64url);
        private static ReadOnlySpan<byte> propName_auth_base64url => new byte[] { 97, 117, 116, 104, 95, 98, 97, 115, 101, 54, 52, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_auth_base64url = JsonEncodedText.Encode(propName_auth_base64url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenWebPush)tlobj;
            writer.WriteString(encodedPropName_endpoint, obj.Endpoint);
            writer.WriteString(encodedPropName_p256dh_base64url, obj.P256dhBase64url);
            writer.WriteString(encodedPropName_auth_base64url, obj.AuthBase64url);
        }
    }

    partial class DeviceTokenSimplePushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 83, 105, 109, 112, 108, 101, 80, 117, 115, 104 }));
        private static ReadOnlySpan<byte> propName_endpoint => new byte[] { 101, 110, 100, 112, 111, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_endpoint = JsonEncodedText.Encode(propName_endpoint);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenSimplePush)tlobj;
            writer.WriteString(encodedPropName_endpoint, obj.Endpoint);
        }
    }

    partial class DeviceTokenUbuntuPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 85, 98, 117, 110, 116, 117, 80, 117, 115, 104 }));
        private static ReadOnlySpan<byte> propName_token => new byte[] { 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_token = JsonEncodedText.Encode(propName_token);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenUbuntuPush)tlobj;
            writer.WriteString(encodedPropName_token, obj.Token);
        }
    }

    partial class DeviceTokenBlackBerryPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 66, 108, 97, 99, 107, 66, 101, 114, 114, 121, 80, 117, 115, 104 }));
        private static ReadOnlySpan<byte> propName_token => new byte[] { 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_token = JsonEncodedText.Encode(propName_token);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenBlackBerryPush)tlobj;
            writer.WriteString(encodedPropName_token, obj.Token);
        }
    }

    partial class DeviceTokenTizenPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 118, 105, 99, 101, 84, 111, 107, 101, 110, 84, 105, 122, 101, 110, 80, 117, 115, 104 }));
        private static ReadOnlySpan<byte> propName_reg_id => new byte[] { 114, 101, 103, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_reg_id = JsonEncodedText.Encode(propName_reg_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenTizenPush)tlobj;
            writer.WriteString(encodedPropName_reg_id, obj.RegId);
        }
    }

    partial class PushReceiverIdConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 82, 101, 99, 101, 105, 118, 101, 114, 73, 100 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushReceiverId)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
        }
    }

    partial class BackgroundFillSolidConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 70, 105, 108, 108, 83, 111, 108, 105, 100 }));
        private static ReadOnlySpan<byte> propName_color => new byte[] { 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_color = JsonEncodedText.Encode(propName_color);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundFillSolid)tlobj;
            writer.WriteNumber(encodedPropName_color, obj.Color);
        }
    }

    partial class BackgroundFillGradientConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 70, 105, 108, 108, 71, 114, 97, 100, 105, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_top_color => new byte[] { 116, 111, 112, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_top_color = JsonEncodedText.Encode(propName_top_color);
        private static ReadOnlySpan<byte> propName_bottom_color => new byte[] { 98, 111, 116, 116, 111, 109, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_bottom_color = JsonEncodedText.Encode(propName_bottom_color);
        private static ReadOnlySpan<byte> propName_rotation_angle => new byte[] { 114, 111, 116, 97, 116, 105, 111, 110, 95, 97, 110, 103, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_rotation_angle = JsonEncodedText.Encode(propName_rotation_angle);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundFillGradient)tlobj;
            writer.WriteNumber(encodedPropName_top_color, obj.TopColor);
            writer.WriteNumber(encodedPropName_bottom_color, obj.BottomColor);
            writer.WriteNumber(encodedPropName_rotation_angle, obj.RotationAngle);
        }
    }

    partial class BackgroundFillFreeformGradientConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 70, 105, 108, 108, 70, 114, 101, 101, 102, 111, 114, 109, 71, 114, 97, 100, 105, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_colors => new byte[] { 99, 111, 108, 111, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_colors = JsonEncodedText.Encode(propName_colors);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundFillFreeformGradient)tlobj;
            if (obj.Colors != null)
            {
                writer.WritePropertyName(encodedPropName_colors);
                writer.WriteArray(obj.Colors);
            }
        }
    }

    partial class BackgroundTypeWallpaperConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 84, 121, 112, 101, 87, 97, 108, 108, 112, 97, 112, 101, 114 }));
        private static ReadOnlySpan<byte> propName_is_blurred => new byte[] { 105, 115, 95, 98, 108, 117, 114, 114, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_blurred = JsonEncodedText.Encode(propName_is_blurred);
        private static ReadOnlySpan<byte> propName_is_moving => new byte[] { 105, 115, 95, 109, 111, 118, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_is_moving = JsonEncodedText.Encode(propName_is_moving);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundTypeWallpaper)tlobj;
            writer.WriteBoolean(encodedPropName_is_blurred, obj.IsBlurred);
            writer.WriteBoolean(encodedPropName_is_moving, obj.IsMoving);
        }
    }

    partial class BackgroundTypePatternConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 84, 121, 112, 101, 80, 97, 116, 116, 101, 114, 110 }));
        private static ReadOnlySpan<byte> propName_fill => new byte[] { 102, 105, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_fill = JsonEncodedText.Encode(propName_fill);
        private static ReadOnlySpan<byte> propName_intensity => new byte[] { 105, 110, 116, 101, 110, 115, 105, 116, 121 };
        private static readonly JsonEncodedText encodedPropName_intensity = JsonEncodedText.Encode(propName_intensity);
        private static ReadOnlySpan<byte> propName_is_inverted => new byte[] { 105, 115, 95, 105, 110, 118, 101, 114, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_inverted = JsonEncodedText.Encode(propName_is_inverted);
        private static ReadOnlySpan<byte> propName_is_moving => new byte[] { 105, 115, 95, 109, 111, 118, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_is_moving = JsonEncodedText.Encode(propName_is_moving);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundTypePattern)tlobj;
            if (obj.Fill != null)
            {
                writer.WritePropertyName(encodedPropName_fill);
                writer.WriteTLObjectValue(obj.Fill);
            }
            writer.WriteNumber(encodedPropName_intensity, obj.Intensity);
            writer.WriteBoolean(encodedPropName_is_inverted, obj.IsInverted);
            writer.WriteBoolean(encodedPropName_is_moving, obj.IsMoving);
        }
    }

    partial class BackgroundTypeFillConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 84, 121, 112, 101, 70, 105, 108, 108 }));
        private static ReadOnlySpan<byte> propName_fill => new byte[] { 102, 105, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_fill = JsonEncodedText.Encode(propName_fill);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundTypeFill)tlobj;
            if (obj.Fill != null)
            {
                writer.WritePropertyName(encodedPropName_fill);
                writer.WriteTLObjectValue(obj.Fill);
            }
        }
    }

    partial class BackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_is_default => new byte[] { 105, 115, 95, 100, 101, 102, 97, 117, 108, 116 };
        private static readonly JsonEncodedText encodedPropName_is_default = JsonEncodedText.Encode(propName_is_default);
        private static ReadOnlySpan<byte> propName_is_dark => new byte[] { 105, 115, 95, 100, 97, 114, 107 };
        private static readonly JsonEncodedText encodedPropName_is_dark = JsonEncodedText.Encode(propName_is_dark);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_document => new byte[] { 100, 111, 99, 117, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_document = JsonEncodedText.Encode(propName_document);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Background)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteBoolean(encodedPropName_is_default, obj.IsDefault);
            writer.WriteBoolean(encodedPropName_is_dark, obj.IsDark);
            writer.WriteString(encodedPropName_name, obj.Name);
            if (obj.Document != null)
            {
                writer.WritePropertyName(encodedPropName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class BackgroundsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 115 }));
        private static ReadOnlySpan<byte> propName_backgrounds => new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_backgrounds = JsonEncodedText.Encode(propName_backgrounds);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Backgrounds)tlobj;
            if (obj.Backgrounds_ != null)
            {
                writer.WritePropertyName(encodedPropName_backgrounds);
                writer.WriteArray(obj.Backgrounds_);
            }
        }
    }

    partial class InputBackgroundLocalConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 76, 111, 99, 97, 108 }));
        private static ReadOnlySpan<byte> propName_background => new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_background = JsonEncodedText.Encode(propName_background);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputBackgroundLocal)tlobj;
            if (obj.Background != null)
            {
                writer.WritePropertyName(encodedPropName_background);
                writer.WriteTLObjectValue(obj.Background);
            }
        }
    }

    partial class InputBackgroundRemoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 82, 101, 109, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_background_id => new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_background_id = JsonEncodedText.Encode(propName_background_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputBackgroundRemote)tlobj;
            writer.WritePropertyName(encodedPropName_background_id);
            writer.WriteInt64String(obj.BackgroundId);
        }
    }

    partial class ThemeSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 104, 101, 109, 101, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_accent_color => new byte[] { 97, 99, 99, 101, 110, 116, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_accent_color = JsonEncodedText.Encode(propName_accent_color);
        private static ReadOnlySpan<byte> propName_background => new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_background = JsonEncodedText.Encode(propName_background);
        private static ReadOnlySpan<byte> propName_outgoing_message_fill => new byte[] { 111, 117, 116, 103, 111, 105, 110, 103, 95, 109, 101, 115, 115, 97, 103, 101, 95, 102, 105, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_outgoing_message_fill = JsonEncodedText.Encode(propName_outgoing_message_fill);
        private static ReadOnlySpan<byte> propName_animate_outgoing_message_fill => new byte[] { 97, 110, 105, 109, 97, 116, 101, 95, 111, 117, 116, 103, 111, 105, 110, 103, 95, 109, 101, 115, 115, 97, 103, 101, 95, 102, 105, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_animate_outgoing_message_fill = JsonEncodedText.Encode(propName_animate_outgoing_message_fill);
        private static ReadOnlySpan<byte> propName_outgoing_message_accent_color => new byte[] { 111, 117, 116, 103, 111, 105, 110, 103, 95, 109, 101, 115, 115, 97, 103, 101, 95, 97, 99, 99, 101, 110, 116, 95, 99, 111, 108, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_outgoing_message_accent_color = JsonEncodedText.Encode(propName_outgoing_message_accent_color);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ThemeSettings)tlobj;
            writer.WriteNumber(encodedPropName_accent_color, obj.AccentColor);
            if (obj.Background != null)
            {
                writer.WritePropertyName(encodedPropName_background);
                writer.WriteTLObjectValue(obj.Background);
            }
            if (obj.OutgoingMessageFill != null)
            {
                writer.WritePropertyName(encodedPropName_outgoing_message_fill);
                writer.WriteTLObjectValue(obj.OutgoingMessageFill);
            }
            writer.WriteBoolean(encodedPropName_animate_outgoing_message_fill, obj.AnimateOutgoingMessageFill);
            writer.WriteNumber(encodedPropName_outgoing_message_accent_color, obj.OutgoingMessageAccentColor);
        }
    }

    partial class ChatThemeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 84, 104, 101, 109, 101 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_light_settings => new byte[] { 108, 105, 103, 104, 116, 95, 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_light_settings = JsonEncodedText.Encode(propName_light_settings);
        private static ReadOnlySpan<byte> propName_dark_settings => new byte[] { 100, 97, 114, 107, 95, 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_dark_settings = JsonEncodedText.Encode(propName_dark_settings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatTheme)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
            if (obj.LightSettings != null)
            {
                writer.WritePropertyName(encodedPropName_light_settings);
                writer.WriteTLObjectValue(obj.LightSettings);
            }
            if (obj.DarkSettings != null)
            {
                writer.WritePropertyName(encodedPropName_dark_settings);
                writer.WriteTLObjectValue(obj.DarkSettings);
            }
        }
    }

    partial class HashtagsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 104, 97, 115, 104, 116, 97, 103, 115 }));
        private static ReadOnlySpan<byte> propName_hashtags => new byte[] { 104, 97, 115, 104, 116, 97, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_hashtags = JsonEncodedText.Encode(propName_hashtags);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Hashtags)tlobj;
            if (obj.Hashtags_ != null)
            {
                writer.WritePropertyName(encodedPropName_hashtags);
                writer.WriteArray(obj.Hashtags_);
            }
        }
    }

    partial class CanTransferOwnershipResultOkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 110, 84, 114, 97, 110, 115, 102, 101, 114, 79, 119, 110, 101, 114, 115, 104, 105, 112, 82, 101, 115, 117, 108, 116, 79, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CanTransferOwnershipResultPasswordNeededConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 110, 84, 114, 97, 110, 115, 102, 101, 114, 79, 119, 110, 101, 114, 115, 104, 105, 112, 82, 101, 115, 117, 108, 116, 80, 97, 115, 115, 119, 111, 114, 100, 78, 101, 101, 100, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CanTransferOwnershipResultPasswordTooFreshConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 110, 84, 114, 97, 110, 115, 102, 101, 114, 79, 119, 110, 101, 114, 115, 104, 105, 112, 82, 101, 115, 117, 108, 116, 80, 97, 115, 115, 119, 111, 114, 100, 84, 111, 111, 70, 114, 101, 115, 104 }));
        private static ReadOnlySpan<byte> propName_retry_after => new byte[] { 114, 101, 116, 114, 121, 95, 97, 102, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_retry_after = JsonEncodedText.Encode(propName_retry_after);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CanTransferOwnershipResultPasswordTooFresh)tlobj;
            writer.WriteNumber(encodedPropName_retry_after, obj.RetryAfter);
        }
    }

    partial class CanTransferOwnershipResultSessionTooFreshConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 110, 84, 114, 97, 110, 115, 102, 101, 114, 79, 119, 110, 101, 114, 115, 104, 105, 112, 82, 101, 115, 117, 108, 116, 83, 101, 115, 115, 105, 111, 110, 84, 111, 111, 70, 114, 101, 115, 104 }));
        private static ReadOnlySpan<byte> propName_retry_after => new byte[] { 114, 101, 116, 114, 121, 95, 97, 102, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_retry_after = JsonEncodedText.Encode(propName_retry_after);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CanTransferOwnershipResultSessionTooFresh)tlobj;
            writer.WriteNumber(encodedPropName_retry_after, obj.RetryAfter);
        }
    }

    partial class CheckChatUsernameResultOkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 67, 104, 97, 116, 85, 115, 101, 114, 110, 97, 109, 101, 82, 101, 115, 117, 108, 116, 79, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChatUsernameResultUsernameInvalidConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 67, 104, 97, 116, 85, 115, 101, 114, 110, 97, 109, 101, 82, 101, 115, 117, 108, 116, 85, 115, 101, 114, 110, 97, 109, 101, 73, 110, 118, 97, 108, 105, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChatUsernameResultUsernameOccupiedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 67, 104, 97, 116, 85, 115, 101, 114, 110, 97, 109, 101, 82, 101, 115, 117, 108, 116, 85, 115, 101, 114, 110, 97, 109, 101, 79, 99, 99, 117, 112, 105, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChatUsernameResultPublicChatsTooMuchConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 67, 104, 97, 116, 85, 115, 101, 114, 110, 97, 109, 101, 82, 101, 115, 117, 108, 116, 80, 117, 98, 108, 105, 99, 67, 104, 97, 116, 115, 84, 111, 111, 77, 117, 99, 104 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChatUsernameResultPublicGroupsUnavailableConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 67, 104, 97, 116, 85, 115, 101, 114, 110, 97, 109, 101, 82, 101, 115, 117, 108, 116, 80, 117, 98, 108, 105, 99, 71, 114, 111, 117, 112, 115, 85, 110, 97, 118, 97, 105, 108, 97, 98, 108, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckStickerSetNameResultOkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 78, 97, 109, 101, 82, 101, 115, 117, 108, 116, 79, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckStickerSetNameResultNameInvalidConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 78, 97, 109, 101, 82, 101, 115, 117, 108, 116, 78, 97, 109, 101, 73, 110, 118, 97, 108, 105, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckStickerSetNameResultNameOccupiedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 78, 97, 109, 101, 82, 101, 115, 117, 108, 116, 78, 97, 109, 101, 79, 99, 99, 117, 112, 105, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ResetPasswordResultOkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 116, 80, 97, 115, 115, 119, 111, 114, 100, 82, 101, 115, 117, 108, 116, 79, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ResetPasswordResultPendingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 116, 80, 97, 115, 115, 119, 111, 114, 100, 82, 101, 115, 117, 108, 116, 80, 101, 110, 100, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_pending_reset_date => new byte[] { 112, 101, 110, 100, 105, 110, 103, 95, 114, 101, 115, 101, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_pending_reset_date = JsonEncodedText.Encode(propName_pending_reset_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ResetPasswordResultPending)tlobj;
            writer.WriteNumber(encodedPropName_pending_reset_date, obj.PendingResetDate);
        }
    }

    partial class ResetPasswordResultDeclinedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 116, 80, 97, 115, 115, 119, 111, 114, 100, 82, 101, 115, 117, 108, 116, 68, 101, 99, 108, 105, 110, 101, 100 }));
        private static ReadOnlySpan<byte> propName_retry_date => new byte[] { 114, 101, 116, 114, 121, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_retry_date = JsonEncodedText.Encode(propName_retry_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ResetPasswordResultDeclined)tlobj;
            writer.WriteNumber(encodedPropName_retry_date, obj.RetryDate);
        }
    }

    partial class MessageFileTypePrivateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 70, 105, 108, 101, 84, 121, 112, 101, 80, 114, 105, 118, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageFileTypePrivate)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
        }
    }

    partial class MessageFileTypeGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 70, 105, 108, 101, 84, 121, 112, 101, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageFileTypeGroup)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class MessageFileTypeUnknownConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 70, 105, 108, 101, 84, 121, 112, 101, 85, 110, 107, 110, 111, 119, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentHiddenConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 72, 105, 100, 100, 101, 110 }));
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentHidden)tlobj;
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            writer.WriteString(encodedPropName_caption, obj.Caption);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 65, 117, 100, 105, 111 }));
        private static ReadOnlySpan<byte> propName_audio => new byte[] { 97, 117, 100, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_audio = JsonEncodedText.Encode(propName_audio);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentAudio)tlobj;
            if (obj.Audio != null)
            {
                writer.WritePropertyName(encodedPropName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 67, 111, 110, 116, 97, 99, 116 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentContact)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentContactRegisteredConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 67, 111, 110, 116, 97, 99, 116, 82, 101, 103, 105, 115, 116, 101, 114, 101, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 68, 111, 99, 117, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_document => new byte[] { 100, 111, 99, 117, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_document = JsonEncodedText.Encode(propName_document);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentDocument)tlobj;
            if (obj.Document != null)
            {
                writer.WritePropertyName(encodedPropName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 71, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentGame)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentGameScoreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 71, 97, 109, 101, 83, 99, 111, 114, 101 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_score => new byte[] { 115, 99, 111, 114, 101 };
        private static readonly JsonEncodedText encodedPropName_score = JsonEncodedText.Encode(propName_score);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentGameScore)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteNumber(encodedPropName_score, obj.Score);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentInvoiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 73, 110, 118, 111, 105, 99, 101 }));
        private static ReadOnlySpan<byte> propName_price => new byte[] { 112, 114, 105, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_price = JsonEncodedText.Encode(propName_price);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentInvoice)tlobj;
            writer.WriteString(encodedPropName_price, obj.Price);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 76, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_is_live => new byte[] { 105, 115, 95, 108, 105, 118, 101 };
        private static readonly JsonEncodedText encodedPropName_is_live = JsonEncodedText.Encode(propName_is_live);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentLocation)tlobj;
            writer.WriteBoolean(encodedPropName_is_live, obj.IsLive);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_is_secret => new byte[] { 105, 115, 95, 115, 101, 99, 114, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_is_secret = JsonEncodedText.Encode(propName_is_secret);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentPhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(encodedPropName_caption, obj.Caption);
            writer.WriteBoolean(encodedPropName_is_secret, obj.IsSecret);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentPollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 80, 111, 108, 108 }));
        private static ReadOnlySpan<byte> propName_question => new byte[] { 113, 117, 101, 115, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_question = JsonEncodedText.Encode(propName_question);
        private static ReadOnlySpan<byte> propName_is_regular => new byte[] { 105, 115, 95, 114, 101, 103, 117, 108, 97, 114 };
        private static readonly JsonEncodedText encodedPropName_is_regular = JsonEncodedText.Encode(propName_is_regular);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentPoll)tlobj;
            writer.WriteString(encodedPropName_question, obj.Question);
            writer.WriteBoolean(encodedPropName_is_regular, obj.IsRegular);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentScreenshotTakenConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 83, 99, 114, 101, 101, 110, 115, 104, 111, 116, 84, 97, 107, 101, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 83, 116, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        private static ReadOnlySpan<byte> propName_emoji => new byte[] { 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_emoji = JsonEncodedText.Encode(propName_emoji);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentSticker)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            writer.WriteString(encodedPropName_emoji, obj.Emoji);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 84, 101, 120, 116 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentText)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 86, 105, 100, 101, 111 }));
        private static ReadOnlySpan<byte> propName_video => new byte[] { 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_video = JsonEncodedText.Encode(propName_video);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        private static ReadOnlySpan<byte> propName_is_secret => new byte[] { 105, 115, 95, 115, 101, 99, 114, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_is_secret = JsonEncodedText.Encode(propName_is_secret);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentVideo)tlobj;
            if (obj.Video != null)
            {
                writer.WritePropertyName(encodedPropName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            writer.WriteString(encodedPropName_caption, obj.Caption);
            writer.WriteBoolean(encodedPropName_is_secret, obj.IsSecret);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 86, 105, 100, 101, 111, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_video_note => new byte[] { 118, 105, 100, 101, 111, 95, 110, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_video_note = JsonEncodedText.Encode(propName_video_note);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentVideoNote)tlobj;
            if (obj.VideoNote != null)
            {
                writer.WritePropertyName(encodedPropName_video_note);
                writer.WriteTLObjectValue(obj.VideoNote);
            }
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 86, 111, 105, 99, 101, 78, 111, 116, 101 }));
        private static ReadOnlySpan<byte> propName_voice_note => new byte[] { 118, 111, 105, 99, 101, 95, 110, 111, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_voice_note = JsonEncodedText.Encode(propName_voice_note);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentVoiceNote)tlobj;
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(encodedPropName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentBasicGroupChatCreateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 66, 97, 115, 105, 99, 71, 114, 111, 117, 112, 67, 104, 97, 116, 67, 114, 101, 97, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentChatAddMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 67, 104, 97, 116, 65, 100, 100, 77, 101, 109, 98, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_member_name => new byte[] { 109, 101, 109, 98, 101, 114, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_member_name = JsonEncodedText.Encode(propName_member_name);
        private static ReadOnlySpan<byte> propName_is_current_user => new byte[] { 105, 115, 95, 99, 117, 114, 114, 101, 110, 116, 95, 117, 115, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_is_current_user = JsonEncodedText.Encode(propName_is_current_user);
        private static ReadOnlySpan<byte> propName_is_returned => new byte[] { 105, 115, 95, 114, 101, 116, 117, 114, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_returned = JsonEncodedText.Encode(propName_is_returned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentChatAddMembers)tlobj;
            writer.WriteString(encodedPropName_member_name, obj.MemberName);
            writer.WriteBoolean(encodedPropName_is_current_user, obj.IsCurrentUser);
            writer.WriteBoolean(encodedPropName_is_returned, obj.IsReturned);
        }
    }

    partial class PushMessageContentChatChangePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 67, 104, 97, 116, 67, 104, 97, 110, 103, 101, 80, 104, 111, 116, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentChatChangeTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 67, 104, 97, 116, 67, 104, 97, 110, 103, 101, 84, 105, 116, 108, 101 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentChatChangeTitle)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class PushMessageContentChatSetThemeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 67, 104, 97, 116, 83, 101, 116, 84, 104, 101, 109, 101 }));
        private static ReadOnlySpan<byte> propName_theme_name => new byte[] { 116, 104, 101, 109, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_theme_name = JsonEncodedText.Encode(propName_theme_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentChatSetTheme)tlobj;
            writer.WriteString(encodedPropName_theme_name, obj.ThemeName);
        }
    }

    partial class PushMessageContentChatDeleteMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 67, 104, 97, 116, 68, 101, 108, 101, 116, 101, 77, 101, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_member_name => new byte[] { 109, 101, 109, 98, 101, 114, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_member_name = JsonEncodedText.Encode(propName_member_name);
        private static ReadOnlySpan<byte> propName_is_current_user => new byte[] { 105, 115, 95, 99, 117, 114, 114, 101, 110, 116, 95, 117, 115, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_is_current_user = JsonEncodedText.Encode(propName_is_current_user);
        private static ReadOnlySpan<byte> propName_is_left => new byte[] { 105, 115, 95, 108, 101, 102, 116 };
        private static readonly JsonEncodedText encodedPropName_is_left = JsonEncodedText.Encode(propName_is_left);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentChatDeleteMember)tlobj;
            writer.WriteString(encodedPropName_member_name, obj.MemberName);
            writer.WriteBoolean(encodedPropName_is_current_user, obj.IsCurrentUser);
            writer.WriteBoolean(encodedPropName_is_left, obj.IsLeft);
        }
    }

    partial class PushMessageContentChatJoinByLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 67, 104, 97, 116, 74, 111, 105, 110, 66, 121, 76, 105, 110, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentChatJoinByRequestConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 67, 104, 97, 116, 74, 111, 105, 110, 66, 121, 82, 101, 113, 117, 101, 115, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentMessageForwardsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 77, 101, 115, 115, 97, 103, 101, 70, 111, 114, 119, 97, 114, 100, 115 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentMessageForwards)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
        }
    }

    partial class PushMessageContentMediaAlbumConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 77, 101, 100, 105, 97, 65, 108, 98, 117, 109 }));
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_has_photos => new byte[] { 104, 97, 115, 95, 112, 104, 111, 116, 111, 115 };
        private static readonly JsonEncodedText encodedPropName_has_photos = JsonEncodedText.Encode(propName_has_photos);
        private static ReadOnlySpan<byte> propName_has_videos => new byte[] { 104, 97, 115, 95, 118, 105, 100, 101, 111, 115 };
        private static readonly JsonEncodedText encodedPropName_has_videos = JsonEncodedText.Encode(propName_has_videos);
        private static ReadOnlySpan<byte> propName_has_audios => new byte[] { 104, 97, 115, 95, 97, 117, 100, 105, 111, 115 };
        private static readonly JsonEncodedText encodedPropName_has_audios = JsonEncodedText.Encode(propName_has_audios);
        private static ReadOnlySpan<byte> propName_has_documents => new byte[] { 104, 97, 115, 95, 100, 111, 99, 117, 109, 101, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_has_documents = JsonEncodedText.Encode(propName_has_documents);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentMediaAlbum)tlobj;
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            writer.WriteBoolean(encodedPropName_has_photos, obj.HasPhotos);
            writer.WriteBoolean(encodedPropName_has_videos, obj.HasVideos);
            writer.WriteBoolean(encodedPropName_has_audios, obj.HasAudios);
            writer.WriteBoolean(encodedPropName_has_documents, obj.HasDocuments);
        }
    }

    partial class NotificationTypeNewMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 84, 121, 112, 101, 78, 101, 119, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NotificationTypeNewMessage)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(encodedPropName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class NotificationTypeNewSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 84, 121, 112, 101, 78, 101, 119, 83, 101, 99, 114, 101, 116, 67, 104, 97, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationTypeNewCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 84, 121, 112, 101, 78, 101, 119, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_call_id => new byte[] { 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_call_id = JsonEncodedText.Encode(propName_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NotificationTypeNewCall)tlobj;
            writer.WriteNumber(encodedPropName_call_id, obj.CallId);
        }
    }

    partial class NotificationTypeNewPushMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 84, 121, 112, 101, 78, 101, 119, 80, 117, 115, 104, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_sender => new byte[] { 115, 101, 110, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sender = JsonEncodedText.Encode(propName_sender);
        private static ReadOnlySpan<byte> propName_sender_name => new byte[] { 115, 101, 110, 100, 101, 114, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_sender_name = JsonEncodedText.Encode(propName_sender_name);
        private static ReadOnlySpan<byte> propName_is_outgoing => new byte[] { 105, 115, 95, 111, 117, 116, 103, 111, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_is_outgoing = JsonEncodedText.Encode(propName_is_outgoing);
        private static ReadOnlySpan<byte> propName_content => new byte[] { 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_content = JsonEncodedText.Encode(propName_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NotificationTypeNewPushMessage)tlobj;
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.Sender != null)
            {
                writer.WritePropertyName(encodedPropName_sender);
                writer.WriteTLObjectValue(obj.Sender);
            }
            writer.WriteString(encodedPropName_sender_name, obj.SenderName);
            writer.WriteBoolean(encodedPropName_is_outgoing, obj.IsOutgoing);
            if (obj.Content != null)
            {
                writer.WritePropertyName(encodedPropName_content);
                writer.WriteTLObjectValue(obj.Content);
            }
        }
    }

    partial class NotificationGroupTypeMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 71, 114, 111, 117, 112, 84, 121, 112, 101, 77, 101, 115, 115, 97, 103, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationGroupTypeMentionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 71, 114, 111, 117, 112, 84, 121, 112, 101, 77, 101, 110, 116, 105, 111, 110, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationGroupTypeSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 71, 114, 111, 117, 112, 84, 121, 112, 101, 83, 101, 99, 114, 101, 116, 67, 104, 97, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationGroupTypeCallsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 71, 114, 111, 117, 112, 84, 121, 112, 101, 67, 97, 108, 108, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_is_silent => new byte[] { 105, 115, 95, 115, 105, 108, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_is_silent = JsonEncodedText.Encode(propName_is_silent);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Notification)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteNumber(encodedPropName_date, obj.Date);
            writer.WriteBoolean(encodedPropName_is_silent, obj.IsSilent);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class NotificationGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_notifications => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_notifications = JsonEncodedText.Encode(propName_notifications);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NotificationGroup)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.Notifications != null)
            {
                writer.WritePropertyName(encodedPropName_notifications);
                writer.WriteArray(obj.Notifications);
            }
        }
    }

    partial class OptionValueBooleanConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 111, 112, 116, 105, 111, 110, 86, 97, 108, 117, 101, 66, 111, 111, 108, 101, 97, 110 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OptionValueBoolean)tlobj;
            writer.WriteBoolean(encodedPropName_value, obj.Value);
        }
    }

    partial class OptionValueEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 111, 112, 116, 105, 111, 110, 86, 97, 108, 117, 101, 69, 109, 112, 116, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class OptionValueIntegerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 111, 112, 116, 105, 111, 110, 86, 97, 108, 117, 101, 73, 110, 116, 101, 103, 101, 114 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OptionValueInteger)tlobj;
            writer.WritePropertyName(encodedPropName_value);
            writer.WriteInt64String(obj.Value);
        }
    }

    partial class OptionValueStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 111, 112, 116, 105, 111, 110, 86, 97, 108, 117, 101, 83, 116, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OptionValueString)tlobj;
            writer.WriteString(encodedPropName_value, obj.Value);
        }
    }

    partial class JsonObjectMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 106, 115, 111, 110, 79, 98, 106, 101, 99, 116, 77, 101, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_key => new byte[] { 107, 101, 121 };
        private static readonly JsonEncodedText encodedPropName_key = JsonEncodedText.Encode(propName_key);
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonObjectMember)tlobj;
            writer.WriteString(encodedPropName_key, obj.Key);
            if (obj.Value != null)
            {
                writer.WritePropertyName(encodedPropName_value);
                writer.WriteTLObjectValue(obj.Value);
            }
        }
    }

    partial class JsonValueNullConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 106, 115, 111, 110, 86, 97, 108, 117, 101, 78, 117, 108, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class JsonValueBooleanConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 106, 115, 111, 110, 86, 97, 108, 117, 101, 66, 111, 111, 108, 101, 97, 110 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonValueBoolean)tlobj;
            writer.WriteBoolean(encodedPropName_value, obj.Value);
        }
    }

    partial class JsonValueNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 106, 115, 111, 110, 86, 97, 108, 117, 101, 78, 117, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonValueNumber)tlobj;
            writer.WriteNumber(encodedPropName_value, obj.Value);
        }
    }

    partial class JsonValueStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 106, 115, 111, 110, 86, 97, 108, 117, 101, 83, 116, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonValueString)tlobj;
            writer.WriteString(encodedPropName_value, obj.Value);
        }
    }

    partial class JsonValueArrayConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 106, 115, 111, 110, 86, 97, 108, 117, 101, 65, 114, 114, 97, 121 }));
        private static ReadOnlySpan<byte> propName_values => new byte[] { 118, 97, 108, 117, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_values = JsonEncodedText.Encode(propName_values);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonValueArray)tlobj;
            if (obj.Values != null)
            {
                writer.WritePropertyName(encodedPropName_values);
                writer.WriteArray(obj.Values);
            }
        }
    }

    partial class JsonValueObjectConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 106, 115, 111, 110, 86, 97, 108, 117, 101, 79, 98, 106, 101, 99, 116 }));
        private static ReadOnlySpan<byte> propName_members => new byte[] { 109, 101, 109, 98, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_members = JsonEncodedText.Encode(propName_members);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonValueObject)tlobj;
            if (obj.Members != null)
            {
                writer.WritePropertyName(encodedPropName_members);
                writer.WriteArray(obj.Members);
            }
        }
    }

    partial class UserPrivacySettingRuleAllowAllConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 65, 108, 108, 111, 119, 65, 108, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingRuleAllowContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 65, 108, 108, 111, 119, 67, 111, 110, 116, 97, 99, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingRuleAllowUsersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 65, 108, 108, 111, 119, 85, 115, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserPrivacySettingRuleAllowUsers)tlobj;
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class UserPrivacySettingRuleAllowChatMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 65, 108, 108, 111, 119, 67, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_ids => new byte[] { 99, 104, 97, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_chat_ids = JsonEncodedText.Encode(propName_chat_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserPrivacySettingRuleAllowChatMembers)tlobj;
            if (obj.ChatIds != null)
            {
                writer.WritePropertyName(encodedPropName_chat_ids);
                writer.WriteArray(obj.ChatIds);
            }
        }
    }

    partial class UserPrivacySettingRuleRestrictAllConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 82, 101, 115, 116, 114, 105, 99, 116, 65, 108, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingRuleRestrictContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 82, 101, 115, 116, 114, 105, 99, 116, 67, 111, 110, 116, 97, 99, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingRuleRestrictUsersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 82, 101, 115, 116, 114, 105, 99, 116, 85, 115, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserPrivacySettingRuleRestrictUsers)tlobj;
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class UserPrivacySettingRuleRestrictChatMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 82, 101, 115, 116, 114, 105, 99, 116, 67, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_ids => new byte[] { 99, 104, 97, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_chat_ids = JsonEncodedText.Encode(propName_chat_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserPrivacySettingRuleRestrictChatMembers)tlobj;
            if (obj.ChatIds != null)
            {
                writer.WritePropertyName(encodedPropName_chat_ids);
                writer.WriteArray(obj.ChatIds);
            }
        }
    }

    partial class UserPrivacySettingRulesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 115 }));
        private static ReadOnlySpan<byte> propName_rules => new byte[] { 114, 117, 108, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_rules = JsonEncodedText.Encode(propName_rules);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserPrivacySettingRules)tlobj;
            if (obj.Rules != null)
            {
                writer.WritePropertyName(encodedPropName_rules);
                writer.WriteArray(obj.Rules);
            }
        }
    }

    partial class UserPrivacySettingShowStatusConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 83, 104, 111, 119, 83, 116, 97, 116, 117, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingShowProfilePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 83, 104, 111, 119, 80, 114, 111, 102, 105, 108, 101, 80, 104, 111, 116, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingShowLinkInForwardedMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 83, 104, 111, 119, 76, 105, 110, 107, 73, 110, 70, 111, 114, 119, 97, 114, 100, 101, 100, 77, 101, 115, 115, 97, 103, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingShowPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 83, 104, 111, 119, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingAllowChatInvitesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 65, 108, 108, 111, 119, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingAllowCallsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 65, 108, 108, 111, 119, 67, 97, 108, 108, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingAllowPeerToPeerCallsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 65, 108, 108, 111, 119, 80, 101, 101, 114, 84, 111, 80, 101, 101, 114, 67, 97, 108, 108, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingAllowFindingByPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 65, 108, 108, 111, 119, 70, 105, 110, 100, 105, 110, 103, 66, 121, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AccountTtlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 99, 99, 111, 117, 110, 116, 84, 116, 108 }));
        private static ReadOnlySpan<byte> propName_days => new byte[] { 100, 97, 121, 115 };
        private static readonly JsonEncodedText encodedPropName_days = JsonEncodedText.Encode(propName_days);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AccountTtl)tlobj;
            writer.WriteNumber(encodedPropName_days, obj.Days);
        }
    }

    partial class SessionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 115, 115, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_is_current => new byte[] { 105, 115, 95, 99, 117, 114, 114, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_is_current = JsonEncodedText.Encode(propName_is_current);
        private static ReadOnlySpan<byte> propName_is_password_pending => new byte[] { 105, 115, 95, 112, 97, 115, 115, 119, 111, 114, 100, 95, 112, 101, 110, 100, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_is_password_pending = JsonEncodedText.Encode(propName_is_password_pending);
        private static ReadOnlySpan<byte> propName_api_id => new byte[] { 97, 112, 105, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_api_id = JsonEncodedText.Encode(propName_api_id);
        private static ReadOnlySpan<byte> propName_application_name => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_application_name = JsonEncodedText.Encode(propName_application_name);
        private static ReadOnlySpan<byte> propName_application_version => new byte[] { 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 95, 118, 101, 114, 115, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_application_version = JsonEncodedText.Encode(propName_application_version);
        private static ReadOnlySpan<byte> propName_is_official_application => new byte[] { 105, 115, 95, 111, 102, 102, 105, 99, 105, 97, 108, 95, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_is_official_application = JsonEncodedText.Encode(propName_is_official_application);
        private static ReadOnlySpan<byte> propName_device_model => new byte[] { 100, 101, 118, 105, 99, 101, 95, 109, 111, 100, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_device_model = JsonEncodedText.Encode(propName_device_model);
        private static ReadOnlySpan<byte> propName_platform => new byte[] { 112, 108, 97, 116, 102, 111, 114, 109 };
        private static readonly JsonEncodedText encodedPropName_platform = JsonEncodedText.Encode(propName_platform);
        private static ReadOnlySpan<byte> propName_system_version => new byte[] { 115, 121, 115, 116, 101, 109, 95, 118, 101, 114, 115, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_system_version = JsonEncodedText.Encode(propName_system_version);
        private static ReadOnlySpan<byte> propName_log_in_date => new byte[] { 108, 111, 103, 95, 105, 110, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_log_in_date = JsonEncodedText.Encode(propName_log_in_date);
        private static ReadOnlySpan<byte> propName_last_active_date => new byte[] { 108, 97, 115, 116, 95, 97, 99, 116, 105, 118, 101, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_last_active_date = JsonEncodedText.Encode(propName_last_active_date);
        private static ReadOnlySpan<byte> propName_ip => new byte[] { 105, 112 };
        private static readonly JsonEncodedText encodedPropName_ip = JsonEncodedText.Encode(propName_ip);
        private static ReadOnlySpan<byte> propName_country => new byte[] { 99, 111, 117, 110, 116, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_country = JsonEncodedText.Encode(propName_country);
        private static ReadOnlySpan<byte> propName_region => new byte[] { 114, 101, 103, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_region = JsonEncodedText.Encode(propName_region);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Session)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteBoolean(encodedPropName_is_current, obj.IsCurrent);
            writer.WriteBoolean(encodedPropName_is_password_pending, obj.IsPasswordPending);
            writer.WriteNumber(encodedPropName_api_id, obj.ApiId);
            writer.WriteString(encodedPropName_application_name, obj.ApplicationName);
            writer.WriteString(encodedPropName_application_version, obj.ApplicationVersion);
            writer.WriteBoolean(encodedPropName_is_official_application, obj.IsOfficialApplication);
            writer.WriteString(encodedPropName_device_model, obj.DeviceModel);
            writer.WriteString(encodedPropName_platform, obj.Platform);
            writer.WriteString(encodedPropName_system_version, obj.SystemVersion);
            writer.WriteNumber(encodedPropName_log_in_date, obj.LogInDate);
            writer.WriteNumber(encodedPropName_last_active_date, obj.LastActiveDate);
            writer.WriteString(encodedPropName_ip, obj.Ip);
            writer.WriteString(encodedPropName_country, obj.Country);
            writer.WriteString(encodedPropName_region, obj.Region);
        }
    }

    partial class SessionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 115, 115, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_sessions => new byte[] { 115, 101, 115, 115, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_sessions = JsonEncodedText.Encode(propName_sessions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Sessions)tlobj;
            if (obj.Sessions_ != null)
            {
                writer.WritePropertyName(encodedPropName_sessions);
                writer.WriteArray(obj.Sessions_);
            }
        }
    }

    partial class ConnectedWebsiteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 110, 110, 101, 99, 116, 101, 100, 87, 101, 98, 115, 105, 116, 101 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_domain_name => new byte[] { 100, 111, 109, 97, 105, 110, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_domain_name = JsonEncodedText.Encode(propName_domain_name);
        private static ReadOnlySpan<byte> propName_bot_user_id => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_bot_user_id = JsonEncodedText.Encode(propName_bot_user_id);
        private static ReadOnlySpan<byte> propName_browser => new byte[] { 98, 114, 111, 119, 115, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_browser = JsonEncodedText.Encode(propName_browser);
        private static ReadOnlySpan<byte> propName_platform => new byte[] { 112, 108, 97, 116, 102, 111, 114, 109 };
        private static readonly JsonEncodedText encodedPropName_platform = JsonEncodedText.Encode(propName_platform);
        private static ReadOnlySpan<byte> propName_log_in_date => new byte[] { 108, 111, 103, 95, 105, 110, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_log_in_date = JsonEncodedText.Encode(propName_log_in_date);
        private static ReadOnlySpan<byte> propName_last_active_date => new byte[] { 108, 97, 115, 116, 95, 97, 99, 116, 105, 118, 101, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_last_active_date = JsonEncodedText.Encode(propName_last_active_date);
        private static ReadOnlySpan<byte> propName_ip => new byte[] { 105, 112 };
        private static readonly JsonEncodedText encodedPropName_ip = JsonEncodedText.Encode(propName_ip);
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ConnectedWebsite)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(encodedPropName_domain_name, obj.DomainName);
            writer.WriteNumber(encodedPropName_bot_user_id, obj.BotUserId);
            writer.WriteString(encodedPropName_browser, obj.Browser);
            writer.WriteString(encodedPropName_platform, obj.Platform);
            writer.WriteNumber(encodedPropName_log_in_date, obj.LogInDate);
            writer.WriteNumber(encodedPropName_last_active_date, obj.LastActiveDate);
            writer.WriteString(encodedPropName_ip, obj.Ip);
            writer.WriteString(encodedPropName_location, obj.Location);
        }
    }

    partial class ConnectedWebsitesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 110, 110, 101, 99, 116, 101, 100, 87, 101, 98, 115, 105, 116, 101, 115 }));
        private static ReadOnlySpan<byte> propName_websites => new byte[] { 119, 101, 98, 115, 105, 116, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_websites = JsonEncodedText.Encode(propName_websites);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ConnectedWebsites)tlobj;
            if (obj.Websites != null)
            {
                writer.WritePropertyName(encodedPropName_websites);
                writer.WriteArray(obj.Websites);
            }
        }
    }

    partial class ChatReportReasonSpamConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 82, 101, 112, 111, 114, 116, 82, 101, 97, 115, 111, 110, 83, 112, 97, 109 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonViolenceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 82, 101, 112, 111, 114, 116, 82, 101, 97, 115, 111, 110, 86, 105, 111, 108, 101, 110, 99, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonPornographyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 82, 101, 112, 111, 114, 116, 82, 101, 97, 115, 111, 110, 80, 111, 114, 110, 111, 103, 114, 97, 112, 104, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonChildAbuseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 82, 101, 112, 111, 114, 116, 82, 101, 97, 115, 111, 110, 67, 104, 105, 108, 100, 65, 98, 117, 115, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonCopyrightConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 82, 101, 112, 111, 114, 116, 82, 101, 97, 115, 111, 110, 67, 111, 112, 121, 114, 105, 103, 104, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonUnrelatedLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 82, 101, 112, 111, 114, 116, 82, 101, 97, 115, 111, 110, 85, 110, 114, 101, 108, 97, 116, 101, 100, 76, 111, 99, 97, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonFakeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 82, 101, 112, 111, 114, 116, 82, 101, 97, 115, 111, 110, 70, 97, 107, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonCustomConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 82, 101, 112, 111, 114, 116, 82, 101, 97, 115, 111, 110, 67, 117, 115, 116, 111, 109 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InternalLinkTypeActiveSessionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 65, 99, 116, 105, 118, 101, 83, 101, 115, 115, 105, 111, 110, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InternalLinkTypeAuthenticationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_code => new byte[] { 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_code = JsonEncodedText.Encode(propName_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeAuthenticationCode)tlobj;
            writer.WriteString(encodedPropName_code, obj.Code);
        }
    }

    partial class InternalLinkTypeBackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100 }));
        private static ReadOnlySpan<byte> propName_background_name => new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_background_name = JsonEncodedText.Encode(propName_background_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeBackground)tlobj;
            writer.WriteString(encodedPropName_background_name, obj.BackgroundName);
        }
    }

    partial class InternalLinkTypeBotStartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 66, 111, 116, 83, 116, 97, 114, 116 }));
        private static ReadOnlySpan<byte> propName_bot_username => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_bot_username = JsonEncodedText.Encode(propName_bot_username);
        private static ReadOnlySpan<byte> propName_start_parameter => new byte[] { 115, 116, 97, 114, 116, 95, 112, 97, 114, 97, 109, 101, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_start_parameter = JsonEncodedText.Encode(propName_start_parameter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeBotStart)tlobj;
            writer.WriteString(encodedPropName_bot_username, obj.BotUsername);
            writer.WriteString(encodedPropName_start_parameter, obj.StartParameter);
        }
    }

    partial class InternalLinkTypeBotStartInGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 66, 111, 116, 83, 116, 97, 114, 116, 73, 110, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_bot_username => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_bot_username = JsonEncodedText.Encode(propName_bot_username);
        private static ReadOnlySpan<byte> propName_start_parameter => new byte[] { 115, 116, 97, 114, 116, 95, 112, 97, 114, 97, 109, 101, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_start_parameter = JsonEncodedText.Encode(propName_start_parameter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeBotStartInGroup)tlobj;
            writer.WriteString(encodedPropName_bot_username, obj.BotUsername);
            writer.WriteString(encodedPropName_start_parameter, obj.StartParameter);
        }
    }

    partial class InternalLinkTypeChangePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 67, 104, 97, 110, 103, 101, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InternalLinkTypeChatInviteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101 }));
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeChatInvite)tlobj;
            writer.WriteString(encodedPropName_invite_link, obj.InviteLink);
        }
    }

    partial class InternalLinkTypeFilterSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 70, 105, 108, 116, 101, 114, 83, 101, 116, 116, 105, 110, 103, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InternalLinkTypeGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 71, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_bot_username => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_bot_username = JsonEncodedText.Encode(propName_bot_username);
        private static ReadOnlySpan<byte> propName_game_short_name => new byte[] { 103, 97, 109, 101, 95, 115, 104, 111, 114, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_game_short_name = JsonEncodedText.Encode(propName_game_short_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeGame)tlobj;
            writer.WriteString(encodedPropName_bot_username, obj.BotUsername);
            writer.WriteString(encodedPropName_game_short_name, obj.GameShortName);
        }
    }

    partial class InternalLinkTypeLanguagePackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107 }));
        private static ReadOnlySpan<byte> propName_language_pack_id => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_language_pack_id = JsonEncodedText.Encode(propName_language_pack_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeLanguagePack)tlobj;
            writer.WriteString(encodedPropName_language_pack_id, obj.LanguagePackId);
        }
    }

    partial class InternalLinkTypeMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeMessage)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
        }
    }

    partial class InternalLinkTypeMessageDraftConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 77, 101, 115, 115, 97, 103, 101, 68, 114, 97, 102, 116 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_contains_link => new byte[] { 99, 111, 110, 116, 97, 105, 110, 115, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_contains_link = JsonEncodedText.Encode(propName_contains_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeMessageDraft)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteBoolean(encodedPropName_contains_link, obj.ContainsLink);
        }
    }

    partial class InternalLinkTypePassportDataRequestConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 80, 97, 115, 115, 112, 111, 114, 116, 68, 97, 116, 97, 82, 101, 113, 117, 101, 115, 116 }));
        private static ReadOnlySpan<byte> propName_bot_user_id => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_bot_user_id = JsonEncodedText.Encode(propName_bot_user_id);
        private static ReadOnlySpan<byte> propName_scope => new byte[] { 115, 99, 111, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_scope = JsonEncodedText.Encode(propName_scope);
        private static ReadOnlySpan<byte> propName_public_key => new byte[] { 112, 117, 98, 108, 105, 99, 95, 107, 101, 121 };
        private static readonly JsonEncodedText encodedPropName_public_key = JsonEncodedText.Encode(propName_public_key);
        private static ReadOnlySpan<byte> propName_nonce => new byte[] { 110, 111, 110, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_nonce = JsonEncodedText.Encode(propName_nonce);
        private static ReadOnlySpan<byte> propName_callback_url => new byte[] { 99, 97, 108, 108, 98, 97, 99, 107, 95, 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_callback_url = JsonEncodedText.Encode(propName_callback_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypePassportDataRequest)tlobj;
            writer.WriteNumber(encodedPropName_bot_user_id, obj.BotUserId);
            writer.WriteString(encodedPropName_scope, obj.Scope);
            writer.WriteString(encodedPropName_public_key, obj.PublicKey);
            writer.WriteString(encodedPropName_nonce, obj.Nonce);
            writer.WriteString(encodedPropName_callback_url, obj.CallbackUrl);
        }
    }

    partial class InternalLinkTypePhoneNumberConfirmationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 67, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_hash => new byte[] { 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_hash = JsonEncodedText.Encode(propName_hash);
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypePhoneNumberConfirmation)tlobj;
            writer.WriteString(encodedPropName_hash, obj.Hash);
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
        }
    }

    partial class InternalLinkTypeProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 80, 114, 111, 120, 121 }));
        private static ReadOnlySpan<byte> propName_server => new byte[] { 115, 101, 114, 118, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_server = JsonEncodedText.Encode(propName_server);
        private static ReadOnlySpan<byte> propName_port => new byte[] { 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_port = JsonEncodedText.Encode(propName_port);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeProxy)tlobj;
            writer.WriteString(encodedPropName_server, obj.Server);
            writer.WriteNumber(encodedPropName_port, obj.Port);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class InternalLinkTypePublicChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 80, 117, 98, 108, 105, 99, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_username => new byte[] { 99, 104, 97, 116, 95, 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_chat_username = JsonEncodedText.Encode(propName_chat_username);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypePublicChat)tlobj;
            writer.WriteString(encodedPropName_chat_username, obj.ChatUsername);
        }
    }

    partial class InternalLinkTypeQrCodeAuthenticationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 81, 114, 67, 111, 100, 101, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InternalLinkTypeSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 83, 101, 116, 116, 105, 110, 103, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InternalLinkTypeStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_sticker_set_name => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_sticker_set_name = JsonEncodedText.Encode(propName_sticker_set_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeStickerSet)tlobj;
            writer.WriteString(encodedPropName_sticker_set_name, obj.StickerSetName);
        }
    }

    partial class InternalLinkTypeThemeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 84, 104, 101, 109, 101 }));
        private static ReadOnlySpan<byte> propName_theme_name => new byte[] { 116, 104, 101, 109, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_theme_name = JsonEncodedText.Encode(propName_theme_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeTheme)tlobj;
            writer.WriteString(encodedPropName_theme_name, obj.ThemeName);
        }
    }

    partial class InternalLinkTypeThemeSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 84, 104, 101, 109, 101, 83, 101, 116, 116, 105, 110, 103, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InternalLinkTypeUnknownDeepLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 85, 110, 107, 110, 111, 119, 110, 68, 101, 101, 112, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_link => new byte[] { 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_link = JsonEncodedText.Encode(propName_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeUnknownDeepLink)tlobj;
            writer.WriteString(encodedPropName_link, obj.Link);
        }
    }

    partial class InternalLinkTypeUnsupportedProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 85, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 80, 114, 111, 120, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InternalLinkTypeVideoChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101, 86, 105, 100, 101, 111, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_username => new byte[] { 99, 104, 97, 116, 95, 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_chat_username = JsonEncodedText.Encode(propName_chat_username);
        private static ReadOnlySpan<byte> propName_invite_hash => new byte[] { 105, 110, 118, 105, 116, 101, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_invite_hash = JsonEncodedText.Encode(propName_invite_hash);
        private static ReadOnlySpan<byte> propName_is_live_stream => new byte[] { 105, 115, 95, 108, 105, 118, 101, 95, 115, 116, 114, 101, 97, 109 };
        private static readonly JsonEncodedText encodedPropName_is_live_stream = JsonEncodedText.Encode(propName_is_live_stream);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InternalLinkTypeVideoChat)tlobj;
            writer.WriteString(encodedPropName_chat_username, obj.ChatUsername);
            writer.WriteString(encodedPropName_invite_hash, obj.InviteHash);
            writer.WriteBoolean(encodedPropName_is_live_stream, obj.IsLiveStream);
        }
    }

    partial class MessageLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_link => new byte[] { 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_link = JsonEncodedText.Encode(propName_link);
        private static ReadOnlySpan<byte> propName_is_public => new byte[] { 105, 115, 95, 112, 117, 98, 108, 105, 99 };
        private static readonly JsonEncodedText encodedPropName_is_public = JsonEncodedText.Encode(propName_is_public);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageLink)tlobj;
            writer.WriteString(encodedPropName_link, obj.Link);
            writer.WriteBoolean(encodedPropName_is_public, obj.IsPublic);
        }
    }

    partial class MessageLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 76, 105, 110, 107, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_is_public => new byte[] { 105, 115, 95, 112, 117, 98, 108, 105, 99 };
        private static readonly JsonEncodedText encodedPropName_is_public = JsonEncodedText.Encode(propName_is_public);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        private static ReadOnlySpan<byte> propName_media_timestamp => new byte[] { 109, 101, 100, 105, 97, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112 };
        private static readonly JsonEncodedText encodedPropName_media_timestamp = JsonEncodedText.Encode(propName_media_timestamp);
        private static ReadOnlySpan<byte> propName_for_album => new byte[] { 102, 111, 114, 95, 97, 108, 98, 117, 109 };
        private static readonly JsonEncodedText encodedPropName_for_album = JsonEncodedText.Encode(propName_for_album);
        private static ReadOnlySpan<byte> propName_for_comment => new byte[] { 102, 111, 114, 95, 99, 111, 109, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_for_comment = JsonEncodedText.Encode(propName_for_comment);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageLinkInfo)tlobj;
            writer.WriteBoolean(encodedPropName_is_public, obj.IsPublic);
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Message != null)
            {
                writer.WritePropertyName(encodedPropName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
            writer.WriteNumber(encodedPropName_media_timestamp, obj.MediaTimestamp);
            writer.WriteBoolean(encodedPropName_for_album, obj.ForAlbum);
            writer.WriteBoolean(encodedPropName_for_comment, obj.ForComment);
        }
    }

    partial class FilePartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 80, 97, 114, 116 }));
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (FilePart)tlobj;
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
        }
    }

    partial class FileTypeNoneConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 78, 111, 110, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 65, 117, 100, 105, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 68, 111, 99, 117, 109, 101, 110, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 80, 104, 111, 116, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeProfilePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 80, 114, 111, 102, 105, 108, 101, 80, 104, 111, 116, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeSecretConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 83, 101, 99, 114, 101, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeSecretThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 83, 101, 99, 114, 101, 116, 84, 104, 117, 109, 98, 110, 97, 105, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeSecureConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 83, 101, 99, 117, 114, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 83, 116, 105, 99, 107, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 84, 104, 117, 109, 98, 110, 97, 105, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeUnknownConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 85, 110, 107, 110, 111, 119, 110 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 86, 105, 100, 101, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 86, 105, 100, 101, 111, 78, 111, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 86, 111, 105, 99, 101, 78, 111, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeWallpaperConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 108, 101, 84, 121, 112, 101, 87, 97, 108, 108, 112, 97, 112, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class StorageStatisticsByFileTypeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 111, 114, 97, 103, 101, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 66, 121, 70, 105, 108, 101, 84, 121, 112, 101 }));
        private static ReadOnlySpan<byte> propName_file_type => new byte[] { 102, 105, 108, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_file_type = JsonEncodedText.Encode(propName_file_type);
        private static ReadOnlySpan<byte> propName_size => new byte[] { 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_size = JsonEncodedText.Encode(propName_size);
        private static ReadOnlySpan<byte> propName_count => new byte[] { 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_count = JsonEncodedText.Encode(propName_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StorageStatisticsByFileType)tlobj;
            if (obj.FileType != null)
            {
                writer.WritePropertyName(encodedPropName_file_type);
                writer.WriteTLObjectValue(obj.FileType);
            }
            writer.WriteNumber(encodedPropName_size, obj.Size);
            writer.WriteNumber(encodedPropName_count, obj.Count);
        }
    }

    partial class StorageStatisticsByChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 111, 114, 97, 103, 101, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 66, 121, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_size => new byte[] { 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_size = JsonEncodedText.Encode(propName_size);
        private static ReadOnlySpan<byte> propName_count => new byte[] { 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_count = JsonEncodedText.Encode(propName_count);
        private static ReadOnlySpan<byte> propName_by_file_type => new byte[] { 98, 121, 95, 102, 105, 108, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_by_file_type = JsonEncodedText.Encode(propName_by_file_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StorageStatisticsByChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_size, obj.Size);
            writer.WriteNumber(encodedPropName_count, obj.Count);
            if (obj.ByFileType != null)
            {
                writer.WritePropertyName(encodedPropName_by_file_type);
                writer.WriteArray(obj.ByFileType);
            }
        }
    }

    partial class StorageStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 111, 114, 97, 103, 101, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        private static ReadOnlySpan<byte> propName_size => new byte[] { 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_size = JsonEncodedText.Encode(propName_size);
        private static ReadOnlySpan<byte> propName_count => new byte[] { 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_count = JsonEncodedText.Encode(propName_count);
        private static ReadOnlySpan<byte> propName_by_chat => new byte[] { 98, 121, 95, 99, 104, 97, 116 };
        private static readonly JsonEncodedText encodedPropName_by_chat = JsonEncodedText.Encode(propName_by_chat);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StorageStatistics)tlobj;
            writer.WriteNumber(encodedPropName_size, obj.Size);
            writer.WriteNumber(encodedPropName_count, obj.Count);
            if (obj.ByChat != null)
            {
                writer.WritePropertyName(encodedPropName_by_chat);
                writer.WriteArray(obj.ByChat);
            }
        }
    }

    partial class StorageStatisticsFastConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 111, 114, 97, 103, 101, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 70, 97, 115, 116 }));
        private static ReadOnlySpan<byte> propName_files_size => new byte[] { 102, 105, 108, 101, 115, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_files_size = JsonEncodedText.Encode(propName_files_size);
        private static ReadOnlySpan<byte> propName_file_count => new byte[] { 102, 105, 108, 101, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_file_count = JsonEncodedText.Encode(propName_file_count);
        private static ReadOnlySpan<byte> propName_database_size => new byte[] { 100, 97, 116, 97, 98, 97, 115, 101, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_database_size = JsonEncodedText.Encode(propName_database_size);
        private static ReadOnlySpan<byte> propName_language_pack_database_size => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 100, 97, 116, 97, 98, 97, 115, 101, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_language_pack_database_size = JsonEncodedText.Encode(propName_language_pack_database_size);
        private static ReadOnlySpan<byte> propName_log_size => new byte[] { 108, 111, 103, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_log_size = JsonEncodedText.Encode(propName_log_size);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StorageStatisticsFast)tlobj;
            writer.WriteNumber(encodedPropName_files_size, obj.FilesSize);
            writer.WriteNumber(encodedPropName_file_count, obj.FileCount);
            writer.WriteNumber(encodedPropName_database_size, obj.DatabaseSize);
            writer.WriteNumber(encodedPropName_language_pack_database_size, obj.LanguagePackDatabaseSize);
            writer.WriteNumber(encodedPropName_log_size, obj.LogSize);
        }
    }

    partial class DatabaseStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 97, 116, 97, 98, 97, 115, 101, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        private static ReadOnlySpan<byte> propName_statistics => new byte[] { 115, 116, 97, 116, 105, 115, 116, 105, 99, 115 };
        private static readonly JsonEncodedText encodedPropName_statistics = JsonEncodedText.Encode(propName_statistics);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DatabaseStatistics)tlobj;
            writer.WriteString(encodedPropName_statistics, obj.Statistics);
        }
    }

    partial class NetworkTypeNoneConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 101, 116, 119, 111, 114, 107, 84, 121, 112, 101, 78, 111, 110, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NetworkTypeMobileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 101, 116, 119, 111, 114, 107, 84, 121, 112, 101, 77, 111, 98, 105, 108, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NetworkTypeMobileRoamingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 101, 116, 119, 111, 114, 107, 84, 121, 112, 101, 77, 111, 98, 105, 108, 101, 82, 111, 97, 109, 105, 110, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NetworkTypeWiFiConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 101, 116, 119, 111, 114, 107, 84, 121, 112, 101, 87, 105, 70, 105 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NetworkTypeOtherConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 101, 116, 119, 111, 114, 107, 84, 121, 112, 101, 79, 116, 104, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NetworkStatisticsEntryFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 101, 116, 119, 111, 114, 107, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 69, 110, 116, 114, 121, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file_type => new byte[] { 102, 105, 108, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_file_type = JsonEncodedText.Encode(propName_file_type);
        private static ReadOnlySpan<byte> propName_network_type => new byte[] { 110, 101, 116, 119, 111, 114, 107, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_network_type = JsonEncodedText.Encode(propName_network_type);
        private static ReadOnlySpan<byte> propName_sent_bytes => new byte[] { 115, 101, 110, 116, 95, 98, 121, 116, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_sent_bytes = JsonEncodedText.Encode(propName_sent_bytes);
        private static ReadOnlySpan<byte> propName_received_bytes => new byte[] { 114, 101, 99, 101, 105, 118, 101, 100, 95, 98, 121, 116, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_received_bytes = JsonEncodedText.Encode(propName_received_bytes);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NetworkStatisticsEntryFile)tlobj;
            if (obj.FileType != null)
            {
                writer.WritePropertyName(encodedPropName_file_type);
                writer.WriteTLObjectValue(obj.FileType);
            }
            if (obj.NetworkType != null)
            {
                writer.WritePropertyName(encodedPropName_network_type);
                writer.WriteTLObjectValue(obj.NetworkType);
            }
            writer.WriteNumber(encodedPropName_sent_bytes, obj.SentBytes);
            writer.WriteNumber(encodedPropName_received_bytes, obj.ReceivedBytes);
        }
    }

    partial class NetworkStatisticsEntryCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 101, 116, 119, 111, 114, 107, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 69, 110, 116, 114, 121, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_network_type => new byte[] { 110, 101, 116, 119, 111, 114, 107, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_network_type = JsonEncodedText.Encode(propName_network_type);
        private static ReadOnlySpan<byte> propName_sent_bytes => new byte[] { 115, 101, 110, 116, 95, 98, 121, 116, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_sent_bytes = JsonEncodedText.Encode(propName_sent_bytes);
        private static ReadOnlySpan<byte> propName_received_bytes => new byte[] { 114, 101, 99, 101, 105, 118, 101, 100, 95, 98, 121, 116, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_received_bytes = JsonEncodedText.Encode(propName_received_bytes);
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NetworkStatisticsEntryCall)tlobj;
            if (obj.NetworkType != null)
            {
                writer.WritePropertyName(encodedPropName_network_type);
                writer.WriteTLObjectValue(obj.NetworkType);
            }
            writer.WriteNumber(encodedPropName_sent_bytes, obj.SentBytes);
            writer.WriteNumber(encodedPropName_received_bytes, obj.ReceivedBytes);
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
        }
    }

    partial class NetworkStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 110, 101, 116, 119, 111, 114, 107, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        private static ReadOnlySpan<byte> propName_since_date => new byte[] { 115, 105, 110, 99, 101, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_since_date = JsonEncodedText.Encode(propName_since_date);
        private static ReadOnlySpan<byte> propName_entries => new byte[] { 101, 110, 116, 114, 105, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_entries = JsonEncodedText.Encode(propName_entries);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NetworkStatistics)tlobj;
            writer.WriteNumber(encodedPropName_since_date, obj.SinceDate);
            if (obj.Entries != null)
            {
                writer.WritePropertyName(encodedPropName_entries);
                writer.WriteArray(obj.Entries);
            }
        }
    }

    partial class AutoDownloadSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 111, 68, 111, 119, 110, 108, 111, 97, 100, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_is_auto_download_enabled => new byte[] { 105, 115, 95, 97, 117, 116, 111, 95, 100, 111, 119, 110, 108, 111, 97, 100, 95, 101, 110, 97, 98, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_auto_download_enabled = JsonEncodedText.Encode(propName_is_auto_download_enabled);
        private static ReadOnlySpan<byte> propName_max_photo_file_size => new byte[] { 109, 97, 120, 95, 112, 104, 111, 116, 111, 95, 102, 105, 108, 101, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_max_photo_file_size = JsonEncodedText.Encode(propName_max_photo_file_size);
        private static ReadOnlySpan<byte> propName_max_video_file_size => new byte[] { 109, 97, 120, 95, 118, 105, 100, 101, 111, 95, 102, 105, 108, 101, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_max_video_file_size = JsonEncodedText.Encode(propName_max_video_file_size);
        private static ReadOnlySpan<byte> propName_max_other_file_size => new byte[] { 109, 97, 120, 95, 111, 116, 104, 101, 114, 95, 102, 105, 108, 101, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_max_other_file_size = JsonEncodedText.Encode(propName_max_other_file_size);
        private static ReadOnlySpan<byte> propName_video_upload_bitrate => new byte[] { 118, 105, 100, 101, 111, 95, 117, 112, 108, 111, 97, 100, 95, 98, 105, 116, 114, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_video_upload_bitrate = JsonEncodedText.Encode(propName_video_upload_bitrate);
        private static ReadOnlySpan<byte> propName_preload_large_videos => new byte[] { 112, 114, 101, 108, 111, 97, 100, 95, 108, 97, 114, 103, 101, 95, 118, 105, 100, 101, 111, 115 };
        private static readonly JsonEncodedText encodedPropName_preload_large_videos = JsonEncodedText.Encode(propName_preload_large_videos);
        private static ReadOnlySpan<byte> propName_preload_next_audio => new byte[] { 112, 114, 101, 108, 111, 97, 100, 95, 110, 101, 120, 116, 95, 97, 117, 100, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_preload_next_audio = JsonEncodedText.Encode(propName_preload_next_audio);
        private static ReadOnlySpan<byte> propName_use_less_data_for_calls => new byte[] { 117, 115, 101, 95, 108, 101, 115, 115, 95, 100, 97, 116, 97, 95, 102, 111, 114, 95, 99, 97, 108, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_use_less_data_for_calls = JsonEncodedText.Encode(propName_use_less_data_for_calls);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AutoDownloadSettings)tlobj;
            writer.WriteBoolean(encodedPropName_is_auto_download_enabled, obj.IsAutoDownloadEnabled);
            writer.WriteNumber(encodedPropName_max_photo_file_size, obj.MaxPhotoFileSize);
            writer.WriteNumber(encodedPropName_max_video_file_size, obj.MaxVideoFileSize);
            writer.WriteNumber(encodedPropName_max_other_file_size, obj.MaxOtherFileSize);
            writer.WriteNumber(encodedPropName_video_upload_bitrate, obj.VideoUploadBitrate);
            writer.WriteBoolean(encodedPropName_preload_large_videos, obj.PreloadLargeVideos);
            writer.WriteBoolean(encodedPropName_preload_next_audio, obj.PreloadNextAudio);
            writer.WriteBoolean(encodedPropName_use_less_data_for_calls, obj.UseLessDataForCalls);
        }
    }

    partial class AutoDownloadSettingsPresetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 117, 116, 111, 68, 111, 119, 110, 108, 111, 97, 100, 83, 101, 116, 116, 105, 110, 103, 115, 80, 114, 101, 115, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_low => new byte[] { 108, 111, 119 };
        private static readonly JsonEncodedText encodedPropName_low = JsonEncodedText.Encode(propName_low);
        private static ReadOnlySpan<byte> propName_medium => new byte[] { 109, 101, 100, 105, 117, 109 };
        private static readonly JsonEncodedText encodedPropName_medium = JsonEncodedText.Encode(propName_medium);
        private static ReadOnlySpan<byte> propName_high => new byte[] { 104, 105, 103, 104 };
        private static readonly JsonEncodedText encodedPropName_high = JsonEncodedText.Encode(propName_high);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AutoDownloadSettingsPresets)tlobj;
            if (obj.Low != null)
            {
                writer.WritePropertyName(encodedPropName_low);
                writer.WriteTLObjectValue(obj.Low);
            }
            if (obj.Medium != null)
            {
                writer.WritePropertyName(encodedPropName_medium);
                writer.WriteTLObjectValue(obj.Medium);
            }
            if (obj.High != null)
            {
                writer.WritePropertyName(encodedPropName_high);
                writer.WriteTLObjectValue(obj.High);
            }
        }
    }

    partial class ConnectionStateWaitingForNetworkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 83, 116, 97, 116, 101, 87, 97, 105, 116, 105, 110, 103, 70, 111, 114, 78, 101, 116, 119, 111, 114, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ConnectionStateConnectingToProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 83, 116, 97, 116, 101, 67, 111, 110, 110, 101, 99, 116, 105, 110, 103, 84, 111, 80, 114, 111, 120, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ConnectionStateConnectingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 83, 116, 97, 116, 101, 67, 111, 110, 110, 101, 99, 116, 105, 110, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ConnectionStateUpdatingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 83, 116, 97, 116, 101, 85, 112, 100, 97, 116, 105, 110, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ConnectionStateReadyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 83, 116, 97, 116, 101, 82, 101, 97, 100, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryUsersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 112, 67, 104, 97, 116, 67, 97, 116, 101, 103, 111, 114, 121, 85, 115, 101, 114, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryBotsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 112, 67, 104, 97, 116, 67, 97, 116, 101, 103, 111, 114, 121, 66, 111, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryGroupsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 112, 67, 104, 97, 116, 67, 97, 116, 101, 103, 111, 114, 121, 71, 114, 111, 117, 112, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryChannelsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 112, 67, 104, 97, 116, 67, 97, 116, 101, 103, 111, 114, 121, 67, 104, 97, 110, 110, 101, 108, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryInlineBotsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 112, 67, 104, 97, 116, 67, 97, 116, 101, 103, 111, 114, 121, 73, 110, 108, 105, 110, 101, 66, 111, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryCallsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 112, 67, 104, 97, 116, 67, 97, 116, 101, 103, 111, 114, 121, 67, 97, 108, 108, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryForwardChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 112, 67, 104, 97, 116, 67, 97, 116, 101, 103, 111, 114, 121, 70, 111, 114, 119, 97, 114, 100, 67, 104, 97, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TMeUrlTypeUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 77, 101, 85, 114, 108, 84, 121, 112, 101, 85, 115, 101, 114 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrlTypeUser)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class TMeUrlTypeSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 77, 101, 85, 114, 108, 84, 121, 112, 101, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrlTypeSupergroup)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class TMeUrlTypeChatInviteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 77, 101, 85, 114, 108, 84, 121, 112, 101, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101 }));
        private static ReadOnlySpan<byte> propName_info => new byte[] { 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_info = JsonEncodedText.Encode(propName_info);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrlTypeChatInvite)tlobj;
            if (obj.Info != null)
            {
                writer.WritePropertyName(encodedPropName_info);
                writer.WriteTLObjectValue(obj.Info);
            }
        }
    }

    partial class TMeUrlTypeStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 77, 101, 85, 114, 108, 84, 121, 112, 101, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_sticker_set_id => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sticker_set_id = JsonEncodedText.Encode(propName_sticker_set_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrlTypeStickerSet)tlobj;
            writer.WritePropertyName(encodedPropName_sticker_set_id);
            writer.WriteInt64String(obj.StickerSetId);
        }
    }

    partial class TMeUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 77, 101, 85, 114, 108 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrl)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class TMeUrlsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 77, 101, 85, 114, 108, 115 }));
        private static ReadOnlySpan<byte> propName_urls => new byte[] { 117, 114, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_urls = JsonEncodedText.Encode(propName_urls);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrls)tlobj;
            if (obj.Urls != null)
            {
                writer.WritePropertyName(encodedPropName_urls);
                writer.WriteArray(obj.Urls);
            }
        }
    }

    partial class SuggestedActionEnableArchiveAndMuteNewChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 103, 103, 101, 115, 116, 101, 100, 65, 99, 116, 105, 111, 110, 69, 110, 97, 98, 108, 101, 65, 114, 99, 104, 105, 118, 101, 65, 110, 100, 77, 117, 116, 101, 78, 101, 119, 67, 104, 97, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SuggestedActionCheckPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 103, 103, 101, 115, 116, 101, 100, 65, 99, 116, 105, 111, 110, 67, 104, 101, 99, 107, 80, 97, 115, 115, 119, 111, 114, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SuggestedActionCheckPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 103, 103, 101, 115, 116, 101, 100, 65, 99, 116, 105, 111, 110, 67, 104, 101, 99, 107, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SuggestedActionSeeTicksHintConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 103, 103, 101, 115, 116, 101, 100, 65, 99, 116, 105, 111, 110, 83, 101, 101, 84, 105, 99, 107, 115, 72, 105, 110, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SuggestedActionConvertToBroadcastGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 117, 103, 103, 101, 115, 116, 101, 100, 65, 99, 116, 105, 111, 110, 67, 111, 110, 118, 101, 114, 116, 84, 111, 66, 114, 111, 97, 100, 99, 97, 115, 116, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SuggestedActionConvertToBroadcastGroup)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class CountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 117, 110, 116 }));
        private static ReadOnlySpan<byte> propName_count => new byte[] { 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_count = JsonEncodedText.Encode(propName_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Count)tlobj;
            writer.WriteNumber(encodedPropName_count, obj.Count_);
        }
    }

    partial class TextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Text)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text_);
        }
    }

    partial class SecondsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 99, 111, 110, 100, 115 }));
        private static ReadOnlySpan<byte> propName_seconds => new byte[] { 115, 101, 99, 111, 110, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_seconds = JsonEncodedText.Encode(propName_seconds);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Seconds)tlobj;
            writer.WriteNumber(encodedPropName_seconds, obj.Seconds_);
        }
    }

    partial class DeepLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 101, 112, 76, 105, 110, 107, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_need_update_application => new byte[] { 110, 101, 101, 100, 95, 117, 112, 100, 97, 116, 101, 95, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_need_update_application = JsonEncodedText.Encode(propName_need_update_application);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeepLinkInfo)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteBoolean(encodedPropName_need_update_application, obj.NeedUpdateApplication);
        }
    }

    partial class TextParseModeMarkdownConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 80, 97, 114, 115, 101, 77, 111, 100, 101, 77, 97, 114, 107, 100, 111, 119, 110 }));
        private static ReadOnlySpan<byte> propName_version => new byte[] { 118, 101, 114, 115, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_version = JsonEncodedText.Encode(propName_version);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextParseModeMarkdown)tlobj;
            writer.WriteNumber(encodedPropName_version, obj.Version);
        }
    }

    partial class TextParseModeHTMLConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 120, 116, 80, 97, 114, 115, 101, 77, 111, 100, 101, 72, 84, 77, 76 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ProxyTypeSocks5Converter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 114, 111, 120, 121, 84, 121, 112, 101, 83, 111, 99, 107, 115, 53 }));
        private static ReadOnlySpan<byte> propName_username => new byte[] { 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_username = JsonEncodedText.Encode(propName_username);
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ProxyTypeSocks5)tlobj;
            writer.WriteString(encodedPropName_username, obj.Username);
            writer.WriteString(encodedPropName_password, obj.Password);
        }
    }

    partial class ProxyTypeHttpConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 114, 111, 120, 121, 84, 121, 112, 101, 72, 116, 116, 112 }));
        private static ReadOnlySpan<byte> propName_username => new byte[] { 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_username = JsonEncodedText.Encode(propName_username);
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        private static ReadOnlySpan<byte> propName_http_only => new byte[] { 104, 116, 116, 112, 95, 111, 110, 108, 121 };
        private static readonly JsonEncodedText encodedPropName_http_only = JsonEncodedText.Encode(propName_http_only);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ProxyTypeHttp)tlobj;
            writer.WriteString(encodedPropName_username, obj.Username);
            writer.WriteString(encodedPropName_password, obj.Password);
            writer.WriteBoolean(encodedPropName_http_only, obj.HttpOnly);
        }
    }

    partial class ProxyTypeMtprotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 114, 111, 120, 121, 84, 121, 112, 101, 77, 116, 112, 114, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_secret => new byte[] { 115, 101, 99, 114, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_secret = JsonEncodedText.Encode(propName_secret);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ProxyTypeMtproto)tlobj;
            writer.WriteString(encodedPropName_secret, obj.Secret);
        }
    }

    partial class ProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 114, 111, 120, 121 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_server => new byte[] { 115, 101, 114, 118, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_server = JsonEncodedText.Encode(propName_server);
        private static ReadOnlySpan<byte> propName_port => new byte[] { 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_port = JsonEncodedText.Encode(propName_port);
        private static ReadOnlySpan<byte> propName_last_used_date => new byte[] { 108, 97, 115, 116, 95, 117, 115, 101, 100, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_last_used_date = JsonEncodedText.Encode(propName_last_used_date);
        private static ReadOnlySpan<byte> propName_is_enabled => new byte[] { 105, 115, 95, 101, 110, 97, 98, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_enabled = JsonEncodedText.Encode(propName_is_enabled);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Proxy)tlobj;
            writer.WriteNumber(encodedPropName_id, obj.Id);
            writer.WriteString(encodedPropName_server, obj.Server);
            writer.WriteNumber(encodedPropName_port, obj.Port);
            writer.WriteNumber(encodedPropName_last_used_date, obj.LastUsedDate);
            writer.WriteBoolean(encodedPropName_is_enabled, obj.IsEnabled);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class ProxiesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 114, 111, 120, 105, 101, 115 }));
        private static ReadOnlySpan<byte> propName_proxies => new byte[] { 112, 114, 111, 120, 105, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_proxies = JsonEncodedText.Encode(propName_proxies);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Proxies)tlobj;
            if (obj.Proxies_ != null)
            {
                writer.WritePropertyName(encodedPropName_proxies);
                writer.WriteArray(obj.Proxies_);
            }
        }
    }

    partial class InputStickerStaticConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 83, 116, 105, 99, 107, 101, 114, 83, 116, 97, 116, 105, 99 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        private static ReadOnlySpan<byte> propName_emojis => new byte[] { 101, 109, 111, 106, 105, 115 };
        private static readonly JsonEncodedText encodedPropName_emojis = JsonEncodedText.Encode(propName_emojis);
        private static ReadOnlySpan<byte> propName_mask_position => new byte[] { 109, 97, 115, 107, 95, 112, 111, 115, 105, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_mask_position = JsonEncodedText.Encode(propName_mask_position);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputStickerStatic)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            writer.WriteString(encodedPropName_emojis, obj.Emojis);
            if (obj.MaskPosition != null)
            {
                writer.WritePropertyName(encodedPropName_mask_position);
                writer.WriteTLObjectValue(obj.MaskPosition);
            }
        }
    }

    partial class InputStickerAnimatedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 112, 117, 116, 83, 116, 105, 99, 107, 101, 114, 65, 110, 105, 109, 97, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        private static ReadOnlySpan<byte> propName_emojis => new byte[] { 101, 109, 111, 106, 105, 115 };
        private static readonly JsonEncodedText encodedPropName_emojis = JsonEncodedText.Encode(propName_emojis);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputStickerAnimated)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            writer.WriteString(encodedPropName_emojis, obj.Emojis);
        }
    }

    partial class DateRangeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 97, 116, 101, 82, 97, 110, 103, 101 }));
        private static ReadOnlySpan<byte> propName_start_date => new byte[] { 115, 116, 97, 114, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_start_date = JsonEncodedText.Encode(propName_start_date);
        private static ReadOnlySpan<byte> propName_end_date => new byte[] { 101, 110, 100, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_end_date = JsonEncodedText.Encode(propName_end_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DateRange)tlobj;
            writer.WriteNumber(encodedPropName_start_date, obj.StartDate);
            writer.WriteNumber(encodedPropName_end_date, obj.EndDate);
        }
    }

    partial class StatisticalValueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 97, 116, 105, 115, 116, 105, 99, 97, 108, 86, 97, 108, 117, 101 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        private static ReadOnlySpan<byte> propName_previous_value => new byte[] { 112, 114, 101, 118, 105, 111, 117, 115, 95, 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_previous_value = JsonEncodedText.Encode(propName_previous_value);
        private static ReadOnlySpan<byte> propName_growth_rate_percentage => new byte[] { 103, 114, 111, 119, 116, 104, 95, 114, 97, 116, 101, 95, 112, 101, 114, 99, 101, 110, 116, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_growth_rate_percentage = JsonEncodedText.Encode(propName_growth_rate_percentage);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StatisticalValue)tlobj;
            writer.WriteNumber(encodedPropName_value, obj.Value);
            writer.WriteNumber(encodedPropName_previous_value, obj.PreviousValue);
            writer.WriteNumber(encodedPropName_growth_rate_percentage, obj.GrowthRatePercentage);
        }
    }

    partial class StatisticalGraphDataConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 97, 116, 105, 115, 116, 105, 99, 97, 108, 71, 114, 97, 112, 104, 68, 97, 116, 97 }));
        private static ReadOnlySpan<byte> propName_json_data => new byte[] { 106, 115, 111, 110, 95, 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_json_data = JsonEncodedText.Encode(propName_json_data);
        private static ReadOnlySpan<byte> propName_zoom_token => new byte[] { 122, 111, 111, 109, 95, 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_zoom_token = JsonEncodedText.Encode(propName_zoom_token);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StatisticalGraphData)tlobj;
            writer.WriteString(encodedPropName_json_data, obj.JsonData);
            writer.WriteString(encodedPropName_zoom_token, obj.ZoomToken);
        }
    }

    partial class StatisticalGraphAsyncConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 97, 116, 105, 115, 116, 105, 99, 97, 108, 71, 114, 97, 112, 104, 65, 115, 121, 110, 99 }));
        private static ReadOnlySpan<byte> propName_token => new byte[] { 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_token = JsonEncodedText.Encode(propName_token);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StatisticalGraphAsync)tlobj;
            writer.WriteString(encodedPropName_token, obj.Token);
        }
    }

    partial class StatisticalGraphErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 97, 116, 105, 115, 116, 105, 99, 97, 108, 71, 114, 97, 112, 104, 69, 114, 114, 111, 114 }));
        private static ReadOnlySpan<byte> propName_error_message => new byte[] { 101, 114, 114, 111, 114, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_error_message = JsonEncodedText.Encode(propName_error_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StatisticalGraphError)tlobj;
            writer.WriteString(encodedPropName_error_message, obj.ErrorMessage);
        }
    }

    partial class ChatStatisticsMessageInteractionInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 77, 101, 115, 115, 97, 103, 101, 73, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_view_count => new byte[] { 118, 105, 101, 119, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_view_count = JsonEncodedText.Encode(propName_view_count);
        private static ReadOnlySpan<byte> propName_forward_count => new byte[] { 102, 111, 114, 119, 97, 114, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_forward_count = JsonEncodedText.Encode(propName_forward_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsMessageInteractionInfo)tlobj;
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteNumber(encodedPropName_view_count, obj.ViewCount);
            writer.WriteNumber(encodedPropName_forward_count, obj.ForwardCount);
        }
    }

    partial class ChatStatisticsMessageSenderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 77, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 101, 114, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_sent_message_count => new byte[] { 115, 101, 110, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_sent_message_count = JsonEncodedText.Encode(propName_sent_message_count);
        private static ReadOnlySpan<byte> propName_average_character_count => new byte[] { 97, 118, 101, 114, 97, 103, 101, 95, 99, 104, 97, 114, 97, 99, 116, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_average_character_count = JsonEncodedText.Encode(propName_average_character_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsMessageSenderInfo)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_sent_message_count, obj.SentMessageCount);
            writer.WriteNumber(encodedPropName_average_character_count, obj.AverageCharacterCount);
        }
    }

    partial class ChatStatisticsAdministratorActionsInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 65, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 65, 99, 116, 105, 111, 110, 115, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_deleted_message_count => new byte[] { 100, 101, 108, 101, 116, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_deleted_message_count = JsonEncodedText.Encode(propName_deleted_message_count);
        private static ReadOnlySpan<byte> propName_banned_user_count => new byte[] { 98, 97, 110, 110, 101, 100, 95, 117, 115, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_banned_user_count = JsonEncodedText.Encode(propName_banned_user_count);
        private static ReadOnlySpan<byte> propName_restricted_user_count => new byte[] { 114, 101, 115, 116, 114, 105, 99, 116, 101, 100, 95, 117, 115, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_restricted_user_count = JsonEncodedText.Encode(propName_restricted_user_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsAdministratorActionsInfo)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_deleted_message_count, obj.DeletedMessageCount);
            writer.WriteNumber(encodedPropName_banned_user_count, obj.BannedUserCount);
            writer.WriteNumber(encodedPropName_restricted_user_count, obj.RestrictedUserCount);
        }
    }

    partial class ChatStatisticsInviterInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 73, 110, 118, 105, 116, 101, 114, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_added_member_count => new byte[] { 97, 100, 100, 101, 100, 95, 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_added_member_count = JsonEncodedText.Encode(propName_added_member_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsInviterInfo)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_added_member_count, obj.AddedMemberCount);
        }
    }

    partial class ChatStatisticsSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_period => new byte[] { 112, 101, 114, 105, 111, 100 };
        private static readonly JsonEncodedText encodedPropName_period = JsonEncodedText.Encode(propName_period);
        private static ReadOnlySpan<byte> propName_member_count => new byte[] { 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_member_count = JsonEncodedText.Encode(propName_member_count);
        private static ReadOnlySpan<byte> propName_message_count => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_message_count = JsonEncodedText.Encode(propName_message_count);
        private static ReadOnlySpan<byte> propName_viewer_count => new byte[] { 118, 105, 101, 119, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_viewer_count = JsonEncodedText.Encode(propName_viewer_count);
        private static ReadOnlySpan<byte> propName_sender_count => new byte[] { 115, 101, 110, 100, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_sender_count = JsonEncodedText.Encode(propName_sender_count);
        private static ReadOnlySpan<byte> propName_member_count_graph => new byte[] { 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_member_count_graph = JsonEncodedText.Encode(propName_member_count_graph);
        private static ReadOnlySpan<byte> propName_join_graph => new byte[] { 106, 111, 105, 110, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_join_graph = JsonEncodedText.Encode(propName_join_graph);
        private static ReadOnlySpan<byte> propName_join_by_source_graph => new byte[] { 106, 111, 105, 110, 95, 98, 121, 95, 115, 111, 117, 114, 99, 101, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_join_by_source_graph = JsonEncodedText.Encode(propName_join_by_source_graph);
        private static ReadOnlySpan<byte> propName_language_graph => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_language_graph = JsonEncodedText.Encode(propName_language_graph);
        private static ReadOnlySpan<byte> propName_message_content_graph => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_message_content_graph = JsonEncodedText.Encode(propName_message_content_graph);
        private static ReadOnlySpan<byte> propName_action_graph => new byte[] { 97, 99, 116, 105, 111, 110, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_action_graph = JsonEncodedText.Encode(propName_action_graph);
        private static ReadOnlySpan<byte> propName_day_graph => new byte[] { 100, 97, 121, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_day_graph = JsonEncodedText.Encode(propName_day_graph);
        private static ReadOnlySpan<byte> propName_week_graph => new byte[] { 119, 101, 101, 107, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_week_graph = JsonEncodedText.Encode(propName_week_graph);
        private static ReadOnlySpan<byte> propName_top_senders => new byte[] { 116, 111, 112, 95, 115, 101, 110, 100, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_top_senders = JsonEncodedText.Encode(propName_top_senders);
        private static ReadOnlySpan<byte> propName_top_administrators => new byte[] { 116, 111, 112, 95, 97, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_top_administrators = JsonEncodedText.Encode(propName_top_administrators);
        private static ReadOnlySpan<byte> propName_top_inviters => new byte[] { 116, 111, 112, 95, 105, 110, 118, 105, 116, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_top_inviters = JsonEncodedText.Encode(propName_top_inviters);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsSupergroup)tlobj;
            if (obj.Period != null)
            {
                writer.WritePropertyName(encodedPropName_period);
                writer.WriteTLObjectValue(obj.Period);
            }
            if (obj.MemberCount != null)
            {
                writer.WritePropertyName(encodedPropName_member_count);
                writer.WriteTLObjectValue(obj.MemberCount);
            }
            if (obj.MessageCount != null)
            {
                writer.WritePropertyName(encodedPropName_message_count);
                writer.WriteTLObjectValue(obj.MessageCount);
            }
            if (obj.ViewerCount != null)
            {
                writer.WritePropertyName(encodedPropName_viewer_count);
                writer.WriteTLObjectValue(obj.ViewerCount);
            }
            if (obj.SenderCount != null)
            {
                writer.WritePropertyName(encodedPropName_sender_count);
                writer.WriteTLObjectValue(obj.SenderCount);
            }
            if (obj.MemberCountGraph != null)
            {
                writer.WritePropertyName(encodedPropName_member_count_graph);
                writer.WriteTLObjectValue(obj.MemberCountGraph);
            }
            if (obj.JoinGraph != null)
            {
                writer.WritePropertyName(encodedPropName_join_graph);
                writer.WriteTLObjectValue(obj.JoinGraph);
            }
            if (obj.JoinBySourceGraph != null)
            {
                writer.WritePropertyName(encodedPropName_join_by_source_graph);
                writer.WriteTLObjectValue(obj.JoinBySourceGraph);
            }
            if (obj.LanguageGraph != null)
            {
                writer.WritePropertyName(encodedPropName_language_graph);
                writer.WriteTLObjectValue(obj.LanguageGraph);
            }
            if (obj.MessageContentGraph != null)
            {
                writer.WritePropertyName(encodedPropName_message_content_graph);
                writer.WriteTLObjectValue(obj.MessageContentGraph);
            }
            if (obj.ActionGraph != null)
            {
                writer.WritePropertyName(encodedPropName_action_graph);
                writer.WriteTLObjectValue(obj.ActionGraph);
            }
            if (obj.DayGraph != null)
            {
                writer.WritePropertyName(encodedPropName_day_graph);
                writer.WriteTLObjectValue(obj.DayGraph);
            }
            if (obj.WeekGraph != null)
            {
                writer.WritePropertyName(encodedPropName_week_graph);
                writer.WriteTLObjectValue(obj.WeekGraph);
            }
            if (obj.TopSenders != null)
            {
                writer.WritePropertyName(encodedPropName_top_senders);
                writer.WriteArray(obj.TopSenders);
            }
            if (obj.TopAdministrators != null)
            {
                writer.WritePropertyName(encodedPropName_top_administrators);
                writer.WriteArray(obj.TopAdministrators);
            }
            if (obj.TopInviters != null)
            {
                writer.WritePropertyName(encodedPropName_top_inviters);
                writer.WriteArray(obj.TopInviters);
            }
        }
    }

    partial class ChatStatisticsChannelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 116, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 67, 104, 97, 110, 110, 101, 108 }));
        private static ReadOnlySpan<byte> propName_period => new byte[] { 112, 101, 114, 105, 111, 100 };
        private static readonly JsonEncodedText encodedPropName_period = JsonEncodedText.Encode(propName_period);
        private static ReadOnlySpan<byte> propName_member_count => new byte[] { 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_member_count = JsonEncodedText.Encode(propName_member_count);
        private static ReadOnlySpan<byte> propName_mean_view_count => new byte[] { 109, 101, 97, 110, 95, 118, 105, 101, 119, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_mean_view_count = JsonEncodedText.Encode(propName_mean_view_count);
        private static ReadOnlySpan<byte> propName_mean_share_count => new byte[] { 109, 101, 97, 110, 95, 115, 104, 97, 114, 101, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_mean_share_count = JsonEncodedText.Encode(propName_mean_share_count);
        private static ReadOnlySpan<byte> propName_enabled_notifications_percentage => new byte[] { 101, 110, 97, 98, 108, 101, 100, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115, 95, 112, 101, 114, 99, 101, 110, 116, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_enabled_notifications_percentage = JsonEncodedText.Encode(propName_enabled_notifications_percentage);
        private static ReadOnlySpan<byte> propName_member_count_graph => new byte[] { 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_member_count_graph = JsonEncodedText.Encode(propName_member_count_graph);
        private static ReadOnlySpan<byte> propName_join_graph => new byte[] { 106, 111, 105, 110, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_join_graph = JsonEncodedText.Encode(propName_join_graph);
        private static ReadOnlySpan<byte> propName_mute_graph => new byte[] { 109, 117, 116, 101, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_mute_graph = JsonEncodedText.Encode(propName_mute_graph);
        private static ReadOnlySpan<byte> propName_view_count_by_hour_graph => new byte[] { 118, 105, 101, 119, 95, 99, 111, 117, 110, 116, 95, 98, 121, 95, 104, 111, 117, 114, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_view_count_by_hour_graph = JsonEncodedText.Encode(propName_view_count_by_hour_graph);
        private static ReadOnlySpan<byte> propName_view_count_by_source_graph => new byte[] { 118, 105, 101, 119, 95, 99, 111, 117, 110, 116, 95, 98, 121, 95, 115, 111, 117, 114, 99, 101, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_view_count_by_source_graph = JsonEncodedText.Encode(propName_view_count_by_source_graph);
        private static ReadOnlySpan<byte> propName_join_by_source_graph => new byte[] { 106, 111, 105, 110, 95, 98, 121, 95, 115, 111, 117, 114, 99, 101, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_join_by_source_graph = JsonEncodedText.Encode(propName_join_by_source_graph);
        private static ReadOnlySpan<byte> propName_language_graph => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_language_graph = JsonEncodedText.Encode(propName_language_graph);
        private static ReadOnlySpan<byte> propName_message_interaction_graph => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_message_interaction_graph = JsonEncodedText.Encode(propName_message_interaction_graph);
        private static ReadOnlySpan<byte> propName_instant_view_interaction_graph => new byte[] { 105, 110, 115, 116, 97, 110, 116, 95, 118, 105, 101, 119, 95, 105, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_instant_view_interaction_graph = JsonEncodedText.Encode(propName_instant_view_interaction_graph);
        private static ReadOnlySpan<byte> propName_recent_message_interactions => new byte[] { 114, 101, 99, 101, 110, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_recent_message_interactions = JsonEncodedText.Encode(propName_recent_message_interactions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsChannel)tlobj;
            if (obj.Period != null)
            {
                writer.WritePropertyName(encodedPropName_period);
                writer.WriteTLObjectValue(obj.Period);
            }
            if (obj.MemberCount != null)
            {
                writer.WritePropertyName(encodedPropName_member_count);
                writer.WriteTLObjectValue(obj.MemberCount);
            }
            if (obj.MeanViewCount != null)
            {
                writer.WritePropertyName(encodedPropName_mean_view_count);
                writer.WriteTLObjectValue(obj.MeanViewCount);
            }
            if (obj.MeanShareCount != null)
            {
                writer.WritePropertyName(encodedPropName_mean_share_count);
                writer.WriteTLObjectValue(obj.MeanShareCount);
            }
            writer.WriteNumber(encodedPropName_enabled_notifications_percentage, obj.EnabledNotificationsPercentage);
            if (obj.MemberCountGraph != null)
            {
                writer.WritePropertyName(encodedPropName_member_count_graph);
                writer.WriteTLObjectValue(obj.MemberCountGraph);
            }
            if (obj.JoinGraph != null)
            {
                writer.WritePropertyName(encodedPropName_join_graph);
                writer.WriteTLObjectValue(obj.JoinGraph);
            }
            if (obj.MuteGraph != null)
            {
                writer.WritePropertyName(encodedPropName_mute_graph);
                writer.WriteTLObjectValue(obj.MuteGraph);
            }
            if (obj.ViewCountByHourGraph != null)
            {
                writer.WritePropertyName(encodedPropName_view_count_by_hour_graph);
                writer.WriteTLObjectValue(obj.ViewCountByHourGraph);
            }
            if (obj.ViewCountBySourceGraph != null)
            {
                writer.WritePropertyName(encodedPropName_view_count_by_source_graph);
                writer.WriteTLObjectValue(obj.ViewCountBySourceGraph);
            }
            if (obj.JoinBySourceGraph != null)
            {
                writer.WritePropertyName(encodedPropName_join_by_source_graph);
                writer.WriteTLObjectValue(obj.JoinBySourceGraph);
            }
            if (obj.LanguageGraph != null)
            {
                writer.WritePropertyName(encodedPropName_language_graph);
                writer.WriteTLObjectValue(obj.LanguageGraph);
            }
            if (obj.MessageInteractionGraph != null)
            {
                writer.WritePropertyName(encodedPropName_message_interaction_graph);
                writer.WriteTLObjectValue(obj.MessageInteractionGraph);
            }
            if (obj.InstantViewInteractionGraph != null)
            {
                writer.WritePropertyName(encodedPropName_instant_view_interaction_graph);
                writer.WriteTLObjectValue(obj.InstantViewInteractionGraph);
            }
            if (obj.RecentMessageInteractions != null)
            {
                writer.WritePropertyName(encodedPropName_recent_message_interactions);
                writer.WriteArray(obj.RecentMessageInteractions);
            }
        }
    }

    partial class MessageStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 109, 101, 115, 115, 97, 103, 101, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        private static ReadOnlySpan<byte> propName_message_interaction_graph => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 95, 103, 114, 97, 112, 104 };
        private static readonly JsonEncodedText encodedPropName_message_interaction_graph = JsonEncodedText.Encode(propName_message_interaction_graph);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageStatistics)tlobj;
            if (obj.MessageInteractionGraph != null)
            {
                writer.WritePropertyName(encodedPropName_message_interaction_graph);
                writer.WriteTLObjectValue(obj.MessageInteractionGraph);
            }
        }
    }

    partial class PointConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 111, 105, 110, 116 }));
        private static ReadOnlySpan<byte> propName_x => new byte[] { 120 };
        private static readonly JsonEncodedText encodedPropName_x = JsonEncodedText.Encode(propName_x);
        private static ReadOnlySpan<byte> propName_y => new byte[] { 121 };
        private static readonly JsonEncodedText encodedPropName_y = JsonEncodedText.Encode(propName_y);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Point)tlobj;
            writer.WriteNumber(encodedPropName_x, obj.X);
            writer.WriteNumber(encodedPropName_y, obj.Y);
        }
    }

    partial class VectorPathCommandLineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 101, 99, 116, 111, 114, 80, 97, 116, 104, 67, 111, 109, 109, 97, 110, 100, 76, 105, 110, 101 }));
        private static ReadOnlySpan<byte> propName_end_point => new byte[] { 101, 110, 100, 95, 112, 111, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_end_point = JsonEncodedText.Encode(propName_end_point);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (VectorPathCommandLine)tlobj;
            if (obj.EndPoint != null)
            {
                writer.WritePropertyName(encodedPropName_end_point);
                writer.WriteTLObjectValue(obj.EndPoint);
            }
        }
    }

    partial class VectorPathCommandCubicBezierCurveConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 101, 99, 116, 111, 114, 80, 97, 116, 104, 67, 111, 109, 109, 97, 110, 100, 67, 117, 98, 105, 99, 66, 101, 122, 105, 101, 114, 67, 117, 114, 118, 101 }));
        private static ReadOnlySpan<byte> propName_start_control_point => new byte[] { 115, 116, 97, 114, 116, 95, 99, 111, 110, 116, 114, 111, 108, 95, 112, 111, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_start_control_point = JsonEncodedText.Encode(propName_start_control_point);
        private static ReadOnlySpan<byte> propName_end_control_point => new byte[] { 101, 110, 100, 95, 99, 111, 110, 116, 114, 111, 108, 95, 112, 111, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_end_control_point = JsonEncodedText.Encode(propName_end_control_point);
        private static ReadOnlySpan<byte> propName_end_point => new byte[] { 101, 110, 100, 95, 112, 111, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_end_point = JsonEncodedText.Encode(propName_end_point);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (VectorPathCommandCubicBezierCurve)tlobj;
            if (obj.StartControlPoint != null)
            {
                writer.WritePropertyName(encodedPropName_start_control_point);
                writer.WriteTLObjectValue(obj.StartControlPoint);
            }
            if (obj.EndControlPoint != null)
            {
                writer.WritePropertyName(encodedPropName_end_control_point);
                writer.WriteTLObjectValue(obj.EndControlPoint);
            }
            if (obj.EndPoint != null)
            {
                writer.WritePropertyName(encodedPropName_end_point);
                writer.WriteTLObjectValue(obj.EndPoint);
            }
        }
    }

    partial class BotCommandScopeDefaultConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 111, 116, 67, 111, 109, 109, 97, 110, 100, 83, 99, 111, 112, 101, 68, 101, 102, 97, 117, 108, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class BotCommandScopeAllPrivateChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 111, 116, 67, 111, 109, 109, 97, 110, 100, 83, 99, 111, 112, 101, 65, 108, 108, 80, 114, 105, 118, 97, 116, 101, 67, 104, 97, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class BotCommandScopeAllGroupChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 111, 116, 67, 111, 109, 109, 97, 110, 100, 83, 99, 111, 112, 101, 65, 108, 108, 71, 114, 111, 117, 112, 67, 104, 97, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class BotCommandScopeAllChatAdministratorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 111, 116, 67, 111, 109, 109, 97, 110, 100, 83, 99, 111, 112, 101, 65, 108, 108, 67, 104, 97, 116, 65, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class BotCommandScopeChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 111, 116, 67, 111, 109, 109, 97, 110, 100, 83, 99, 111, 112, 101, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BotCommandScopeChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class BotCommandScopeChatAdministratorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 111, 116, 67, 111, 109, 109, 97, 110, 100, 83, 99, 111, 112, 101, 67, 104, 97, 116, 65, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BotCommandScopeChatAdministrators)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class BotCommandScopeChatMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 111, 116, 67, 111, 109, 109, 97, 110, 100, 83, 99, 111, 112, 101, 67, 104, 97, 116, 77, 101, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BotCommandScopeChatMember)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class UpdateAuthorizationStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 65, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_authorization_state => new byte[] { 97, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 95, 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_authorization_state = JsonEncodedText.Encode(propName_authorization_state);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateAuthorizationState)tlobj;
            if (obj.AuthorizationState != null)
            {
                writer.WritePropertyName(encodedPropName_authorization_state);
                writer.WriteTLObjectValue(obj.AuthorizationState);
            }
        }
    }

    partial class UpdateNewMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewMessage)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(encodedPropName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class UpdateMessageSendAcknowledgedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 77, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 65, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageSendAcknowledged)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class UpdateMessageSendSucceededConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 77, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 83, 117, 99, 99, 101, 101, 100, 101, 100 }));
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        private static ReadOnlySpan<byte> propName_old_message_id => new byte[] { 111, 108, 100, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_old_message_id = JsonEncodedText.Encode(propName_old_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageSendSucceeded)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(encodedPropName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
            writer.WriteNumber(encodedPropName_old_message_id, obj.OldMessageId);
        }
    }

    partial class UpdateMessageSendFailedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 77, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 70, 97, 105, 108, 101, 100 }));
        private static ReadOnlySpan<byte> propName_message => new byte[] { 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_message = JsonEncodedText.Encode(propName_message);
        private static ReadOnlySpan<byte> propName_old_message_id => new byte[] { 111, 108, 100, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_old_message_id = JsonEncodedText.Encode(propName_old_message_id);
        private static ReadOnlySpan<byte> propName_error_code => new byte[] { 101, 114, 114, 111, 114, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_error_code = JsonEncodedText.Encode(propName_error_code);
        private static ReadOnlySpan<byte> propName_error_message => new byte[] { 101, 114, 114, 111, 114, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_error_message = JsonEncodedText.Encode(propName_error_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageSendFailed)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(encodedPropName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
            writer.WriteNumber(encodedPropName_old_message_id, obj.OldMessageId);
            writer.WriteNumber(encodedPropName_error_code, obj.ErrorCode);
            writer.WriteString(encodedPropName_error_message, obj.ErrorMessage);
        }
    }

    partial class UpdateMessageContentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_new_content => new byte[] { 110, 101, 119, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_new_content = JsonEncodedText.Encode(propName_new_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageContent)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.NewContent != null)
            {
                writer.WritePropertyName(encodedPropName_new_content);
                writer.WriteTLObjectValue(obj.NewContent);
            }
        }
    }

    partial class UpdateMessageEditedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 77, 101, 115, 115, 97, 103, 101, 69, 100, 105, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_edit_date => new byte[] { 101, 100, 105, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_edit_date = JsonEncodedText.Encode(propName_edit_date);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageEdited)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteNumber(encodedPropName_edit_date, obj.EditDate);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class UpdateMessageIsPinnedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 77, 101, 115, 115, 97, 103, 101, 73, 115, 80, 105, 110, 110, 101, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageIsPinned)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class UpdateMessageInteractionInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 77, 101, 115, 115, 97, 103, 101, 73, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_interaction_info => new byte[] { 105, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_interaction_info = JsonEncodedText.Encode(propName_interaction_info);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageInteractionInfo)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.InteractionInfo != null)
            {
                writer.WritePropertyName(encodedPropName_interaction_info);
                writer.WriteTLObjectValue(obj.InteractionInfo);
            }
        }
    }

    partial class UpdateMessageContentOpenedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116, 79, 112, 101, 110, 101, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageContentOpened)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class UpdateMessageMentionReadConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 77, 101, 115, 115, 97, 103, 101, 77, 101, 110, 116, 105, 111, 110, 82, 101, 97, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_unread_mention_count => new byte[] { 117, 110, 114, 101, 97, 100, 95, 109, 101, 110, 116, 105, 111, 110, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_unread_mention_count = JsonEncodedText.Encode(propName_unread_mention_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageMentionRead)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteNumber(encodedPropName_unread_mention_count, obj.UnreadMentionCount);
        }
    }

    partial class UpdateMessageLiveLocationViewedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 77, 101, 115, 115, 97, 103, 101, 76, 105, 118, 101, 76, 111, 99, 97, 116, 105, 111, 110, 86, 105, 101, 119, 101, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageLiveLocationViewed)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class UpdateNewChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat => new byte[] { 99, 104, 97, 116 };
        private static readonly JsonEncodedText encodedPropName_chat = JsonEncodedText.Encode(propName_chat);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewChat)tlobj;
            if (obj.Chat != null)
            {
                writer.WritePropertyName(encodedPropName_chat);
                writer.WriteTLObjectValue(obj.Chat);
            }
        }
    }

    partial class UpdateChatTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 84, 105, 116, 108, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatTitle)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class UpdateChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatPhoto)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
        }
    }

    partial class UpdateChatPermissionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_permissions => new byte[] { 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_permissions = JsonEncodedText.Encode(propName_permissions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatPermissions)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Permissions != null)
            {
                writer.WritePropertyName(encodedPropName_permissions);
                writer.WriteTLObjectValue(obj.Permissions);
            }
        }
    }

    partial class UpdateChatLastMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 76, 97, 115, 116, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_last_message => new byte[] { 108, 97, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_last_message = JsonEncodedText.Encode(propName_last_message);
        private static ReadOnlySpan<byte> propName_positions => new byte[] { 112, 111, 115, 105, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_positions = JsonEncodedText.Encode(propName_positions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatLastMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.LastMessage != null)
            {
                writer.WritePropertyName(encodedPropName_last_message);
                writer.WriteTLObjectValue(obj.LastMessage);
            }
            if (obj.Positions != null)
            {
                writer.WritePropertyName(encodedPropName_positions);
                writer.WriteArray(obj.Positions);
            }
        }
    }

    partial class UpdateChatPositionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 80, 111, 115, 105, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_position => new byte[] { 112, 111, 115, 105, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_position = JsonEncodedText.Encode(propName_position);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatPosition)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Position != null)
            {
                writer.WritePropertyName(encodedPropName_position);
                writer.WriteTLObjectValue(obj.Position);
            }
        }
    }

    partial class UpdateChatIsMarkedAsUnreadConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 73, 115, 77, 97, 114, 107, 101, 100, 65, 115, 85, 110, 114, 101, 97, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_is_marked_as_unread => new byte[] { 105, 115, 95, 109, 97, 114, 107, 101, 100, 95, 97, 115, 95, 117, 110, 114, 101, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_is_marked_as_unread = JsonEncodedText.Encode(propName_is_marked_as_unread);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatIsMarkedAsUnread)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteBoolean(encodedPropName_is_marked_as_unread, obj.IsMarkedAsUnread);
        }
    }

    partial class UpdateChatIsBlockedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 73, 115, 66, 108, 111, 99, 107, 101, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_is_blocked => new byte[] { 105, 115, 95, 98, 108, 111, 99, 107, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_blocked = JsonEncodedText.Encode(propName_is_blocked);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatIsBlocked)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteBoolean(encodedPropName_is_blocked, obj.IsBlocked);
        }
    }

    partial class UpdateChatHasScheduledMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 72, 97, 115, 83, 99, 104, 101, 100, 117, 108, 101, 100, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_has_scheduled_messages => new byte[] { 104, 97, 115, 95, 115, 99, 104, 101, 100, 117, 108, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_has_scheduled_messages = JsonEncodedText.Encode(propName_has_scheduled_messages);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatHasScheduledMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteBoolean(encodedPropName_has_scheduled_messages, obj.HasScheduledMessages);
        }
    }

    partial class UpdateChatVideoChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 86, 105, 100, 101, 111, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_video_chat => new byte[] { 118, 105, 100, 101, 111, 95, 99, 104, 97, 116 };
        private static readonly JsonEncodedText encodedPropName_video_chat = JsonEncodedText.Encode(propName_video_chat);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatVideoChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.VideoChat != null)
            {
                writer.WritePropertyName(encodedPropName_video_chat);
                writer.WriteTLObjectValue(obj.VideoChat);
            }
        }
    }

    partial class UpdateChatDefaultDisableNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 68, 101, 102, 97, 117, 108, 116, 68, 105, 115, 97, 98, 108, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_default_disable_notification => new byte[] { 100, 101, 102, 97, 117, 108, 116, 95, 100, 105, 115, 97, 98, 108, 101, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_default_disable_notification = JsonEncodedText.Encode(propName_default_disable_notification);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatDefaultDisableNotification)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteBoolean(encodedPropName_default_disable_notification, obj.DefaultDisableNotification);
        }
    }

    partial class UpdateChatReadInboxConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 82, 101, 97, 100, 73, 110, 98, 111, 120 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_last_read_inbox_message_id => new byte[] { 108, 97, 115, 116, 95, 114, 101, 97, 100, 95, 105, 110, 98, 111, 120, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_last_read_inbox_message_id = JsonEncodedText.Encode(propName_last_read_inbox_message_id);
        private static ReadOnlySpan<byte> propName_unread_count => new byte[] { 117, 110, 114, 101, 97, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_unread_count = JsonEncodedText.Encode(propName_unread_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatReadInbox)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_last_read_inbox_message_id, obj.LastReadInboxMessageId);
            writer.WriteNumber(encodedPropName_unread_count, obj.UnreadCount);
        }
    }

    partial class UpdateChatReadOutboxConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 82, 101, 97, 100, 79, 117, 116, 98, 111, 120 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_last_read_outbox_message_id => new byte[] { 108, 97, 115, 116, 95, 114, 101, 97, 100, 95, 111, 117, 116, 98, 111, 120, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_last_read_outbox_message_id = JsonEncodedText.Encode(propName_last_read_outbox_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatReadOutbox)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_last_read_outbox_message_id, obj.LastReadOutboxMessageId);
        }
    }

    partial class UpdateChatUnreadMentionCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 85, 110, 114, 101, 97, 100, 77, 101, 110, 116, 105, 111, 110, 67, 111, 117, 110, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_unread_mention_count => new byte[] { 117, 110, 114, 101, 97, 100, 95, 109, 101, 110, 116, 105, 111, 110, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_unread_mention_count = JsonEncodedText.Encode(propName_unread_mention_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatUnreadMentionCount)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_unread_mention_count, obj.UnreadMentionCount);
        }
    }

    partial class UpdateChatNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_notification_settings => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_notification_settings = JsonEncodedText.Encode(propName_notification_settings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatNotificationSettings)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.NotificationSettings != null)
            {
                writer.WritePropertyName(encodedPropName_notification_settings);
                writer.WriteTLObjectValue(obj.NotificationSettings);
            }
        }
    }

    partial class UpdateScopeNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 83, 99, 111, 112, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_scope => new byte[] { 115, 99, 111, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_scope = JsonEncodedText.Encode(propName_scope);
        private static ReadOnlySpan<byte> propName_notification_settings => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_notification_settings = JsonEncodedText.Encode(propName_notification_settings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateScopeNotificationSettings)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(encodedPropName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
            if (obj.NotificationSettings != null)
            {
                writer.WritePropertyName(encodedPropName_notification_settings);
                writer.WriteTLObjectValue(obj.NotificationSettings);
            }
        }
    }

    partial class UpdateChatMessageTtlSettingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101, 84, 116, 108, 83, 101, 116, 116, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_ttl_setting => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 116, 108, 95, 115, 101, 116, 116, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_message_ttl_setting = JsonEncodedText.Encode(propName_message_ttl_setting);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatMessageTtlSetting)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_ttl_setting, obj.MessageTtlSetting);
        }
    }

    partial class UpdateChatActionBarConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 65, 99, 116, 105, 111, 110, 66, 97, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_action_bar => new byte[] { 97, 99, 116, 105, 111, 110, 95, 98, 97, 114 };
        private static readonly JsonEncodedText encodedPropName_action_bar = JsonEncodedText.Encode(propName_action_bar);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatActionBar)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.ActionBar != null)
            {
                writer.WritePropertyName(encodedPropName_action_bar);
                writer.WriteTLObjectValue(obj.ActionBar);
            }
        }
    }

    partial class UpdateChatThemeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 84, 104, 101, 109, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_theme_name => new byte[] { 116, 104, 101, 109, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_theme_name = JsonEncodedText.Encode(propName_theme_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatTheme)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_theme_name, obj.ThemeName);
        }
    }

    partial class UpdateChatPendingJoinRequestsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 80, 101, 110, 100, 105, 110, 103, 74, 111, 105, 110, 82, 101, 113, 117, 101, 115, 116, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_pending_join_requests => new byte[] { 112, 101, 110, 100, 105, 110, 103, 95, 106, 111, 105, 110, 95, 114, 101, 113, 117, 101, 115, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_pending_join_requests = JsonEncodedText.Encode(propName_pending_join_requests);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatPendingJoinRequests)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.PendingJoinRequests != null)
            {
                writer.WritePropertyName(encodedPropName_pending_join_requests);
                writer.WriteTLObjectValue(obj.PendingJoinRequests);
            }
        }
    }

    partial class UpdateChatReplyMarkupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 82, 101, 112, 108, 121, 77, 97, 114, 107, 117, 112 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_reply_markup_message_id => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_reply_markup_message_id = JsonEncodedText.Encode(propName_reply_markup_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatReplyMarkup)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_reply_markup_message_id, obj.ReplyMarkupMessageId);
        }
    }

    partial class UpdateChatDraftMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 68, 114, 97, 102, 116, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_draft_message => new byte[] { 100, 114, 97, 102, 116, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_draft_message = JsonEncodedText.Encode(propName_draft_message);
        private static ReadOnlySpan<byte> propName_positions => new byte[] { 112, 111, 115, 105, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_positions = JsonEncodedText.Encode(propName_positions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatDraftMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.DraftMessage != null)
            {
                writer.WritePropertyName(encodedPropName_draft_message);
                writer.WriteTLObjectValue(obj.DraftMessage);
            }
            if (obj.Positions != null)
            {
                writer.WritePropertyName(encodedPropName_positions);
                writer.WriteArray(obj.Positions);
            }
        }
    }

    partial class UpdateChatFiltersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 70, 105, 108, 116, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_filters => new byte[] { 99, 104, 97, 116, 95, 102, 105, 108, 116, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_chat_filters = JsonEncodedText.Encode(propName_chat_filters);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatFilters)tlobj;
            if (obj.ChatFilters != null)
            {
                writer.WritePropertyName(encodedPropName_chat_filters);
                writer.WriteArray(obj.ChatFilters);
            }
        }
    }

    partial class UpdateChatOnlineMemberCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 79, 110, 108, 105, 110, 101, 77, 101, 109, 98, 101, 114, 67, 111, 117, 110, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_online_member_count => new byte[] { 111, 110, 108, 105, 110, 101, 95, 109, 101, 109, 98, 101, 114, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_online_member_count = JsonEncodedText.Encode(propName_online_member_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatOnlineMemberCount)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_online_member_count, obj.OnlineMemberCount);
        }
    }

    partial class UpdateNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_notification_group_id => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_notification_group_id = JsonEncodedText.Encode(propName_notification_group_id);
        private static ReadOnlySpan<byte> propName_notification => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_notification = JsonEncodedText.Encode(propName_notification);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNotification)tlobj;
            writer.WriteNumber(encodedPropName_notification_group_id, obj.NotificationGroupId);
            if (obj.Notification != null)
            {
                writer.WritePropertyName(encodedPropName_notification);
                writer.WriteTLObjectValue(obj.Notification);
            }
        }
    }

    partial class UpdateNotificationGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_notification_group_id => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_notification_group_id = JsonEncodedText.Encode(propName_notification_group_id);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_notification_settings_chat_id => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 115, 101, 116, 116, 105, 110, 103, 115, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_notification_settings_chat_id = JsonEncodedText.Encode(propName_notification_settings_chat_id);
        private static ReadOnlySpan<byte> propName_is_silent => new byte[] { 105, 115, 95, 115, 105, 108, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_is_silent = JsonEncodedText.Encode(propName_is_silent);
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_added_notifications => new byte[] { 97, 100, 100, 101, 100, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_added_notifications = JsonEncodedText.Encode(propName_added_notifications);
        private static ReadOnlySpan<byte> propName_removed_notification_ids => new byte[] { 114, 101, 109, 111, 118, 101, 100, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_removed_notification_ids = JsonEncodedText.Encode(propName_removed_notification_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNotificationGroup)tlobj;
            writer.WriteNumber(encodedPropName_notification_group_id, obj.NotificationGroupId);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_notification_settings_chat_id, obj.NotificationSettingsChatId);
            writer.WriteBoolean(encodedPropName_is_silent, obj.IsSilent);
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            if (obj.AddedNotifications != null)
            {
                writer.WritePropertyName(encodedPropName_added_notifications);
                writer.WriteArray(obj.AddedNotifications);
            }
            if (obj.RemovedNotificationIds != null)
            {
                writer.WritePropertyName(encodedPropName_removed_notification_ids);
                writer.WriteArray(obj.RemovedNotificationIds);
            }
        }
    }

    partial class UpdateActiveNotificationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 65, 99, 116, 105, 118, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_groups => new byte[] { 103, 114, 111, 117, 112, 115 };
        private static readonly JsonEncodedText encodedPropName_groups = JsonEncodedText.Encode(propName_groups);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateActiveNotifications)tlobj;
            if (obj.Groups != null)
            {
                writer.WritePropertyName(encodedPropName_groups);
                writer.WriteArray(obj.Groups);
            }
        }
    }

    partial class UpdateHavePendingNotificationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 72, 97, 118, 101, 80, 101, 110, 100, 105, 110, 103, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_have_delayed_notifications => new byte[] { 104, 97, 118, 101, 95, 100, 101, 108, 97, 121, 101, 100, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_have_delayed_notifications = JsonEncodedText.Encode(propName_have_delayed_notifications);
        private static ReadOnlySpan<byte> propName_have_unreceived_notifications => new byte[] { 104, 97, 118, 101, 95, 117, 110, 114, 101, 99, 101, 105, 118, 101, 100, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_have_unreceived_notifications = JsonEncodedText.Encode(propName_have_unreceived_notifications);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateHavePendingNotifications)tlobj;
            writer.WriteBoolean(encodedPropName_have_delayed_notifications, obj.HaveDelayedNotifications);
            writer.WriteBoolean(encodedPropName_have_unreceived_notifications, obj.HaveUnreceivedNotifications);
        }
    }

    partial class UpdateDeleteMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 68, 101, 108, 101, 116, 101, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_ids => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_message_ids = JsonEncodedText.Encode(propName_message_ids);
        private static ReadOnlySpan<byte> propName_is_permanent => new byte[] { 105, 115, 95, 112, 101, 114, 109, 97, 110, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_is_permanent = JsonEncodedText.Encode(propName_is_permanent);
        private static ReadOnlySpan<byte> propName_from_cache => new byte[] { 102, 114, 111, 109, 95, 99, 97, 99, 104, 101 };
        private static readonly JsonEncodedText encodedPropName_from_cache = JsonEncodedText.Encode(propName_from_cache);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateDeleteMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(encodedPropName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
            writer.WriteBoolean(encodedPropName_is_permanent, obj.IsPermanent);
            writer.WriteBoolean(encodedPropName_from_cache, obj.FromCache);
        }
    }

    partial class UpdateUserChatActionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 85, 115, 101, 114, 67, 104, 97, 116, 65, 99, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_action => new byte[] { 97, 99, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_action = JsonEncodedText.Encode(propName_action);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUserChatAction)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.Action != null)
            {
                writer.WritePropertyName(encodedPropName_action);
                writer.WriteTLObjectValue(obj.Action);
            }
        }
    }

    partial class UpdateUserStatusConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 85, 115, 101, 114, 83, 116, 97, 116, 117, 115 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_status => new byte[] { 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_status = JsonEncodedText.Encode(propName_status);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUserStatus)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.Status != null)
            {
                writer.WritePropertyName(encodedPropName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
        }
    }

    partial class UpdateUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 85, 115, 101, 114 }));
        private static ReadOnlySpan<byte> propName_user => new byte[] { 117, 115, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_user = JsonEncodedText.Encode(propName_user);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUser)tlobj;
            if (obj.User != null)
            {
                writer.WritePropertyName(encodedPropName_user);
                writer.WriteTLObjectValue(obj.User);
            }
        }
    }

    partial class UpdateBasicGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 66, 97, 115, 105, 99, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_basic_group => new byte[] { 98, 97, 115, 105, 99, 95, 103, 114, 111, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_basic_group = JsonEncodedText.Encode(propName_basic_group);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateBasicGroup)tlobj;
            if (obj.BasicGroup != null)
            {
                writer.WritePropertyName(encodedPropName_basic_group);
                writer.WriteTLObjectValue(obj.BasicGroup);
            }
        }
    }

    partial class UpdateSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_supergroup => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_supergroup = JsonEncodedText.Encode(propName_supergroup);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSupergroup)tlobj;
            if (obj.Supergroup != null)
            {
                writer.WritePropertyName(encodedPropName_supergroup);
                writer.WriteTLObjectValue(obj.Supergroup);
            }
        }
    }

    partial class UpdateSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 83, 101, 99, 114, 101, 116, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_secret_chat => new byte[] { 115, 101, 99, 114, 101, 116, 95, 99, 104, 97, 116 };
        private static readonly JsonEncodedText encodedPropName_secret_chat = JsonEncodedText.Encode(propName_secret_chat);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSecretChat)tlobj;
            if (obj.SecretChat != null)
            {
                writer.WritePropertyName(encodedPropName_secret_chat);
                writer.WriteTLObjectValue(obj.SecretChat);
            }
        }
    }

    partial class UpdateUserFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 85, 115, 101, 114, 70, 117, 108, 108, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_user_full_info => new byte[] { 117, 115, 101, 114, 95, 102, 117, 108, 108, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_user_full_info = JsonEncodedText.Encode(propName_user_full_info);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUserFullInfo)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.UserFullInfo != null)
            {
                writer.WritePropertyName(encodedPropName_user_full_info);
                writer.WriteTLObjectValue(obj.UserFullInfo);
            }
        }
    }

    partial class UpdateBasicGroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 66, 97, 115, 105, 99, 71, 114, 111, 117, 112, 70, 117, 108, 108, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_basic_group_id => new byte[] { 98, 97, 115, 105, 99, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_basic_group_id = JsonEncodedText.Encode(propName_basic_group_id);
        private static ReadOnlySpan<byte> propName_basic_group_full_info => new byte[] { 98, 97, 115, 105, 99, 95, 103, 114, 111, 117, 112, 95, 102, 117, 108, 108, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_basic_group_full_info = JsonEncodedText.Encode(propName_basic_group_full_info);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateBasicGroupFullInfo)tlobj;
            writer.WriteNumber(encodedPropName_basic_group_id, obj.BasicGroupId);
            if (obj.BasicGroupFullInfo != null)
            {
                writer.WritePropertyName(encodedPropName_basic_group_full_info);
                writer.WriteTLObjectValue(obj.BasicGroupFullInfo);
            }
        }
    }

    partial class UpdateSupergroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 70, 117, 108, 108, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        private static ReadOnlySpan<byte> propName_supergroup_full_info => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 102, 117, 108, 108, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_supergroup_full_info = JsonEncodedText.Encode(propName_supergroup_full_info);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSupergroupFullInfo)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
            if (obj.SupergroupFullInfo != null)
            {
                writer.WritePropertyName(encodedPropName_supergroup_full_info);
                writer.WriteTLObjectValue(obj.SupergroupFullInfo);
            }
        }
    }

    partial class UpdateServiceNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 83, 101, 114, 118, 105, 99, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_content => new byte[] { 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_content = JsonEncodedText.Encode(propName_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateServiceNotification)tlobj;
            writer.WriteString(encodedPropName_type, obj.Type);
            if (obj.Content != null)
            {
                writer.WritePropertyName(encodedPropName_content);
                writer.WriteTLObjectValue(obj.Content);
            }
        }
    }

    partial class UpdateFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file => new byte[] { 102, 105, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_file = JsonEncodedText.Encode(propName_file);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateFile)tlobj;
            if (obj.File != null)
            {
                writer.WritePropertyName(encodedPropName_file);
                writer.WriteTLObjectValue(obj.File);
            }
        }
    }

    partial class UpdateFileGenerationStartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 70, 105, 108, 101, 71, 101, 110, 101, 114, 97, 116, 105, 111, 110, 83, 116, 97, 114, 116 }));
        private static ReadOnlySpan<byte> propName_generation_id => new byte[] { 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_generation_id = JsonEncodedText.Encode(propName_generation_id);
        private static ReadOnlySpan<byte> propName_original_path => new byte[] { 111, 114, 105, 103, 105, 110, 97, 108, 95, 112, 97, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_original_path = JsonEncodedText.Encode(propName_original_path);
        private static ReadOnlySpan<byte> propName_destination_path => new byte[] { 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 95, 112, 97, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_destination_path = JsonEncodedText.Encode(propName_destination_path);
        private static ReadOnlySpan<byte> propName_conversion => new byte[] { 99, 111, 110, 118, 101, 114, 115, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_conversion = JsonEncodedText.Encode(propName_conversion);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateFileGenerationStart)tlobj;
            writer.WritePropertyName(encodedPropName_generation_id);
            writer.WriteInt64String(obj.GenerationId);
            writer.WriteString(encodedPropName_original_path, obj.OriginalPath);
            writer.WriteString(encodedPropName_destination_path, obj.DestinationPath);
            writer.WriteString(encodedPropName_conversion, obj.Conversion);
        }
    }

    partial class UpdateFileGenerationStopConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 70, 105, 108, 101, 71, 101, 110, 101, 114, 97, 116, 105, 111, 110, 83, 116, 111, 112 }));
        private static ReadOnlySpan<byte> propName_generation_id => new byte[] { 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_generation_id = JsonEncodedText.Encode(propName_generation_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateFileGenerationStop)tlobj;
            writer.WritePropertyName(encodedPropName_generation_id);
            writer.WriteInt64String(obj.GenerationId);
        }
    }

    partial class UpdateCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_call => new byte[] { 99, 97, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_call = JsonEncodedText.Encode(propName_call);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateCall)tlobj;
            if (obj.Call != null)
            {
                writer.WritePropertyName(encodedPropName_call);
                writer.WriteTLObjectValue(obj.Call);
            }
        }
    }

    partial class UpdateGroupCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_group_call => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_group_call = JsonEncodedText.Encode(propName_group_call);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateGroupCall)tlobj;
            if (obj.GroupCall != null)
            {
                writer.WritePropertyName(encodedPropName_group_call);
                writer.WriteTLObjectValue(obj.GroupCall);
            }
        }
    }

    partial class UpdateGroupCallParticipantConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_participant => new byte[] { 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_participant = JsonEncodedText.Encode(propName_participant);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateGroupCallParticipant)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            if (obj.Participant != null)
            {
                writer.WritePropertyName(encodedPropName_participant);
                writer.WriteTLObjectValue(obj.Participant);
            }
        }
    }

    partial class UpdateNewCallSignalingDataConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 67, 97, 108, 108, 83, 105, 103, 110, 97, 108, 105, 110, 103, 68, 97, 116, 97 }));
        private static ReadOnlySpan<byte> propName_call_id => new byte[] { 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_call_id = JsonEncodedText.Encode(propName_call_id);
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewCallSignalingData)tlobj;
            writer.WriteNumber(encodedPropName_call_id, obj.CallId);
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
        }
    }

    partial class UpdateUserPrivacySettingRulesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 85, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 115 }));
        private static ReadOnlySpan<byte> propName_setting => new byte[] { 115, 101, 116, 116, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_setting = JsonEncodedText.Encode(propName_setting);
        private static ReadOnlySpan<byte> propName_rules => new byte[] { 114, 117, 108, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_rules = JsonEncodedText.Encode(propName_rules);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUserPrivacySettingRules)tlobj;
            if (obj.Setting != null)
            {
                writer.WritePropertyName(encodedPropName_setting);
                writer.WriteTLObjectValue(obj.Setting);
            }
            if (obj.Rules != null)
            {
                writer.WritePropertyName(encodedPropName_rules);
                writer.WriteTLObjectValue(obj.Rules);
            }
        }
    }

    partial class UpdateUnreadMessageCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 85, 110, 114, 101, 97, 100, 77, 101, 115, 115, 97, 103, 101, 67, 111, 117, 110, 116 }));
        private static ReadOnlySpan<byte> propName_chat_list => new byte[] { 99, 104, 97, 116, 95, 108, 105, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_chat_list = JsonEncodedText.Encode(propName_chat_list);
        private static ReadOnlySpan<byte> propName_unread_count => new byte[] { 117, 110, 114, 101, 97, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_unread_count = JsonEncodedText.Encode(propName_unread_count);
        private static ReadOnlySpan<byte> propName_unread_unmuted_count => new byte[] { 117, 110, 114, 101, 97, 100, 95, 117, 110, 109, 117, 116, 101, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_unread_unmuted_count = JsonEncodedText.Encode(propName_unread_unmuted_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUnreadMessageCount)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(encodedPropName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WriteNumber(encodedPropName_unread_count, obj.UnreadCount);
            writer.WriteNumber(encodedPropName_unread_unmuted_count, obj.UnreadUnmutedCount);
        }
    }

    partial class UpdateUnreadChatCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 85, 110, 114, 101, 97, 100, 67, 104, 97, 116, 67, 111, 117, 110, 116 }));
        private static ReadOnlySpan<byte> propName_chat_list => new byte[] { 99, 104, 97, 116, 95, 108, 105, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_chat_list = JsonEncodedText.Encode(propName_chat_list);
        private static ReadOnlySpan<byte> propName_total_count => new byte[] { 116, 111, 116, 97, 108, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_count = JsonEncodedText.Encode(propName_total_count);
        private static ReadOnlySpan<byte> propName_unread_count => new byte[] { 117, 110, 114, 101, 97, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_unread_count = JsonEncodedText.Encode(propName_unread_count);
        private static ReadOnlySpan<byte> propName_unread_unmuted_count => new byte[] { 117, 110, 114, 101, 97, 100, 95, 117, 110, 109, 117, 116, 101, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_unread_unmuted_count = JsonEncodedText.Encode(propName_unread_unmuted_count);
        private static ReadOnlySpan<byte> propName_marked_as_unread_count => new byte[] { 109, 97, 114, 107, 101, 100, 95, 97, 115, 95, 117, 110, 114, 101, 97, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_marked_as_unread_count = JsonEncodedText.Encode(propName_marked_as_unread_count);
        private static ReadOnlySpan<byte> propName_marked_as_unread_unmuted_count => new byte[] { 109, 97, 114, 107, 101, 100, 95, 97, 115, 95, 117, 110, 114, 101, 97, 100, 95, 117, 110, 109, 117, 116, 101, 100, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_marked_as_unread_unmuted_count = JsonEncodedText.Encode(propName_marked_as_unread_unmuted_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUnreadChatCount)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(encodedPropName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WriteNumber(encodedPropName_total_count, obj.TotalCount);
            writer.WriteNumber(encodedPropName_unread_count, obj.UnreadCount);
            writer.WriteNumber(encodedPropName_unread_unmuted_count, obj.UnreadUnmutedCount);
            writer.WriteNumber(encodedPropName_marked_as_unread_count, obj.MarkedAsUnreadCount);
            writer.WriteNumber(encodedPropName_marked_as_unread_unmuted_count, obj.MarkedAsUnreadUnmutedCount);
        }
    }

    partial class UpdateOptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 79, 112, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateOption)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
            if (obj.Value != null)
            {
                writer.WritePropertyName(encodedPropName_value);
                writer.WriteTLObjectValue(obj.Value);
            }
        }
    }

    partial class UpdateStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_sticker_set => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_sticker_set = JsonEncodedText.Encode(propName_sticker_set);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateStickerSet)tlobj;
            if (obj.StickerSet != null)
            {
                writer.WritePropertyName(encodedPropName_sticker_set);
                writer.WriteTLObjectValue(obj.StickerSet);
            }
        }
    }

    partial class UpdateInstalledStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 73, 110, 115, 116, 97, 108, 108, 101, 100, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_is_masks => new byte[] { 105, 115, 95, 109, 97, 115, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_is_masks = JsonEncodedText.Encode(propName_is_masks);
        private static ReadOnlySpan<byte> propName_sticker_set_ids => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_sticker_set_ids = JsonEncodedText.Encode(propName_sticker_set_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateInstalledStickerSets)tlobj;
            writer.WriteBoolean(encodedPropName_is_masks, obj.IsMasks);
            if (obj.StickerSetIds != null)
            {
                writer.WritePropertyName(encodedPropName_sticker_set_ids);
                writer.WriteInt64Array(obj.StickerSetIds);
            }
        }
    }

    partial class UpdateTrendingStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 84, 114, 101, 110, 100, 105, 110, 103, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_sticker_sets => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_sticker_sets = JsonEncodedText.Encode(propName_sticker_sets);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateTrendingStickerSets)tlobj;
            if (obj.StickerSets != null)
            {
                writer.WritePropertyName(encodedPropName_sticker_sets);
                writer.WriteTLObjectValue(obj.StickerSets);
            }
        }
    }

    partial class UpdateRecentStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 82, 101, 99, 101, 110, 116, 83, 116, 105, 99, 107, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_is_attached => new byte[] { 105, 115, 95, 97, 116, 116, 97, 99, 104, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_attached = JsonEncodedText.Encode(propName_is_attached);
        private static ReadOnlySpan<byte> propName_sticker_ids => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_sticker_ids = JsonEncodedText.Encode(propName_sticker_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateRecentStickers)tlobj;
            writer.WriteBoolean(encodedPropName_is_attached, obj.IsAttached);
            if (obj.StickerIds != null)
            {
                writer.WritePropertyName(encodedPropName_sticker_ids);
                writer.WriteArray(obj.StickerIds);
            }
        }
    }

    partial class UpdateFavoriteStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 70, 97, 118, 111, 114, 105, 116, 101, 83, 116, 105, 99, 107, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_sticker_ids => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_sticker_ids = JsonEncodedText.Encode(propName_sticker_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateFavoriteStickers)tlobj;
            if (obj.StickerIds != null)
            {
                writer.WritePropertyName(encodedPropName_sticker_ids);
                writer.WriteArray(obj.StickerIds);
            }
        }
    }

    partial class UpdateSavedAnimationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 83, 97, 118, 101, 100, 65, 110, 105, 109, 97, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_animation_ids => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_animation_ids = JsonEncodedText.Encode(propName_animation_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSavedAnimations)tlobj;
            if (obj.AnimationIds != null)
            {
                writer.WritePropertyName(encodedPropName_animation_ids);
                writer.WriteArray(obj.AnimationIds);
            }
        }
    }

    partial class UpdateSelectedBackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 83, 101, 108, 101, 99, 116, 101, 100, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100 }));
        private static ReadOnlySpan<byte> propName_for_dark_theme => new byte[] { 102, 111, 114, 95, 100, 97, 114, 107, 95, 116, 104, 101, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_for_dark_theme = JsonEncodedText.Encode(propName_for_dark_theme);
        private static ReadOnlySpan<byte> propName_background => new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_background = JsonEncodedText.Encode(propName_background);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSelectedBackground)tlobj;
            writer.WriteBoolean(encodedPropName_for_dark_theme, obj.ForDarkTheme);
            if (obj.Background != null)
            {
                writer.WritePropertyName(encodedPropName_background);
                writer.WriteTLObjectValue(obj.Background);
            }
        }
    }

    partial class UpdateChatThemesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 84, 104, 101, 109, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_themes => new byte[] { 99, 104, 97, 116, 95, 116, 104, 101, 109, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_chat_themes = JsonEncodedText.Encode(propName_chat_themes);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatThemes)tlobj;
            if (obj.ChatThemes != null)
            {
                writer.WritePropertyName(encodedPropName_chat_themes);
                writer.WriteArray(obj.ChatThemes);
            }
        }
    }

    partial class UpdateLanguagePackStringsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 83, 116, 114, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_localization_target => new byte[] { 108, 111, 99, 97, 108, 105, 122, 97, 116, 105, 111, 110, 95, 116, 97, 114, 103, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_localization_target = JsonEncodedText.Encode(propName_localization_target);
        private static ReadOnlySpan<byte> propName_language_pack_id => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_language_pack_id = JsonEncodedText.Encode(propName_language_pack_id);
        private static ReadOnlySpan<byte> propName_strings => new byte[] { 115, 116, 114, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_strings = JsonEncodedText.Encode(propName_strings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateLanguagePackStrings)tlobj;
            writer.WriteString(encodedPropName_localization_target, obj.LocalizationTarget);
            writer.WriteString(encodedPropName_language_pack_id, obj.LanguagePackId);
            if (obj.Strings != null)
            {
                writer.WritePropertyName(encodedPropName_strings);
                writer.WriteArray(obj.Strings);
            }
        }
    }

    partial class UpdateConnectionStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 83, 116, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_state => new byte[] { 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_state = JsonEncodedText.Encode(propName_state);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateConnectionState)tlobj;
            if (obj.State != null)
            {
                writer.WritePropertyName(encodedPropName_state);
                writer.WriteTLObjectValue(obj.State);
            }
        }
    }

    partial class UpdateTermsOfServiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 84, 101, 114, 109, 115, 79, 102, 83, 101, 114, 118, 105, 99, 101 }));
        private static ReadOnlySpan<byte> propName_terms_of_service_id => new byte[] { 116, 101, 114, 109, 115, 95, 111, 102, 95, 115, 101, 114, 118, 105, 99, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_terms_of_service_id = JsonEncodedText.Encode(propName_terms_of_service_id);
        private static ReadOnlySpan<byte> propName_terms_of_service => new byte[] { 116, 101, 114, 109, 115, 95, 111, 102, 95, 115, 101, 114, 118, 105, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_terms_of_service = JsonEncodedText.Encode(propName_terms_of_service);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateTermsOfService)tlobj;
            writer.WriteString(encodedPropName_terms_of_service_id, obj.TermsOfServiceId);
            if (obj.TermsOfService != null)
            {
                writer.WritePropertyName(encodedPropName_terms_of_service);
                writer.WriteTLObjectValue(obj.TermsOfService);
            }
        }
    }

    partial class UpdateUsersNearbyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 85, 115, 101, 114, 115, 78, 101, 97, 114, 98, 121 }));
        private static ReadOnlySpan<byte> propName_users_nearby => new byte[] { 117, 115, 101, 114, 115, 95, 110, 101, 97, 114, 98, 121 };
        private static readonly JsonEncodedText encodedPropName_users_nearby = JsonEncodedText.Encode(propName_users_nearby);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUsersNearby)tlobj;
            if (obj.UsersNearby != null)
            {
                writer.WritePropertyName(encodedPropName_users_nearby);
                writer.WriteArray(obj.UsersNearby);
            }
        }
    }

    partial class UpdateDiceEmojisConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 68, 105, 99, 101, 69, 109, 111, 106, 105, 115 }));
        private static ReadOnlySpan<byte> propName_emojis => new byte[] { 101, 109, 111, 106, 105, 115 };
        private static readonly JsonEncodedText encodedPropName_emojis = JsonEncodedText.Encode(propName_emojis);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateDiceEmojis)tlobj;
            if (obj.Emojis != null)
            {
                writer.WritePropertyName(encodedPropName_emojis);
                writer.WriteArray(obj.Emojis);
            }
        }
    }

    partial class UpdateAnimatedEmojiMessageClickedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 65, 110, 105, 109, 97, 116, 101, 100, 69, 109, 111, 106, 105, 77, 101, 115, 115, 97, 103, 101, 67, 108, 105, 99, 107, 101, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateAnimatedEmojiMessageClicked)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class UpdateAnimationSearchParametersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 65, 110, 105, 109, 97, 116, 105, 111, 110, 83, 101, 97, 114, 99, 104, 80, 97, 114, 97, 109, 101, 116, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_provider => new byte[] { 112, 114, 111, 118, 105, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_provider = JsonEncodedText.Encode(propName_provider);
        private static ReadOnlySpan<byte> propName_emojis => new byte[] { 101, 109, 111, 106, 105, 115 };
        private static readonly JsonEncodedText encodedPropName_emojis = JsonEncodedText.Encode(propName_emojis);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateAnimationSearchParameters)tlobj;
            writer.WriteString(encodedPropName_provider, obj.Provider);
            if (obj.Emojis != null)
            {
                writer.WritePropertyName(encodedPropName_emojis);
                writer.WriteArray(obj.Emojis);
            }
        }
    }

    partial class UpdateSuggestedActionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 83, 117, 103, 103, 101, 115, 116, 101, 100, 65, 99, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_added_actions => new byte[] { 97, 100, 100, 101, 100, 95, 97, 99, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_added_actions = JsonEncodedText.Encode(propName_added_actions);
        private static ReadOnlySpan<byte> propName_removed_actions => new byte[] { 114, 101, 109, 111, 118, 101, 100, 95, 97, 99, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_removed_actions = JsonEncodedText.Encode(propName_removed_actions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSuggestedActions)tlobj;
            if (obj.AddedActions != null)
            {
                writer.WritePropertyName(encodedPropName_added_actions);
                writer.WriteArray(obj.AddedActions);
            }
            if (obj.RemovedActions != null)
            {
                writer.WritePropertyName(encodedPropName_removed_actions);
                writer.WriteArray(obj.RemovedActions);
            }
        }
    }

    partial class UpdateNewInlineQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_sender_user_id => new byte[] { 115, 101, 110, 100, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sender_user_id = JsonEncodedText.Encode(propName_sender_user_id);
        private static ReadOnlySpan<byte> propName_user_location => new byte[] { 117, 115, 101, 114, 95, 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_user_location = JsonEncodedText.Encode(propName_user_location);
        private static ReadOnlySpan<byte> propName_chat_type => new byte[] { 99, 104, 97, 116, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_chat_type = JsonEncodedText.Encode(propName_chat_type);
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewInlineQuery)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(encodedPropName_sender_user_id, obj.SenderUserId);
            if (obj.UserLocation != null)
            {
                writer.WritePropertyName(encodedPropName_user_location);
                writer.WriteTLObjectValue(obj.UserLocation);
            }
            if (obj.ChatType != null)
            {
                writer.WritePropertyName(encodedPropName_chat_type);
                writer.WriteTLObjectValue(obj.ChatType);
            }
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteString(encodedPropName_offset, obj.Offset);
        }
    }

    partial class UpdateNewChosenInlineResultConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 67, 104, 111, 115, 101, 110, 73, 110, 108, 105, 110, 101, 82, 101, 115, 117, 108, 116 }));
        private static ReadOnlySpan<byte> propName_sender_user_id => new byte[] { 115, 101, 110, 100, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sender_user_id = JsonEncodedText.Encode(propName_sender_user_id);
        private static ReadOnlySpan<byte> propName_user_location => new byte[] { 117, 115, 101, 114, 95, 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_user_location = JsonEncodedText.Encode(propName_user_location);
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_result_id => new byte[] { 114, 101, 115, 117, 108, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_result_id = JsonEncodedText.Encode(propName_result_id);
        private static ReadOnlySpan<byte> propName_inline_message_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_message_id = JsonEncodedText.Encode(propName_inline_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewChosenInlineResult)tlobj;
            writer.WriteNumber(encodedPropName_sender_user_id, obj.SenderUserId);
            if (obj.UserLocation != null)
            {
                writer.WritePropertyName(encodedPropName_user_location);
                writer.WriteTLObjectValue(obj.UserLocation);
            }
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteString(encodedPropName_result_id, obj.ResultId);
            writer.WriteString(encodedPropName_inline_message_id, obj.InlineMessageId);
        }
    }

    partial class UpdateNewCallbackQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 67, 97, 108, 108, 98, 97, 99, 107, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_sender_user_id => new byte[] { 115, 101, 110, 100, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sender_user_id = JsonEncodedText.Encode(propName_sender_user_id);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_chat_instance => new byte[] { 99, 104, 97, 116, 95, 105, 110, 115, 116, 97, 110, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_chat_instance = JsonEncodedText.Encode(propName_chat_instance);
        private static ReadOnlySpan<byte> propName_payload => new byte[] { 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_payload = JsonEncodedText.Encode(propName_payload);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewCallbackQuery)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(encodedPropName_sender_user_id, obj.SenderUserId);
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WritePropertyName(encodedPropName_chat_instance);
            writer.WriteInt64String(obj.ChatInstance);
            if (obj.Payload != null)
            {
                writer.WritePropertyName(encodedPropName_payload);
                writer.WriteTLObjectValue(obj.Payload);
            }
        }
    }

    partial class UpdateNewInlineCallbackQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 73, 110, 108, 105, 110, 101, 67, 97, 108, 108, 98, 97, 99, 107, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_sender_user_id => new byte[] { 115, 101, 110, 100, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sender_user_id = JsonEncodedText.Encode(propName_sender_user_id);
        private static ReadOnlySpan<byte> propName_inline_message_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_message_id = JsonEncodedText.Encode(propName_inline_message_id);
        private static ReadOnlySpan<byte> propName_chat_instance => new byte[] { 99, 104, 97, 116, 95, 105, 110, 115, 116, 97, 110, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_chat_instance = JsonEncodedText.Encode(propName_chat_instance);
        private static ReadOnlySpan<byte> propName_payload => new byte[] { 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_payload = JsonEncodedText.Encode(propName_payload);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewInlineCallbackQuery)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(encodedPropName_sender_user_id, obj.SenderUserId);
            writer.WriteString(encodedPropName_inline_message_id, obj.InlineMessageId);
            writer.WritePropertyName(encodedPropName_chat_instance);
            writer.WriteInt64String(obj.ChatInstance);
            if (obj.Payload != null)
            {
                writer.WritePropertyName(encodedPropName_payload);
                writer.WriteTLObjectValue(obj.Payload);
            }
        }
    }

    partial class UpdateNewShippingQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 83, 104, 105, 112, 112, 105, 110, 103, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_sender_user_id => new byte[] { 115, 101, 110, 100, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sender_user_id = JsonEncodedText.Encode(propName_sender_user_id);
        private static ReadOnlySpan<byte> propName_invoice_payload => new byte[] { 105, 110, 118, 111, 105, 99, 101, 95, 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_invoice_payload = JsonEncodedText.Encode(propName_invoice_payload);
        private static ReadOnlySpan<byte> propName_shipping_address => new byte[] { 115, 104, 105, 112, 112, 105, 110, 103, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_shipping_address = JsonEncodedText.Encode(propName_shipping_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewShippingQuery)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(encodedPropName_sender_user_id, obj.SenderUserId);
            writer.WriteString(encodedPropName_invoice_payload, obj.InvoicePayload);
            if (obj.ShippingAddress != null)
            {
                writer.WritePropertyName(encodedPropName_shipping_address);
                writer.WriteTLObjectValue(obj.ShippingAddress);
            }
        }
    }

    partial class UpdateNewPreCheckoutQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 80, 114, 101, 67, 104, 101, 99, 107, 111, 117, 116, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_sender_user_id => new byte[] { 115, 101, 110, 100, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sender_user_id = JsonEncodedText.Encode(propName_sender_user_id);
        private static ReadOnlySpan<byte> propName_currency => new byte[] { 99, 117, 114, 114, 101, 110, 99, 121 };
        private static readonly JsonEncodedText encodedPropName_currency = JsonEncodedText.Encode(propName_currency);
        private static ReadOnlySpan<byte> propName_total_amount => new byte[] { 116, 111, 116, 97, 108, 95, 97, 109, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_total_amount = JsonEncodedText.Encode(propName_total_amount);
        private static ReadOnlySpan<byte> propName_invoice_payload => new byte[] { 105, 110, 118, 111, 105, 99, 101, 95, 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_invoice_payload = JsonEncodedText.Encode(propName_invoice_payload);
        private static ReadOnlySpan<byte> propName_shipping_option_id => new byte[] { 115, 104, 105, 112, 112, 105, 110, 103, 95, 111, 112, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_shipping_option_id = JsonEncodedText.Encode(propName_shipping_option_id);
        private static ReadOnlySpan<byte> propName_order_info => new byte[] { 111, 114, 100, 101, 114, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_order_info = JsonEncodedText.Encode(propName_order_info);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewPreCheckoutQuery)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(encodedPropName_sender_user_id, obj.SenderUserId);
            writer.WriteString(encodedPropName_currency, obj.Currency);
            writer.WriteNumber(encodedPropName_total_amount, obj.TotalAmount);
            if (!obj.InvoicePayload.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_invoice_payload, obj.InvoicePayload.Span);
            }
            writer.WriteString(encodedPropName_shipping_option_id, obj.ShippingOptionId);
            if (obj.OrderInfo != null)
            {
                writer.WritePropertyName(encodedPropName_order_info);
                writer.WriteTLObjectValue(obj.OrderInfo);
            }
        }
    }

    partial class UpdateNewCustomEventConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 67, 117, 115, 116, 111, 109, 69, 118, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_event => new byte[] { 101, 118, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_event = JsonEncodedText.Encode(propName_event);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewCustomEvent)tlobj;
            writer.WriteString(encodedPropName_event, obj.Event);
        }
    }

    partial class UpdateNewCustomQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 67, 117, 115, 116, 111, 109, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_id => new byte[] { 105, 100 };
        private static readonly JsonEncodedText encodedPropName_id = JsonEncodedText.Encode(propName_id);
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        private static ReadOnlySpan<byte> propName_timeout => new byte[] { 116, 105, 109, 101, 111, 117, 116 };
        private static readonly JsonEncodedText encodedPropName_timeout = JsonEncodedText.Encode(propName_timeout);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewCustomQuery)tlobj;
            writer.WritePropertyName(encodedPropName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(encodedPropName_data, obj.Data);
            writer.WriteNumber(encodedPropName_timeout, obj.Timeout);
        }
    }

    partial class UpdatePollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 80, 111, 108, 108 }));
        private static ReadOnlySpan<byte> propName_poll => new byte[] { 112, 111, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_poll = JsonEncodedText.Encode(propName_poll);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdatePoll)tlobj;
            if (obj.Poll != null)
            {
                writer.WritePropertyName(encodedPropName_poll);
                writer.WriteTLObjectValue(obj.Poll);
            }
        }
    }

    partial class UpdatePollAnswerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 80, 111, 108, 108, 65, 110, 115, 119, 101, 114 }));
        private static ReadOnlySpan<byte> propName_poll_id => new byte[] { 112, 111, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_poll_id = JsonEncodedText.Encode(propName_poll_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_option_ids => new byte[] { 111, 112, 116, 105, 111, 110, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_option_ids = JsonEncodedText.Encode(propName_option_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdatePollAnswer)tlobj;
            writer.WritePropertyName(encodedPropName_poll_id);
            writer.WriteInt64String(obj.PollId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.OptionIds != null)
            {
                writer.WritePropertyName(encodedPropName_option_ids);
                writer.WriteArray(obj.OptionIds);
            }
        }
    }

    partial class UpdateChatMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 67, 104, 97, 116, 77, 101, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_actor_user_id => new byte[] { 97, 99, 116, 111, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_actor_user_id = JsonEncodedText.Encode(propName_actor_user_id);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        private static ReadOnlySpan<byte> propName_old_chat_member => new byte[] { 111, 108, 100, 95, 99, 104, 97, 116, 95, 109, 101, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_old_chat_member = JsonEncodedText.Encode(propName_old_chat_member);
        private static ReadOnlySpan<byte> propName_new_chat_member => new byte[] { 110, 101, 119, 95, 99, 104, 97, 116, 95, 109, 101, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_new_chat_member = JsonEncodedText.Encode(propName_new_chat_member);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatMember)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_actor_user_id, obj.ActorUserId);
            writer.WriteNumber(encodedPropName_date, obj.Date);
            if (obj.InviteLink != null)
            {
                writer.WritePropertyName(encodedPropName_invite_link);
                writer.WriteTLObjectValue(obj.InviteLink);
            }
            if (obj.OldChatMember != null)
            {
                writer.WritePropertyName(encodedPropName_old_chat_member);
                writer.WriteTLObjectValue(obj.OldChatMember);
            }
            if (obj.NewChatMember != null)
            {
                writer.WritePropertyName(encodedPropName_new_chat_member);
                writer.WriteTLObjectValue(obj.NewChatMember);
            }
        }
    }

    partial class UpdateNewChatJoinRequestConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 78, 101, 119, 67, 104, 97, 116, 74, 111, 105, 110, 82, 101, 113, 117, 101, 115, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_request => new byte[] { 114, 101, 113, 117, 101, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_request = JsonEncodedText.Encode(propName_request);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewChatJoinRequest)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Request != null)
            {
                writer.WritePropertyName(encodedPropName_request);
                writer.WriteTLObjectValue(obj.Request);
            }
            if (obj.InviteLink != null)
            {
                writer.WritePropertyName(encodedPropName_invite_link);
                writer.WriteTLObjectValue(obj.InviteLink);
            }
        }
    }

    partial class UpdatesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 100, 97, 116, 101, 115 }));
        private static ReadOnlySpan<byte> propName_updates => new byte[] { 117, 112, 100, 97, 116, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_updates = JsonEncodedText.Encode(propName_updates);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Updates)tlobj;
            if (obj.Updates_ != null)
            {
                writer.WritePropertyName(encodedPropName_updates);
                writer.WriteArray(obj.Updates_);
            }
        }
    }

    partial class LogStreamDefaultConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 103, 83, 116, 114, 101, 97, 109, 68, 101, 102, 97, 117, 108, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class LogStreamFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 103, 83, 116, 114, 101, 97, 109, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_path => new byte[] { 112, 97, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_path = JsonEncodedText.Encode(propName_path);
        private static ReadOnlySpan<byte> propName_max_file_size => new byte[] { 109, 97, 120, 95, 102, 105, 108, 101, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_max_file_size = JsonEncodedText.Encode(propName_max_file_size);
        private static ReadOnlySpan<byte> propName_redirect_stderr => new byte[] { 114, 101, 100, 105, 114, 101, 99, 116, 95, 115, 116, 100, 101, 114, 114 };
        private static readonly JsonEncodedText encodedPropName_redirect_stderr = JsonEncodedText.Encode(propName_redirect_stderr);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LogStreamFile)tlobj;
            writer.WriteString(encodedPropName_path, obj.Path);
            writer.WriteNumber(encodedPropName_max_file_size, obj.MaxFileSize);
            writer.WriteBoolean(encodedPropName_redirect_stderr, obj.RedirectStderr);
        }
    }

    partial class LogStreamEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 103, 83, 116, 114, 101, 97, 109, 69, 109, 112, 116, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class LogVerbosityLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 103, 86, 101, 114, 98, 111, 115, 105, 116, 121, 76, 101, 118, 101, 108 }));
        private static ReadOnlySpan<byte> propName_verbosity_level => new byte[] { 118, 101, 114, 98, 111, 115, 105, 116, 121, 95, 108, 101, 118, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_verbosity_level = JsonEncodedText.Encode(propName_verbosity_level);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LogVerbosityLevel)tlobj;
            writer.WriteNumber(encodedPropName_verbosity_level, obj.VerbosityLevel);
        }
    }

    partial class LogTagsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 103, 84, 97, 103, 115 }));
        private static ReadOnlySpan<byte> propName_tags => new byte[] { 116, 97, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_tags = JsonEncodedText.Encode(propName_tags);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LogTags)tlobj;
            if (obj.Tags != null)
            {
                writer.WritePropertyName(encodedPropName_tags);
                writer.WriteArray(obj.Tags);
            }
        }
    }

    partial class TestIntConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 73, 110, 116 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestInt)tlobj;
            writer.WriteNumber(encodedPropName_value, obj.Value);
        }
    }

    partial class TestStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 83, 116, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestString)tlobj;
            writer.WriteString(encodedPropName_value, obj.Value);
        }
    }

    partial class TestBytesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 66, 121, 116, 101, 115 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestBytes)tlobj;
            if (!obj.Value.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_value, obj.Value.Span);
            }
        }
    }

    partial class TestVectorIntConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 86, 101, 99, 116, 111, 114, 73, 110, 116 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestVectorInt)tlobj;
            if (obj.Value != null)
            {
                writer.WritePropertyName(encodedPropName_value);
                writer.WriteArray(obj.Value);
            }
        }
    }

    partial class TestVectorIntObjectConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 86, 101, 99, 116, 111, 114, 73, 110, 116, 79, 98, 106, 101, 99, 116 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestVectorIntObject)tlobj;
            if (obj.Value != null)
            {
                writer.WritePropertyName(encodedPropName_value);
                writer.WriteArray(obj.Value);
            }
        }
    }

    partial class TestVectorStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 86, 101, 99, 116, 111, 114, 83, 116, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestVectorString)tlobj;
            if (obj.Value != null)
            {
                writer.WritePropertyName(encodedPropName_value);
                writer.WriteArray(obj.Value);
            }
        }
    }

    partial class TestVectorStringObjectConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 86, 101, 99, 116, 111, 114, 83, 116, 114, 105, 110, 103, 79, 98, 106, 101, 99, 116 }));
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestVectorStringObject)tlobj;
            if (obj.Value != null)
            {
                writer.WritePropertyName(encodedPropName_value);
                writer.WriteArray(obj.Value);
            }
        }
    }

    partial class GetAuthorizationStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 83, 116, 97, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetTdlibParametersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 84, 100, 108, 105, 98, 80, 97, 114, 97, 109, 101, 116, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_parameters => new byte[] { 112, 97, 114, 97, 109, 101, 116, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_parameters = JsonEncodedText.Encode(propName_parameters);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetTdlibParameters)tlobj;
            if (obj.Parameters != null)
            {
                writer.WritePropertyName(encodedPropName_parameters);
                writer.WriteTLObjectValue(obj.Parameters);
            }
        }
    }

    partial class CheckDatabaseEncryptionKeyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 68, 97, 116, 97, 98, 97, 115, 101, 69, 110, 99, 114, 121, 112, 116, 105, 111, 110, 75, 101, 121 }));
        private static ReadOnlySpan<byte> propName_encryption_key => new byte[] { 101, 110, 99, 114, 121, 112, 116, 105, 111, 110, 95, 107, 101, 121 };
        private static readonly JsonEncodedText encodedPropName_encryption_key = JsonEncodedText.Encode(propName_encryption_key);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckDatabaseEncryptionKey)tlobj;
            if (!obj.EncryptionKey.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_encryption_key, obj.EncryptionKey.Span);
            }
        }
    }

    partial class SetAuthenticationPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        private static ReadOnlySpan<byte> propName_settings => new byte[] { 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_settings = JsonEncodedText.Encode(propName_settings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetAuthenticationPhoneNumber)tlobj;
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
            if (obj.Settings != null)
            {
                writer.WritePropertyName(encodedPropName_settings);
                writer.WriteTLObjectValue(obj.Settings);
            }
        }
    }

    partial class ResendAuthenticationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 110, 100, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckAuthenticationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_code => new byte[] { 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_code = JsonEncodedText.Encode(propName_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckAuthenticationCode)tlobj;
            writer.WriteString(encodedPropName_code, obj.Code);
        }
    }

    partial class RequestQrCodeAuthenticationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 113, 117, 101, 115, 116, 81, 114, 67, 111, 100, 101, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_other_user_ids => new byte[] { 111, 116, 104, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_other_user_ids = JsonEncodedText.Encode(propName_other_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RequestQrCodeAuthentication)tlobj;
            if (obj.OtherUserIds != null)
            {
                writer.WritePropertyName(encodedPropName_other_user_ids);
                writer.WriteArray(obj.OtherUserIds);
            }
        }
    }

    partial class RegisterUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 103, 105, 115, 116, 101, 114, 85, 115, 101, 114 }));
        private static ReadOnlySpan<byte> propName_first_name => new byte[] { 102, 105, 114, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_first_name = JsonEncodedText.Encode(propName_first_name);
        private static ReadOnlySpan<byte> propName_last_name => new byte[] { 108, 97, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_last_name = JsonEncodedText.Encode(propName_last_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RegisterUser)tlobj;
            writer.WriteString(encodedPropName_first_name, obj.FirstName);
            writer.WriteString(encodedPropName_last_name, obj.LastName);
        }
    }

    partial class CheckAuthenticationPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 80, 97, 115, 115, 119, 111, 114, 100 }));
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckAuthenticationPassword)tlobj;
            writer.WriteString(encodedPropName_password, obj.Password);
        }
    }

    partial class RequestAuthenticationPasswordRecoveryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 113, 117, 101, 115, 116, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 80, 97, 115, 115, 119, 111, 114, 100, 82, 101, 99, 111, 118, 101, 114, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckAuthenticationPasswordRecoveryCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 80, 97, 115, 115, 119, 111, 114, 100, 82, 101, 99, 111, 118, 101, 114, 121, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_recovery_code => new byte[] { 114, 101, 99, 111, 118, 101, 114, 121, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_recovery_code = JsonEncodedText.Encode(propName_recovery_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckAuthenticationPasswordRecoveryCode)tlobj;
            writer.WriteString(encodedPropName_recovery_code, obj.RecoveryCode);
        }
    }

    partial class RecoverAuthenticationPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 99, 111, 118, 101, 114, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 80, 97, 115, 115, 119, 111, 114, 100 }));
        private static ReadOnlySpan<byte> propName_recovery_code => new byte[] { 114, 101, 99, 111, 118, 101, 114, 121, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_recovery_code = JsonEncodedText.Encode(propName_recovery_code);
        private static ReadOnlySpan<byte> propName_new_password => new byte[] { 110, 101, 119, 95, 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_new_password = JsonEncodedText.Encode(propName_new_password);
        private static ReadOnlySpan<byte> propName_new_hint => new byte[] { 110, 101, 119, 95, 104, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_new_hint = JsonEncodedText.Encode(propName_new_hint);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RecoverAuthenticationPassword)tlobj;
            writer.WriteString(encodedPropName_recovery_code, obj.RecoveryCode);
            writer.WriteString(encodedPropName_new_password, obj.NewPassword);
            writer.WriteString(encodedPropName_new_hint, obj.NewHint);
        }
    }

    partial class CheckAuthenticationBotTokenConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 66, 111, 116, 84, 111, 107, 101, 110 }));
        private static ReadOnlySpan<byte> propName_token => new byte[] { 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_token = JsonEncodedText.Encode(propName_token);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckAuthenticationBotToken)tlobj;
            writer.WriteString(encodedPropName_token, obj.Token);
        }
    }

    partial class LogOutConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 103, 79, 117, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CloseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 108, 111, 115, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DestroyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 115, 116, 114, 111, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ConfirmQrCodeAuthenticationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 111, 110, 102, 105, 114, 109, 81, 114, 67, 111, 100, 101, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_link => new byte[] { 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_link = JsonEncodedText.Encode(propName_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ConfirmQrCodeAuthentication)tlobj;
            writer.WriteString(encodedPropName_link, obj.Link);
        }
    }

    partial class GetCurrentStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 117, 114, 114, 101, 110, 116, 83, 116, 97, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetDatabaseEncryptionKeyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 68, 97, 116, 97, 98, 97, 115, 101, 69, 110, 99, 114, 121, 112, 116, 105, 111, 110, 75, 101, 121 }));
        private static ReadOnlySpan<byte> propName_new_encryption_key => new byte[] { 110, 101, 119, 95, 101, 110, 99, 114, 121, 112, 116, 105, 111, 110, 95, 107, 101, 121 };
        private static readonly JsonEncodedText encodedPropName_new_encryption_key = JsonEncodedText.Encode(propName_new_encryption_key);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetDatabaseEncryptionKey)tlobj;
            if (!obj.NewEncryptionKey.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_new_encryption_key, obj.NewEncryptionKey.Span);
            }
        }
    }

    partial class GetPasswordStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 97, 115, 115, 119, 111, 114, 100, 83, 116, 97, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 80, 97, 115, 115, 119, 111, 114, 100 }));
        private static ReadOnlySpan<byte> propName_old_password => new byte[] { 111, 108, 100, 95, 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_old_password = JsonEncodedText.Encode(propName_old_password);
        private static ReadOnlySpan<byte> propName_new_password => new byte[] { 110, 101, 119, 95, 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_new_password = JsonEncodedText.Encode(propName_new_password);
        private static ReadOnlySpan<byte> propName_new_hint => new byte[] { 110, 101, 119, 95, 104, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_new_hint = JsonEncodedText.Encode(propName_new_hint);
        private static ReadOnlySpan<byte> propName_set_recovery_email_address => new byte[] { 115, 101, 116, 95, 114, 101, 99, 111, 118, 101, 114, 121, 95, 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_set_recovery_email_address = JsonEncodedText.Encode(propName_set_recovery_email_address);
        private static ReadOnlySpan<byte> propName_new_recovery_email_address => new byte[] { 110, 101, 119, 95, 114, 101, 99, 111, 118, 101, 114, 121, 95, 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_new_recovery_email_address = JsonEncodedText.Encode(propName_new_recovery_email_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetPassword)tlobj;
            writer.WriteString(encodedPropName_old_password, obj.OldPassword);
            writer.WriteString(encodedPropName_new_password, obj.NewPassword);
            writer.WriteString(encodedPropName_new_hint, obj.NewHint);
            writer.WriteBoolean(encodedPropName_set_recovery_email_address, obj.SetRecoveryEmailAddress);
            writer.WriteString(encodedPropName_new_recovery_email_address, obj.NewRecoveryEmailAddress);
        }
    }

    partial class GetRecoveryEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 82, 101, 99, 111, 118, 101, 114, 121, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115 }));
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRecoveryEmailAddress)tlobj;
            writer.WriteString(encodedPropName_password, obj.Password);
        }
    }

    partial class SetRecoveryEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 82, 101, 99, 111, 118, 101, 114, 121, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115 }));
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        private static ReadOnlySpan<byte> propName_new_recovery_email_address => new byte[] { 110, 101, 119, 95, 114, 101, 99, 111, 118, 101, 114, 121, 95, 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_new_recovery_email_address = JsonEncodedText.Encode(propName_new_recovery_email_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetRecoveryEmailAddress)tlobj;
            writer.WriteString(encodedPropName_password, obj.Password);
            writer.WriteString(encodedPropName_new_recovery_email_address, obj.NewRecoveryEmailAddress);
        }
    }

    partial class CheckRecoveryEmailAddressCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 82, 101, 99, 111, 118, 101, 114, 121, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_code => new byte[] { 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_code = JsonEncodedText.Encode(propName_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckRecoveryEmailAddressCode)tlobj;
            writer.WriteString(encodedPropName_code, obj.Code);
        }
    }

    partial class ResendRecoveryEmailAddressCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 110, 100, 82, 101, 99, 111, 118, 101, 114, 121, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 67, 111, 100, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class RequestPasswordRecoveryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 113, 117, 101, 115, 116, 80, 97, 115, 115, 119, 111, 114, 100, 82, 101, 99, 111, 118, 101, 114, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckPasswordRecoveryCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 80, 97, 115, 115, 119, 111, 114, 100, 82, 101, 99, 111, 118, 101, 114, 121, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_recovery_code => new byte[] { 114, 101, 99, 111, 118, 101, 114, 121, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_recovery_code = JsonEncodedText.Encode(propName_recovery_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckPasswordRecoveryCode)tlobj;
            writer.WriteString(encodedPropName_recovery_code, obj.RecoveryCode);
        }
    }

    partial class RecoverPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 99, 111, 118, 101, 114, 80, 97, 115, 115, 119, 111, 114, 100 }));
        private static ReadOnlySpan<byte> propName_recovery_code => new byte[] { 114, 101, 99, 111, 118, 101, 114, 121, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_recovery_code = JsonEncodedText.Encode(propName_recovery_code);
        private static ReadOnlySpan<byte> propName_new_password => new byte[] { 110, 101, 119, 95, 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_new_password = JsonEncodedText.Encode(propName_new_password);
        private static ReadOnlySpan<byte> propName_new_hint => new byte[] { 110, 101, 119, 95, 104, 105, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_new_hint = JsonEncodedText.Encode(propName_new_hint);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RecoverPassword)tlobj;
            writer.WriteString(encodedPropName_recovery_code, obj.RecoveryCode);
            writer.WriteString(encodedPropName_new_password, obj.NewPassword);
            writer.WriteString(encodedPropName_new_hint, obj.NewHint);
        }
    }

    partial class ResetPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 116, 80, 97, 115, 115, 119, 111, 114, 100 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CancelPasswordResetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 110, 99, 101, 108, 80, 97, 115, 115, 119, 111, 114, 100, 82, 101, 115, 101, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CreateTemporaryPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 84, 101, 109, 112, 111, 114, 97, 114, 121, 80, 97, 115, 115, 119, 111, 114, 100 }));
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        private static ReadOnlySpan<byte> propName_valid_for => new byte[] { 118, 97, 108, 105, 100, 95, 102, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_valid_for = JsonEncodedText.Encode(propName_valid_for);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateTemporaryPassword)tlobj;
            writer.WriteString(encodedPropName_password, obj.Password);
            writer.WriteNumber(encodedPropName_valid_for, obj.ValidFor);
        }
    }

    partial class GetTemporaryPasswordStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 84, 101, 109, 112, 111, 114, 97, 114, 121, 80, 97, 115, 115, 119, 111, 114, 100, 83, 116, 97, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetMeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 85, 115, 101, 114 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetUser)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class GetUserFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 85, 115, 101, 114, 70, 117, 108, 108, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetUserFullInfo)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class GetBasicGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 66, 97, 115, 105, 99, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_basic_group_id => new byte[] { 98, 97, 115, 105, 99, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_basic_group_id = JsonEncodedText.Encode(propName_basic_group_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBasicGroup)tlobj;
            writer.WriteNumber(encodedPropName_basic_group_id, obj.BasicGroupId);
        }
    }

    partial class GetBasicGroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 66, 97, 115, 105, 99, 71, 114, 111, 117, 112, 70, 117, 108, 108, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_basic_group_id => new byte[] { 98, 97, 115, 105, 99, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_basic_group_id = JsonEncodedText.Encode(propName_basic_group_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBasicGroupFullInfo)tlobj;
            writer.WriteNumber(encodedPropName_basic_group_id, obj.BasicGroupId);
        }
    }

    partial class GetSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetSupergroup)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class GetSupergroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 70, 117, 108, 108, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetSupergroupFullInfo)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class GetSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 101, 99, 114, 101, 116, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_secret_chat_id => new byte[] { 115, 101, 99, 114, 101, 116, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_secret_chat_id = JsonEncodedText.Encode(propName_secret_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetSecretChat)tlobj;
            writer.WriteNumber(encodedPropName_secret_chat_id, obj.SecretChatId);
        }
    }

    partial class GetChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class GetMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class GetMessageLocallyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 76, 111, 99, 97, 108, 108, 121 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageLocally)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class GetRepliedMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 82, 101, 112, 108, 105, 101, 100, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRepliedMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class GetChatPinnedMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 80, 105, 110, 110, 101, 100, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatPinnedMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class GetCallbackQueryMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 97, 108, 108, 98, 97, 99, 107, 81, 117, 101, 114, 121, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_callback_query_id => new byte[] { 99, 97, 108, 108, 98, 97, 99, 107, 95, 113, 117, 101, 114, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_callback_query_id = JsonEncodedText.Encode(propName_callback_query_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetCallbackQueryMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WritePropertyName(encodedPropName_callback_query_id);
            writer.WriteInt64String(obj.CallbackQueryId);
        }
    }

    partial class GetMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_ids => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_message_ids = JsonEncodedText.Encode(propName_message_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(encodedPropName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
        }
    }

    partial class GetMessageThreadConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 84, 104, 114, 101, 97, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageThread)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class GetMessageViewersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 86, 105, 101, 119, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageViewers)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class GetFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file_id => new byte[] { 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_file_id = JsonEncodedText.Encode(propName_file_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetFile)tlobj;
            writer.WriteNumber(encodedPropName_file_id, obj.FileId);
        }
    }

    partial class GetRemoteFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 82, 101, 109, 111, 116, 101, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_remote_file_id => new byte[] { 114, 101, 109, 111, 116, 101, 95, 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_remote_file_id = JsonEncodedText.Encode(propName_remote_file_id);
        private static ReadOnlySpan<byte> propName_file_type => new byte[] { 102, 105, 108, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_file_type = JsonEncodedText.Encode(propName_file_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRemoteFile)tlobj;
            writer.WriteString(encodedPropName_remote_file_id, obj.RemoteFileId);
            if (obj.FileType != null)
            {
                writer.WritePropertyName(encodedPropName_file_type);
                writer.WriteTLObjectValue(obj.FileType);
            }
        }
    }

    partial class LoadChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 97, 100, 67, 104, 97, 116, 115 }));
        private static ReadOnlySpan<byte> propName_chat_list => new byte[] { 99, 104, 97, 116, 95, 108, 105, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_chat_list = JsonEncodedText.Encode(propName_chat_list);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LoadChats)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(encodedPropName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class GetChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 115 }));
        private static ReadOnlySpan<byte> propName_chat_list => new byte[] { 99, 104, 97, 116, 95, 108, 105, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_chat_list = JsonEncodedText.Encode(propName_chat_list);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChats)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(encodedPropName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class SearchPublicChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 80, 117, 98, 108, 105, 99, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_username => new byte[] { 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_username = JsonEncodedText.Encode(propName_username);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchPublicChat)tlobj;
            writer.WriteString(encodedPropName_username, obj.Username);
        }
    }

    partial class SearchPublicChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 80, 117, 98, 108, 105, 99, 67, 104, 97, 116, 115 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchPublicChats)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
        }
    }

    partial class SearchChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 67, 104, 97, 116, 115 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChats)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class SearchChatsOnServerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 67, 104, 97, 116, 115, 79, 110, 83, 101, 114, 118, 101, 114 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChatsOnServer)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class SearchChatsNearbyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 67, 104, 97, 116, 115, 78, 101, 97, 114, 98, 121 }));
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChatsNearby)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
        }
    }

    partial class GetTopChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 84, 111, 112, 67, 104, 97, 116, 115 }));
        private static ReadOnlySpan<byte> propName_category => new byte[] { 99, 97, 116, 101, 103, 111, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_category = JsonEncodedText.Encode(propName_category);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetTopChats)tlobj;
            if (obj.Category != null)
            {
                writer.WritePropertyName(encodedPropName_category);
                writer.WriteTLObjectValue(obj.Category);
            }
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class RemoveTopChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 84, 111, 112, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_category => new byte[] { 99, 97, 116, 101, 103, 111, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_category = JsonEncodedText.Encode(propName_category);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveTopChat)tlobj;
            if (obj.Category != null)
            {
                writer.WritePropertyName(encodedPropName_category);
                writer.WriteTLObjectValue(obj.Category);
            }
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class AddRecentlyFoundChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 82, 101, 99, 101, 110, 116, 108, 121, 70, 111, 117, 110, 100, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddRecentlyFoundChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class RemoveRecentlyFoundChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 82, 101, 99, 101, 110, 116, 108, 121, 70, 111, 117, 110, 100, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveRecentlyFoundChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class ClearRecentlyFoundChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 108, 101, 97, 114, 82, 101, 99, 101, 110, 116, 108, 121, 70, 111, 117, 110, 100, 67, 104, 97, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetRecentlyOpenedChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 82, 101, 99, 101, 110, 116, 108, 121, 79, 112, 101, 110, 101, 100, 67, 104, 97, 116, 115 }));
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRecentlyOpenedChats)tlobj;
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class CheckChatUsernameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 67, 104, 97, 116, 85, 115, 101, 114, 110, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_username => new byte[] { 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_username = JsonEncodedText.Encode(propName_username);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckChatUsername)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_username, obj.Username);
        }
    }

    partial class GetCreatedPublicChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 114, 101, 97, 116, 101, 100, 80, 117, 98, 108, 105, 99, 67, 104, 97, 116, 115 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetCreatedPublicChats)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class CheckCreatedPublicChatsLimitConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 67, 114, 101, 97, 116, 101, 100, 80, 117, 98, 108, 105, 99, 67, 104, 97, 116, 115, 76, 105, 109, 105, 116 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckCreatedPublicChatsLimit)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class GetSuitableDiscussionChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 117, 105, 116, 97, 98, 108, 101, 68, 105, 115, 99, 117, 115, 115, 105, 111, 110, 67, 104, 97, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetInactiveSupergroupChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 73, 110, 97, 99, 116, 105, 118, 101, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 67, 104, 97, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetGroupsInCommonConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 71, 114, 111, 117, 112, 115, 73, 110, 67, 111, 109, 109, 111, 110 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_offset_chat_id => new byte[] { 111, 102, 102, 115, 101, 116, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_offset_chat_id = JsonEncodedText.Encode(propName_offset_chat_id);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetGroupsInCommon)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_offset_chat_id, obj.OffsetChatId);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class GetChatHistoryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 72, 105, 115, 116, 111, 114, 121 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_from_message_id => new byte[] { 102, 114, 111, 109, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_message_id = JsonEncodedText.Encode(propName_from_message_id);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        private static ReadOnlySpan<byte> propName_only_local => new byte[] { 111, 110, 108, 121, 95, 108, 111, 99, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_only_local = JsonEncodedText.Encode(propName_only_local);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatHistory)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_from_message_id, obj.FromMessageId);
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
            writer.WriteBoolean(encodedPropName_only_local, obj.OnlyLocal);
        }
    }

    partial class GetMessageThreadHistoryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 84, 104, 114, 101, 97, 100, 72, 105, 115, 116, 111, 114, 121 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_from_message_id => new byte[] { 102, 114, 111, 109, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_message_id = JsonEncodedText.Encode(propName_from_message_id);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageThreadHistory)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteNumber(encodedPropName_from_message_id, obj.FromMessageId);
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class DeleteChatHistoryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 67, 104, 97, 116, 72, 105, 115, 116, 111, 114, 121 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_remove_from_chat_list => new byte[] { 114, 101, 109, 111, 118, 101, 95, 102, 114, 111, 109, 95, 99, 104, 97, 116, 95, 108, 105, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_remove_from_chat_list = JsonEncodedText.Encode(propName_remove_from_chat_list);
        private static ReadOnlySpan<byte> propName_revoke => new byte[] { 114, 101, 118, 111, 107, 101 };
        private static readonly JsonEncodedText encodedPropName_revoke = JsonEncodedText.Encode(propName_revoke);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteChatHistory)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteBoolean(encodedPropName_remove_from_chat_list, obj.RemoveFromChatList);
            writer.WriteBoolean(encodedPropName_revoke, obj.Revoke);
        }
    }

    partial class DeleteChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class SearchChatMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_sender => new byte[] { 115, 101, 110, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sender = JsonEncodedText.Encode(propName_sender);
        private static ReadOnlySpan<byte> propName_from_message_id => new byte[] { 102, 114, 111, 109, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_message_id = JsonEncodedText.Encode(propName_from_message_id);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChatMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_query, obj.Query);
            if (obj.Sender != null)
            {
                writer.WritePropertyName(encodedPropName_sender);
                writer.WriteTLObjectValue(obj.Sender);
            }
            writer.WriteNumber(encodedPropName_from_message_id, obj.FromMessageId);
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
        }
    }

    partial class SearchMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_list => new byte[] { 99, 104, 97, 116, 95, 108, 105, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_chat_list = JsonEncodedText.Encode(propName_chat_list);
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_offset_date => new byte[] { 111, 102, 102, 115, 101, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_offset_date = JsonEncodedText.Encode(propName_offset_date);
        private static ReadOnlySpan<byte> propName_offset_chat_id => new byte[] { 111, 102, 102, 115, 101, 116, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_offset_chat_id = JsonEncodedText.Encode(propName_offset_chat_id);
        private static ReadOnlySpan<byte> propName_offset_message_id => new byte[] { 111, 102, 102, 115, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_offset_message_id = JsonEncodedText.Encode(propName_offset_message_id);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        private static ReadOnlySpan<byte> propName_min_date => new byte[] { 109, 105, 110, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_min_date = JsonEncodedText.Encode(propName_min_date);
        private static ReadOnlySpan<byte> propName_max_date => new byte[] { 109, 97, 120, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_max_date = JsonEncodedText.Encode(propName_max_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchMessages)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(encodedPropName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteNumber(encodedPropName_offset_date, obj.OffsetDate);
            writer.WriteNumber(encodedPropName_offset_chat_id, obj.OffsetChatId);
            writer.WriteNumber(encodedPropName_offset_message_id, obj.OffsetMessageId);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteNumber(encodedPropName_min_date, obj.MinDate);
            writer.WriteNumber(encodedPropName_max_date, obj.MaxDate);
        }
    }

    partial class SearchSecretMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 83, 101, 99, 114, 101, 116, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchSecretMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteString(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
        }
    }

    partial class SearchCallMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 67, 97, 108, 108, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_from_message_id => new byte[] { 102, 114, 111, 109, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_message_id = JsonEncodedText.Encode(propName_from_message_id);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        private static ReadOnlySpan<byte> propName_only_missed => new byte[] { 111, 110, 108, 121, 95, 109, 105, 115, 115, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_only_missed = JsonEncodedText.Encode(propName_only_missed);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchCallMessages)tlobj;
            writer.WriteNumber(encodedPropName_from_message_id, obj.FromMessageId);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
            writer.WriteBoolean(encodedPropName_only_missed, obj.OnlyMissed);
        }
    }

    partial class DeleteAllCallMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 65, 108, 108, 67, 97, 108, 108, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_revoke => new byte[] { 114, 101, 118, 111, 107, 101 };
        private static readonly JsonEncodedText encodedPropName_revoke = JsonEncodedText.Encode(propName_revoke);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteAllCallMessages)tlobj;
            writer.WriteBoolean(encodedPropName_revoke, obj.Revoke);
        }
    }

    partial class SearchChatRecentLocationMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 67, 104, 97, 116, 82, 101, 99, 101, 110, 116, 76, 111, 99, 97, 116, 105, 111, 110, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChatRecentLocationMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class GetActiveLiveLocationMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 99, 116, 105, 118, 101, 76, 105, 118, 101, 76, 111, 99, 97, 116, 105, 111, 110, 77, 101, 115, 115, 97, 103, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetChatMessageByDateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101, 66, 121, 68, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_date => new byte[] { 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_date = JsonEncodedText.Encode(propName_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatMessageByDate)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_date, obj.Date);
        }
    }

    partial class GetChatSparseMessagePositionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 83, 112, 97, 114, 115, 101, 77, 101, 115, 115, 97, 103, 101, 80, 111, 115, 105, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        private static ReadOnlySpan<byte> propName_from_message_id => new byte[] { 102, 114, 111, 109, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_message_id = JsonEncodedText.Encode(propName_from_message_id);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatSparseMessagePositions)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteNumber(encodedPropName_from_message_id, obj.FromMessageId);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class GetChatMessageCalendarConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101, 67, 97, 108, 101, 110, 100, 97, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        private static ReadOnlySpan<byte> propName_from_message_id => new byte[] { 102, 114, 111, 109, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_message_id = JsonEncodedText.Encode(propName_from_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatMessageCalendar)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteNumber(encodedPropName_from_message_id, obj.FromMessageId);
        }
    }

    partial class GetChatMessageCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101, 67, 111, 117, 110, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        private static ReadOnlySpan<byte> propName_return_local => new byte[] { 114, 101, 116, 117, 114, 110, 95, 108, 111, 99, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_return_local = JsonEncodedText.Encode(propName_return_local);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatMessageCount)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteBoolean(encodedPropName_return_local, obj.ReturnLocal);
        }
    }

    partial class GetChatScheduledMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 83, 99, 104, 101, 100, 117, 108, 101, 100, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatScheduledMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class GetMessagePublicForwardsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 80, 117, 98, 108, 105, 99, 70, 111, 114, 119, 97, 114, 100, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessagePublicForwards)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteString(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class GetChatSponsoredMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 83, 112, 111, 110, 115, 111, 114, 101, 100, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatSponsoredMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class ViewSponsoredMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 105, 101, 119, 83, 112, 111, 110, 115, 111, 114, 101, 100, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_sponsored_message_id => new byte[] { 115, 112, 111, 110, 115, 111, 114, 101, 100, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sponsored_message_id = JsonEncodedText.Encode(propName_sponsored_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ViewSponsoredMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_sponsored_message_id, obj.SponsoredMessageId);
        }
    }

    partial class RemoveNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_notification_group_id => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_notification_group_id = JsonEncodedText.Encode(propName_notification_group_id);
        private static ReadOnlySpan<byte> propName_notification_id => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_notification_id = JsonEncodedText.Encode(propName_notification_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveNotification)tlobj;
            writer.WriteNumber(encodedPropName_notification_group_id, obj.NotificationGroupId);
            writer.WriteNumber(encodedPropName_notification_id, obj.NotificationId);
        }
    }

    partial class RemoveNotificationGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_notification_group_id => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_notification_group_id = JsonEncodedText.Encode(propName_notification_group_id);
        private static ReadOnlySpan<byte> propName_max_notification_id => new byte[] { 109, 97, 120, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_max_notification_id = JsonEncodedText.Encode(propName_max_notification_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveNotificationGroup)tlobj;
            writer.WriteNumber(encodedPropName_notification_group_id, obj.NotificationGroupId);
            writer.WriteNumber(encodedPropName_max_notification_id, obj.MaxNotificationId);
        }
    }

    partial class GetMessageLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_media_timestamp => new byte[] { 109, 101, 100, 105, 97, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112 };
        private static readonly JsonEncodedText encodedPropName_media_timestamp = JsonEncodedText.Encode(propName_media_timestamp);
        private static ReadOnlySpan<byte> propName_for_album => new byte[] { 102, 111, 114, 95, 97, 108, 98, 117, 109 };
        private static readonly JsonEncodedText encodedPropName_for_album = JsonEncodedText.Encode(propName_for_album);
        private static ReadOnlySpan<byte> propName_for_comment => new byte[] { 102, 111, 114, 95, 99, 111, 109, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_for_comment = JsonEncodedText.Encode(propName_for_comment);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageLink)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteNumber(encodedPropName_media_timestamp, obj.MediaTimestamp);
            writer.WriteBoolean(encodedPropName_for_album, obj.ForAlbum);
            writer.WriteBoolean(encodedPropName_for_comment, obj.ForComment);
        }
    }

    partial class GetMessageEmbeddingCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 69, 109, 98, 101, 100, 100, 105, 110, 103, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_for_album => new byte[] { 102, 111, 114, 95, 97, 108, 98, 117, 109 };
        private static readonly JsonEncodedText encodedPropName_for_album = JsonEncodedText.Encode(propName_for_album);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageEmbeddingCode)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteBoolean(encodedPropName_for_album, obj.ForAlbum);
        }
    }

    partial class GetMessageLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 76, 105, 110, 107, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageLinkInfo)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
        }
    }

    partial class SendMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        private static ReadOnlySpan<byte> propName_reply_to_message_id => new byte[] { 114, 101, 112, 108, 121, 95, 116, 111, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_reply_to_message_id = JsonEncodedText.Encode(propName_reply_to_message_id);
        private static ReadOnlySpan<byte> propName_options => new byte[] { 111, 112, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_options = JsonEncodedText.Encode(propName_options);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
            writer.WriteNumber(encodedPropName_reply_to_message_id, obj.ReplyToMessageId);
            if (obj.Options != null)
            {
                writer.WritePropertyName(encodedPropName_options);
                writer.WriteTLObjectValue(obj.Options);
            }
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class SendMessageAlbumConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 77, 101, 115, 115, 97, 103, 101, 65, 108, 98, 117, 109 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        private static ReadOnlySpan<byte> propName_reply_to_message_id => new byte[] { 114, 101, 112, 108, 121, 95, 116, 111, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_reply_to_message_id = JsonEncodedText.Encode(propName_reply_to_message_id);
        private static ReadOnlySpan<byte> propName_options => new byte[] { 111, 112, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_options = JsonEncodedText.Encode(propName_options);
        private static ReadOnlySpan<byte> propName_input_message_contents => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_input_message_contents = JsonEncodedText.Encode(propName_input_message_contents);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendMessageAlbum)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
            writer.WriteNumber(encodedPropName_reply_to_message_id, obj.ReplyToMessageId);
            if (obj.Options != null)
            {
                writer.WritePropertyName(encodedPropName_options);
                writer.WriteTLObjectValue(obj.Options);
            }
            if (obj.InputMessageContents != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_contents);
                writer.WriteArray(obj.InputMessageContents);
            }
        }
    }

    partial class SendBotStartMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 66, 111, 116, 83, 116, 97, 114, 116, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_bot_user_id => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_bot_user_id = JsonEncodedText.Encode(propName_bot_user_id);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_parameter => new byte[] { 112, 97, 114, 97, 109, 101, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_parameter = JsonEncodedText.Encode(propName_parameter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendBotStartMessage)tlobj;
            writer.WriteNumber(encodedPropName_bot_user_id, obj.BotUserId);
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_parameter, obj.Parameter);
        }
    }

    partial class SendInlineQueryResultMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        private static ReadOnlySpan<byte> propName_reply_to_message_id => new byte[] { 114, 101, 112, 108, 121, 95, 116, 111, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_reply_to_message_id = JsonEncodedText.Encode(propName_reply_to_message_id);
        private static ReadOnlySpan<byte> propName_options => new byte[] { 111, 112, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_options = JsonEncodedText.Encode(propName_options);
        private static ReadOnlySpan<byte> propName_query_id => new byte[] { 113, 117, 101, 114, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_query_id = JsonEncodedText.Encode(propName_query_id);
        private static ReadOnlySpan<byte> propName_result_id => new byte[] { 114, 101, 115, 117, 108, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_result_id = JsonEncodedText.Encode(propName_result_id);
        private static ReadOnlySpan<byte> propName_hide_via_bot => new byte[] { 104, 105, 100, 101, 95, 118, 105, 97, 95, 98, 111, 116 };
        private static readonly JsonEncodedText encodedPropName_hide_via_bot = JsonEncodedText.Encode(propName_hide_via_bot);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendInlineQueryResultMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
            writer.WriteNumber(encodedPropName_reply_to_message_id, obj.ReplyToMessageId);
            if (obj.Options != null)
            {
                writer.WritePropertyName(encodedPropName_options);
                writer.WriteTLObjectValue(obj.Options);
            }
            writer.WritePropertyName(encodedPropName_query_id);
            writer.WriteInt64String(obj.QueryId);
            writer.WriteString(encodedPropName_result_id, obj.ResultId);
            writer.WriteBoolean(encodedPropName_hide_via_bot, obj.HideViaBot);
        }
    }

    partial class ForwardMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 111, 114, 119, 97, 114, 100, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_from_chat_id => new byte[] { 102, 114, 111, 109, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_chat_id = JsonEncodedText.Encode(propName_from_chat_id);
        private static ReadOnlySpan<byte> propName_message_ids => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_message_ids = JsonEncodedText.Encode(propName_message_ids);
        private static ReadOnlySpan<byte> propName_options => new byte[] { 111, 112, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_options = JsonEncodedText.Encode(propName_options);
        private static ReadOnlySpan<byte> propName_send_copy => new byte[] { 115, 101, 110, 100, 95, 99, 111, 112, 121 };
        private static readonly JsonEncodedText encodedPropName_send_copy = JsonEncodedText.Encode(propName_send_copy);
        private static ReadOnlySpan<byte> propName_remove_caption => new byte[] { 114, 101, 109, 111, 118, 101, 95, 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_remove_caption = JsonEncodedText.Encode(propName_remove_caption);
        private static ReadOnlySpan<byte> propName_only_preview => new byte[] { 111, 110, 108, 121, 95, 112, 114, 101, 118, 105, 101, 119 };
        private static readonly JsonEncodedText encodedPropName_only_preview = JsonEncodedText.Encode(propName_only_preview);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ForwardMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_from_chat_id, obj.FromChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(encodedPropName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
            if (obj.Options != null)
            {
                writer.WritePropertyName(encodedPropName_options);
                writer.WriteTLObjectValue(obj.Options);
            }
            writer.WriteBoolean(encodedPropName_send_copy, obj.SendCopy);
            writer.WriteBoolean(encodedPropName_remove_caption, obj.RemoveCaption);
            writer.WriteBoolean(encodedPropName_only_preview, obj.OnlyPreview);
        }
    }

    partial class ResendMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 110, 100, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_ids => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_message_ids = JsonEncodedText.Encode(propName_message_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ResendMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(encodedPropName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
        }
    }

    partial class SendChatScreenshotTakenNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 67, 104, 97, 116, 83, 99, 114, 101, 101, 110, 115, 104, 111, 116, 84, 97, 107, 101, 110, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendChatScreenshotTakenNotification)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class AddLocalMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 76, 111, 99, 97, 108, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_sender => new byte[] { 115, 101, 110, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sender = JsonEncodedText.Encode(propName_sender);
        private static ReadOnlySpan<byte> propName_reply_to_message_id => new byte[] { 114, 101, 112, 108, 121, 95, 116, 111, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_reply_to_message_id = JsonEncodedText.Encode(propName_reply_to_message_id);
        private static ReadOnlySpan<byte> propName_disable_notification => new byte[] { 100, 105, 115, 97, 98, 108, 101, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_disable_notification = JsonEncodedText.Encode(propName_disable_notification);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddLocalMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Sender != null)
            {
                writer.WritePropertyName(encodedPropName_sender);
                writer.WriteTLObjectValue(obj.Sender);
            }
            writer.WriteNumber(encodedPropName_reply_to_message_id, obj.ReplyToMessageId);
            writer.WriteBoolean(encodedPropName_disable_notification, obj.DisableNotification);
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class DeleteMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_ids => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_message_ids = JsonEncodedText.Encode(propName_message_ids);
        private static ReadOnlySpan<byte> propName_revoke => new byte[] { 114, 101, 118, 111, 107, 101 };
        private static readonly JsonEncodedText encodedPropName_revoke = JsonEncodedText.Encode(propName_revoke);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(encodedPropName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
            writer.WriteBoolean(encodedPropName_revoke, obj.Revoke);
        }
    }

    partial class DeleteChatMessagesFromUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101, 115, 70, 114, 111, 109, 85, 115, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteChatMessagesFromUser)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class DeleteChatMessagesByDateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101, 115, 66, 121, 68, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_min_date => new byte[] { 109, 105, 110, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_min_date = JsonEncodedText.Encode(propName_min_date);
        private static ReadOnlySpan<byte> propName_max_date => new byte[] { 109, 97, 120, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_max_date = JsonEncodedText.Encode(propName_max_date);
        private static ReadOnlySpan<byte> propName_revoke => new byte[] { 114, 101, 118, 111, 107, 101 };
        private static readonly JsonEncodedText encodedPropName_revoke = JsonEncodedText.Encode(propName_revoke);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteChatMessagesByDate)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_min_date, obj.MinDate);
            writer.WriteNumber(encodedPropName_max_date, obj.MaxDate);
            writer.WriteBoolean(encodedPropName_revoke, obj.Revoke);
        }
    }

    partial class EditMessageTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 77, 101, 115, 115, 97, 103, 101, 84, 101, 120, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageText)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class EditMessageLiveLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 77, 101, 115, 115, 97, 103, 101, 76, 105, 118, 101, 76, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_heading => new byte[] { 104, 101, 97, 100, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_heading = JsonEncodedText.Encode(propName_heading);
        private static ReadOnlySpan<byte> propName_proximity_alert_radius => new byte[] { 112, 114, 111, 120, 105, 109, 105, 116, 121, 95, 97, 108, 101, 114, 116, 95, 114, 97, 100, 105, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_proximity_alert_radius = JsonEncodedText.Encode(propName_proximity_alert_radius);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageLiveLocation)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(encodedPropName_heading, obj.Heading);
            writer.WriteNumber(encodedPropName_proximity_alert_radius, obj.ProximityAlertRadius);
        }
    }

    partial class EditMessageMediaConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 77, 101, 115, 115, 97, 103, 101, 77, 101, 100, 105, 97 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageMedia)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class EditMessageCaptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 77, 101, 115, 115, 97, 103, 101, 67, 97, 112, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageCaption)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class EditMessageReplyMarkupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 77, 101, 115, 115, 97, 103, 101, 82, 101, 112, 108, 121, 77, 97, 114, 107, 117, 112 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageReplyMarkup)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class EditInlineMessageTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 73, 110, 108, 105, 110, 101, 77, 101, 115, 115, 97, 103, 101, 84, 101, 120, 116 }));
        private static ReadOnlySpan<byte> propName_inline_message_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_message_id = JsonEncodedText.Encode(propName_inline_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditInlineMessageText)tlobj;
            writer.WriteString(encodedPropName_inline_message_id, obj.InlineMessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class EditInlineMessageLiveLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 73, 110, 108, 105, 110, 101, 77, 101, 115, 115, 97, 103, 101, 76, 105, 118, 101, 76, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_inline_message_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_message_id = JsonEncodedText.Encode(propName_inline_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_heading => new byte[] { 104, 101, 97, 100, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_heading = JsonEncodedText.Encode(propName_heading);
        private static ReadOnlySpan<byte> propName_proximity_alert_radius => new byte[] { 112, 114, 111, 120, 105, 109, 105, 116, 121, 95, 97, 108, 101, 114, 116, 95, 114, 97, 100, 105, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_proximity_alert_radius = JsonEncodedText.Encode(propName_proximity_alert_radius);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditInlineMessageLiveLocation)tlobj;
            writer.WriteString(encodedPropName_inline_message_id, obj.InlineMessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(encodedPropName_heading, obj.Heading);
            writer.WriteNumber(encodedPropName_proximity_alert_radius, obj.ProximityAlertRadius);
        }
    }

    partial class EditInlineMessageMediaConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 73, 110, 108, 105, 110, 101, 77, 101, 115, 115, 97, 103, 101, 77, 101, 100, 105, 97 }));
        private static ReadOnlySpan<byte> propName_inline_message_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_message_id = JsonEncodedText.Encode(propName_inline_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_input_message_content => new byte[] { 105, 110, 112, 117, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95, 99, 111, 110, 116, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_input_message_content = JsonEncodedText.Encode(propName_input_message_content);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditInlineMessageMedia)tlobj;
            writer.WriteString(encodedPropName_inline_message_id, obj.InlineMessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(encodedPropName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class EditInlineMessageCaptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 73, 110, 108, 105, 110, 101, 77, 101, 115, 115, 97, 103, 101, 67, 97, 112, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_inline_message_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_message_id = JsonEncodedText.Encode(propName_inline_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        private static ReadOnlySpan<byte> propName_caption => new byte[] { 99, 97, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_caption = JsonEncodedText.Encode(propName_caption);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditInlineMessageCaption)tlobj;
            writer.WriteString(encodedPropName_inline_message_id, obj.InlineMessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(encodedPropName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class EditInlineMessageReplyMarkupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 73, 110, 108, 105, 110, 101, 77, 101, 115, 115, 97, 103, 101, 82, 101, 112, 108, 121, 77, 97, 114, 107, 117, 112 }));
        private static ReadOnlySpan<byte> propName_inline_message_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_message_id = JsonEncodedText.Encode(propName_inline_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditInlineMessageReplyMarkup)tlobj;
            writer.WriteString(encodedPropName_inline_message_id, obj.InlineMessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class EditMessageSchedulingStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 77, 101, 115, 115, 97, 103, 101, 83, 99, 104, 101, 100, 117, 108, 105, 110, 103, 83, 116, 97, 116, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_scheduling_state => new byte[] { 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 95, 115, 116, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_scheduling_state = JsonEncodedText.Encode(propName_scheduling_state);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageSchedulingState)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.SchedulingState != null)
            {
                writer.WritePropertyName(encodedPropName_scheduling_state);
                writer.WriteTLObjectValue(obj.SchedulingState);
            }
        }
    }

    partial class GetTextEntitiesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 84, 101, 120, 116, 69, 110, 116, 105, 116, 105, 101, 115 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetTextEntities)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
        }
    }

    partial class ParseTextEntitiesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 114, 115, 101, 84, 101, 120, 116, 69, 110, 116, 105, 116, 105, 101, 115 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_parse_mode => new byte[] { 112, 97, 114, 115, 101, 95, 109, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_parse_mode = JsonEncodedText.Encode(propName_parse_mode);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ParseTextEntities)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
            if (obj.ParseMode != null)
            {
                writer.WritePropertyName(encodedPropName_parse_mode);
                writer.WriteTLObjectValue(obj.ParseMode);
            }
        }
    }

    partial class ParseMarkdownConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 97, 114, 115, 101, 77, 97, 114, 107, 100, 111, 119, 110 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ParseMarkdown)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class GetMarkdownTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 97, 114, 107, 100, 111, 119, 110, 84, 101, 120, 116 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMarkdownText)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class GetFileMimeTypeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 70, 105, 108, 101, 77, 105, 109, 101, 84, 121, 112, 101 }));
        private static ReadOnlySpan<byte> propName_file_name => new byte[] { 102, 105, 108, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_file_name = JsonEncodedText.Encode(propName_file_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetFileMimeType)tlobj;
            writer.WriteString(encodedPropName_file_name, obj.FileName);
        }
    }

    partial class GetFileExtensionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 70, 105, 108, 101, 69, 120, 116, 101, 110, 115, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_mime_type => new byte[] { 109, 105, 109, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_mime_type = JsonEncodedText.Encode(propName_mime_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetFileExtension)tlobj;
            writer.WriteString(encodedPropName_mime_type, obj.MimeType);
        }
    }

    partial class CleanFileNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 108, 101, 97, 110, 70, 105, 108, 101, 78, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_file_name => new byte[] { 102, 105, 108, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_file_name = JsonEncodedText.Encode(propName_file_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CleanFileName)tlobj;
            writer.WriteString(encodedPropName_file_name, obj.FileName);
        }
    }

    partial class GetLanguagePackStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 83, 116, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_language_pack_database_path => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 100, 97, 116, 97, 98, 97, 115, 101, 95, 112, 97, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_language_pack_database_path = JsonEncodedText.Encode(propName_language_pack_database_path);
        private static ReadOnlySpan<byte> propName_localization_target => new byte[] { 108, 111, 99, 97, 108, 105, 122, 97, 116, 105, 111, 110, 95, 116, 97, 114, 103, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_localization_target = JsonEncodedText.Encode(propName_localization_target);
        private static ReadOnlySpan<byte> propName_language_pack_id => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_language_pack_id = JsonEncodedText.Encode(propName_language_pack_id);
        private static ReadOnlySpan<byte> propName_key => new byte[] { 107, 101, 121 };
        private static readonly JsonEncodedText encodedPropName_key = JsonEncodedText.Encode(propName_key);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLanguagePackString)tlobj;
            writer.WriteString(encodedPropName_language_pack_database_path, obj.LanguagePackDatabasePath);
            writer.WriteString(encodedPropName_localization_target, obj.LocalizationTarget);
            writer.WriteString(encodedPropName_language_pack_id, obj.LanguagePackId);
            writer.WriteString(encodedPropName_key, obj.Key);
        }
    }

    partial class GetJsonValueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 74, 115, 111, 110, 86, 97, 108, 117, 101 }));
        private static ReadOnlySpan<byte> propName_json => new byte[] { 106, 115, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_json = JsonEncodedText.Encode(propName_json);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetJsonValue)tlobj;
            writer.WriteString(encodedPropName_json, obj.Json);
        }
    }

    partial class GetJsonStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 74, 115, 111, 110, 83, 116, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_json_value => new byte[] { 106, 115, 111, 110, 95, 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_json_value = JsonEncodedText.Encode(propName_json_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetJsonString)tlobj;
            if (obj.JsonValue != null)
            {
                writer.WritePropertyName(encodedPropName_json_value);
                writer.WriteTLObjectValue(obj.JsonValue);
            }
        }
    }

    partial class SetPollAnswerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 80, 111, 108, 108, 65, 110, 115, 119, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_option_ids => new byte[] { 111, 112, 116, 105, 111, 110, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_option_ids = JsonEncodedText.Encode(propName_option_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetPollAnswer)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.OptionIds != null)
            {
                writer.WritePropertyName(encodedPropName_option_ids);
                writer.WriteArray(obj.OptionIds);
            }
        }
    }

    partial class GetPollVotersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 111, 108, 108, 86, 111, 116, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_option_id => new byte[] { 111, 112, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_option_id = JsonEncodedText.Encode(propName_option_id);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPollVoters)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteNumber(encodedPropName_option_id, obj.OptionId);
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class StopPollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 111, 112, 80, 111, 108, 108 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_reply_markup => new byte[] { 114, 101, 112, 108, 121, 95, 109, 97, 114, 107, 117, 112 };
        private static readonly JsonEncodedText encodedPropName_reply_markup = JsonEncodedText.Encode(propName_reply_markup);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StopPoll)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(encodedPropName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class HideSuggestedActionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 104, 105, 100, 101, 83, 117, 103, 103, 101, 115, 116, 101, 100, 65, 99, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_action => new byte[] { 97, 99, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_action = JsonEncodedText.Encode(propName_action);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (HideSuggestedAction)tlobj;
            if (obj.Action != null)
            {
                writer.WritePropertyName(encodedPropName_action);
                writer.WriteTLObjectValue(obj.Action);
            }
        }
    }

    partial class GetLoginUrlInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 76, 111, 103, 105, 110, 85, 114, 108, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_button_id => new byte[] { 98, 117, 116, 116, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_button_id = JsonEncodedText.Encode(propName_button_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLoginUrlInfo)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteNumber(encodedPropName_button_id, obj.ButtonId);
        }
    }

    partial class GetLoginUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 76, 111, 103, 105, 110, 85, 114, 108 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_button_id => new byte[] { 98, 117, 116, 116, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_button_id = JsonEncodedText.Encode(propName_button_id);
        private static ReadOnlySpan<byte> propName_allow_write_access => new byte[] { 97, 108, 108, 111, 119, 95, 119, 114, 105, 116, 101, 95, 97, 99, 99, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_allow_write_access = JsonEncodedText.Encode(propName_allow_write_access);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLoginUrl)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteNumber(encodedPropName_button_id, obj.ButtonId);
            writer.WriteBoolean(encodedPropName_allow_write_access, obj.AllowWriteAccess);
        }
    }

    partial class GetInlineQueryResultsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121, 82, 101, 115, 117, 108, 116, 115 }));
        private static ReadOnlySpan<byte> propName_bot_user_id => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_bot_user_id = JsonEncodedText.Encode(propName_bot_user_id);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_user_location => new byte[] { 117, 115, 101, 114, 95, 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_user_location = JsonEncodedText.Encode(propName_user_location);
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetInlineQueryResults)tlobj;
            writer.WriteNumber(encodedPropName_bot_user_id, obj.BotUserId);
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.UserLocation != null)
            {
                writer.WritePropertyName(encodedPropName_user_location);
                writer.WriteTLObjectValue(obj.UserLocation);
            }
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteString(encodedPropName_offset, obj.Offset);
        }
    }

    partial class AnswerInlineQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 110, 115, 119, 101, 114, 73, 110, 108, 105, 110, 101, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_inline_query_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 113, 117, 101, 114, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_query_id = JsonEncodedText.Encode(propName_inline_query_id);
        private static ReadOnlySpan<byte> propName_is_personal => new byte[] { 105, 115, 95, 112, 101, 114, 115, 111, 110, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_is_personal = JsonEncodedText.Encode(propName_is_personal);
        private static ReadOnlySpan<byte> propName_results => new byte[] { 114, 101, 115, 117, 108, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_results = JsonEncodedText.Encode(propName_results);
        private static ReadOnlySpan<byte> propName_cache_time => new byte[] { 99, 97, 99, 104, 101, 95, 116, 105, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_cache_time = JsonEncodedText.Encode(propName_cache_time);
        private static ReadOnlySpan<byte> propName_next_offset => new byte[] { 110, 101, 120, 116, 95, 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_next_offset = JsonEncodedText.Encode(propName_next_offset);
        private static ReadOnlySpan<byte> propName_switch_pm_text => new byte[] { 115, 119, 105, 116, 99, 104, 95, 112, 109, 95, 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_switch_pm_text = JsonEncodedText.Encode(propName_switch_pm_text);
        private static ReadOnlySpan<byte> propName_switch_pm_parameter => new byte[] { 115, 119, 105, 116, 99, 104, 95, 112, 109, 95, 112, 97, 114, 97, 109, 101, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_switch_pm_parameter = JsonEncodedText.Encode(propName_switch_pm_parameter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnswerInlineQuery)tlobj;
            writer.WritePropertyName(encodedPropName_inline_query_id);
            writer.WriteInt64String(obj.InlineQueryId);
            writer.WriteBoolean(encodedPropName_is_personal, obj.IsPersonal);
            if (obj.Results != null)
            {
                writer.WritePropertyName(encodedPropName_results);
                writer.WriteArray(obj.Results);
            }
            writer.WriteNumber(encodedPropName_cache_time, obj.CacheTime);
            writer.WriteString(encodedPropName_next_offset, obj.NextOffset);
            writer.WriteString(encodedPropName_switch_pm_text, obj.SwitchPmText);
            writer.WriteString(encodedPropName_switch_pm_parameter, obj.SwitchPmParameter);
        }
    }

    partial class GetCallbackQueryAnswerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 97, 108, 108, 98, 97, 99, 107, 81, 117, 101, 114, 121, 65, 110, 115, 119, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_payload => new byte[] { 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_payload = JsonEncodedText.Encode(propName_payload);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetCallbackQueryAnswer)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.Payload != null)
            {
                writer.WritePropertyName(encodedPropName_payload);
                writer.WriteTLObjectValue(obj.Payload);
            }
        }
    }

    partial class AnswerCallbackQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 110, 115, 119, 101, 114, 67, 97, 108, 108, 98, 97, 99, 107, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_callback_query_id => new byte[] { 99, 97, 108, 108, 98, 97, 99, 107, 95, 113, 117, 101, 114, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_callback_query_id = JsonEncodedText.Encode(propName_callback_query_id);
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_show_alert => new byte[] { 115, 104, 111, 119, 95, 97, 108, 101, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_show_alert = JsonEncodedText.Encode(propName_show_alert);
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_cache_time => new byte[] { 99, 97, 99, 104, 101, 95, 116, 105, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_cache_time = JsonEncodedText.Encode(propName_cache_time);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnswerCallbackQuery)tlobj;
            writer.WritePropertyName(encodedPropName_callback_query_id);
            writer.WriteInt64String(obj.CallbackQueryId);
            writer.WriteString(encodedPropName_text, obj.Text);
            writer.WriteBoolean(encodedPropName_show_alert, obj.ShowAlert);
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteNumber(encodedPropName_cache_time, obj.CacheTime);
        }
    }

    partial class AnswerShippingQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 110, 115, 119, 101, 114, 83, 104, 105, 112, 112, 105, 110, 103, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_shipping_query_id => new byte[] { 115, 104, 105, 112, 112, 105, 110, 103, 95, 113, 117, 101, 114, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_shipping_query_id = JsonEncodedText.Encode(propName_shipping_query_id);
        private static ReadOnlySpan<byte> propName_shipping_options => new byte[] { 115, 104, 105, 112, 112, 105, 110, 103, 95, 111, 112, 116, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_shipping_options = JsonEncodedText.Encode(propName_shipping_options);
        private static ReadOnlySpan<byte> propName_error_message => new byte[] { 101, 114, 114, 111, 114, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_error_message = JsonEncodedText.Encode(propName_error_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnswerShippingQuery)tlobj;
            writer.WritePropertyName(encodedPropName_shipping_query_id);
            writer.WriteInt64String(obj.ShippingQueryId);
            if (obj.ShippingOptions != null)
            {
                writer.WritePropertyName(encodedPropName_shipping_options);
                writer.WriteArray(obj.ShippingOptions);
            }
            writer.WriteString(encodedPropName_error_message, obj.ErrorMessage);
        }
    }

    partial class AnswerPreCheckoutQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 110, 115, 119, 101, 114, 80, 114, 101, 67, 104, 101, 99, 107, 111, 117, 116, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_pre_checkout_query_id => new byte[] { 112, 114, 101, 95, 99, 104, 101, 99, 107, 111, 117, 116, 95, 113, 117, 101, 114, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_pre_checkout_query_id = JsonEncodedText.Encode(propName_pre_checkout_query_id);
        private static ReadOnlySpan<byte> propName_error_message => new byte[] { 101, 114, 114, 111, 114, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_error_message = JsonEncodedText.Encode(propName_error_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnswerPreCheckoutQuery)tlobj;
            writer.WritePropertyName(encodedPropName_pre_checkout_query_id);
            writer.WriteInt64String(obj.PreCheckoutQueryId);
            writer.WriteString(encodedPropName_error_message, obj.ErrorMessage);
        }
    }

    partial class SetGameScoreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 71, 97, 109, 101, 83, 99, 111, 114, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_edit_message => new byte[] { 101, 100, 105, 116, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_edit_message = JsonEncodedText.Encode(propName_edit_message);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_score => new byte[] { 115, 99, 111, 114, 101 };
        private static readonly JsonEncodedText encodedPropName_score = JsonEncodedText.Encode(propName_score);
        private static ReadOnlySpan<byte> propName_force => new byte[] { 102, 111, 114, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_force = JsonEncodedText.Encode(propName_force);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetGameScore)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteBoolean(encodedPropName_edit_message, obj.EditMessage);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_score, obj.Score);
            writer.WriteBoolean(encodedPropName_force, obj.Force);
        }
    }

    partial class SetInlineGameScoreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 73, 110, 108, 105, 110, 101, 71, 97, 109, 101, 83, 99, 111, 114, 101 }));
        private static ReadOnlySpan<byte> propName_inline_message_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_message_id = JsonEncodedText.Encode(propName_inline_message_id);
        private static ReadOnlySpan<byte> propName_edit_message => new byte[] { 101, 100, 105, 116, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_edit_message = JsonEncodedText.Encode(propName_edit_message);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_score => new byte[] { 115, 99, 111, 114, 101 };
        private static readonly JsonEncodedText encodedPropName_score = JsonEncodedText.Encode(propName_score);
        private static ReadOnlySpan<byte> propName_force => new byte[] { 102, 111, 114, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_force = JsonEncodedText.Encode(propName_force);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetInlineGameScore)tlobj;
            writer.WriteString(encodedPropName_inline_message_id, obj.InlineMessageId);
            writer.WriteBoolean(encodedPropName_edit_message, obj.EditMessage);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_score, obj.Score);
            writer.WriteBoolean(encodedPropName_force, obj.Force);
        }
    }

    partial class GetGameHighScoresConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 71, 97, 109, 101, 72, 105, 103, 104, 83, 99, 111, 114, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetGameHighScores)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class GetInlineGameHighScoresConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 73, 110, 108, 105, 110, 101, 71, 97, 109, 101, 72, 105, 103, 104, 83, 99, 111, 114, 101, 115 }));
        private static ReadOnlySpan<byte> propName_inline_message_id => new byte[] { 105, 110, 108, 105, 110, 101, 95, 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_inline_message_id = JsonEncodedText.Encode(propName_inline_message_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetInlineGameHighScores)tlobj;
            writer.WriteString(encodedPropName_inline_message_id, obj.InlineMessageId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class DeleteChatReplyMarkupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 67, 104, 97, 116, 82, 101, 112, 108, 121, 77, 97, 114, 107, 117, 112 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteChatReplyMarkup)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class SendChatActionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 67, 104, 97, 116, 65, 99, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        private static ReadOnlySpan<byte> propName_action => new byte[] { 97, 99, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_action = JsonEncodedText.Encode(propName_action);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendChatAction)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
            if (obj.Action != null)
            {
                writer.WritePropertyName(encodedPropName_action);
                writer.WriteTLObjectValue(obj.Action);
            }
        }
    }

    partial class OpenChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 111, 112, 101, 110, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OpenChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class CloseChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 108, 111, 115, 101, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CloseChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class ViewMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 105, 101, 119, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        private static ReadOnlySpan<byte> propName_message_ids => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_message_ids = JsonEncodedText.Encode(propName_message_ids);
        private static ReadOnlySpan<byte> propName_force_read => new byte[] { 102, 111, 114, 99, 101, 95, 114, 101, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_force_read = JsonEncodedText.Encode(propName_force_read);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ViewMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(encodedPropName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
            writer.WriteBoolean(encodedPropName_force_read, obj.ForceRead);
        }
    }

    partial class OpenMessageContentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 111, 112, 101, 110, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 116, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OpenMessageContent)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class ClickAnimatedEmojiMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 108, 105, 99, 107, 65, 110, 105, 109, 97, 116, 101, 100, 69, 109, 111, 106, 105, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ClickAnimatedEmojiMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class GetInternalLinkTypeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 73, 110, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 84, 121, 112, 101 }));
        private static ReadOnlySpan<byte> propName_link => new byte[] { 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_link = JsonEncodedText.Encode(propName_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetInternalLinkType)tlobj;
            writer.WriteString(encodedPropName_link, obj.Link);
        }
    }

    partial class GetExternalLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 69, 120, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_link => new byte[] { 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_link = JsonEncodedText.Encode(propName_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetExternalLinkInfo)tlobj;
            writer.WriteString(encodedPropName_link, obj.Link);
        }
    }

    partial class GetExternalLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 69, 120, 116, 101, 114, 110, 97, 108, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_link => new byte[] { 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_link = JsonEncodedText.Encode(propName_link);
        private static ReadOnlySpan<byte> propName_allow_write_access => new byte[] { 97, 108, 108, 111, 119, 95, 119, 114, 105, 116, 101, 95, 97, 99, 99, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_allow_write_access = JsonEncodedText.Encode(propName_allow_write_access);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetExternalLink)tlobj;
            writer.WriteString(encodedPropName_link, obj.Link);
            writer.WriteBoolean(encodedPropName_allow_write_access, obj.AllowWriteAccess);
        }
    }

    partial class ReadAllChatMentionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 97, 100, 65, 108, 108, 67, 104, 97, 116, 77, 101, 110, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReadAllChatMentions)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class CreatePrivateChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 80, 114, 105, 118, 97, 116, 101, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_force => new byte[] { 102, 111, 114, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_force = JsonEncodedText.Encode(propName_force);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreatePrivateChat)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteBoolean(encodedPropName_force, obj.Force);
        }
    }

    partial class CreateBasicGroupChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 66, 97, 115, 105, 99, 71, 114, 111, 117, 112, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_basic_group_id => new byte[] { 98, 97, 115, 105, 99, 95, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_basic_group_id = JsonEncodedText.Encode(propName_basic_group_id);
        private static ReadOnlySpan<byte> propName_force => new byte[] { 102, 111, 114, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_force = JsonEncodedText.Encode(propName_force);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateBasicGroupChat)tlobj;
            writer.WriteNumber(encodedPropName_basic_group_id, obj.BasicGroupId);
            writer.WriteBoolean(encodedPropName_force, obj.Force);
        }
    }

    partial class CreateSupergroupChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        private static ReadOnlySpan<byte> propName_force => new byte[] { 102, 111, 114, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_force = JsonEncodedText.Encode(propName_force);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateSupergroupChat)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
            writer.WriteBoolean(encodedPropName_force, obj.Force);
        }
    }

    partial class CreateSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 83, 101, 99, 114, 101, 116, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_secret_chat_id => new byte[] { 115, 101, 99, 114, 101, 116, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_secret_chat_id = JsonEncodedText.Encode(propName_secret_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateSecretChat)tlobj;
            writer.WriteNumber(encodedPropName_secret_chat_id, obj.SecretChatId);
        }
    }

    partial class CreateNewBasicGroupChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 78, 101, 119, 66, 97, 115, 105, 99, 71, 114, 111, 117, 112, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateNewBasicGroupChat)tlobj;
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class CreateNewSupergroupChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 78, 101, 119, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_is_channel => new byte[] { 105, 115, 95, 99, 104, 97, 110, 110, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_is_channel = JsonEncodedText.Encode(propName_is_channel);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_for_import => new byte[] { 102, 111, 114, 95, 105, 109, 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_for_import = JsonEncodedText.Encode(propName_for_import);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateNewSupergroupChat)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteBoolean(encodedPropName_is_channel, obj.IsChannel);
            writer.WriteString(encodedPropName_description, obj.Description);
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteBoolean(encodedPropName_for_import, obj.ForImport);
        }
    }

    partial class CreateNewSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 78, 101, 119, 83, 101, 99, 114, 101, 116, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateNewSecretChat)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class UpgradeBasicGroupChatToSupergroupChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 103, 114, 97, 100, 101, 66, 97, 115, 105, 99, 71, 114, 111, 117, 112, 67, 104, 97, 116, 84, 111, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpgradeBasicGroupChatToSupergroupChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class GetChatListsToAddChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 76, 105, 115, 116, 115, 84, 111, 65, 100, 100, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatListsToAddChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class AddChatToListConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 67, 104, 97, 116, 84, 111, 76, 105, 115, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_chat_list => new byte[] { 99, 104, 97, 116, 95, 108, 105, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_chat_list = JsonEncodedText.Encode(propName_chat_list);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddChatToList)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(encodedPropName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
        }
    }

    partial class GetChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 70, 105, 108, 116, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_filter_id => new byte[] { 99, 104, 97, 116, 95, 102, 105, 108, 116, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_filter_id = JsonEncodedText.Encode(propName_chat_filter_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatFilter)tlobj;
            writer.WriteNumber(encodedPropName_chat_filter_id, obj.ChatFilterId);
        }
    }

    partial class CreateChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 67, 104, 97, 116, 70, 105, 108, 116, 101, 114 }));
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateChatFilter)tlobj;
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
        }
    }

    partial class EditChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 67, 104, 97, 116, 70, 105, 108, 116, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_filter_id => new byte[] { 99, 104, 97, 116, 95, 102, 105, 108, 116, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_filter_id = JsonEncodedText.Encode(propName_chat_filter_id);
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditChatFilter)tlobj;
            writer.WriteNumber(encodedPropName_chat_filter_id, obj.ChatFilterId);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
        }
    }

    partial class DeleteChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 67, 104, 97, 116, 70, 105, 108, 116, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_filter_id => new byte[] { 99, 104, 97, 116, 95, 102, 105, 108, 116, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_filter_id = JsonEncodedText.Encode(propName_chat_filter_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteChatFilter)tlobj;
            writer.WriteNumber(encodedPropName_chat_filter_id, obj.ChatFilterId);
        }
    }

    partial class ReorderChatFiltersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 111, 114, 100, 101, 114, 67, 104, 97, 116, 70, 105, 108, 116, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_filter_ids => new byte[] { 99, 104, 97, 116, 95, 102, 105, 108, 116, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_chat_filter_ids = JsonEncodedText.Encode(propName_chat_filter_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReorderChatFilters)tlobj;
            if (obj.ChatFilterIds != null)
            {
                writer.WritePropertyName(encodedPropName_chat_filter_ids);
                writer.WriteArray(obj.ChatFilterIds);
            }
        }
    }

    partial class GetRecommendedChatFiltersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 82, 101, 99, 111, 109, 109, 101, 110, 100, 101, 100, 67, 104, 97, 116, 70, 105, 108, 116, 101, 114, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetChatFilterDefaultIconNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 70, 105, 108, 116, 101, 114, 68, 101, 102, 97, 117, 108, 116, 73, 99, 111, 110, 78, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatFilterDefaultIconName)tlobj;
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
        }
    }

    partial class SetChatTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 84, 105, 116, 108, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatTitle)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class SetChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatPhoto)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
        }
    }

    partial class SetChatMessageTtlSettingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101, 84, 116, 108, 83, 101, 116, 116, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_ttl => new byte[] { 116, 116, 108 };
        private static readonly JsonEncodedText encodedPropName_ttl = JsonEncodedText.Encode(propName_ttl);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatMessageTtlSetting)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_ttl, obj.Ttl);
        }
    }

    partial class SetChatPermissionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_permissions => new byte[] { 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115 };
        private static readonly JsonEncodedText encodedPropName_permissions = JsonEncodedText.Encode(propName_permissions);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatPermissions)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Permissions != null)
            {
                writer.WritePropertyName(encodedPropName_permissions);
                writer.WriteTLObjectValue(obj.Permissions);
            }
        }
    }

    partial class SetChatThemeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 84, 104, 101, 109, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_theme_name => new byte[] { 116, 104, 101, 109, 101, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_theme_name = JsonEncodedText.Encode(propName_theme_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatTheme)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_theme_name, obj.ThemeName);
        }
    }

    partial class SetChatDraftMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 68, 114, 97, 102, 116, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_thread_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 116, 104, 114, 101, 97, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_thread_id = JsonEncodedText.Encode(propName_message_thread_id);
        private static ReadOnlySpan<byte> propName_draft_message => new byte[] { 100, 114, 97, 102, 116, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_draft_message = JsonEncodedText.Encode(propName_draft_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatDraftMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_thread_id, obj.MessageThreadId);
            if (obj.DraftMessage != null)
            {
                writer.WritePropertyName(encodedPropName_draft_message);
                writer.WriteTLObjectValue(obj.DraftMessage);
            }
        }
    }

    partial class SetChatNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_notification_settings => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_notification_settings = JsonEncodedText.Encode(propName_notification_settings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatNotificationSettings)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.NotificationSettings != null)
            {
                writer.WritePropertyName(encodedPropName_notification_settings);
                writer.WriteTLObjectValue(obj.NotificationSettings);
            }
        }
    }

    partial class ToggleChatIsMarkedAsUnreadConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 67, 104, 97, 116, 73, 115, 77, 97, 114, 107, 101, 100, 65, 115, 85, 110, 114, 101, 97, 100 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_is_marked_as_unread => new byte[] { 105, 115, 95, 109, 97, 114, 107, 101, 100, 95, 97, 115, 95, 117, 110, 114, 101, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_is_marked_as_unread = JsonEncodedText.Encode(propName_is_marked_as_unread);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleChatIsMarkedAsUnread)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteBoolean(encodedPropName_is_marked_as_unread, obj.IsMarkedAsUnread);
        }
    }

    partial class ToggleChatDefaultDisableNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 67, 104, 97, 116, 68, 101, 102, 97, 117, 108, 116, 68, 105, 115, 97, 98, 108, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_default_disable_notification => new byte[] { 100, 101, 102, 97, 117, 108, 116, 95, 100, 105, 115, 97, 98, 108, 101, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_default_disable_notification = JsonEncodedText.Encode(propName_default_disable_notification);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleChatDefaultDisableNotification)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteBoolean(encodedPropName_default_disable_notification, obj.DefaultDisableNotification);
        }
    }

    partial class SetChatClientDataConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 67, 108, 105, 101, 110, 116, 68, 97, 116, 97 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_client_data => new byte[] { 99, 108, 105, 101, 110, 116, 95, 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_client_data = JsonEncodedText.Encode(propName_client_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatClientData)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_client_data, obj.ClientData);
        }
    }

    partial class SetChatDescriptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_description => new byte[] { 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_description = JsonEncodedText.Encode(propName_description);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatDescription)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_description, obj.Description);
        }
    }

    partial class SetChatDiscussionGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 68, 105, 115, 99, 117, 115, 115, 105, 111, 110, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_discussion_chat_id => new byte[] { 100, 105, 115, 99, 117, 115, 115, 105, 111, 110, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_discussion_chat_id = JsonEncodedText.Encode(propName_discussion_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatDiscussionGroup)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_discussion_chat_id, obj.DiscussionChatId);
        }
    }

    partial class SetChatLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 76, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatLocation)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
        }
    }

    partial class SetChatSlowModeDelayConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 83, 108, 111, 119, 77, 111, 100, 101, 68, 101, 108, 97, 121 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_slow_mode_delay => new byte[] { 115, 108, 111, 119, 95, 109, 111, 100, 101, 95, 100, 101, 108, 97, 121 };
        private static readonly JsonEncodedText encodedPropName_slow_mode_delay = JsonEncodedText.Encode(propName_slow_mode_delay);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatSlowModeDelay)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_slow_mode_delay, obj.SlowModeDelay);
        }
    }

    partial class PinChatMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 105, 110, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_disable_notification => new byte[] { 100, 105, 115, 97, 98, 108, 101, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_disable_notification = JsonEncodedText.Encode(propName_disable_notification);
        private static ReadOnlySpan<byte> propName_only_for_self => new byte[] { 111, 110, 108, 121, 95, 102, 111, 114, 95, 115, 101, 108, 102 };
        private static readonly JsonEncodedText encodedPropName_only_for_self = JsonEncodedText.Encode(propName_only_for_self);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PinChatMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteBoolean(encodedPropName_disable_notification, obj.DisableNotification);
            writer.WriteBoolean(encodedPropName_only_for_self, obj.OnlyForSelf);
        }
    }

    partial class UnpinChatMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 110, 112, 105, 110, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UnpinChatMessage)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class UnpinAllChatMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 110, 112, 105, 110, 65, 108, 108, 67, 104, 97, 116, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UnpinAllChatMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class JoinChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 106, 111, 105, 110, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JoinChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class LeaveChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 101, 97, 118, 101, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LeaveChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class AddChatMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 67, 104, 97, 116, 77, 101, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_forward_limit => new byte[] { 102, 111, 114, 119, 97, 114, 100, 95, 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_forward_limit = JsonEncodedText.Encode(propName_forward_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddChatMember)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_forward_limit, obj.ForwardLimit);
        }
    }

    partial class AddChatMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 67, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddChatMembers)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class SetChatMemberStatusConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 104, 97, 116, 77, 101, 109, 98, 101, 114, 83, 116, 97, 116, 117, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_member_id => new byte[] { 109, 101, 109, 98, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_member_id = JsonEncodedText.Encode(propName_member_id);
        private static ReadOnlySpan<byte> propName_status => new byte[] { 115, 116, 97, 116, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_status = JsonEncodedText.Encode(propName_status);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatMemberStatus)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.MemberId != null)
            {
                writer.WritePropertyName(encodedPropName_member_id);
                writer.WriteTLObjectValue(obj.MemberId);
            }
            if (obj.Status != null)
            {
                writer.WritePropertyName(encodedPropName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
        }
    }

    partial class BanChatMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 97, 110, 67, 104, 97, 116, 77, 101, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_member_id => new byte[] { 109, 101, 109, 98, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_member_id = JsonEncodedText.Encode(propName_member_id);
        private static ReadOnlySpan<byte> propName_banned_until_date => new byte[] { 98, 97, 110, 110, 101, 100, 95, 117, 110, 116, 105, 108, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_banned_until_date = JsonEncodedText.Encode(propName_banned_until_date);
        private static ReadOnlySpan<byte> propName_revoke_messages => new byte[] { 114, 101, 118, 111, 107, 101, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_revoke_messages = JsonEncodedText.Encode(propName_revoke_messages);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BanChatMember)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.MemberId != null)
            {
                writer.WritePropertyName(encodedPropName_member_id);
                writer.WriteTLObjectValue(obj.MemberId);
            }
            writer.WriteNumber(encodedPropName_banned_until_date, obj.BannedUntilDate);
            writer.WriteBoolean(encodedPropName_revoke_messages, obj.RevokeMessages);
        }
    }

    partial class CanTransferOwnershipConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 110, 84, 114, 97, 110, 115, 102, 101, 114, 79, 119, 110, 101, 114, 115, 104, 105, 112 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TransferChatOwnershipConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 114, 97, 110, 115, 102, 101, 114, 67, 104, 97, 116, 79, 119, 110, 101, 114, 115, 104, 105, 112 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TransferChatOwnership)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteString(encodedPropName_password, obj.Password);
        }
    }

    partial class GetChatMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 77, 101, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_member_id => new byte[] { 109, 101, 109, 98, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_member_id = JsonEncodedText.Encode(propName_member_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatMember)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.MemberId != null)
            {
                writer.WritePropertyName(encodedPropName_member_id);
                writer.WriteTLObjectValue(obj.MemberId);
            }
        }
    }

    partial class SearchChatMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 67, 104, 97, 116, 77, 101, 109, 98, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChatMembers)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
        }
    }

    partial class GetChatAdministratorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 65, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatAdministrators)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class ClearAllDraftMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 108, 101, 97, 114, 65, 108, 108, 68, 114, 97, 102, 116, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_exclude_secret_chats => new byte[] { 101, 120, 99, 108, 117, 100, 101, 95, 115, 101, 99, 114, 101, 116, 95, 99, 104, 97, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_exclude_secret_chats = JsonEncodedText.Encode(propName_exclude_secret_chats);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ClearAllDraftMessages)tlobj;
            writer.WriteBoolean(encodedPropName_exclude_secret_chats, obj.ExcludeSecretChats);
        }
    }

    partial class GetChatNotificationSettingsExceptionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115 }));
        private static ReadOnlySpan<byte> propName_scope => new byte[] { 115, 99, 111, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_scope = JsonEncodedText.Encode(propName_scope);
        private static ReadOnlySpan<byte> propName_compare_sound => new byte[] { 99, 111, 109, 112, 97, 114, 101, 95, 115, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_compare_sound = JsonEncodedText.Encode(propName_compare_sound);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatNotificationSettingsExceptions)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(encodedPropName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
            writer.WriteBoolean(encodedPropName_compare_sound, obj.CompareSound);
        }
    }

    partial class GetScopeNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 99, 111, 112, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_scope => new byte[] { 115, 99, 111, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_scope = JsonEncodedText.Encode(propName_scope);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetScopeNotificationSettings)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(encodedPropName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
        }
    }

    partial class SetScopeNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 83, 99, 111, 112, 101, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_scope => new byte[] { 115, 99, 111, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_scope = JsonEncodedText.Encode(propName_scope);
        private static ReadOnlySpan<byte> propName_notification_settings => new byte[] { 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 95, 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_notification_settings = JsonEncodedText.Encode(propName_notification_settings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetScopeNotificationSettings)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(encodedPropName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
            if (obj.NotificationSettings != null)
            {
                writer.WritePropertyName(encodedPropName_notification_settings);
                writer.WriteTLObjectValue(obj.NotificationSettings);
            }
        }
    }

    partial class ResetAllNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 116, 65, 108, 108, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 83, 101, 116, 116, 105, 110, 103, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ToggleChatIsPinnedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 67, 104, 97, 116, 73, 115, 80, 105, 110, 110, 101, 100 }));
        private static ReadOnlySpan<byte> propName_chat_list => new byte[] { 99, 104, 97, 116, 95, 108, 105, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_chat_list = JsonEncodedText.Encode(propName_chat_list);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_is_pinned => new byte[] { 105, 115, 95, 112, 105, 110, 110, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_pinned = JsonEncodedText.Encode(propName_is_pinned);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleChatIsPinned)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(encodedPropName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteBoolean(encodedPropName_is_pinned, obj.IsPinned);
        }
    }

    partial class SetPinnedChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 80, 105, 110, 110, 101, 100, 67, 104, 97, 116, 115 }));
        private static ReadOnlySpan<byte> propName_chat_list => new byte[] { 99, 104, 97, 116, 95, 108, 105, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_chat_list = JsonEncodedText.Encode(propName_chat_list);
        private static ReadOnlySpan<byte> propName_chat_ids => new byte[] { 99, 104, 97, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_chat_ids = JsonEncodedText.Encode(propName_chat_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetPinnedChats)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(encodedPropName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            if (obj.ChatIds != null)
            {
                writer.WritePropertyName(encodedPropName_chat_ids);
                writer.WriteArray(obj.ChatIds);
            }
        }
    }

    partial class DownloadFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 111, 119, 110, 108, 111, 97, 100, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file_id => new byte[] { 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_file_id = JsonEncodedText.Encode(propName_file_id);
        private static ReadOnlySpan<byte> propName_priority => new byte[] { 112, 114, 105, 111, 114, 105, 116, 121 };
        private static readonly JsonEncodedText encodedPropName_priority = JsonEncodedText.Encode(propName_priority);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        private static ReadOnlySpan<byte> propName_synchronous => new byte[] { 115, 121, 110, 99, 104, 114, 111, 110, 111, 117, 115 };
        private static readonly JsonEncodedText encodedPropName_synchronous = JsonEncodedText.Encode(propName_synchronous);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DownloadFile)tlobj;
            writer.WriteNumber(encodedPropName_file_id, obj.FileId);
            writer.WriteNumber(encodedPropName_priority, obj.Priority);
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
            writer.WriteBoolean(encodedPropName_synchronous, obj.Synchronous);
        }
    }

    partial class GetFileDownloadedPrefixSizeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 70, 105, 108, 101, 68, 111, 119, 110, 108, 111, 97, 100, 101, 100, 80, 114, 101, 102, 105, 120, 83, 105, 122, 101 }));
        private static ReadOnlySpan<byte> propName_file_id => new byte[] { 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_file_id = JsonEncodedText.Encode(propName_file_id);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetFileDownloadedPrefixSize)tlobj;
            writer.WriteNumber(encodedPropName_file_id, obj.FileId);
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
        }
    }

    partial class CancelDownloadFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 110, 99, 101, 108, 68, 111, 119, 110, 108, 111, 97, 100, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file_id => new byte[] { 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_file_id = JsonEncodedText.Encode(propName_file_id);
        private static ReadOnlySpan<byte> propName_only_if_pending => new byte[] { 111, 110, 108, 121, 95, 105, 102, 95, 112, 101, 110, 100, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_only_if_pending = JsonEncodedText.Encode(propName_only_if_pending);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CancelDownloadFile)tlobj;
            writer.WriteNumber(encodedPropName_file_id, obj.FileId);
            writer.WriteBoolean(encodedPropName_only_if_pending, obj.OnlyIfPending);
        }
    }

    partial class GetSuggestedFileNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 117, 103, 103, 101, 115, 116, 101, 100, 70, 105, 108, 101, 78, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_file_id => new byte[] { 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_file_id = JsonEncodedText.Encode(propName_file_id);
        private static ReadOnlySpan<byte> propName_directory => new byte[] { 100, 105, 114, 101, 99, 116, 111, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_directory = JsonEncodedText.Encode(propName_directory);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetSuggestedFileName)tlobj;
            writer.WriteNumber(encodedPropName_file_id, obj.FileId);
            writer.WriteString(encodedPropName_directory, obj.Directory);
        }
    }

    partial class UploadFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 108, 111, 97, 100, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file => new byte[] { 102, 105, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_file = JsonEncodedText.Encode(propName_file);
        private static ReadOnlySpan<byte> propName_file_type => new byte[] { 102, 105, 108, 101, 95, 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_file_type = JsonEncodedText.Encode(propName_file_type);
        private static ReadOnlySpan<byte> propName_priority => new byte[] { 112, 114, 105, 111, 114, 105, 116, 121 };
        private static readonly JsonEncodedText encodedPropName_priority = JsonEncodedText.Encode(propName_priority);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UploadFile)tlobj;
            if (obj.File != null)
            {
                writer.WritePropertyName(encodedPropName_file);
                writer.WriteTLObjectValue(obj.File);
            }
            if (obj.FileType != null)
            {
                writer.WritePropertyName(encodedPropName_file_type);
                writer.WriteTLObjectValue(obj.FileType);
            }
            writer.WriteNumber(encodedPropName_priority, obj.Priority);
        }
    }

    partial class CancelUploadFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 97, 110, 99, 101, 108, 85, 112, 108, 111, 97, 100, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file_id => new byte[] { 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_file_id = JsonEncodedText.Encode(propName_file_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CancelUploadFile)tlobj;
            writer.WriteNumber(encodedPropName_file_id, obj.FileId);
        }
    }

    partial class WriteGeneratedFilePartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 119, 114, 105, 116, 101, 71, 101, 110, 101, 114, 97, 116, 101, 100, 70, 105, 108, 101, 80, 97, 114, 116 }));
        private static ReadOnlySpan<byte> propName_generation_id => new byte[] { 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_generation_id = JsonEncodedText.Encode(propName_generation_id);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (WriteGeneratedFilePart)tlobj;
            writer.WritePropertyName(encodedPropName_generation_id);
            writer.WriteInt64String(obj.GenerationId);
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
        }
    }

    partial class SetFileGenerationProgressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 70, 105, 108, 101, 71, 101, 110, 101, 114, 97, 116, 105, 111, 110, 80, 114, 111, 103, 114, 101, 115, 115 }));
        private static ReadOnlySpan<byte> propName_generation_id => new byte[] { 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_generation_id = JsonEncodedText.Encode(propName_generation_id);
        private static ReadOnlySpan<byte> propName_expected_size => new byte[] { 101, 120, 112, 101, 99, 116, 101, 100, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_expected_size = JsonEncodedText.Encode(propName_expected_size);
        private static ReadOnlySpan<byte> propName_local_prefix_size => new byte[] { 108, 111, 99, 97, 108, 95, 112, 114, 101, 102, 105, 120, 95, 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_local_prefix_size = JsonEncodedText.Encode(propName_local_prefix_size);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetFileGenerationProgress)tlobj;
            writer.WritePropertyName(encodedPropName_generation_id);
            writer.WriteInt64String(obj.GenerationId);
            writer.WriteNumber(encodedPropName_expected_size, obj.ExpectedSize);
            writer.WriteNumber(encodedPropName_local_prefix_size, obj.LocalPrefixSize);
        }
    }

    partial class FinishFileGenerationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 102, 105, 110, 105, 115, 104, 70, 105, 108, 101, 71, 101, 110, 101, 114, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_generation_id => new byte[] { 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_generation_id = JsonEncodedText.Encode(propName_generation_id);
        private static ReadOnlySpan<byte> propName_error => new byte[] { 101, 114, 114, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_error = JsonEncodedText.Encode(propName_error);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (FinishFileGeneration)tlobj;
            writer.WritePropertyName(encodedPropName_generation_id);
            writer.WriteInt64String(obj.GenerationId);
            if (obj.Error != null)
            {
                writer.WritePropertyName(encodedPropName_error);
                writer.WriteTLObjectValue(obj.Error);
            }
        }
    }

    partial class ReadFilePartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 97, 100, 70, 105, 108, 101, 80, 97, 114, 116 }));
        private static ReadOnlySpan<byte> propName_file_id => new byte[] { 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_file_id = JsonEncodedText.Encode(propName_file_id);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_count => new byte[] { 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_count = JsonEncodedText.Encode(propName_count);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReadFilePart)tlobj;
            writer.WriteNumber(encodedPropName_file_id, obj.FileId);
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_count, obj.Count);
        }
    }

    partial class DeleteFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_file_id => new byte[] { 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_file_id = JsonEncodedText.Encode(propName_file_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteFile)tlobj;
            writer.WriteNumber(encodedPropName_file_id, obj.FileId);
        }
    }

    partial class GetMessageFileTypeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 70, 105, 108, 101, 84, 121, 112, 101 }));
        private static ReadOnlySpan<byte> propName_message_file_head => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 102, 105, 108, 101, 95, 104, 101, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_message_file_head = JsonEncodedText.Encode(propName_message_file_head);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageFileType)tlobj;
            writer.WriteString(encodedPropName_message_file_head, obj.MessageFileHead);
        }
    }

    partial class GetMessageImportConfirmationTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 73, 109, 112, 111, 114, 116, 67, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110, 84, 101, 120, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageImportConfirmationText)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class ImportMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 109, 112, 111, 114, 116, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_file => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 102, 105, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_message_file = JsonEncodedText.Encode(propName_message_file);
        private static ReadOnlySpan<byte> propName_attached_files => new byte[] { 97, 116, 116, 97, 99, 104, 101, 100, 95, 102, 105, 108, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_attached_files = JsonEncodedText.Encode(propName_attached_files);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ImportMessages)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.MessageFile != null)
            {
                writer.WritePropertyName(encodedPropName_message_file);
                writer.WriteTLObjectValue(obj.MessageFile);
            }
            if (obj.AttachedFiles != null)
            {
                writer.WritePropertyName(encodedPropName_attached_files);
                writer.WriteArray(obj.AttachedFiles);
            }
        }
    }

    partial class ReplacePrimaryChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 112, 108, 97, 99, 101, 80, 114, 105, 109, 97, 114, 121, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReplacePrimaryChatInviteLink)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class CreateChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_expire_date => new byte[] { 101, 120, 112, 105, 114, 101, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_expire_date = JsonEncodedText.Encode(propName_expire_date);
        private static ReadOnlySpan<byte> propName_member_limit => new byte[] { 109, 101, 109, 98, 101, 114, 95, 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_member_limit = JsonEncodedText.Encode(propName_member_limit);
        private static ReadOnlySpan<byte> propName_creates_join_request => new byte[] { 99, 114, 101, 97, 116, 101, 115, 95, 106, 111, 105, 110, 95, 114, 101, 113, 117, 101, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_creates_join_request = JsonEncodedText.Encode(propName_creates_join_request);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateChatInviteLink)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_name, obj.Name);
            writer.WriteNumber(encodedPropName_expire_date, obj.ExpireDate);
            writer.WriteNumber(encodedPropName_member_limit, obj.MemberLimit);
            writer.WriteBoolean(encodedPropName_creates_join_request, obj.CreatesJoinRequest);
        }
    }

    partial class EditChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_expire_date => new byte[] { 101, 120, 112, 105, 114, 101, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_expire_date = JsonEncodedText.Encode(propName_expire_date);
        private static ReadOnlySpan<byte> propName_member_limit => new byte[] { 109, 101, 109, 98, 101, 114, 95, 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_member_limit = JsonEncodedText.Encode(propName_member_limit);
        private static ReadOnlySpan<byte> propName_creates_join_request => new byte[] { 99, 114, 101, 97, 116, 101, 115, 95, 106, 111, 105, 110, 95, 114, 101, 113, 117, 101, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_creates_join_request = JsonEncodedText.Encode(propName_creates_join_request);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditChatInviteLink)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_invite_link, obj.InviteLink);
            writer.WriteString(encodedPropName_name, obj.Name);
            writer.WriteNumber(encodedPropName_expire_date, obj.ExpireDate);
            writer.WriteNumber(encodedPropName_member_limit, obj.MemberLimit);
            writer.WriteBoolean(encodedPropName_creates_join_request, obj.CreatesJoinRequest);
        }
    }

    partial class GetChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatInviteLink)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_invite_link, obj.InviteLink);
        }
    }

    partial class GetChatInviteLinkCountsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 67, 111, 117, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatInviteLinkCounts)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class GetChatInviteLinksConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_creator_user_id => new byte[] { 99, 114, 101, 97, 116, 111, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_creator_user_id = JsonEncodedText.Encode(propName_creator_user_id);
        private static ReadOnlySpan<byte> propName_is_revoked => new byte[] { 105, 115, 95, 114, 101, 118, 111, 107, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_revoked = JsonEncodedText.Encode(propName_is_revoked);
        private static ReadOnlySpan<byte> propName_offset_date => new byte[] { 111, 102, 102, 115, 101, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_offset_date = JsonEncodedText.Encode(propName_offset_date);
        private static ReadOnlySpan<byte> propName_offset_invite_link => new byte[] { 111, 102, 102, 115, 101, 116, 95, 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_offset_invite_link = JsonEncodedText.Encode(propName_offset_invite_link);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatInviteLinks)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_creator_user_id, obj.CreatorUserId);
            writer.WriteBoolean(encodedPropName_is_revoked, obj.IsRevoked);
            writer.WriteNumber(encodedPropName_offset_date, obj.OffsetDate);
            writer.WriteString(encodedPropName_offset_invite_link, obj.OffsetInviteLink);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class GetChatInviteLinkMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 77, 101, 109, 98, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        private static ReadOnlySpan<byte> propName_offset_member => new byte[] { 111, 102, 102, 115, 101, 116, 95, 109, 101, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_offset_member = JsonEncodedText.Encode(propName_offset_member);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatInviteLinkMembers)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_invite_link, obj.InviteLink);
            if (obj.OffsetMember != null)
            {
                writer.WritePropertyName(encodedPropName_offset_member);
                writer.WriteTLObjectValue(obj.OffsetMember);
            }
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class RevokeChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 118, 111, 107, 101, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RevokeChatInviteLink)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_invite_link, obj.InviteLink);
        }
    }

    partial class DeleteRevokedChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 82, 101, 118, 111, 107, 101, 100, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteRevokedChatInviteLink)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_invite_link, obj.InviteLink);
        }
    }

    partial class DeleteAllRevokedChatInviteLinksConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 65, 108, 108, 82, 101, 118, 111, 107, 101, 100, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_creator_user_id => new byte[] { 99, 114, 101, 97, 116, 111, 114, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_creator_user_id = JsonEncodedText.Encode(propName_creator_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteAllRevokedChatInviteLinks)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_creator_user_id, obj.CreatorUserId);
        }
    }

    partial class CheckChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 67, 104, 97, 116, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckChatInviteLink)tlobj;
            writer.WriteString(encodedPropName_invite_link, obj.InviteLink);
        }
    }

    partial class JoinChatByInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 106, 111, 105, 110, 67, 104, 97, 116, 66, 121, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JoinChatByInviteLink)tlobj;
            writer.WriteString(encodedPropName_invite_link, obj.InviteLink);
        }
    }

    partial class GetChatJoinRequestsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 74, 111, 105, 110, 82, 101, 113, 117, 101, 115, 116, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_invite_link => new byte[] { 105, 110, 118, 105, 116, 101, 95, 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_invite_link = JsonEncodedText.Encode(propName_invite_link);
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_offset_request => new byte[] { 111, 102, 102, 115, 101, 116, 95, 114, 101, 113, 117, 101, 115, 116 };
        private static readonly JsonEncodedText encodedPropName_offset_request = JsonEncodedText.Encode(propName_offset_request);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatJoinRequests)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_invite_link, obj.InviteLink);
            writer.WriteString(encodedPropName_query, obj.Query);
            if (obj.OffsetRequest != null)
            {
                writer.WritePropertyName(encodedPropName_offset_request);
                writer.WriteTLObjectValue(obj.OffsetRequest);
            }
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class ApproveChatJoinRequestConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 112, 112, 114, 111, 118, 101, 67, 104, 97, 116, 74, 111, 105, 110, 82, 101, 113, 117, 101, 115, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ApproveChatJoinRequest)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class DeclineChatJoinRequestConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 99, 108, 105, 110, 101, 67, 104, 97, 116, 74, 111, 105, 110, 82, 101, 113, 117, 101, 115, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeclineChatJoinRequest)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class CreateCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_protocol => new byte[] { 112, 114, 111, 116, 111, 99, 111, 108 };
        private static readonly JsonEncodedText encodedPropName_protocol = JsonEncodedText.Encode(propName_protocol);
        private static ReadOnlySpan<byte> propName_is_video => new byte[] { 105, 115, 95, 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_is_video = JsonEncodedText.Encode(propName_is_video);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateCall)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.Protocol != null)
            {
                writer.WritePropertyName(encodedPropName_protocol);
                writer.WriteTLObjectValue(obj.Protocol);
            }
            writer.WriteBoolean(encodedPropName_is_video, obj.IsVideo);
        }
    }

    partial class AcceptCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 99, 99, 101, 112, 116, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_call_id => new byte[] { 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_call_id = JsonEncodedText.Encode(propName_call_id);
        private static ReadOnlySpan<byte> propName_protocol => new byte[] { 112, 114, 111, 116, 111, 99, 111, 108 };
        private static readonly JsonEncodedText encodedPropName_protocol = JsonEncodedText.Encode(propName_protocol);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AcceptCall)tlobj;
            writer.WriteNumber(encodedPropName_call_id, obj.CallId);
            if (obj.Protocol != null)
            {
                writer.WritePropertyName(encodedPropName_protocol);
                writer.WriteTLObjectValue(obj.Protocol);
            }
        }
    }

    partial class SendCallSignalingDataConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 67, 97, 108, 108, 83, 105, 103, 110, 97, 108, 105, 110, 103, 68, 97, 116, 97 }));
        private static ReadOnlySpan<byte> propName_call_id => new byte[] { 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_call_id = JsonEncodedText.Encode(propName_call_id);
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendCallSignalingData)tlobj;
            writer.WriteNumber(encodedPropName_call_id, obj.CallId);
            if (!obj.Data.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_data, obj.Data.Span);
            }
        }
    }

    partial class DiscardCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 105, 115, 99, 97, 114, 100, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_call_id => new byte[] { 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_call_id = JsonEncodedText.Encode(propName_call_id);
        private static ReadOnlySpan<byte> propName_is_disconnected => new byte[] { 105, 115, 95, 100, 105, 115, 99, 111, 110, 110, 101, 99, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_disconnected = JsonEncodedText.Encode(propName_is_disconnected);
        private static ReadOnlySpan<byte> propName_duration => new byte[] { 100, 117, 114, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_duration = JsonEncodedText.Encode(propName_duration);
        private static ReadOnlySpan<byte> propName_is_video => new byte[] { 105, 115, 95, 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_is_video = JsonEncodedText.Encode(propName_is_video);
        private static ReadOnlySpan<byte> propName_connection_id => new byte[] { 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_connection_id = JsonEncodedText.Encode(propName_connection_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DiscardCall)tlobj;
            writer.WriteNumber(encodedPropName_call_id, obj.CallId);
            writer.WriteBoolean(encodedPropName_is_disconnected, obj.IsDisconnected);
            writer.WriteNumber(encodedPropName_duration, obj.Duration);
            writer.WriteBoolean(encodedPropName_is_video, obj.IsVideo);
            writer.WritePropertyName(encodedPropName_connection_id);
            writer.WriteInt64String(obj.ConnectionId);
        }
    }

    partial class SendCallRatingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 67, 97, 108, 108, 82, 97, 116, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_call_id => new byte[] { 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_call_id = JsonEncodedText.Encode(propName_call_id);
        private static ReadOnlySpan<byte> propName_rating => new byte[] { 114, 97, 116, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_rating = JsonEncodedText.Encode(propName_rating);
        private static ReadOnlySpan<byte> propName_comment => new byte[] { 99, 111, 109, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_comment = JsonEncodedText.Encode(propName_comment);
        private static ReadOnlySpan<byte> propName_problems => new byte[] { 112, 114, 111, 98, 108, 101, 109, 115 };
        private static readonly JsonEncodedText encodedPropName_problems = JsonEncodedText.Encode(propName_problems);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendCallRating)tlobj;
            writer.WriteNumber(encodedPropName_call_id, obj.CallId);
            writer.WriteNumber(encodedPropName_rating, obj.Rating);
            writer.WriteString(encodedPropName_comment, obj.Comment);
            if (obj.Problems != null)
            {
                writer.WritePropertyName(encodedPropName_problems);
                writer.WriteArray(obj.Problems);
            }
        }
    }

    partial class SendCallDebugInformationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 67, 97, 108, 108, 68, 101, 98, 117, 103, 73, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_call_id => new byte[] { 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_call_id = JsonEncodedText.Encode(propName_call_id);
        private static ReadOnlySpan<byte> propName_debug_information => new byte[] { 100, 101, 98, 117, 103, 95, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_debug_information = JsonEncodedText.Encode(propName_debug_information);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendCallDebugInformation)tlobj;
            writer.WriteNumber(encodedPropName_call_id, obj.CallId);
            writer.WriteString(encodedPropName_debug_information, obj.DebugInformation);
        }
    }

    partial class GetVideoChatAvailableParticipantsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 86, 105, 100, 101, 111, 67, 104, 97, 116, 65, 118, 97, 105, 108, 97, 98, 108, 101, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetVideoChatAvailableParticipants)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class SetVideoChatDefaultParticipantConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 86, 105, 100, 101, 111, 67, 104, 97, 116, 68, 101, 102, 97, 117, 108, 116, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_default_participant_id => new byte[] { 100, 101, 102, 97, 117, 108, 116, 95, 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_default_participant_id = JsonEncodedText.Encode(propName_default_participant_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetVideoChatDefaultParticipant)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.DefaultParticipantId != null)
            {
                writer.WritePropertyName(encodedPropName_default_participant_id);
                writer.WriteTLObjectValue(obj.DefaultParticipantId);
            }
        }
    }

    partial class CreateVideoChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 86, 105, 100, 101, 111, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_start_date => new byte[] { 115, 116, 97, 114, 116, 95, 100, 97, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_start_date = JsonEncodedText.Encode(propName_start_date);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateVideoChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteNumber(encodedPropName_start_date, obj.StartDate);
        }
    }

    partial class GetGroupCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 71, 114, 111, 117, 112, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetGroupCall)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
        }
    }

    partial class StartScheduledGroupCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 97, 114, 116, 83, 99, 104, 101, 100, 117, 108, 101, 100, 71, 114, 111, 117, 112, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StartScheduledGroupCall)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
        }
    }

    partial class ToggleGroupCallEnabledStartNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108, 69, 110, 97, 98, 108, 101, 100, 83, 116, 97, 114, 116, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_enabled_start_notification => new byte[] { 101, 110, 97, 98, 108, 101, 100, 95, 115, 116, 97, 114, 116, 95, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_enabled_start_notification = JsonEncodedText.Encode(propName_enabled_start_notification);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleGroupCallEnabledStartNotification)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteBoolean(encodedPropName_enabled_start_notification, obj.EnabledStartNotification);
        }
    }

    partial class JoinGroupCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 106, 111, 105, 110, 71, 114, 111, 117, 112, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_participant_id => new byte[] { 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_participant_id = JsonEncodedText.Encode(propName_participant_id);
        private static ReadOnlySpan<byte> propName_audio_source_id => new byte[] { 97, 117, 100, 105, 111, 95, 115, 111, 117, 114, 99, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_audio_source_id = JsonEncodedText.Encode(propName_audio_source_id);
        private static ReadOnlySpan<byte> propName_payload => new byte[] { 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_payload = JsonEncodedText.Encode(propName_payload);
        private static ReadOnlySpan<byte> propName_is_muted => new byte[] { 105, 115, 95, 109, 117, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_muted = JsonEncodedText.Encode(propName_is_muted);
        private static ReadOnlySpan<byte> propName_is_my_video_enabled => new byte[] { 105, 115, 95, 109, 121, 95, 118, 105, 100, 101, 111, 95, 101, 110, 97, 98, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_my_video_enabled = JsonEncodedText.Encode(propName_is_my_video_enabled);
        private static ReadOnlySpan<byte> propName_invite_hash => new byte[] { 105, 110, 118, 105, 116, 101, 95, 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_invite_hash = JsonEncodedText.Encode(propName_invite_hash);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JoinGroupCall)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            if (obj.ParticipantId != null)
            {
                writer.WritePropertyName(encodedPropName_participant_id);
                writer.WriteTLObjectValue(obj.ParticipantId);
            }
            writer.WriteNumber(encodedPropName_audio_source_id, obj.AudioSourceId);
            writer.WriteString(encodedPropName_payload, obj.Payload);
            writer.WriteBoolean(encodedPropName_is_muted, obj.IsMuted);
            writer.WriteBoolean(encodedPropName_is_my_video_enabled, obj.IsMyVideoEnabled);
            writer.WriteString(encodedPropName_invite_hash, obj.InviteHash);
        }
    }

    partial class StartGroupCallScreenSharingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 97, 114, 116, 71, 114, 111, 117, 112, 67, 97, 108, 108, 83, 99, 114, 101, 101, 110, 83, 104, 97, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_audio_source_id => new byte[] { 97, 117, 100, 105, 111, 95, 115, 111, 117, 114, 99, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_audio_source_id = JsonEncodedText.Encode(propName_audio_source_id);
        private static ReadOnlySpan<byte> propName_payload => new byte[] { 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_payload = JsonEncodedText.Encode(propName_payload);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StartGroupCallScreenSharing)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteNumber(encodedPropName_audio_source_id, obj.AudioSourceId);
            writer.WriteString(encodedPropName_payload, obj.Payload);
        }
    }

    partial class ToggleGroupCallScreenSharingIsPausedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108, 83, 99, 114, 101, 101, 110, 83, 104, 97, 114, 105, 110, 103, 73, 115, 80, 97, 117, 115, 101, 100 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_is_paused => new byte[] { 105, 115, 95, 112, 97, 117, 115, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_paused = JsonEncodedText.Encode(propName_is_paused);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleGroupCallScreenSharingIsPaused)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteBoolean(encodedPropName_is_paused, obj.IsPaused);
        }
    }

    partial class EndGroupCallScreenSharingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 110, 100, 71, 114, 111, 117, 112, 67, 97, 108, 108, 83, 99, 114, 101, 101, 110, 83, 104, 97, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EndGroupCallScreenSharing)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
        }
    }

    partial class SetGroupCallTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 71, 114, 111, 117, 112, 67, 97, 108, 108, 84, 105, 116, 108, 101 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetGroupCallTitle)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class ToggleGroupCallMuteNewParticipantsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108, 77, 117, 116, 101, 78, 101, 119, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_mute_new_participants => new byte[] { 109, 117, 116, 101, 95, 110, 101, 119, 95, 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_mute_new_participants = JsonEncodedText.Encode(propName_mute_new_participants);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleGroupCallMuteNewParticipants)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteBoolean(encodedPropName_mute_new_participants, obj.MuteNewParticipants);
        }
    }

    partial class RevokeGroupCallInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 118, 111, 107, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RevokeGroupCallInviteLink)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
        }
    }

    partial class InviteGroupCallParticipantsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 110, 118, 105, 116, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InviteGroupCallParticipants)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class GetGroupCallInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 71, 114, 111, 117, 112, 67, 97, 108, 108, 73, 110, 118, 105, 116, 101, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_can_self_unmute => new byte[] { 99, 97, 110, 95, 115, 101, 108, 102, 95, 117, 110, 109, 117, 116, 101 };
        private static readonly JsonEncodedText encodedPropName_can_self_unmute = JsonEncodedText.Encode(propName_can_self_unmute);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetGroupCallInviteLink)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteBoolean(encodedPropName_can_self_unmute, obj.CanSelfUnmute);
        }
    }

    partial class StartGroupCallRecordingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 116, 97, 114, 116, 71, 114, 111, 117, 112, 67, 97, 108, 108, 82, 101, 99, 111, 114, 100, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_record_video => new byte[] { 114, 101, 99, 111, 114, 100, 95, 118, 105, 100, 101, 111 };
        private static readonly JsonEncodedText encodedPropName_record_video = JsonEncodedText.Encode(propName_record_video);
        private static ReadOnlySpan<byte> propName_use_portrait_orientation => new byte[] { 117, 115, 101, 95, 112, 111, 114, 116, 114, 97, 105, 116, 95, 111, 114, 105, 101, 110, 116, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_use_portrait_orientation = JsonEncodedText.Encode(propName_use_portrait_orientation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StartGroupCallRecording)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteBoolean(encodedPropName_record_video, obj.RecordVideo);
            writer.WriteBoolean(encodedPropName_use_portrait_orientation, obj.UsePortraitOrientation);
        }
    }

    partial class EndGroupCallRecordingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 110, 100, 71, 114, 111, 117, 112, 67, 97, 108, 108, 82, 101, 99, 111, 114, 100, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EndGroupCallRecording)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
        }
    }

    partial class ToggleGroupCallIsMyVideoPausedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108, 73, 115, 77, 121, 86, 105, 100, 101, 111, 80, 97, 117, 115, 101, 100 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_is_my_video_paused => new byte[] { 105, 115, 95, 109, 121, 95, 118, 105, 100, 101, 111, 95, 112, 97, 117, 115, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_my_video_paused = JsonEncodedText.Encode(propName_is_my_video_paused);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleGroupCallIsMyVideoPaused)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteBoolean(encodedPropName_is_my_video_paused, obj.IsMyVideoPaused);
        }
    }

    partial class ToggleGroupCallIsMyVideoEnabledConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108, 73, 115, 77, 121, 86, 105, 100, 101, 111, 69, 110, 97, 98, 108, 101, 100 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_is_my_video_enabled => new byte[] { 105, 115, 95, 109, 121, 95, 118, 105, 100, 101, 111, 95, 101, 110, 97, 98, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_my_video_enabled = JsonEncodedText.Encode(propName_is_my_video_enabled);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleGroupCallIsMyVideoEnabled)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteBoolean(encodedPropName_is_my_video_enabled, obj.IsMyVideoEnabled);
        }
    }

    partial class SetGroupCallParticipantIsSpeakingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 71, 114, 111, 117, 112, 67, 97, 108, 108, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 73, 115, 83, 112, 101, 97, 107, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_audio_source => new byte[] { 97, 117, 100, 105, 111, 95, 115, 111, 117, 114, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_audio_source = JsonEncodedText.Encode(propName_audio_source);
        private static ReadOnlySpan<byte> propName_is_speaking => new byte[] { 105, 115, 95, 115, 112, 101, 97, 107, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_is_speaking = JsonEncodedText.Encode(propName_is_speaking);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetGroupCallParticipantIsSpeaking)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteNumber(encodedPropName_audio_source, obj.AudioSource);
            writer.WriteBoolean(encodedPropName_is_speaking, obj.IsSpeaking);
        }
    }

    partial class ToggleGroupCallParticipantIsMutedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 73, 115, 77, 117, 116, 101, 100 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_participant_id => new byte[] { 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_participant_id = JsonEncodedText.Encode(propName_participant_id);
        private static ReadOnlySpan<byte> propName_is_muted => new byte[] { 105, 115, 95, 109, 117, 116, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_muted = JsonEncodedText.Encode(propName_is_muted);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleGroupCallParticipantIsMuted)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            if (obj.ParticipantId != null)
            {
                writer.WritePropertyName(encodedPropName_participant_id);
                writer.WriteTLObjectValue(obj.ParticipantId);
            }
            writer.WriteBoolean(encodedPropName_is_muted, obj.IsMuted);
        }
    }

    partial class SetGroupCallParticipantVolumeLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 71, 114, 111, 117, 112, 67, 97, 108, 108, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 86, 111, 108, 117, 109, 101, 76, 101, 118, 101, 108 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_participant_id => new byte[] { 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_participant_id = JsonEncodedText.Encode(propName_participant_id);
        private static ReadOnlySpan<byte> propName_volume_level => new byte[] { 118, 111, 108, 117, 109, 101, 95, 108, 101, 118, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_volume_level = JsonEncodedText.Encode(propName_volume_level);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetGroupCallParticipantVolumeLevel)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            if (obj.ParticipantId != null)
            {
                writer.WritePropertyName(encodedPropName_participant_id);
                writer.WriteTLObjectValue(obj.ParticipantId);
            }
            writer.WriteNumber(encodedPropName_volume_level, obj.VolumeLevel);
        }
    }

    partial class ToggleGroupCallParticipantIsHandRaisedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 73, 115, 72, 97, 110, 100, 82, 97, 105, 115, 101, 100 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_participant_id => new byte[] { 112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_participant_id = JsonEncodedText.Encode(propName_participant_id);
        private static ReadOnlySpan<byte> propName_is_hand_raised => new byte[] { 105, 115, 95, 104, 97, 110, 100, 95, 114, 97, 105, 115, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_hand_raised = JsonEncodedText.Encode(propName_is_hand_raised);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleGroupCallParticipantIsHandRaised)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            if (obj.ParticipantId != null)
            {
                writer.WritePropertyName(encodedPropName_participant_id);
                writer.WriteTLObjectValue(obj.ParticipantId);
            }
            writer.WriteBoolean(encodedPropName_is_hand_raised, obj.IsHandRaised);
        }
    }

    partial class LoadGroupCallParticipantsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 111, 97, 100, 71, 114, 111, 117, 112, 67, 97, 108, 108, 80, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LoadGroupCallParticipants)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class LeaveGroupCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 108, 101, 97, 118, 101, 71, 114, 111, 117, 112, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LeaveGroupCall)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
        }
    }

    partial class DiscardGroupCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 105, 115, 99, 97, 114, 100, 71, 114, 111, 117, 112, 67, 97, 108, 108 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DiscardGroupCall)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
        }
    }

    partial class GetGroupCallStreamSegmentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 71, 114, 111, 117, 112, 67, 97, 108, 108, 83, 116, 114, 101, 97, 109, 83, 101, 103, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_group_call_id => new byte[] { 103, 114, 111, 117, 112, 95, 99, 97, 108, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_group_call_id = JsonEncodedText.Encode(propName_group_call_id);
        private static ReadOnlySpan<byte> propName_time_offset => new byte[] { 116, 105, 109, 101, 95, 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_time_offset = JsonEncodedText.Encode(propName_time_offset);
        private static ReadOnlySpan<byte> propName_scale => new byte[] { 115, 99, 97, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_scale = JsonEncodedText.Encode(propName_scale);
        private static ReadOnlySpan<byte> propName_channel_id => new byte[] { 99, 104, 97, 110, 110, 101, 108, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_channel_id = JsonEncodedText.Encode(propName_channel_id);
        private static ReadOnlySpan<byte> propName_video_quality => new byte[] { 118, 105, 100, 101, 111, 95, 113, 117, 97, 108, 105, 116, 121 };
        private static readonly JsonEncodedText encodedPropName_video_quality = JsonEncodedText.Encode(propName_video_quality);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetGroupCallStreamSegment)tlobj;
            writer.WriteNumber(encodedPropName_group_call_id, obj.GroupCallId);
            writer.WriteNumber(encodedPropName_time_offset, obj.TimeOffset);
            writer.WriteNumber(encodedPropName_scale, obj.Scale);
            writer.WriteNumber(encodedPropName_channel_id, obj.ChannelId);
            if (obj.VideoQuality != null)
            {
                writer.WritePropertyName(encodedPropName_video_quality);
                writer.WriteTLObjectValue(obj.VideoQuality);
            }
        }
    }

    partial class ToggleMessageSenderIsBlockedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 77, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 101, 114, 73, 115, 66, 108, 111, 99, 107, 101, 100 }));
        private static ReadOnlySpan<byte> propName_sender => new byte[] { 115, 101, 110, 100, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sender = JsonEncodedText.Encode(propName_sender);
        private static ReadOnlySpan<byte> propName_is_blocked => new byte[] { 105, 115, 95, 98, 108, 111, 99, 107, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_blocked = JsonEncodedText.Encode(propName_is_blocked);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleMessageSenderIsBlocked)tlobj;
            if (obj.Sender != null)
            {
                writer.WritePropertyName(encodedPropName_sender);
                writer.WriteTLObjectValue(obj.Sender);
            }
            writer.WriteBoolean(encodedPropName_is_blocked, obj.IsBlocked);
        }
    }

    partial class BlockMessageSenderFromRepliesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 98, 108, 111, 99, 107, 77, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 101, 114, 70, 114, 111, 109, 82, 101, 112, 108, 105, 101, 115 }));
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_delete_message => new byte[] { 100, 101, 108, 101, 116, 101, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_delete_message = JsonEncodedText.Encode(propName_delete_message);
        private static ReadOnlySpan<byte> propName_delete_all_messages => new byte[] { 100, 101, 108, 101, 116, 101, 95, 97, 108, 108, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_delete_all_messages = JsonEncodedText.Encode(propName_delete_all_messages);
        private static ReadOnlySpan<byte> propName_report_spam => new byte[] { 114, 101, 112, 111, 114, 116, 95, 115, 112, 97, 109 };
        private static readonly JsonEncodedText encodedPropName_report_spam = JsonEncodedText.Encode(propName_report_spam);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BlockMessageSenderFromReplies)tlobj;
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteBoolean(encodedPropName_delete_message, obj.DeleteMessage);
            writer.WriteBoolean(encodedPropName_delete_all_messages, obj.DeleteAllMessages);
            writer.WriteBoolean(encodedPropName_report_spam, obj.ReportSpam);
        }
    }

    partial class GetBlockedMessageSendersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 66, 108, 111, 99, 107, 101, 100, 77, 101, 115, 115, 97, 103, 101, 83, 101, 110, 100, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBlockedMessageSenders)tlobj;
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class AddContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 67, 111, 110, 116, 97, 99, 116 }));
        private static ReadOnlySpan<byte> propName_contact => new byte[] { 99, 111, 110, 116, 97, 99, 116 };
        private static readonly JsonEncodedText encodedPropName_contact = JsonEncodedText.Encode(propName_contact);
        private static ReadOnlySpan<byte> propName_share_phone_number => new byte[] { 115, 104, 97, 114, 101, 95, 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_share_phone_number = JsonEncodedText.Encode(propName_share_phone_number);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddContact)tlobj;
            if (obj.Contact != null)
            {
                writer.WritePropertyName(encodedPropName_contact);
                writer.WriteTLObjectValue(obj.Contact);
            }
            writer.WriteBoolean(encodedPropName_share_phone_number, obj.SharePhoneNumber);
        }
    }

    partial class ImportContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 105, 109, 112, 111, 114, 116, 67, 111, 110, 116, 97, 99, 116, 115 }));
        private static ReadOnlySpan<byte> propName_contacts => new byte[] { 99, 111, 110, 116, 97, 99, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_contacts = JsonEncodedText.Encode(propName_contacts);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ImportContacts)tlobj;
            if (obj.Contacts != null)
            {
                writer.WritePropertyName(encodedPropName_contacts);
                writer.WriteArray(obj.Contacts);
            }
        }
    }

    partial class GetContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 111, 110, 116, 97, 99, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 67, 111, 110, 116, 97, 99, 116, 115 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchContacts)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class RemoveContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 67, 111, 110, 116, 97, 99, 116, 115 }));
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveContacts)tlobj;
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class GetImportedContactCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 73, 109, 112, 111, 114, 116, 101, 100, 67, 111, 110, 116, 97, 99, 116, 67, 111, 117, 110, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChangeImportedContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 110, 103, 101, 73, 109, 112, 111, 114, 116, 101, 100, 67, 111, 110, 116, 97, 99, 116, 115 }));
        private static ReadOnlySpan<byte> propName_contacts => new byte[] { 99, 111, 110, 116, 97, 99, 116, 115 };
        private static readonly JsonEncodedText encodedPropName_contacts = JsonEncodedText.Encode(propName_contacts);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChangeImportedContacts)tlobj;
            if (obj.Contacts != null)
            {
                writer.WritePropertyName(encodedPropName_contacts);
                writer.WriteArray(obj.Contacts);
            }
        }
    }

    partial class ClearImportedContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 108, 101, 97, 114, 73, 109, 112, 111, 114, 116, 101, 100, 67, 111, 110, 116, 97, 99, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SharePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 104, 97, 114, 101, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SharePhoneNumber)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
        }
    }

    partial class GetUserProfilePhotosConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 85, 115, 101, 114, 80, 114, 111, 102, 105, 108, 101, 80, 104, 111, 116, 111, 115 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetUserProfilePhotos)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class GetStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 116, 105, 99, 107, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_emoji => new byte[] { 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_emoji = JsonEncodedText.Encode(propName_emoji);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetStickers)tlobj;
            writer.WriteString(encodedPropName_emoji, obj.Emoji);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class SearchStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 83, 116, 105, 99, 107, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_emoji => new byte[] { 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_emoji = JsonEncodedText.Encode(propName_emoji);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchStickers)tlobj;
            writer.WriteString(encodedPropName_emoji, obj.Emoji);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class GetInstalledStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 73, 110, 115, 116, 97, 108, 108, 101, 100, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_is_masks => new byte[] { 105, 115, 95, 109, 97, 115, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_is_masks = JsonEncodedText.Encode(propName_is_masks);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetInstalledStickerSets)tlobj;
            writer.WriteBoolean(encodedPropName_is_masks, obj.IsMasks);
        }
    }

    partial class GetArchivedStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 114, 99, 104, 105, 118, 101, 100, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_is_masks => new byte[] { 105, 115, 95, 109, 97, 115, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_is_masks = JsonEncodedText.Encode(propName_is_masks);
        private static ReadOnlySpan<byte> propName_offset_sticker_set_id => new byte[] { 111, 102, 102, 115, 101, 116, 95, 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_offset_sticker_set_id = JsonEncodedText.Encode(propName_offset_sticker_set_id);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetArchivedStickerSets)tlobj;
            writer.WriteBoolean(encodedPropName_is_masks, obj.IsMasks);
            writer.WritePropertyName(encodedPropName_offset_sticker_set_id);
            writer.WriteInt64String(obj.OffsetStickerSetId);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class GetTrendingStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 84, 114, 101, 110, 100, 105, 110, 103, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetTrendingStickerSets)tlobj;
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class GetAttachedStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 116, 116, 97, 99, 104, 101, 100, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_file_id => new byte[] { 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_file_id = JsonEncodedText.Encode(propName_file_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetAttachedStickerSets)tlobj;
            writer.WriteNumber(encodedPropName_file_id, obj.FileId);
        }
    }

    partial class GetStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_set_id => new byte[] { 115, 101, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_set_id = JsonEncodedText.Encode(propName_set_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetStickerSet)tlobj;
            writer.WritePropertyName(encodedPropName_set_id);
            writer.WriteInt64String(obj.SetId);
        }
    }

    partial class SearchStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchStickerSet)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
        }
    }

    partial class SearchInstalledStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 73, 110, 115, 116, 97, 108, 108, 101, 100, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_is_masks => new byte[] { 105, 115, 95, 109, 97, 115, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_is_masks = JsonEncodedText.Encode(propName_is_masks);
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchInstalledStickerSets)tlobj;
            writer.WriteBoolean(encodedPropName_is_masks, obj.IsMasks);
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class SearchStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchStickerSets)tlobj;
            writer.WriteString(encodedPropName_query, obj.Query);
        }
    }

    partial class ChangeStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 110, 103, 101, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_set_id => new byte[] { 115, 101, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_set_id = JsonEncodedText.Encode(propName_set_id);
        private static ReadOnlySpan<byte> propName_is_installed => new byte[] { 105, 115, 95, 105, 110, 115, 116, 97, 108, 108, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_installed = JsonEncodedText.Encode(propName_is_installed);
        private static ReadOnlySpan<byte> propName_is_archived => new byte[] { 105, 115, 95, 97, 114, 99, 104, 105, 118, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_archived = JsonEncodedText.Encode(propName_is_archived);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChangeStickerSet)tlobj;
            writer.WritePropertyName(encodedPropName_set_id);
            writer.WriteInt64String(obj.SetId);
            writer.WriteBoolean(encodedPropName_is_installed, obj.IsInstalled);
            writer.WriteBoolean(encodedPropName_is_archived, obj.IsArchived);
        }
    }

    partial class ViewTrendingStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 105, 101, 119, 84, 114, 101, 110, 100, 105, 110, 103, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_sticker_set_ids => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_sticker_set_ids = JsonEncodedText.Encode(propName_sticker_set_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ViewTrendingStickerSets)tlobj;
            if (obj.StickerSetIds != null)
            {
                writer.WritePropertyName(encodedPropName_sticker_set_ids);
                writer.WriteInt64Array(obj.StickerSetIds);
            }
        }
    }

    partial class ReorderInstalledStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 111, 114, 100, 101, 114, 73, 110, 115, 116, 97, 108, 108, 101, 100, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 115 }));
        private static ReadOnlySpan<byte> propName_is_masks => new byte[] { 105, 115, 95, 109, 97, 115, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_is_masks = JsonEncodedText.Encode(propName_is_masks);
        private static ReadOnlySpan<byte> propName_sticker_set_ids => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_sticker_set_ids = JsonEncodedText.Encode(propName_sticker_set_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReorderInstalledStickerSets)tlobj;
            writer.WriteBoolean(encodedPropName_is_masks, obj.IsMasks);
            if (obj.StickerSetIds != null)
            {
                writer.WritePropertyName(encodedPropName_sticker_set_ids);
                writer.WriteInt64Array(obj.StickerSetIds);
            }
        }
    }

    partial class GetRecentStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 82, 101, 99, 101, 110, 116, 83, 116, 105, 99, 107, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_is_attached => new byte[] { 105, 115, 95, 97, 116, 116, 97, 99, 104, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_attached = JsonEncodedText.Encode(propName_is_attached);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRecentStickers)tlobj;
            writer.WriteBoolean(encodedPropName_is_attached, obj.IsAttached);
        }
    }

    partial class AddRecentStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 82, 101, 99, 101, 110, 116, 83, 116, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_is_attached => new byte[] { 105, 115, 95, 97, 116, 116, 97, 99, 104, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_attached = JsonEncodedText.Encode(propName_is_attached);
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddRecentSticker)tlobj;
            writer.WriteBoolean(encodedPropName_is_attached, obj.IsAttached);
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class RemoveRecentStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 82, 101, 99, 101, 110, 116, 83, 116, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_is_attached => new byte[] { 105, 115, 95, 97, 116, 116, 97, 99, 104, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_attached = JsonEncodedText.Encode(propName_is_attached);
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveRecentSticker)tlobj;
            writer.WriteBoolean(encodedPropName_is_attached, obj.IsAttached);
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class ClearRecentStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 108, 101, 97, 114, 82, 101, 99, 101, 110, 116, 83, 116, 105, 99, 107, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_is_attached => new byte[] { 105, 115, 95, 97, 116, 116, 97, 99, 104, 101, 100 };
        private static readonly JsonEncodedText encodedPropName_is_attached = JsonEncodedText.Encode(propName_is_attached);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ClearRecentStickers)tlobj;
            writer.WriteBoolean(encodedPropName_is_attached, obj.IsAttached);
        }
    }

    partial class GetFavoriteStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 70, 97, 118, 111, 114, 105, 116, 101, 83, 116, 105, 99, 107, 101, 114, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AddFavoriteStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 70, 97, 118, 111, 114, 105, 116, 101, 83, 116, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddFavoriteSticker)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class RemoveFavoriteStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 70, 97, 118, 111, 114, 105, 116, 101, 83, 116, 105, 99, 107, 101, 114 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveFavoriteSticker)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class GetStickerEmojisConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 116, 105, 99, 107, 101, 114, 69, 109, 111, 106, 105, 115 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetStickerEmojis)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class SearchEmojisConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 69, 109, 111, 106, 105, 115 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        private static ReadOnlySpan<byte> propName_exact_match => new byte[] { 101, 120, 97, 99, 116, 95, 109, 97, 116, 99, 104 };
        private static readonly JsonEncodedText encodedPropName_exact_match = JsonEncodedText.Encode(propName_exact_match);
        private static ReadOnlySpan<byte> propName_input_language_codes => new byte[] { 105, 110, 112, 117, 116, 95, 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_input_language_codes = JsonEncodedText.Encode(propName_input_language_codes);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchEmojis)tlobj;
            writer.WriteString(encodedPropName_text, obj.Text);
            writer.WriteBoolean(encodedPropName_exact_match, obj.ExactMatch);
            if (obj.InputLanguageCodes != null)
            {
                writer.WritePropertyName(encodedPropName_input_language_codes);
                writer.WriteArray(obj.InputLanguageCodes);
            }
        }
    }

    partial class GetAnimatedEmojiConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 110, 105, 109, 97, 116, 101, 100, 69, 109, 111, 106, 105 }));
        private static ReadOnlySpan<byte> propName_emoji => new byte[] { 101, 109, 111, 106, 105 };
        private static readonly JsonEncodedText encodedPropName_emoji = JsonEncodedText.Encode(propName_emoji);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetAnimatedEmoji)tlobj;
            writer.WriteString(encodedPropName_emoji, obj.Emoji);
        }
    }

    partial class GetEmojiSuggestionsUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 69, 109, 111, 106, 105, 83, 117, 103, 103, 101, 115, 116, 105, 111, 110, 115, 85, 114, 108 }));
        private static ReadOnlySpan<byte> propName_language_code => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_language_code = JsonEncodedText.Encode(propName_language_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetEmojiSuggestionsUrl)tlobj;
            writer.WriteString(encodedPropName_language_code, obj.LanguageCode);
        }
    }

    partial class GetSavedAnimationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 97, 118, 101, 100, 65, 110, 105, 109, 97, 116, 105, 111, 110, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AddSavedAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 83, 97, 118, 101, 100, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddSavedAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
        }
    }

    partial class RemoveSavedAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 83, 97, 118, 101, 100, 65, 110, 105, 109, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_animation => new byte[] { 97, 110, 105, 109, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_animation = JsonEncodedText.Encode(propName_animation);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveSavedAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(encodedPropName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
        }
    }

    partial class GetRecentInlineBotsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 82, 101, 99, 101, 110, 116, 73, 110, 108, 105, 110, 101, 66, 111, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchHashtagsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 72, 97, 115, 104, 116, 97, 103, 115 }));
        private static ReadOnlySpan<byte> propName_prefix => new byte[] { 112, 114, 101, 102, 105, 120 };
        private static readonly JsonEncodedText encodedPropName_prefix = JsonEncodedText.Encode(propName_prefix);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchHashtags)tlobj;
            writer.WriteString(encodedPropName_prefix, obj.Prefix);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class RemoveRecentHashtagConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 82, 101, 99, 101, 110, 116, 72, 97, 115, 104, 116, 97, 103 }));
        private static ReadOnlySpan<byte> propName_hashtag => new byte[] { 104, 97, 115, 104, 116, 97, 103 };
        private static readonly JsonEncodedText encodedPropName_hashtag = JsonEncodedText.Encode(propName_hashtag);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveRecentHashtag)tlobj;
            writer.WriteString(encodedPropName_hashtag, obj.Hashtag);
        }
    }

    partial class GetWebPagePreviewConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 87, 101, 98, 80, 97, 103, 101, 80, 114, 101, 118, 105, 101, 119 }));
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetWebPagePreview)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(encodedPropName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class GetWebPageInstantViewConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 87, 101, 98, 80, 97, 103, 101, 73, 110, 115, 116, 97, 110, 116, 86, 105, 101, 119 }));
        private static ReadOnlySpan<byte> propName_url => new byte[] { 117, 114, 108 };
        private static readonly JsonEncodedText encodedPropName_url = JsonEncodedText.Encode(propName_url);
        private static ReadOnlySpan<byte> propName_force_full => new byte[] { 102, 111, 114, 99, 101, 95, 102, 117, 108, 108 };
        private static readonly JsonEncodedText encodedPropName_force_full = JsonEncodedText.Encode(propName_force_full);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetWebPageInstantView)tlobj;
            writer.WriteString(encodedPropName_url, obj.Url);
            writer.WriteBoolean(encodedPropName_force_full, obj.ForceFull);
        }
    }

    partial class SetProfilePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 80, 114, 111, 102, 105, 108, 101, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_photo => new byte[] { 112, 104, 111, 116, 111 };
        private static readonly JsonEncodedText encodedPropName_photo = JsonEncodedText.Encode(propName_photo);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetProfilePhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(encodedPropName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
        }
    }

    partial class DeleteProfilePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 80, 114, 111, 102, 105, 108, 101, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_profile_photo_id => new byte[] { 112, 114, 111, 102, 105, 108, 101, 95, 112, 104, 111, 116, 111, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_profile_photo_id = JsonEncodedText.Encode(propName_profile_photo_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteProfilePhoto)tlobj;
            writer.WritePropertyName(encodedPropName_profile_photo_id);
            writer.WriteInt64String(obj.ProfilePhotoId);
        }
    }

    partial class SetNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 78, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_first_name => new byte[] { 102, 105, 114, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_first_name = JsonEncodedText.Encode(propName_first_name);
        private static ReadOnlySpan<byte> propName_last_name => new byte[] { 108, 97, 115, 116, 95, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_last_name = JsonEncodedText.Encode(propName_last_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetName)tlobj;
            writer.WriteString(encodedPropName_first_name, obj.FirstName);
            writer.WriteString(encodedPropName_last_name, obj.LastName);
        }
    }

    partial class SetBioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 66, 105, 111 }));
        private static ReadOnlySpan<byte> propName_bio => new byte[] { 98, 105, 111 };
        private static readonly JsonEncodedText encodedPropName_bio = JsonEncodedText.Encode(propName_bio);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetBio)tlobj;
            writer.WriteString(encodedPropName_bio, obj.Bio);
        }
    }

    partial class SetUsernameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 85, 115, 101, 114, 110, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_username => new byte[] { 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_username = JsonEncodedText.Encode(propName_username);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetUsername)tlobj;
            writer.WriteString(encodedPropName_username, obj.Username);
        }
    }

    partial class SetLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 76, 111, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetLocation)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
        }
    }

    partial class ChangePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 97, 110, 103, 101, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114 }));
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        private static ReadOnlySpan<byte> propName_settings => new byte[] { 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_settings = JsonEncodedText.Encode(propName_settings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChangePhoneNumber)tlobj;
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
            if (obj.Settings != null)
            {
                writer.WritePropertyName(encodedPropName_settings);
                writer.WriteTLObjectValue(obj.Settings);
            }
        }
    }

    partial class ResendChangePhoneNumberCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 110, 100, 67, 104, 97, 110, 103, 101, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 67, 111, 100, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChangePhoneNumberCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 67, 104, 97, 110, 103, 101, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_code => new byte[] { 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_code = JsonEncodedText.Encode(propName_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckChangePhoneNumberCode)tlobj;
            writer.WriteString(encodedPropName_code, obj.Code);
        }
    }

    partial class SetCommandsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 111, 109, 109, 97, 110, 100, 115 }));
        private static ReadOnlySpan<byte> propName_scope => new byte[] { 115, 99, 111, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_scope = JsonEncodedText.Encode(propName_scope);
        private static ReadOnlySpan<byte> propName_language_code => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_language_code = JsonEncodedText.Encode(propName_language_code);
        private static ReadOnlySpan<byte> propName_commands => new byte[] { 99, 111, 109, 109, 97, 110, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_commands = JsonEncodedText.Encode(propName_commands);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetCommands)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(encodedPropName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
            writer.WriteString(encodedPropName_language_code, obj.LanguageCode);
            if (obj.Commands != null)
            {
                writer.WritePropertyName(encodedPropName_commands);
                writer.WriteArray(obj.Commands);
            }
        }
    }

    partial class DeleteCommandsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 67, 111, 109, 109, 97, 110, 100, 115 }));
        private static ReadOnlySpan<byte> propName_scope => new byte[] { 115, 99, 111, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_scope = JsonEncodedText.Encode(propName_scope);
        private static ReadOnlySpan<byte> propName_language_code => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_language_code = JsonEncodedText.Encode(propName_language_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteCommands)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(encodedPropName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
            writer.WriteString(encodedPropName_language_code, obj.LanguageCode);
        }
    }

    partial class GetCommandsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 111, 109, 109, 97, 110, 100, 115 }));
        private static ReadOnlySpan<byte> propName_scope => new byte[] { 115, 99, 111, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_scope = JsonEncodedText.Encode(propName_scope);
        private static ReadOnlySpan<byte> propName_language_code => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_language_code = JsonEncodedText.Encode(propName_language_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetCommands)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(encodedPropName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
            writer.WriteString(encodedPropName_language_code, obj.LanguageCode);
        }
    }

    partial class GetActiveSessionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 99, 116, 105, 118, 101, 83, 101, 115, 115, 105, 111, 110, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TerminateSessionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 114, 109, 105, 110, 97, 116, 101, 83, 101, 115, 115, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_session_id => new byte[] { 115, 101, 115, 115, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_session_id = JsonEncodedText.Encode(propName_session_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TerminateSession)tlobj;
            writer.WritePropertyName(encodedPropName_session_id);
            writer.WriteInt64String(obj.SessionId);
        }
    }

    partial class TerminateAllOtherSessionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 114, 109, 105, 110, 97, 116, 101, 65, 108, 108, 79, 116, 104, 101, 114, 83, 101, 115, 115, 105, 111, 110, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetConnectedWebsitesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 111, 110, 110, 101, 99, 116, 101, 100, 87, 101, 98, 115, 105, 116, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DisconnectWebsiteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 105, 115, 99, 111, 110, 110, 101, 99, 116, 87, 101, 98, 115, 105, 116, 101 }));
        private static ReadOnlySpan<byte> propName_website_id => new byte[] { 119, 101, 98, 115, 105, 116, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_website_id = JsonEncodedText.Encode(propName_website_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DisconnectWebsite)tlobj;
            writer.WritePropertyName(encodedPropName_website_id);
            writer.WriteInt64String(obj.WebsiteId);
        }
    }

    partial class DisconnectAllWebsitesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 105, 115, 99, 111, 110, 110, 101, 99, 116, 65, 108, 108, 87, 101, 98, 115, 105, 116, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetSupergroupUsernameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 85, 115, 101, 114, 110, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        private static ReadOnlySpan<byte> propName_username => new byte[] { 117, 115, 101, 114, 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_username = JsonEncodedText.Encode(propName_username);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetSupergroupUsername)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
            writer.WriteString(encodedPropName_username, obj.Username);
        }
    }

    partial class SetSupergroupStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        private static ReadOnlySpan<byte> propName_sticker_set_id => new byte[] { 115, 116, 105, 99, 107, 101, 114, 95, 115, 101, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_sticker_set_id = JsonEncodedText.Encode(propName_sticker_set_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetSupergroupStickerSet)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
            writer.WritePropertyName(encodedPropName_sticker_set_id);
            writer.WriteInt64String(obj.StickerSetId);
        }
    }

    partial class ToggleSupergroupSignMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 83, 105, 103, 110, 77, 101, 115, 115, 97, 103, 101, 115 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        private static ReadOnlySpan<byte> propName_sign_messages => new byte[] { 115, 105, 103, 110, 95, 109, 101, 115, 115, 97, 103, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_sign_messages = JsonEncodedText.Encode(propName_sign_messages);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleSupergroupSignMessages)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
            writer.WriteBoolean(encodedPropName_sign_messages, obj.SignMessages);
        }
    }

    partial class ToggleSupergroupIsAllHistoryAvailableConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 73, 115, 65, 108, 108, 72, 105, 115, 116, 111, 114, 121, 65, 118, 97, 105, 108, 97, 98, 108, 101 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        private static ReadOnlySpan<byte> propName_is_all_history_available => new byte[] { 105, 115, 95, 97, 108, 108, 95, 104, 105, 115, 116, 111, 114, 121, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_is_all_history_available = JsonEncodedText.Encode(propName_is_all_history_available);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleSupergroupIsAllHistoryAvailable)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
            writer.WriteBoolean(encodedPropName_is_all_history_available, obj.IsAllHistoryAvailable);
        }
    }

    partial class ToggleSupergroupIsBroadcastGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 111, 103, 103, 108, 101, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 73, 115, 66, 114, 111, 97, 100, 99, 97, 115, 116, 71, 114, 111, 117, 112 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleSupergroupIsBroadcastGroup)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class ReportSupergroupSpamConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 112, 111, 114, 116, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 83, 112, 97, 109 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_message_ids => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_message_ids = JsonEncodedText.Encode(propName_message_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReportSupergroupSpam)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(encodedPropName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
        }
    }

    partial class GetSupergroupMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 117, 112, 101, 114, 103, 114, 111, 117, 112, 77, 101, 109, 98, 101, 114, 115 }));
        private static ReadOnlySpan<byte> propName_supergroup_id => new byte[] { 115, 117, 112, 101, 114, 103, 114, 111, 117, 112, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_supergroup_id = JsonEncodedText.Encode(propName_supergroup_id);
        private static ReadOnlySpan<byte> propName_filter => new byte[] { 102, 105, 108, 116, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_filter = JsonEncodedText.Encode(propName_filter);
        private static ReadOnlySpan<byte> propName_offset => new byte[] { 111, 102, 102, 115, 101, 116 };
        private static readonly JsonEncodedText encodedPropName_offset = JsonEncodedText.Encode(propName_offset);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetSupergroupMembers)tlobj;
            writer.WriteNumber(encodedPropName_supergroup_id, obj.SupergroupId);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(encodedPropName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteNumber(encodedPropName_offset, obj.Offset);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
        }
    }

    partial class CloseSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 108, 111, 115, 101, 83, 101, 99, 114, 101, 116, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_secret_chat_id => new byte[] { 115, 101, 99, 114, 101, 116, 95, 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_secret_chat_id = JsonEncodedText.Encode(propName_secret_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CloseSecretChat)tlobj;
            writer.WriteNumber(encodedPropName_secret_chat_id, obj.SecretChatId);
        }
    }

    partial class GetChatEventLogConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 69, 118, 101, 110, 116, 76, 111, 103 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_query => new byte[] { 113, 117, 101, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_query = JsonEncodedText.Encode(propName_query);
        private static ReadOnlySpan<byte> propName_from_event_id => new byte[] { 102, 114, 111, 109, 95, 101, 118, 101, 110, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_from_event_id = JsonEncodedText.Encode(propName_from_event_id);
        private static ReadOnlySpan<byte> propName_limit => new byte[] { 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_limit = JsonEncodedText.Encode(propName_limit);
        private static ReadOnlySpan<byte> propName_filters => new byte[] { 102, 105, 108, 116, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_filters = JsonEncodedText.Encode(propName_filters);
        private static ReadOnlySpan<byte> propName_user_ids => new byte[] { 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_user_ids = JsonEncodedText.Encode(propName_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatEventLog)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_query, obj.Query);
            writer.WritePropertyName(encodedPropName_from_event_id);
            writer.WriteInt64String(obj.FromEventId);
            writer.WriteNumber(encodedPropName_limit, obj.Limit);
            if (obj.Filters != null)
            {
                writer.WritePropertyName(encodedPropName_filters);
                writer.WriteTLObjectValue(obj.Filters);
            }
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(encodedPropName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class GetPaymentFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 97, 121, 109, 101, 110, 116, 70, 111, 114, 109 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_theme => new byte[] { 116, 104, 101, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_theme = JsonEncodedText.Encode(propName_theme);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPaymentForm)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.Theme != null)
            {
                writer.WritePropertyName(encodedPropName_theme);
                writer.WriteTLObjectValue(obj.Theme);
            }
        }
    }

    partial class ValidateOrderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 118, 97, 108, 105, 100, 97, 116, 101, 79, 114, 100, 101, 114, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_order_info => new byte[] { 111, 114, 100, 101, 114, 95, 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_order_info = JsonEncodedText.Encode(propName_order_info);
        private static ReadOnlySpan<byte> propName_allow_save => new byte[] { 97, 108, 108, 111, 119, 95, 115, 97, 118, 101 };
        private static readonly JsonEncodedText encodedPropName_allow_save = JsonEncodedText.Encode(propName_allow_save);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ValidateOrderInfo)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            if (obj.OrderInfo != null)
            {
                writer.WritePropertyName(encodedPropName_order_info);
                writer.WriteTLObjectValue(obj.OrderInfo);
            }
            writer.WriteBoolean(encodedPropName_allow_save, obj.AllowSave);
        }
    }

    partial class SendPaymentFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 80, 97, 121, 109, 101, 110, 116, 70, 111, 114, 109 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_payment_form_id => new byte[] { 112, 97, 121, 109, 101, 110, 116, 95, 102, 111, 114, 109, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_payment_form_id = JsonEncodedText.Encode(propName_payment_form_id);
        private static ReadOnlySpan<byte> propName_order_info_id => new byte[] { 111, 114, 100, 101, 114, 95, 105, 110, 102, 111, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_order_info_id = JsonEncodedText.Encode(propName_order_info_id);
        private static ReadOnlySpan<byte> propName_shipping_option_id => new byte[] { 115, 104, 105, 112, 112, 105, 110, 103, 95, 111, 112, 116, 105, 111, 110, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_shipping_option_id = JsonEncodedText.Encode(propName_shipping_option_id);
        private static ReadOnlySpan<byte> propName_credentials => new byte[] { 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115 };
        private static readonly JsonEncodedText encodedPropName_credentials = JsonEncodedText.Encode(propName_credentials);
        private static ReadOnlySpan<byte> propName_tip_amount => new byte[] { 116, 105, 112, 95, 97, 109, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_tip_amount = JsonEncodedText.Encode(propName_tip_amount);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendPaymentForm)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WritePropertyName(encodedPropName_payment_form_id);
            writer.WriteInt64String(obj.PaymentFormId);
            writer.WriteString(encodedPropName_order_info_id, obj.OrderInfoId);
            writer.WriteString(encodedPropName_shipping_option_id, obj.ShippingOptionId);
            if (obj.Credentials != null)
            {
                writer.WritePropertyName(encodedPropName_credentials);
                writer.WriteTLObjectValue(obj.Credentials);
            }
            writer.WriteNumber(encodedPropName_tip_amount, obj.TipAmount);
        }
    }

    partial class GetPaymentReceiptConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 97, 121, 109, 101, 110, 116, 82, 101, 99, 101, 105, 112, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPaymentReceipt)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
        }
    }

    partial class GetSavedOrderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 97, 118, 101, 100, 79, 114, 100, 101, 114, 73, 110, 102, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DeleteSavedOrderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 83, 97, 118, 101, 100, 79, 114, 100, 101, 114, 73, 110, 102, 111 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DeleteSavedCredentialsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 83, 97, 118, 101, 100, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetSupportUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 117, 112, 112, 111, 114, 116, 85, 115, 101, 114 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetBackgroundsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 115 }));
        private static ReadOnlySpan<byte> propName_for_dark_theme => new byte[] { 102, 111, 114, 95, 100, 97, 114, 107, 95, 116, 104, 101, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_for_dark_theme = JsonEncodedText.Encode(propName_for_dark_theme);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBackgrounds)tlobj;
            writer.WriteBoolean(encodedPropName_for_dark_theme, obj.ForDarkTheme);
        }
    }

    partial class GetBackgroundUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 85, 114, 108 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBackgroundUrl)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class SearchBackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 97, 114, 99, 104, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchBackground)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
        }
    }

    partial class SetBackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100 }));
        private static ReadOnlySpan<byte> propName_background => new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100 };
        private static readonly JsonEncodedText encodedPropName_background = JsonEncodedText.Encode(propName_background);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_for_dark_theme => new byte[] { 102, 111, 114, 95, 100, 97, 114, 107, 95, 116, 104, 101, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_for_dark_theme = JsonEncodedText.Encode(propName_for_dark_theme);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetBackground)tlobj;
            if (obj.Background != null)
            {
                writer.WritePropertyName(encodedPropName_background);
                writer.WriteTLObjectValue(obj.Background);
            }
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteBoolean(encodedPropName_for_dark_theme, obj.ForDarkTheme);
        }
    }

    partial class RemoveBackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100 }));
        private static ReadOnlySpan<byte> propName_background_id => new byte[] { 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_background_id = JsonEncodedText.Encode(propName_background_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveBackground)tlobj;
            writer.WritePropertyName(encodedPropName_background_id);
            writer.WriteInt64String(obj.BackgroundId);
        }
    }

    partial class ResetBackgroundsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 116, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetLocalizationTargetInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 76, 111, 99, 97, 108, 105, 122, 97, 116, 105, 111, 110, 84, 97, 114, 103, 101, 116, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_only_local => new byte[] { 111, 110, 108, 121, 95, 108, 111, 99, 97, 108 };
        private static readonly JsonEncodedText encodedPropName_only_local = JsonEncodedText.Encode(propName_only_local);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLocalizationTargetInfo)tlobj;
            writer.WriteBoolean(encodedPropName_only_local, obj.OnlyLocal);
        }
    }

    partial class GetLanguagePackInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_language_pack_id => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_language_pack_id = JsonEncodedText.Encode(propName_language_pack_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLanguagePackInfo)tlobj;
            writer.WriteString(encodedPropName_language_pack_id, obj.LanguagePackId);
        }
    }

    partial class GetLanguagePackStringsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 83, 116, 114, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_language_pack_id => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_language_pack_id = JsonEncodedText.Encode(propName_language_pack_id);
        private static ReadOnlySpan<byte> propName_keys => new byte[] { 107, 101, 121, 115 };
        private static readonly JsonEncodedText encodedPropName_keys = JsonEncodedText.Encode(propName_keys);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLanguagePackStrings)tlobj;
            writer.WriteString(encodedPropName_language_pack_id, obj.LanguagePackId);
            if (obj.Keys != null)
            {
                writer.WritePropertyName(encodedPropName_keys);
                writer.WriteArray(obj.Keys);
            }
        }
    }

    partial class SynchronizeLanguagePackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107 }));
        private static ReadOnlySpan<byte> propName_language_pack_id => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_language_pack_id = JsonEncodedText.Encode(propName_language_pack_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SynchronizeLanguagePack)tlobj;
            writer.WriteString(encodedPropName_language_pack_id, obj.LanguagePackId);
        }
    }

    partial class AddCustomServerLanguagePackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 67, 117, 115, 116, 111, 109, 83, 101, 114, 118, 101, 114, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107 }));
        private static ReadOnlySpan<byte> propName_language_pack_id => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_language_pack_id = JsonEncodedText.Encode(propName_language_pack_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddCustomServerLanguagePack)tlobj;
            writer.WriteString(encodedPropName_language_pack_id, obj.LanguagePackId);
        }
    }

    partial class SetCustomLanguagePackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 117, 115, 116, 111, 109, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107 }));
        private static ReadOnlySpan<byte> propName_info => new byte[] { 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_info = JsonEncodedText.Encode(propName_info);
        private static ReadOnlySpan<byte> propName_strings => new byte[] { 115, 116, 114, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_strings = JsonEncodedText.Encode(propName_strings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetCustomLanguagePack)tlobj;
            if (obj.Info != null)
            {
                writer.WritePropertyName(encodedPropName_info);
                writer.WriteTLObjectValue(obj.Info);
            }
            if (obj.Strings != null)
            {
                writer.WritePropertyName(encodedPropName_strings);
                writer.WriteArray(obj.Strings);
            }
        }
    }

    partial class EditCustomLanguagePackInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 67, 117, 115, 116, 111, 109, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_info => new byte[] { 105, 110, 102, 111 };
        private static readonly JsonEncodedText encodedPropName_info = JsonEncodedText.Encode(propName_info);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditCustomLanguagePackInfo)tlobj;
            if (obj.Info != null)
            {
                writer.WritePropertyName(encodedPropName_info);
                writer.WriteTLObjectValue(obj.Info);
            }
        }
    }

    partial class SetCustomLanguagePackStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 67, 117, 115, 116, 111, 109, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107, 83, 116, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_language_pack_id => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_language_pack_id = JsonEncodedText.Encode(propName_language_pack_id);
        private static ReadOnlySpan<byte> propName_new_string => new byte[] { 110, 101, 119, 95, 115, 116, 114, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_new_string = JsonEncodedText.Encode(propName_new_string);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetCustomLanguagePackString)tlobj;
            writer.WriteString(encodedPropName_language_pack_id, obj.LanguagePackId);
            if (obj.NewString != null)
            {
                writer.WritePropertyName(encodedPropName_new_string);
                writer.WriteTLObjectValue(obj.NewString);
            }
        }
    }

    partial class DeleteLanguagePackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 76, 97, 110, 103, 117, 97, 103, 101, 80, 97, 99, 107 }));
        private static ReadOnlySpan<byte> propName_language_pack_id => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 112, 97, 99, 107, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_language_pack_id = JsonEncodedText.Encode(propName_language_pack_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteLanguagePack)tlobj;
            writer.WriteString(encodedPropName_language_pack_id, obj.LanguagePackId);
        }
    }

    partial class RegisterDeviceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 103, 105, 115, 116, 101, 114, 68, 101, 118, 105, 99, 101 }));
        private static ReadOnlySpan<byte> propName_device_token => new byte[] { 100, 101, 118, 105, 99, 101, 95, 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_device_token = JsonEncodedText.Encode(propName_device_token);
        private static ReadOnlySpan<byte> propName_other_user_ids => new byte[] { 111, 116, 104, 101, 114, 95, 117, 115, 101, 114, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_other_user_ids = JsonEncodedText.Encode(propName_other_user_ids);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RegisterDevice)tlobj;
            if (obj.DeviceToken != null)
            {
                writer.WritePropertyName(encodedPropName_device_token);
                writer.WriteTLObjectValue(obj.DeviceToken);
            }
            if (obj.OtherUserIds != null)
            {
                writer.WritePropertyName(encodedPropName_other_user_ids);
                writer.WriteArray(obj.OtherUserIds);
            }
        }
    }

    partial class ProcessPushNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 114, 111, 99, 101, 115, 115, 80, 117, 115, 104, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_payload => new byte[] { 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_payload = JsonEncodedText.Encode(propName_payload);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ProcessPushNotification)tlobj;
            writer.WriteString(encodedPropName_payload, obj.Payload);
        }
    }

    partial class GetPushReceiverIdConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 117, 115, 104, 82, 101, 99, 101, 105, 118, 101, 114, 73, 100 }));
        private static ReadOnlySpan<byte> propName_payload => new byte[] { 112, 97, 121, 108, 111, 97, 100 };
        private static readonly JsonEncodedText encodedPropName_payload = JsonEncodedText.Encode(propName_payload);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPushReceiverId)tlobj;
            writer.WriteString(encodedPropName_payload, obj.Payload);
        }
    }

    partial class GetRecentlyVisitedTMeUrlsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 82, 101, 99, 101, 110, 116, 108, 121, 86, 105, 115, 105, 116, 101, 100, 84, 77, 101, 85, 114, 108, 115 }));
        private static ReadOnlySpan<byte> propName_referrer => new byte[] { 114, 101, 102, 101, 114, 114, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_referrer = JsonEncodedText.Encode(propName_referrer);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRecentlyVisitedTMeUrls)tlobj;
            writer.WriteString(encodedPropName_referrer, obj.Referrer);
        }
    }

    partial class SetUserPrivacySettingRulesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 85, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 115 }));
        private static ReadOnlySpan<byte> propName_setting => new byte[] { 115, 101, 116, 116, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_setting = JsonEncodedText.Encode(propName_setting);
        private static ReadOnlySpan<byte> propName_rules => new byte[] { 114, 117, 108, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_rules = JsonEncodedText.Encode(propName_rules);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetUserPrivacySettingRules)tlobj;
            if (obj.Setting != null)
            {
                writer.WritePropertyName(encodedPropName_setting);
                writer.WriteTLObjectValue(obj.Setting);
            }
            if (obj.Rules != null)
            {
                writer.WritePropertyName(encodedPropName_rules);
                writer.WriteTLObjectValue(obj.Rules);
            }
        }
    }

    partial class GetUserPrivacySettingRulesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 85, 115, 101, 114, 80, 114, 105, 118, 97, 99, 121, 83, 101, 116, 116, 105, 110, 103, 82, 117, 108, 101, 115 }));
        private static ReadOnlySpan<byte> propName_setting => new byte[] { 115, 101, 116, 116, 105, 110, 103 };
        private static readonly JsonEncodedText encodedPropName_setting = JsonEncodedText.Encode(propName_setting);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetUserPrivacySettingRules)tlobj;
            if (obj.Setting != null)
            {
                writer.WritePropertyName(encodedPropName_setting);
                writer.WriteTLObjectValue(obj.Setting);
            }
        }
    }

    partial class GetOptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 79, 112, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetOption)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
        }
    }

    partial class SetOptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 79, 112, 116, 105, 111, 110 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_value => new byte[] { 118, 97, 108, 117, 101 };
        private static readonly JsonEncodedText encodedPropName_value = JsonEncodedText.Encode(propName_value);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetOption)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
            if (obj.Value != null)
            {
                writer.WritePropertyName(encodedPropName_value);
                writer.WriteTLObjectValue(obj.Value);
            }
        }
    }

    partial class SetAccountTtlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 65, 99, 99, 111, 117, 110, 116, 84, 116, 108 }));
        private static ReadOnlySpan<byte> propName_ttl => new byte[] { 116, 116, 108 };
        private static readonly JsonEncodedText encodedPropName_ttl = JsonEncodedText.Encode(propName_ttl);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetAccountTtl)tlobj;
            if (obj.Ttl != null)
            {
                writer.WritePropertyName(encodedPropName_ttl);
                writer.WriteTLObjectValue(obj.Ttl);
            }
        }
    }

    partial class GetAccountTtlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 99, 99, 111, 117, 110, 116, 84, 116, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DeleteAccountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 65, 99, 99, 111, 117, 110, 116 }));
        private static ReadOnlySpan<byte> propName_reason => new byte[] { 114, 101, 97, 115, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_reason = JsonEncodedText.Encode(propName_reason);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteAccount)tlobj;
            writer.WriteString(encodedPropName_reason, obj.Reason);
        }
    }

    partial class RemoveChatActionBarConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 67, 104, 97, 116, 65, 99, 116, 105, 111, 110, 66, 97, 114 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveChatActionBar)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class ReportChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 112, 111, 114, 116, 67, 104, 97, 116 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_ids => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_message_ids = JsonEncodedText.Encode(propName_message_ids);
        private static ReadOnlySpan<byte> propName_reason => new byte[] { 114, 101, 97, 115, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_reason = JsonEncodedText.Encode(propName_reason);
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReportChat)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(encodedPropName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
            if (obj.Reason != null)
            {
                writer.WritePropertyName(encodedPropName_reason);
                writer.WriteTLObjectValue(obj.Reason);
            }
            writer.WriteString(encodedPropName_text, obj.Text);
        }
    }

    partial class ReportChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 112, 111, 114, 116, 67, 104, 97, 116, 80, 104, 111, 116, 111 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_file_id => new byte[] { 102, 105, 108, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_file_id = JsonEncodedText.Encode(propName_file_id);
        private static ReadOnlySpan<byte> propName_reason => new byte[] { 114, 101, 97, 115, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_reason = JsonEncodedText.Encode(propName_reason);
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReportChatPhoto)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_file_id, obj.FileId);
            if (obj.Reason != null)
            {
                writer.WritePropertyName(encodedPropName_reason);
                writer.WriteTLObjectValue(obj.Reason);
            }
            writer.WriteString(encodedPropName_text, obj.Text);
        }
    }

    partial class GetChatStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 104, 97, 116, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_is_dark => new byte[] { 105, 115, 95, 100, 97, 114, 107 };
        private static readonly JsonEncodedText encodedPropName_is_dark = JsonEncodedText.Encode(propName_is_dark);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatStatistics)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteBoolean(encodedPropName_is_dark, obj.IsDark);
        }
    }

    partial class GetMessageStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_message_id => new byte[] { 109, 101, 115, 115, 97, 103, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_message_id = JsonEncodedText.Encode(propName_message_id);
        private static ReadOnlySpan<byte> propName_is_dark => new byte[] { 105, 115, 95, 100, 97, 114, 107 };
        private static readonly JsonEncodedText encodedPropName_is_dark = JsonEncodedText.Encode(propName_is_dark);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageStatistics)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteNumber(encodedPropName_message_id, obj.MessageId);
            writer.WriteBoolean(encodedPropName_is_dark, obj.IsDark);
        }
    }

    partial class GetStatisticalGraphConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 116, 97, 116, 105, 115, 116, 105, 99, 97, 108, 71, 114, 97, 112, 104 }));
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_token => new byte[] { 116, 111, 107, 101, 110 };
        private static readonly JsonEncodedText encodedPropName_token = JsonEncodedText.Encode(propName_token);
        private static ReadOnlySpan<byte> propName_x => new byte[] { 120 };
        private static readonly JsonEncodedText encodedPropName_x = JsonEncodedText.Encode(propName_x);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetStatisticalGraph)tlobj;
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            writer.WriteString(encodedPropName_token, obj.Token);
            writer.WriteNumber(encodedPropName_x, obj.X);
        }
    }

    partial class GetStorageStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 116, 111, 114, 97, 103, 101, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        private static ReadOnlySpan<byte> propName_chat_limit => new byte[] { 99, 104, 97, 116, 95, 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_chat_limit = JsonEncodedText.Encode(propName_chat_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetStorageStatistics)tlobj;
            writer.WriteNumber(encodedPropName_chat_limit, obj.ChatLimit);
        }
    }

    partial class GetStorageStatisticsFastConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 116, 111, 114, 97, 103, 101, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115, 70, 97, 115, 116 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetDatabaseStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 68, 97, 116, 97, 98, 97, 115, 101, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class OptimizeStorageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 111, 112, 116, 105, 109, 105, 122, 101, 83, 116, 111, 114, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_size => new byte[] { 115, 105, 122, 101 };
        private static readonly JsonEncodedText encodedPropName_size = JsonEncodedText.Encode(propName_size);
        private static ReadOnlySpan<byte> propName_ttl => new byte[] { 116, 116, 108 };
        private static readonly JsonEncodedText encodedPropName_ttl = JsonEncodedText.Encode(propName_ttl);
        private static ReadOnlySpan<byte> propName_count => new byte[] { 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_count = JsonEncodedText.Encode(propName_count);
        private static ReadOnlySpan<byte> propName_immunity_delay => new byte[] { 105, 109, 109, 117, 110, 105, 116, 121, 95, 100, 101, 108, 97, 121 };
        private static readonly JsonEncodedText encodedPropName_immunity_delay = JsonEncodedText.Encode(propName_immunity_delay);
        private static ReadOnlySpan<byte> propName_file_types => new byte[] { 102, 105, 108, 101, 95, 116, 121, 112, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_file_types = JsonEncodedText.Encode(propName_file_types);
        private static ReadOnlySpan<byte> propName_chat_ids => new byte[] { 99, 104, 97, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_chat_ids = JsonEncodedText.Encode(propName_chat_ids);
        private static ReadOnlySpan<byte> propName_exclude_chat_ids => new byte[] { 101, 120, 99, 108, 117, 100, 101, 95, 99, 104, 97, 116, 95, 105, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_exclude_chat_ids = JsonEncodedText.Encode(propName_exclude_chat_ids);
        private static ReadOnlySpan<byte> propName_return_deleted_file_statistics => new byte[] { 114, 101, 116, 117, 114, 110, 95, 100, 101, 108, 101, 116, 101, 100, 95, 102, 105, 108, 101, 95, 115, 116, 97, 116, 105, 115, 116, 105, 99, 115 };
        private static readonly JsonEncodedText encodedPropName_return_deleted_file_statistics = JsonEncodedText.Encode(propName_return_deleted_file_statistics);
        private static ReadOnlySpan<byte> propName_chat_limit => new byte[] { 99, 104, 97, 116, 95, 108, 105, 109, 105, 116 };
        private static readonly JsonEncodedText encodedPropName_chat_limit = JsonEncodedText.Encode(propName_chat_limit);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OptimizeStorage)tlobj;
            writer.WriteNumber(encodedPropName_size, obj.Size);
            writer.WriteNumber(encodedPropName_ttl, obj.Ttl);
            writer.WriteNumber(encodedPropName_count, obj.Count);
            writer.WriteNumber(encodedPropName_immunity_delay, obj.ImmunityDelay);
            if (obj.FileTypes != null)
            {
                writer.WritePropertyName(encodedPropName_file_types);
                writer.WriteArray(obj.FileTypes);
            }
            if (obj.ChatIds != null)
            {
                writer.WritePropertyName(encodedPropName_chat_ids);
                writer.WriteArray(obj.ChatIds);
            }
            if (obj.ExcludeChatIds != null)
            {
                writer.WritePropertyName(encodedPropName_exclude_chat_ids);
                writer.WriteArray(obj.ExcludeChatIds);
            }
            writer.WriteBoolean(encodedPropName_return_deleted_file_statistics, obj.ReturnDeletedFileStatistics);
            writer.WriteNumber(encodedPropName_chat_limit, obj.ChatLimit);
        }
    }

    partial class SetNetworkTypeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 78, 101, 116, 119, 111, 114, 107, 84, 121, 112, 101 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetNetworkType)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class GetNetworkStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 78, 101, 116, 119, 111, 114, 107, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        private static ReadOnlySpan<byte> propName_only_current => new byte[] { 111, 110, 108, 121, 95, 99, 117, 114, 114, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_only_current = JsonEncodedText.Encode(propName_only_current);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetNetworkStatistics)tlobj;
            writer.WriteBoolean(encodedPropName_only_current, obj.OnlyCurrent);
        }
    }

    partial class AddNetworkStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 78, 101, 116, 119, 111, 114, 107, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        private static ReadOnlySpan<byte> propName_entry => new byte[] { 101, 110, 116, 114, 121 };
        private static readonly JsonEncodedText encodedPropName_entry = JsonEncodedText.Encode(propName_entry);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddNetworkStatistics)tlobj;
            if (obj.Entry != null)
            {
                writer.WritePropertyName(encodedPropName_entry);
                writer.WriteTLObjectValue(obj.Entry);
            }
        }
    }

    partial class ResetNetworkStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 116, 78, 101, 116, 119, 111, 114, 107, 83, 116, 97, 116, 105, 115, 116, 105, 99, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetAutoDownloadSettingsPresetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 117, 116, 111, 68, 111, 119, 110, 108, 111, 97, 100, 83, 101, 116, 116, 105, 110, 103, 115, 80, 114, 101, 115, 101, 116, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetAutoDownloadSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 65, 117, 116, 111, 68, 111, 119, 110, 108, 111, 97, 100, 83, 101, 116, 116, 105, 110, 103, 115 }));
        private static ReadOnlySpan<byte> propName_settings => new byte[] { 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_settings = JsonEncodedText.Encode(propName_settings);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetAutoDownloadSettings)tlobj;
            if (obj.Settings != null)
            {
                writer.WritePropertyName(encodedPropName_settings);
                writer.WriteTLObjectValue(obj.Settings);
            }
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class GetBankCardInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 66, 97, 110, 107, 67, 97, 114, 100, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_bank_card_number => new byte[] { 98, 97, 110, 107, 95, 99, 97, 114, 100, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_bank_card_number = JsonEncodedText.Encode(propName_bank_card_number);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBankCardInfo)tlobj;
            writer.WriteString(encodedPropName_bank_card_number, obj.BankCardNumber);
        }
    }

    partial class GetPassportElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPassportElement)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(encodedPropName_password, obj.Password);
        }
    }

    partial class GetAllPassportElementsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 108, 108, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetAllPassportElements)tlobj;
            writer.WriteString(encodedPropName_password, obj.Password);
        }
    }

    partial class SetPassportElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_element => new byte[] { 101, 108, 101, 109, 101, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_element = JsonEncodedText.Encode(propName_element);
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetPassportElement)tlobj;
            if (obj.Element != null)
            {
                writer.WritePropertyName(encodedPropName_element);
                writer.WriteTLObjectValue(obj.Element);
            }
            writer.WriteString(encodedPropName_password, obj.Password);
        }
    }

    partial class DeletePassportElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 101, 108, 101, 116, 101, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeletePassportElement)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class SetPassportElementErrorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 80, 97, 115, 115, 112, 111, 114, 116, 69, 108, 101, 109, 101, 110, 116, 69, 114, 114, 111, 114, 115 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_errors => new byte[] { 101, 114, 114, 111, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_errors = JsonEncodedText.Encode(propName_errors);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetPassportElementErrors)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.Errors != null)
            {
                writer.WritePropertyName(encodedPropName_errors);
                writer.WriteArray(obj.Errors);
            }
        }
    }

    partial class GetPreferredCountryLanguageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 114, 101, 102, 101, 114, 114, 101, 100, 67, 111, 117, 110, 116, 114, 121, 76, 97, 110, 103, 117, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_country_code => new byte[] { 99, 111, 117, 110, 116, 114, 121, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_country_code = JsonEncodedText.Encode(propName_country_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPreferredCountryLanguage)tlobj;
            writer.WriteString(encodedPropName_country_code, obj.CountryCode);
        }
    }

    partial class SendPhoneNumberVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        private static ReadOnlySpan<byte> propName_settings => new byte[] { 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_settings = JsonEncodedText.Encode(propName_settings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendPhoneNumberVerificationCode)tlobj;
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
            if (obj.Settings != null)
            {
                writer.WritePropertyName(encodedPropName_settings);
                writer.WriteTLObjectValue(obj.Settings);
            }
        }
    }

    partial class ResendPhoneNumberVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 110, 100, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckPhoneNumberVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_code => new byte[] { 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_code = JsonEncodedText.Encode(propName_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckPhoneNumberVerificationCode)tlobj;
            writer.WriteString(encodedPropName_code, obj.Code);
        }
    }

    partial class SendEmailAddressVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_email_address => new byte[] { 101, 109, 97, 105, 108, 95, 97, 100, 100, 114, 101, 115, 115 };
        private static readonly JsonEncodedText encodedPropName_email_address = JsonEncodedText.Encode(propName_email_address);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendEmailAddressVerificationCode)tlobj;
            writer.WriteString(encodedPropName_email_address, obj.EmailAddress);
        }
    }

    partial class ResendEmailAddressVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 110, 100, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckEmailAddressVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 69, 109, 97, 105, 108, 65, 100, 100, 114, 101, 115, 115, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_code => new byte[] { 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_code = JsonEncodedText.Encode(propName_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckEmailAddressVerificationCode)tlobj;
            writer.WriteString(encodedPropName_code, obj.Code);
        }
    }

    partial class GetPassportAuthorizationFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 97, 115, 115, 112, 111, 114, 116, 65, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 70, 111, 114, 109 }));
        private static ReadOnlySpan<byte> propName_bot_user_id => new byte[] { 98, 111, 116, 95, 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_bot_user_id = JsonEncodedText.Encode(propName_bot_user_id);
        private static ReadOnlySpan<byte> propName_scope => new byte[] { 115, 99, 111, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_scope = JsonEncodedText.Encode(propName_scope);
        private static ReadOnlySpan<byte> propName_public_key => new byte[] { 112, 117, 98, 108, 105, 99, 95, 107, 101, 121 };
        private static readonly JsonEncodedText encodedPropName_public_key = JsonEncodedText.Encode(propName_public_key);
        private static ReadOnlySpan<byte> propName_nonce => new byte[] { 110, 111, 110, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_nonce = JsonEncodedText.Encode(propName_nonce);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPassportAuthorizationForm)tlobj;
            writer.WriteNumber(encodedPropName_bot_user_id, obj.BotUserId);
            writer.WriteString(encodedPropName_scope, obj.Scope);
            writer.WriteString(encodedPropName_public_key, obj.PublicKey);
            writer.WriteString(encodedPropName_nonce, obj.Nonce);
        }
    }

    partial class GetPassportAuthorizationFormAvailableElementsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 97, 115, 115, 112, 111, 114, 116, 65, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 70, 111, 114, 109, 65, 118, 97, 105, 108, 97, 98, 108, 101, 69, 108, 101, 109, 101, 110, 116, 115 }));
        private static ReadOnlySpan<byte> propName_autorization_form_id => new byte[] { 97, 117, 116, 111, 114, 105, 122, 97, 116, 105, 111, 110, 95, 102, 111, 114, 109, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_autorization_form_id = JsonEncodedText.Encode(propName_autorization_form_id);
        private static ReadOnlySpan<byte> propName_password => new byte[] { 112, 97, 115, 115, 119, 111, 114, 100 };
        private static readonly JsonEncodedText encodedPropName_password = JsonEncodedText.Encode(propName_password);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPassportAuthorizationFormAvailableElements)tlobj;
            writer.WriteNumber(encodedPropName_autorization_form_id, obj.AutorizationFormId);
            writer.WriteString(encodedPropName_password, obj.Password);
        }
    }

    partial class SendPassportAuthorizationFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 80, 97, 115, 115, 112, 111, 114, 116, 65, 117, 116, 104, 111, 114, 105, 122, 97, 116, 105, 111, 110, 70, 111, 114, 109 }));
        private static ReadOnlySpan<byte> propName_autorization_form_id => new byte[] { 97, 117, 116, 111, 114, 105, 122, 97, 116, 105, 111, 110, 95, 102, 111, 114, 109, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_autorization_form_id = JsonEncodedText.Encode(propName_autorization_form_id);
        private static ReadOnlySpan<byte> propName_types => new byte[] { 116, 121, 112, 101, 115 };
        private static readonly JsonEncodedText encodedPropName_types = JsonEncodedText.Encode(propName_types);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendPassportAuthorizationForm)tlobj;
            writer.WriteNumber(encodedPropName_autorization_form_id, obj.AutorizationFormId);
            if (obj.Types != null)
            {
                writer.WritePropertyName(encodedPropName_types);
                writer.WriteArray(obj.Types);
            }
        }
    }

    partial class SendPhoneNumberConfirmationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 67, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_hash => new byte[] { 104, 97, 115, 104 };
        private static readonly JsonEncodedText encodedPropName_hash = JsonEncodedText.Encode(propName_hash);
        private static ReadOnlySpan<byte> propName_phone_number => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_phone_number = JsonEncodedText.Encode(propName_phone_number);
        private static ReadOnlySpan<byte> propName_settings => new byte[] { 115, 101, 116, 116, 105, 110, 103, 115 };
        private static readonly JsonEncodedText encodedPropName_settings = JsonEncodedText.Encode(propName_settings);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendPhoneNumberConfirmationCode)tlobj;
            writer.WriteString(encodedPropName_hash, obj.Hash);
            writer.WriteString(encodedPropName_phone_number, obj.PhoneNumber);
            if (obj.Settings != null)
            {
                writer.WritePropertyName(encodedPropName_settings);
                writer.WriteTLObjectValue(obj.Settings);
            }
        }
    }

    partial class ResendPhoneNumberConfirmationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 115, 101, 110, 100, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 67, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckPhoneNumberConfirmationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 67, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110, 67, 111, 100, 101 }));
        private static ReadOnlySpan<byte> propName_code => new byte[] { 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_code = JsonEncodedText.Encode(propName_code);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckPhoneNumberConfirmationCode)tlobj;
            writer.WriteString(encodedPropName_code, obj.Code);
        }
    }

    partial class SetBotUpdatesStatusConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 66, 111, 116, 85, 112, 100, 97, 116, 101, 115, 83, 116, 97, 116, 117, 115 }));
        private static ReadOnlySpan<byte> propName_pending_update_count => new byte[] { 112, 101, 110, 100, 105, 110, 103, 95, 117, 112, 100, 97, 116, 101, 95, 99, 111, 117, 110, 116 };
        private static readonly JsonEncodedText encodedPropName_pending_update_count = JsonEncodedText.Encode(propName_pending_update_count);
        private static ReadOnlySpan<byte> propName_error_message => new byte[] { 101, 114, 114, 111, 114, 95, 109, 101, 115, 115, 97, 103, 101 };
        private static readonly JsonEncodedText encodedPropName_error_message = JsonEncodedText.Encode(propName_error_message);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetBotUpdatesStatus)tlobj;
            writer.WriteNumber(encodedPropName_pending_update_count, obj.PendingUpdateCount);
            writer.WriteString(encodedPropName_error_message, obj.ErrorMessage);
        }
    }

    partial class UploadStickerFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 117, 112, 108, 111, 97, 100, 83, 116, 105, 99, 107, 101, 114, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UploadStickerFile)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class GetSuggestedStickerSetNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 83, 117, 103, 103, 101, 115, 116, 101, 100, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 78, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetSuggestedStickerSetName)tlobj;
            writer.WriteString(encodedPropName_title, obj.Title);
        }
    }

    partial class CheckStickerSetNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 104, 101, 99, 107, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 78, 97, 109, 101 }));
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckStickerSetName)tlobj;
            writer.WriteString(encodedPropName_name, obj.Name);
        }
    }

    partial class CreateNewStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 99, 114, 101, 97, 116, 101, 78, 101, 119, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_title => new byte[] { 116, 105, 116, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_title = JsonEncodedText.Encode(propName_title);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_is_masks => new byte[] { 105, 115, 95, 109, 97, 115, 107, 115 };
        private static readonly JsonEncodedText encodedPropName_is_masks = JsonEncodedText.Encode(propName_is_masks);
        private static ReadOnlySpan<byte> propName_stickers => new byte[] { 115, 116, 105, 99, 107, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_stickers = JsonEncodedText.Encode(propName_stickers);
        private static ReadOnlySpan<byte> propName_source => new byte[] { 115, 111, 117, 114, 99, 101 };
        private static readonly JsonEncodedText encodedPropName_source = JsonEncodedText.Encode(propName_source);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateNewStickerSet)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteString(encodedPropName_title, obj.Title);
            writer.WriteString(encodedPropName_name, obj.Name);
            writer.WriteBoolean(encodedPropName_is_masks, obj.IsMasks);
            if (obj.Stickers != null)
            {
                writer.WritePropertyName(encodedPropName_stickers);
                writer.WriteArray(obj.Stickers);
            }
            writer.WriteString(encodedPropName_source, obj.Source);
        }
    }

    partial class AddStickerToSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 83, 116, 105, 99, 107, 101, 114, 84, 111, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddStickerToSet)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteString(encodedPropName_name, obj.Name);
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class SetStickerSetThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 83, 116, 105, 99, 107, 101, 114, 83, 101, 116, 84, 104, 117, 109, 98, 110, 97, 105, 108 }));
        private static ReadOnlySpan<byte> propName_user_id => new byte[] { 117, 115, 101, 114, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_user_id = JsonEncodedText.Encode(propName_user_id);
        private static ReadOnlySpan<byte> propName_name => new byte[] { 110, 97, 109, 101 };
        private static readonly JsonEncodedText encodedPropName_name = JsonEncodedText.Encode(propName_name);
        private static ReadOnlySpan<byte> propName_thumbnail => new byte[] { 116, 104, 117, 109, 98, 110, 97, 105, 108 };
        private static readonly JsonEncodedText encodedPropName_thumbnail = JsonEncodedText.Encode(propName_thumbnail);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetStickerSetThumbnail)tlobj;
            writer.WriteNumber(encodedPropName_user_id, obj.UserId);
            writer.WriteString(encodedPropName_name, obj.Name);
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(encodedPropName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
        }
    }

    partial class SetStickerPositionInSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 83, 116, 105, 99, 107, 101, 114, 80, 111, 115, 105, 116, 105, 111, 110, 73, 110, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        private static ReadOnlySpan<byte> propName_position => new byte[] { 112, 111, 115, 105, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_position = JsonEncodedText.Encode(propName_position);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetStickerPositionInSet)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            writer.WriteNumber(encodedPropName_position, obj.Position);
        }
    }

    partial class RemoveStickerFromSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 83, 116, 105, 99, 107, 101, 114, 70, 114, 111, 109, 83, 101, 116 }));
        private static ReadOnlySpan<byte> propName_sticker => new byte[] { 115, 116, 105, 99, 107, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_sticker = JsonEncodedText.Encode(propName_sticker);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveStickerFromSet)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(encodedPropName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class GetMapThumbnailFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 77, 97, 112, 84, 104, 117, 109, 98, 110, 97, 105, 108, 70, 105, 108, 101 }));
        private static ReadOnlySpan<byte> propName_location => new byte[] { 108, 111, 99, 97, 116, 105, 111, 110 };
        private static readonly JsonEncodedText encodedPropName_location = JsonEncodedText.Encode(propName_location);
        private static ReadOnlySpan<byte> propName_zoom => new byte[] { 122, 111, 111, 109 };
        private static readonly JsonEncodedText encodedPropName_zoom = JsonEncodedText.Encode(propName_zoom);
        private static ReadOnlySpan<byte> propName_width => new byte[] { 119, 105, 100, 116, 104 };
        private static readonly JsonEncodedText encodedPropName_width = JsonEncodedText.Encode(propName_width);
        private static ReadOnlySpan<byte> propName_height => new byte[] { 104, 101, 105, 103, 104, 116 };
        private static readonly JsonEncodedText encodedPropName_height = JsonEncodedText.Encode(propName_height);
        private static ReadOnlySpan<byte> propName_scale => new byte[] { 115, 99, 97, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_scale = JsonEncodedText.Encode(propName_scale);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMapThumbnailFile)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(encodedPropName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(encodedPropName_zoom, obj.Zoom);
            writer.WriteNumber(encodedPropName_width, obj.Width);
            writer.WriteNumber(encodedPropName_height, obj.Height);
            writer.WriteNumber(encodedPropName_scale, obj.Scale);
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
        }
    }

    partial class AcceptTermsOfServiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 99, 99, 101, 112, 116, 84, 101, 114, 109, 115, 79, 102, 83, 101, 114, 118, 105, 99, 101 }));
        private static ReadOnlySpan<byte> propName_terms_of_service_id => new byte[] { 116, 101, 114, 109, 115, 95, 111, 102, 95, 115, 101, 114, 118, 105, 99, 101, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_terms_of_service_id = JsonEncodedText.Encode(propName_terms_of_service_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AcceptTermsOfService)tlobj;
            writer.WriteString(encodedPropName_terms_of_service_id, obj.TermsOfServiceId);
        }
    }

    partial class SendCustomRequestConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 110, 100, 67, 117, 115, 116, 111, 109, 82, 101, 113, 117, 101, 115, 116 }));
        private static ReadOnlySpan<byte> propName_method => new byte[] { 109, 101, 116, 104, 111, 100 };
        private static readonly JsonEncodedText encodedPropName_method = JsonEncodedText.Encode(propName_method);
        private static ReadOnlySpan<byte> propName_parameters => new byte[] { 112, 97, 114, 97, 109, 101, 116, 101, 114, 115 };
        private static readonly JsonEncodedText encodedPropName_parameters = JsonEncodedText.Encode(propName_parameters);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendCustomRequest)tlobj;
            writer.WriteString(encodedPropName_method, obj.Method);
            writer.WriteString(encodedPropName_parameters, obj.Parameters);
        }
    }

    partial class AnswerCustomQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 110, 115, 119, 101, 114, 67, 117, 115, 116, 111, 109, 81, 117, 101, 114, 121 }));
        private static ReadOnlySpan<byte> propName_custom_query_id => new byte[] { 99, 117, 115, 116, 111, 109, 95, 113, 117, 101, 114, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_custom_query_id = JsonEncodedText.Encode(propName_custom_query_id);
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnswerCustomQuery)tlobj;
            writer.WritePropertyName(encodedPropName_custom_query_id);
            writer.WriteInt64String(obj.CustomQueryId);
            writer.WriteString(encodedPropName_data, obj.Data);
        }
    }

    partial class SetAlarmConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 65, 108, 97, 114, 109 }));
        private static ReadOnlySpan<byte> propName_seconds => new byte[] { 115, 101, 99, 111, 110, 100, 115 };
        private static readonly JsonEncodedText encodedPropName_seconds = JsonEncodedText.Encode(propName_seconds);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetAlarm)tlobj;
            writer.WriteNumber(encodedPropName_seconds, obj.Seconds);
        }
    }

    partial class GetCountriesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 111, 117, 110, 116, 114, 105, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetCountryCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 67, 111, 117, 110, 116, 114, 121, 67, 111, 100, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetPhoneNumberInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_phone_number_prefix => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114, 95, 112, 114, 101, 102, 105, 120 };
        private static readonly JsonEncodedText encodedPropName_phone_number_prefix = JsonEncodedText.Encode(propName_phone_number_prefix);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPhoneNumberInfo)tlobj;
            writer.WriteString(encodedPropName_phone_number_prefix, obj.PhoneNumberPrefix);
        }
    }

    partial class GetPhoneNumberInfoSyncConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 104, 111, 110, 101, 78, 117, 109, 98, 101, 114, 73, 110, 102, 111, 83, 121, 110, 99 }));
        private static ReadOnlySpan<byte> propName_language_code => new byte[] { 108, 97, 110, 103, 117, 97, 103, 101, 95, 99, 111, 100, 101 };
        private static readonly JsonEncodedText encodedPropName_language_code = JsonEncodedText.Encode(propName_language_code);
        private static ReadOnlySpan<byte> propName_phone_number_prefix => new byte[] { 112, 104, 111, 110, 101, 95, 110, 117, 109, 98, 101, 114, 95, 112, 114, 101, 102, 105, 120 };
        private static readonly JsonEncodedText encodedPropName_phone_number_prefix = JsonEncodedText.Encode(propName_phone_number_prefix);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPhoneNumberInfoSync)tlobj;
            writer.WriteString(encodedPropName_language_code, obj.LanguageCode);
            writer.WriteString(encodedPropName_phone_number_prefix, obj.PhoneNumberPrefix);
        }
    }

    partial class GetApplicationDownloadLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 68, 111, 119, 110, 108, 111, 97, 100, 76, 105, 110, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetDeepLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 68, 101, 101, 112, 76, 105, 110, 107, 73, 110, 102, 111 }));
        private static ReadOnlySpan<byte> propName_link => new byte[] { 108, 105, 110, 107 };
        private static readonly JsonEncodedText encodedPropName_link = JsonEncodedText.Encode(propName_link);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetDeepLinkInfo)tlobj;
            writer.WriteString(encodedPropName_link, obj.Link);
        }
    }

    partial class GetApplicationConfigConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 65, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 67, 111, 110, 102, 105, 103 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SaveApplicationLogEventConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 97, 118, 101, 65, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 76, 111, 103, 69, 118, 101, 110, 116 }));
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_chat_id => new byte[] { 99, 104, 97, 116, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_chat_id = JsonEncodedText.Encode(propName_chat_id);
        private static ReadOnlySpan<byte> propName_data => new byte[] { 100, 97, 116, 97 };
        private static readonly JsonEncodedText encodedPropName_data = JsonEncodedText.Encode(propName_data);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SaveApplicationLogEvent)tlobj;
            writer.WriteString(encodedPropName_type, obj.Type);
            writer.WriteNumber(encodedPropName_chat_id, obj.ChatId);
            if (obj.Data != null)
            {
                writer.WritePropertyName(encodedPropName_data);
                writer.WriteTLObjectValue(obj.Data);
            }
        }
    }

    partial class AddProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 80, 114, 111, 120, 121 }));
        private static ReadOnlySpan<byte> propName_server => new byte[] { 115, 101, 114, 118, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_server = JsonEncodedText.Encode(propName_server);
        private static ReadOnlySpan<byte> propName_port => new byte[] { 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_port = JsonEncodedText.Encode(propName_port);
        private static ReadOnlySpan<byte> propName_enable => new byte[] { 101, 110, 97, 98, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_enable = JsonEncodedText.Encode(propName_enable);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddProxy)tlobj;
            writer.WriteString(encodedPropName_server, obj.Server);
            writer.WriteNumber(encodedPropName_port, obj.Port);
            writer.WriteBoolean(encodedPropName_enable, obj.Enable);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class EditProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 100, 105, 116, 80, 114, 111, 120, 121 }));
        private static ReadOnlySpan<byte> propName_proxy_id => new byte[] { 112, 114, 111, 120, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_proxy_id = JsonEncodedText.Encode(propName_proxy_id);
        private static ReadOnlySpan<byte> propName_server => new byte[] { 115, 101, 114, 118, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_server = JsonEncodedText.Encode(propName_server);
        private static ReadOnlySpan<byte> propName_port => new byte[] { 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_port = JsonEncodedText.Encode(propName_port);
        private static ReadOnlySpan<byte> propName_enable => new byte[] { 101, 110, 97, 98, 108, 101 };
        private static readonly JsonEncodedText encodedPropName_enable = JsonEncodedText.Encode(propName_enable);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditProxy)tlobj;
            writer.WriteNumber(encodedPropName_proxy_id, obj.ProxyId);
            writer.WriteString(encodedPropName_server, obj.Server);
            writer.WriteNumber(encodedPropName_port, obj.Port);
            writer.WriteBoolean(encodedPropName_enable, obj.Enable);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class EnableProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 101, 110, 97, 98, 108, 101, 80, 114, 111, 120, 121 }));
        private static ReadOnlySpan<byte> propName_proxy_id => new byte[] { 112, 114, 111, 120, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_proxy_id = JsonEncodedText.Encode(propName_proxy_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EnableProxy)tlobj;
            writer.WriteNumber(encodedPropName_proxy_id, obj.ProxyId);
        }
    }

    partial class DisableProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 100, 105, 115, 97, 98, 108, 101, 80, 114, 111, 120, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class RemoveProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 114, 101, 109, 111, 118, 101, 80, 114, 111, 120, 121 }));
        private static ReadOnlySpan<byte> propName_proxy_id => new byte[] { 112, 114, 111, 120, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_proxy_id = JsonEncodedText.Encode(propName_proxy_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveProxy)tlobj;
            writer.WriteNumber(encodedPropName_proxy_id, obj.ProxyId);
        }
    }

    partial class GetProxiesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 114, 111, 120, 105, 101, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetProxyLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 80, 114, 111, 120, 121, 76, 105, 110, 107 }));
        private static ReadOnlySpan<byte> propName_proxy_id => new byte[] { 112, 114, 111, 120, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_proxy_id = JsonEncodedText.Encode(propName_proxy_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetProxyLink)tlobj;
            writer.WriteNumber(encodedPropName_proxy_id, obj.ProxyId);
        }
    }

    partial class PingProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 112, 105, 110, 103, 80, 114, 111, 120, 121 }));
        private static ReadOnlySpan<byte> propName_proxy_id => new byte[] { 112, 114, 111, 120, 121, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_proxy_id = JsonEncodedText.Encode(propName_proxy_id);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PingProxy)tlobj;
            writer.WriteNumber(encodedPropName_proxy_id, obj.ProxyId);
        }
    }

    partial class SetLogStreamConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 76, 111, 103, 83, 116, 114, 101, 97, 109 }));
        private static ReadOnlySpan<byte> propName_log_stream => new byte[] { 108, 111, 103, 95, 115, 116, 114, 101, 97, 109 };
        private static readonly JsonEncodedText encodedPropName_log_stream = JsonEncodedText.Encode(propName_log_stream);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetLogStream)tlobj;
            if (obj.LogStream != null)
            {
                writer.WritePropertyName(encodedPropName_log_stream);
                writer.WriteTLObjectValue(obj.LogStream);
            }
        }
    }

    partial class GetLogStreamConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 76, 111, 103, 83, 116, 114, 101, 97, 109 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetLogVerbosityLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 76, 111, 103, 86, 101, 114, 98, 111, 115, 105, 116, 121, 76, 101, 118, 101, 108 }));
        private static ReadOnlySpan<byte> propName_new_verbosity_level => new byte[] { 110, 101, 119, 95, 118, 101, 114, 98, 111, 115, 105, 116, 121, 95, 108, 101, 118, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_new_verbosity_level = JsonEncodedText.Encode(propName_new_verbosity_level);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetLogVerbosityLevel)tlobj;
            writer.WriteNumber(encodedPropName_new_verbosity_level, obj.NewVerbosityLevel);
        }
    }

    partial class GetLogVerbosityLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 76, 111, 103, 86, 101, 114, 98, 111, 115, 105, 116, 121, 76, 101, 118, 101, 108 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetLogTagsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 76, 111, 103, 84, 97, 103, 115 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetLogTagVerbosityLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 115, 101, 116, 76, 111, 103, 84, 97, 103, 86, 101, 114, 98, 111, 115, 105, 116, 121, 76, 101, 118, 101, 108 }));
        private static ReadOnlySpan<byte> propName_tag => new byte[] { 116, 97, 103 };
        private static readonly JsonEncodedText encodedPropName_tag = JsonEncodedText.Encode(propName_tag);
        private static ReadOnlySpan<byte> propName_new_verbosity_level => new byte[] { 110, 101, 119, 95, 118, 101, 114, 98, 111, 115, 105, 116, 121, 95, 108, 101, 118, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_new_verbosity_level = JsonEncodedText.Encode(propName_new_verbosity_level);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetLogTagVerbosityLevel)tlobj;
            writer.WriteString(encodedPropName_tag, obj.Tag);
            writer.WriteNumber(encodedPropName_new_verbosity_level, obj.NewVerbosityLevel);
        }
    }

    partial class GetLogTagVerbosityLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 103, 101, 116, 76, 111, 103, 84, 97, 103, 86, 101, 114, 98, 111, 115, 105, 116, 121, 76, 101, 118, 101, 108 }));
        private static ReadOnlySpan<byte> propName_tag => new byte[] { 116, 97, 103 };
        private static readonly JsonEncodedText encodedPropName_tag = JsonEncodedText.Encode(propName_tag);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLogTagVerbosityLevel)tlobj;
            writer.WriteString(encodedPropName_tag, obj.Tag);
        }
    }

    partial class AddLogMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 97, 100, 100, 76, 111, 103, 77, 101, 115, 115, 97, 103, 101 }));
        private static ReadOnlySpan<byte> propName_verbosity_level => new byte[] { 118, 101, 114, 98, 111, 115, 105, 116, 121, 95, 108, 101, 118, 101, 108 };
        private static readonly JsonEncodedText encodedPropName_verbosity_level = JsonEncodedText.Encode(propName_verbosity_level);
        private static ReadOnlySpan<byte> propName_text => new byte[] { 116, 101, 120, 116 };
        private static readonly JsonEncodedText encodedPropName_text = JsonEncodedText.Encode(propName_text);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddLogMessage)tlobj;
            writer.WriteNumber(encodedPropName_verbosity_level, obj.VerbosityLevel);
            writer.WriteString(encodedPropName_text, obj.Text);
        }
    }

    partial class TestCallEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 67, 97, 108, 108, 69, 109, 112, 116, 121 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TestCallStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 67, 97, 108, 108, 83, 116, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_x => new byte[] { 120 };
        private static readonly JsonEncodedText encodedPropName_x = JsonEncodedText.Encode(propName_x);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallString)tlobj;
            writer.WriteString(encodedPropName_x, obj.X);
        }
    }

    partial class TestCallBytesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 67, 97, 108, 108, 66, 121, 116, 101, 115 }));
        private static ReadOnlySpan<byte> propName_x => new byte[] { 120 };
        private static readonly JsonEncodedText encodedPropName_x = JsonEncodedText.Encode(propName_x);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallBytes)tlobj;
            if (!obj.X.IsEmpty)
            {
                writer.WriteBase64String(encodedPropName_x, obj.X.Span);
            }
        }
    }

    partial class TestCallVectorIntConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 67, 97, 108, 108, 86, 101, 99, 116, 111, 114, 73, 110, 116 }));
        private static ReadOnlySpan<byte> propName_x => new byte[] { 120 };
        private static readonly JsonEncodedText encodedPropName_x = JsonEncodedText.Encode(propName_x);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallVectorInt)tlobj;
            if (obj.X != null)
            {
                writer.WritePropertyName(encodedPropName_x);
                writer.WriteArray(obj.X);
            }
        }
    }

    partial class TestCallVectorIntObjectConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 67, 97, 108, 108, 86, 101, 99, 116, 111, 114, 73, 110, 116, 79, 98, 106, 101, 99, 116 }));
        private static ReadOnlySpan<byte> propName_x => new byte[] { 120 };
        private static readonly JsonEncodedText encodedPropName_x = JsonEncodedText.Encode(propName_x);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallVectorIntObject)tlobj;
            if (obj.X != null)
            {
                writer.WritePropertyName(encodedPropName_x);
                writer.WriteArray(obj.X);
            }
        }
    }

    partial class TestCallVectorStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 67, 97, 108, 108, 86, 101, 99, 116, 111, 114, 83, 116, 114, 105, 110, 103 }));
        private static ReadOnlySpan<byte> propName_x => new byte[] { 120 };
        private static readonly JsonEncodedText encodedPropName_x = JsonEncodedText.Encode(propName_x);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallVectorString)tlobj;
            if (obj.X != null)
            {
                writer.WritePropertyName(encodedPropName_x);
                writer.WriteArray(obj.X);
            }
        }
    }

    partial class TestCallVectorStringObjectConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 67, 97, 108, 108, 86, 101, 99, 116, 111, 114, 83, 116, 114, 105, 110, 103, 79, 98, 106, 101, 99, 116 }));
        private static ReadOnlySpan<byte> propName_x => new byte[] { 120 };
        private static readonly JsonEncodedText encodedPropName_x = JsonEncodedText.Encode(propName_x);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallVectorStringObject)tlobj;
            if (obj.X != null)
            {
                writer.WritePropertyName(encodedPropName_x);
                writer.WriteArray(obj.X);
            }
        }
    }

    partial class TestSquareIntConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 83, 113, 117, 97, 114, 101, 73, 110, 116 }));
        private static ReadOnlySpan<byte> propName_x => new byte[] { 120 };
        private static readonly JsonEncodedText encodedPropName_x = JsonEncodedText.Encode(propName_x);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestSquareInt)tlobj;
            writer.WriteNumber(encodedPropName_x, obj.X);
        }
    }

    partial class TestNetworkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 78, 101, 116, 119, 111, 114, 107 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TestProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 80, 114, 111, 120, 121 }));
        private static ReadOnlySpan<byte> propName_server => new byte[] { 115, 101, 114, 118, 101, 114 };
        private static readonly JsonEncodedText encodedPropName_server = JsonEncodedText.Encode(propName_server);
        private static ReadOnlySpan<byte> propName_port => new byte[] { 112, 111, 114, 116 };
        private static readonly JsonEncodedText encodedPropName_port = JsonEncodedText.Encode(propName_port);
        private static ReadOnlySpan<byte> propName_type => new byte[] { 116, 121, 112, 101 };
        private static readonly JsonEncodedText encodedPropName_type = JsonEncodedText.Encode(propName_type);
        private static ReadOnlySpan<byte> propName_dc_id => new byte[] { 100, 99, 95, 105, 100 };
        private static readonly JsonEncodedText encodedPropName_dc_id = JsonEncodedText.Encode(propName_dc_id);
        private static ReadOnlySpan<byte> propName_timeout => new byte[] { 116, 105, 109, 101, 111, 117, 116 };
        private static readonly JsonEncodedText encodedPropName_timeout = JsonEncodedText.Encode(propName_timeout);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestProxy)tlobj;
            writer.WriteString(encodedPropName_server, obj.Server);
            writer.WriteNumber(encodedPropName_port, obj.Port);
            if (obj.Type != null)
            {
                writer.WritePropertyName(encodedPropName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteNumber(encodedPropName_dc_id, obj.DcId);
            writer.WriteNumber(encodedPropName_timeout, obj.Timeout);
        }
    }

    partial class TestGetDifferenceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 71, 101, 116, 68, 105, 102, 102, 101, 114, 101, 110, 99, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TestUseUpdateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 85, 115, 101, 85, 112, 100, 97, 116, 101 }));
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TestReturnErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode(new ReadOnlySpan<byte>(new byte[] { 116, 101, 115, 116, 82, 101, 116, 117, 114, 110, 69, 114, 114, 111, 114 }));
        private static ReadOnlySpan<byte> propName_error => new byte[] { 101, 114, 114, 111, 114 };
        private static readonly JsonEncodedText encodedPropName_error = JsonEncodedText.Encode(propName_error);
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestReturnError)tlobj;
            if (obj.Error != null)
            {
                writer.WritePropertyName(encodedPropName_error);
                writer.WriteTLObjectValue(obj.Error);
            }
        }
    }

}
