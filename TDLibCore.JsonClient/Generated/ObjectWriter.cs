// generated by codegen/genwriter.rb
using System;
using System.Text.Json;
using TDLibCore.Api;

namespace TDLibCore.JsonClient.ObjectConverter
{
    partial class ErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("error");
        private static readonly JsonEncodedText propName_code = JsonEncodedText.Encode("code");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Error)tlobj;
            writer.WriteNumber(propName_code, obj.Code);
            writer.WriteString(propName_message, obj.Message);
        }
    }

    partial class OkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("ok");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TdlibParametersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("tdlibParameters");
        private static readonly JsonEncodedText propName_use_test_dc = JsonEncodedText.Encode("use_test_dc");
        private static readonly JsonEncodedText propName_database_directory = JsonEncodedText.Encode("database_directory");
        private static readonly JsonEncodedText propName_files_directory = JsonEncodedText.Encode("files_directory");
        private static readonly JsonEncodedText propName_use_file_database = JsonEncodedText.Encode("use_file_database");
        private static readonly JsonEncodedText propName_use_chat_info_database = JsonEncodedText.Encode("use_chat_info_database");
        private static readonly JsonEncodedText propName_use_message_database = JsonEncodedText.Encode("use_message_database");
        private static readonly JsonEncodedText propName_use_secret_chats = JsonEncodedText.Encode("use_secret_chats");
        private static readonly JsonEncodedText propName_api_id = JsonEncodedText.Encode("api_id");
        private static readonly JsonEncodedText propName_api_hash = JsonEncodedText.Encode("api_hash");
        private static readonly JsonEncodedText propName_system_language_code = JsonEncodedText.Encode("system_language_code");
        private static readonly JsonEncodedText propName_device_model = JsonEncodedText.Encode("device_model");
        private static readonly JsonEncodedText propName_system_version = JsonEncodedText.Encode("system_version");
        private static readonly JsonEncodedText propName_application_version = JsonEncodedText.Encode("application_version");
        private static readonly JsonEncodedText propName_enable_storage_optimizer = JsonEncodedText.Encode("enable_storage_optimizer");
        private static readonly JsonEncodedText propName_ignore_file_names = JsonEncodedText.Encode("ignore_file_names");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TdlibParameters)tlobj;
            writer.WriteBoolean(propName_use_test_dc, obj.UseTestDc);
            writer.WriteString(propName_database_directory, obj.DatabaseDirectory);
            writer.WriteString(propName_files_directory, obj.FilesDirectory);
            writer.WriteBoolean(propName_use_file_database, obj.UseFileDatabase);
            writer.WriteBoolean(propName_use_chat_info_database, obj.UseChatInfoDatabase);
            writer.WriteBoolean(propName_use_message_database, obj.UseMessageDatabase);
            writer.WriteBoolean(propName_use_secret_chats, obj.UseSecretChats);
            writer.WriteNumber(propName_api_id, obj.ApiId);
            writer.WriteString(propName_api_hash, obj.ApiHash);
            writer.WriteString(propName_system_language_code, obj.SystemLanguageCode);
            writer.WriteString(propName_device_model, obj.DeviceModel);
            writer.WriteString(propName_system_version, obj.SystemVersion);
            writer.WriteString(propName_application_version, obj.ApplicationVersion);
            writer.WriteBoolean(propName_enable_storage_optimizer, obj.EnableStorageOptimizer);
            writer.WriteBoolean(propName_ignore_file_names, obj.IgnoreFileNames);
        }
    }

    partial class AuthenticationCodeTypeTelegramMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authenticationCodeTypeTelegramMessage");
        private static readonly JsonEncodedText propName_length = JsonEncodedText.Encode("length");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthenticationCodeTypeTelegramMessage)tlobj;
            writer.WriteNumber(propName_length, obj.Length);
        }
    }

    partial class AuthenticationCodeTypeSmsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authenticationCodeTypeSms");
        private static readonly JsonEncodedText propName_length = JsonEncodedText.Encode("length");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthenticationCodeTypeSms)tlobj;
            writer.WriteNumber(propName_length, obj.Length);
        }
    }

    partial class AuthenticationCodeTypeCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authenticationCodeTypeCall");
        private static readonly JsonEncodedText propName_length = JsonEncodedText.Encode("length");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthenticationCodeTypeCall)tlobj;
            writer.WriteNumber(propName_length, obj.Length);
        }
    }

    partial class AuthenticationCodeTypeFlashCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authenticationCodeTypeFlashCall");
        private static readonly JsonEncodedText propName_pattern = JsonEncodedText.Encode("pattern");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthenticationCodeTypeFlashCall)tlobj;
            writer.WriteString(propName_pattern, obj.Pattern);
        }
    }

    partial class AuthenticationCodeInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authenticationCodeInfo");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_next_type = JsonEncodedText.Encode("next_type");
        private static readonly JsonEncodedText propName_timeout = JsonEncodedText.Encode("timeout");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthenticationCodeInfo)tlobj;
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            if (obj.NextType != null)
            {
                writer.WritePropertyName(propName_next_type);
                writer.WriteTLObjectValue(obj.NextType);
            }
            writer.WriteNumber(propName_timeout, obj.Timeout);
        }
    }

    partial class EmailAddressAuthenticationCodeInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("emailAddressAuthenticationCodeInfo");
        private static readonly JsonEncodedText propName_email_address_pattern = JsonEncodedText.Encode("email_address_pattern");
        private static readonly JsonEncodedText propName_length = JsonEncodedText.Encode("length");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EmailAddressAuthenticationCodeInfo)tlobj;
            writer.WriteString(propName_email_address_pattern, obj.EmailAddressPattern);
            writer.WriteNumber(propName_length, obj.Length);
        }
    }

    partial class TextEntityConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntity");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_length = JsonEncodedText.Encode("length");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntity)tlobj;
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_length, obj.Length);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class TextEntitiesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntities");
        private static readonly JsonEncodedText propName_entities = JsonEncodedText.Encode("entities");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntities)tlobj;
            if (obj.Entities != null)
            {
                writer.WritePropertyName(propName_entities);
                writer.WriteArray(obj.Entities);
            }
        }
    }

    partial class FormattedTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("formattedText");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_entities = JsonEncodedText.Encode("entities");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (FormattedText)tlobj;
            writer.WriteString(propName_text, obj.Text);
            if (obj.Entities != null)
            {
                writer.WritePropertyName(propName_entities);
                writer.WriteArray(obj.Entities);
            }
        }
    }

    partial class TermsOfServiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("termsOfService");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_min_user_age = JsonEncodedText.Encode("min_user_age");
        private static readonly JsonEncodedText propName_show_popup = JsonEncodedText.Encode("show_popup");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TermsOfService)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteNumber(propName_min_user_age, obj.MinUserAge);
            writer.WriteBoolean(propName_show_popup, obj.ShowPopup);
        }
    }

    partial class AuthorizationStateWaitTdlibParametersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateWaitTdlibParameters");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AuthorizationStateWaitEncryptionKeyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateWaitEncryptionKey");
        private static readonly JsonEncodedText propName_is_encrypted = JsonEncodedText.Encode("is_encrypted");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthorizationStateWaitEncryptionKey)tlobj;
            writer.WriteBoolean(propName_is_encrypted, obj.IsEncrypted);
        }
    }

    partial class AuthorizationStateWaitPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateWaitPhoneNumber");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AuthorizationStateWaitCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateWaitCode");
        private static readonly JsonEncodedText propName_code_info = JsonEncodedText.Encode("code_info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthorizationStateWaitCode)tlobj;
            if (obj.CodeInfo != null)
            {
                writer.WritePropertyName(propName_code_info);
                writer.WriteTLObjectValue(obj.CodeInfo);
            }
        }
    }

    partial class AuthorizationStateWaitOtherDeviceConfirmationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateWaitOtherDeviceConfirmation");
        private static readonly JsonEncodedText propName_link = JsonEncodedText.Encode("link");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthorizationStateWaitOtherDeviceConfirmation)tlobj;
            writer.WriteString(propName_link, obj.Link);
        }
    }

    partial class AuthorizationStateWaitRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateWaitRegistration");
        private static readonly JsonEncodedText propName_terms_of_service = JsonEncodedText.Encode("terms_of_service");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthorizationStateWaitRegistration)tlobj;
            if (obj.TermsOfService != null)
            {
                writer.WritePropertyName(propName_terms_of_service);
                writer.WriteTLObjectValue(obj.TermsOfService);
            }
        }
    }

    partial class AuthorizationStateWaitPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateWaitPassword");
        private static readonly JsonEncodedText propName_password_hint = JsonEncodedText.Encode("password_hint");
        private static readonly JsonEncodedText propName_has_recovery_email_address = JsonEncodedText.Encode("has_recovery_email_address");
        private static readonly JsonEncodedText propName_recovery_email_address_pattern = JsonEncodedText.Encode("recovery_email_address_pattern");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AuthorizationStateWaitPassword)tlobj;
            writer.WriteString(propName_password_hint, obj.PasswordHint);
            writer.WriteBoolean(propName_has_recovery_email_address, obj.HasRecoveryEmailAddress);
            writer.WriteString(propName_recovery_email_address_pattern, obj.RecoveryEmailAddressPattern);
        }
    }

    partial class AuthorizationStateReadyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateReady");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AuthorizationStateLoggingOutConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateLoggingOut");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AuthorizationStateClosingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateClosing");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AuthorizationStateClosedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("authorizationStateClosed");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PasswordStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passwordState");
        private static readonly JsonEncodedText propName_has_password = JsonEncodedText.Encode("has_password");
        private static readonly JsonEncodedText propName_password_hint = JsonEncodedText.Encode("password_hint");
        private static readonly JsonEncodedText propName_has_recovery_email_address = JsonEncodedText.Encode("has_recovery_email_address");
        private static readonly JsonEncodedText propName_has_passport_data = JsonEncodedText.Encode("has_passport_data");
        private static readonly JsonEncodedText propName_recovery_email_address_code_info = JsonEncodedText.Encode("recovery_email_address_code_info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PasswordState)tlobj;
            writer.WriteBoolean(propName_has_password, obj.HasPassword);
            writer.WriteString(propName_password_hint, obj.PasswordHint);
            writer.WriteBoolean(propName_has_recovery_email_address, obj.HasRecoveryEmailAddress);
            writer.WriteBoolean(propName_has_passport_data, obj.HasPassportData);
            if (obj.RecoveryEmailAddressCodeInfo != null)
            {
                writer.WritePropertyName(propName_recovery_email_address_code_info);
                writer.WriteTLObjectValue(obj.RecoveryEmailAddressCodeInfo);
            }
        }
    }

    partial class RecoveryEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("recoveryEmailAddress");
        private static readonly JsonEncodedText propName_recovery_email_address = JsonEncodedText.Encode("recovery_email_address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RecoveryEmailAddress)tlobj;
            writer.WriteString(propName_recovery_email_address, obj.RecoveryEmailAddress_);
        }
    }

    partial class TemporaryPasswordStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("temporaryPasswordState");
        private static readonly JsonEncodedText propName_has_password = JsonEncodedText.Encode("has_password");
        private static readonly JsonEncodedText propName_valid_for = JsonEncodedText.Encode("valid_for");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TemporaryPasswordState)tlobj;
            writer.WriteBoolean(propName_has_password, obj.HasPassword);
            writer.WriteNumber(propName_valid_for, obj.ValidFor);
        }
    }

    partial class LocalFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("localFile");
        private static readonly JsonEncodedText propName_path = JsonEncodedText.Encode("path");
        private static readonly JsonEncodedText propName_can_be_downloaded = JsonEncodedText.Encode("can_be_downloaded");
        private static readonly JsonEncodedText propName_can_be_deleted = JsonEncodedText.Encode("can_be_deleted");
        private static readonly JsonEncodedText propName_is_downloading_active = JsonEncodedText.Encode("is_downloading_active");
        private static readonly JsonEncodedText propName_is_downloading_completed = JsonEncodedText.Encode("is_downloading_completed");
        private static readonly JsonEncodedText propName_download_offset = JsonEncodedText.Encode("download_offset");
        private static readonly JsonEncodedText propName_downloaded_prefix_size = JsonEncodedText.Encode("downloaded_prefix_size");
        private static readonly JsonEncodedText propName_downloaded_size = JsonEncodedText.Encode("downloaded_size");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LocalFile)tlobj;
            writer.WriteString(propName_path, obj.Path);
            writer.WriteBoolean(propName_can_be_downloaded, obj.CanBeDownloaded);
            writer.WriteBoolean(propName_can_be_deleted, obj.CanBeDeleted);
            writer.WriteBoolean(propName_is_downloading_active, obj.IsDownloadingActive);
            writer.WriteBoolean(propName_is_downloading_completed, obj.IsDownloadingCompleted);
            writer.WriteNumber(propName_download_offset, obj.DownloadOffset);
            writer.WriteNumber(propName_downloaded_prefix_size, obj.DownloadedPrefixSize);
            writer.WriteNumber(propName_downloaded_size, obj.DownloadedSize);
        }
    }

    partial class RemoteFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("remoteFile");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_unique_id = JsonEncodedText.Encode("unique_id");
        private static readonly JsonEncodedText propName_is_uploading_active = JsonEncodedText.Encode("is_uploading_active");
        private static readonly JsonEncodedText propName_is_uploading_completed = JsonEncodedText.Encode("is_uploading_completed");
        private static readonly JsonEncodedText propName_uploaded_size = JsonEncodedText.Encode("uploaded_size");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoteFile)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_unique_id, obj.UniqueId);
            writer.WriteBoolean(propName_is_uploading_active, obj.IsUploadingActive);
            writer.WriteBoolean(propName_is_uploading_completed, obj.IsUploadingCompleted);
            writer.WriteNumber(propName_uploaded_size, obj.UploadedSize);
        }
    }

    partial class FileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("file");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_size = JsonEncodedText.Encode("size");
        private static readonly JsonEncodedText propName_expected_size = JsonEncodedText.Encode("expected_size");
        private static readonly JsonEncodedText propName_local = JsonEncodedText.Encode("local");
        private static readonly JsonEncodedText propName_remote = JsonEncodedText.Encode("remote");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (File)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteNumber(propName_size, obj.Size);
            writer.WriteNumber(propName_expected_size, obj.ExpectedSize);
            if (obj.Local != null)
            {
                writer.WritePropertyName(propName_local);
                writer.WriteTLObjectValue(obj.Local);
            }
            if (obj.Remote != null)
            {
                writer.WritePropertyName(propName_remote);
                writer.WriteTLObjectValue(obj.Remote);
            }
        }
    }

    partial class InputFileIdConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputFileId");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputFileId)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
        }
    }

    partial class InputFileRemoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputFileRemote");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputFileRemote)tlobj;
            writer.WriteString(propName_id, obj.Id);
        }
    }

    partial class InputFileLocalConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputFileLocal");
        private static readonly JsonEncodedText propName_path = JsonEncodedText.Encode("path");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputFileLocal)tlobj;
            writer.WriteString(propName_path, obj.Path);
        }
    }

    partial class InputFileGeneratedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputFileGenerated");
        private static readonly JsonEncodedText propName_original_path = JsonEncodedText.Encode("original_path");
        private static readonly JsonEncodedText propName_conversion = JsonEncodedText.Encode("conversion");
        private static readonly JsonEncodedText propName_expected_size = JsonEncodedText.Encode("expected_size");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputFileGenerated)tlobj;
            writer.WriteString(propName_original_path, obj.OriginalPath);
            writer.WriteString(propName_conversion, obj.Conversion);
            writer.WriteNumber(propName_expected_size, obj.ExpectedSize);
        }
    }

    partial class PhotoSizeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("photoSize");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_progressive_sizes = JsonEncodedText.Encode("progressive_sizes");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PhotoSize)tlobj;
            writer.WriteString(propName_type, obj.Type);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            if (obj.ProgressiveSizes != null)
            {
                writer.WritePropertyName(propName_progressive_sizes);
                writer.WriteArray(obj.ProgressiveSizes);
            }
        }
    }

    partial class MinithumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("minithumbnail");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Minithumbnail)tlobj;
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
        }
    }

    partial class ThumbnailFormatJpegConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("thumbnailFormatJpeg");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailFormatPngConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("thumbnailFormatPng");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailFormatWebpConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("thumbnailFormatWebp");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailFormatGifConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("thumbnailFormatGif");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailFormatTgsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("thumbnailFormatTgs");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailFormatMpeg4Converter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("thumbnailFormatMpeg4");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_format = JsonEncodedText.Encode("format");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_file = JsonEncodedText.Encode("file");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Thumbnail)tlobj;
            if (obj.Format != null)
            {
                writer.WritePropertyName(propName_format);
                writer.WriteTLObjectValue(obj.Format);
            }
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            if (obj.File != null)
            {
                writer.WritePropertyName(propName_file);
                writer.WriteTLObjectValue(obj.File);
            }
        }
    }

    partial class MaskPointForeheadConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("maskPointForehead");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MaskPointEyesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("maskPointEyes");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MaskPointMouthConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("maskPointMouth");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MaskPointChinConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("maskPointChin");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MaskPositionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("maskPosition");
        private static readonly JsonEncodedText propName_point = JsonEncodedText.Encode("point");
        private static readonly JsonEncodedText propName_x_shift = JsonEncodedText.Encode("x_shift");
        private static readonly JsonEncodedText propName_y_shift = JsonEncodedText.Encode("y_shift");
        private static readonly JsonEncodedText propName_scale = JsonEncodedText.Encode("scale");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MaskPosition)tlobj;
            if (obj.Point != null)
            {
                writer.WritePropertyName(propName_point);
                writer.WriteTLObjectValue(obj.Point);
            }
            writer.WriteNumber(propName_x_shift, obj.XShift);
            writer.WriteNumber(propName_y_shift, obj.YShift);
            writer.WriteNumber(propName_scale, obj.Scale);
        }
    }

    partial class PollOptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pollOption");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_voter_count = JsonEncodedText.Encode("voter_count");
        private static readonly JsonEncodedText propName_vote_percentage = JsonEncodedText.Encode("vote_percentage");
        private static readonly JsonEncodedText propName_is_chosen = JsonEncodedText.Encode("is_chosen");
        private static readonly JsonEncodedText propName_is_being_chosen = JsonEncodedText.Encode("is_being_chosen");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PollOption)tlobj;
            writer.WriteString(propName_text, obj.Text);
            writer.WriteNumber(propName_voter_count, obj.VoterCount);
            writer.WriteNumber(propName_vote_percentage, obj.VotePercentage);
            writer.WriteBoolean(propName_is_chosen, obj.IsChosen);
            writer.WriteBoolean(propName_is_being_chosen, obj.IsBeingChosen);
        }
    }

    partial class PollTypeRegularConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pollTypeRegular");
        private static readonly JsonEncodedText propName_allow_multiple_answers = JsonEncodedText.Encode("allow_multiple_answers");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PollTypeRegular)tlobj;
            writer.WriteBoolean(propName_allow_multiple_answers, obj.AllowMultipleAnswers);
        }
    }

    partial class PollTypeQuizConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pollTypeQuiz");
        private static readonly JsonEncodedText propName_correct_option_id = JsonEncodedText.Encode("correct_option_id");
        private static readonly JsonEncodedText propName_explanation = JsonEncodedText.Encode("explanation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PollTypeQuiz)tlobj;
            writer.WriteNumber(propName_correct_option_id, obj.CorrectOptionId);
            if (obj.Explanation != null)
            {
                writer.WritePropertyName(propName_explanation);
                writer.WriteTLObjectValue(obj.Explanation);
            }
        }
    }

    partial class AnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("animation");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_file_name = JsonEncodedText.Encode("file_name");
        private static readonly JsonEncodedText propName_mime_type = JsonEncodedText.Encode("mime_type");
        private static readonly JsonEncodedText propName_has_stickers = JsonEncodedText.Encode("has_stickers");
        private static readonly JsonEncodedText propName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Animation)tlobj;
            writer.WriteNumber(propName_duration, obj.Duration);
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            writer.WriteString(propName_file_name, obj.FileName);
            writer.WriteString(propName_mime_type, obj.MimeType);
            writer.WriteBoolean(propName_has_stickers, obj.HasStickers);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(propName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.Animation_ != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation_);
            }
        }
    }

    partial class AudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("audio");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_performer = JsonEncodedText.Encode("performer");
        private static readonly JsonEncodedText propName_file_name = JsonEncodedText.Encode("file_name");
        private static readonly JsonEncodedText propName_mime_type = JsonEncodedText.Encode("mime_type");
        private static readonly JsonEncodedText propName_album_cover_minithumbnail = JsonEncodedText.Encode("album_cover_minithumbnail");
        private static readonly JsonEncodedText propName_album_cover_thumbnail = JsonEncodedText.Encode("album_cover_thumbnail");
        private static readonly JsonEncodedText propName_audio = JsonEncodedText.Encode("audio");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Audio)tlobj;
            writer.WriteNumber(propName_duration, obj.Duration);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_performer, obj.Performer);
            writer.WriteString(propName_file_name, obj.FileName);
            writer.WriteString(propName_mime_type, obj.MimeType);
            if (obj.AlbumCoverMinithumbnail != null)
            {
                writer.WritePropertyName(propName_album_cover_minithumbnail);
                writer.WriteTLObjectValue(obj.AlbumCoverMinithumbnail);
            }
            if (obj.AlbumCoverThumbnail != null)
            {
                writer.WritePropertyName(propName_album_cover_thumbnail);
                writer.WriteTLObjectValue(obj.AlbumCoverThumbnail);
            }
            if (obj.Audio_ != null)
            {
                writer.WritePropertyName(propName_audio);
                writer.WriteTLObjectValue(obj.Audio_);
            }
        }
    }

    partial class DocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("document");
        private static readonly JsonEncodedText propName_file_name = JsonEncodedText.Encode("file_name");
        private static readonly JsonEncodedText propName_mime_type = JsonEncodedText.Encode("mime_type");
        private static readonly JsonEncodedText propName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_document = JsonEncodedText.Encode("document");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Document)tlobj;
            writer.WriteString(propName_file_name, obj.FileName);
            writer.WriteString(propName_mime_type, obj.MimeType);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(propName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.Document_ != null)
            {
                writer.WritePropertyName(propName_document);
                writer.WriteTLObjectValue(obj.Document_);
            }
        }
    }

    partial class PhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_has_stickers = JsonEncodedText.Encode("has_stickers");
        private static readonly JsonEncodedText propName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
        private static readonly JsonEncodedText propName_sizes = JsonEncodedText.Encode("sizes");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Photo)tlobj;
            writer.WriteBoolean(propName_has_stickers, obj.HasStickers);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(propName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Sizes != null)
            {
                writer.WritePropertyName(propName_sizes);
                writer.WriteArray(obj.Sizes);
            }
        }
    }

    partial class StickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sticker");
        private static readonly JsonEncodedText propName_set_id = JsonEncodedText.Encode("set_id");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_emoji = JsonEncodedText.Encode("emoji");
        private static readonly JsonEncodedText propName_is_animated = JsonEncodedText.Encode("is_animated");
        private static readonly JsonEncodedText propName_is_mask = JsonEncodedText.Encode("is_mask");
        private static readonly JsonEncodedText propName_mask_position = JsonEncodedText.Encode("mask_position");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Sticker)tlobj;
            writer.WritePropertyName(propName_set_id);
            writer.WriteInt64String(obj.SetId);
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            writer.WriteString(propName_emoji, obj.Emoji);
            writer.WriteBoolean(propName_is_animated, obj.IsAnimated);
            writer.WriteBoolean(propName_is_mask, obj.IsMask);
            if (obj.MaskPosition != null)
            {
                writer.WritePropertyName(propName_mask_position);
                writer.WriteTLObjectValue(obj.MaskPosition);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.Sticker_ != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker_);
            }
        }
    }

    partial class VideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("video");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_file_name = JsonEncodedText.Encode("file_name");
        private static readonly JsonEncodedText propName_mime_type = JsonEncodedText.Encode("mime_type");
        private static readonly JsonEncodedText propName_has_stickers = JsonEncodedText.Encode("has_stickers");
        private static readonly JsonEncodedText propName_supports_streaming = JsonEncodedText.Encode("supports_streaming");
        private static readonly JsonEncodedText propName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_video = JsonEncodedText.Encode("video");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Video)tlobj;
            writer.WriteNumber(propName_duration, obj.Duration);
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            writer.WriteString(propName_file_name, obj.FileName);
            writer.WriteString(propName_mime_type, obj.MimeType);
            writer.WriteBoolean(propName_has_stickers, obj.HasStickers);
            writer.WriteBoolean(propName_supports_streaming, obj.SupportsStreaming);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(propName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.Video_ != null)
            {
                writer.WritePropertyName(propName_video);
                writer.WriteTLObjectValue(obj.Video_);
            }
        }
    }

    partial class VideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("videoNote");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_length = JsonEncodedText.Encode("length");
        private static readonly JsonEncodedText propName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_video = JsonEncodedText.Encode("video");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (VideoNote)tlobj;
            writer.WriteNumber(propName_duration, obj.Duration);
            writer.WriteNumber(propName_length, obj.Length);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(propName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.Video != null)
            {
                writer.WritePropertyName(propName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
        }
    }

    partial class VoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("voiceNote");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_waveform = JsonEncodedText.Encode("waveform");
        private static readonly JsonEncodedText propName_mime_type = JsonEncodedText.Encode("mime_type");
        private static readonly JsonEncodedText propName_voice = JsonEncodedText.Encode("voice");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (VoiceNote)tlobj;
            writer.WriteNumber(propName_duration, obj.Duration);
            if (obj.Waveform != null)
            {
                writer.WriteBase64String(propName_waveform, obj.Waveform);
            }
            writer.WriteString(propName_mime_type, obj.MimeType);
            if (obj.Voice != null)
            {
                writer.WritePropertyName(propName_voice);
                writer.WriteTLObjectValue(obj.Voice);
            }
        }
    }

    partial class ContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("contact");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        private static readonly JsonEncodedText propName_first_name = JsonEncodedText.Encode("first_name");
        private static readonly JsonEncodedText propName_last_name = JsonEncodedText.Encode("last_name");
        private static readonly JsonEncodedText propName_vcard = JsonEncodedText.Encode("vcard");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Contact)tlobj;
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
            writer.WriteString(propName_first_name, obj.FirstName);
            writer.WriteString(propName_last_name, obj.LastName);
            writer.WriteString(propName_vcard, obj.Vcard);
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class LocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("location");
        private static readonly JsonEncodedText propName_latitude = JsonEncodedText.Encode("latitude");
        private static readonly JsonEncodedText propName_longitude = JsonEncodedText.Encode("longitude");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Location)tlobj;
            writer.WriteNumber(propName_latitude, obj.Latitude);
            writer.WriteNumber(propName_longitude, obj.Longitude);
        }
    }

    partial class VenueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("venue");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_address = JsonEncodedText.Encode("address");
        private static readonly JsonEncodedText propName_provider = JsonEncodedText.Encode("provider");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Venue)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_address, obj.Address);
            writer.WriteString(propName_provider, obj.Provider);
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_type, obj.Type);
        }
    }

    partial class GameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("game");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_short_name = JsonEncodedText.Encode("short_name");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Game)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(propName_short_name, obj.ShortName);
            writer.WriteString(propName_title, obj.Title);
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(propName_description, obj.Description);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
        }
    }

    partial class PollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("poll");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_question = JsonEncodedText.Encode("question");
        private static readonly JsonEncodedText propName_options = JsonEncodedText.Encode("options");
        private static readonly JsonEncodedText propName_total_voter_count = JsonEncodedText.Encode("total_voter_count");
        private static readonly JsonEncodedText propName_recent_voter_user_ids = JsonEncodedText.Encode("recent_voter_user_ids");
        private static readonly JsonEncodedText propName_is_anonymous = JsonEncodedText.Encode("is_anonymous");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_open_period = JsonEncodedText.Encode("open_period");
        private static readonly JsonEncodedText propName_close_date = JsonEncodedText.Encode("close_date");
        private static readonly JsonEncodedText propName_is_closed = JsonEncodedText.Encode("is_closed");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Poll)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(propName_question, obj.Question);
            if (obj.Options != null)
            {
                writer.WritePropertyName(propName_options);
                writer.WriteArray(obj.Options);
            }
            writer.WriteNumber(propName_total_voter_count, obj.TotalVoterCount);
            if (obj.RecentVoterUserIds != null)
            {
                writer.WritePropertyName(propName_recent_voter_user_ids);
                writer.WriteArray(obj.RecentVoterUserIds);
            }
            writer.WriteBoolean(propName_is_anonymous, obj.IsAnonymous);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteNumber(propName_open_period, obj.OpenPeriod);
            writer.WriteNumber(propName_close_date, obj.CloseDate);
            writer.WriteBoolean(propName_is_closed, obj.IsClosed);
        }
    }

    partial class ProfilePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("profilePhoto");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_small = JsonEncodedText.Encode("small");
        private static readonly JsonEncodedText propName_big = JsonEncodedText.Encode("big");
        private static readonly JsonEncodedText propName_has_animation = JsonEncodedText.Encode("has_animation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ProfilePhoto)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            if (obj.Small != null)
            {
                writer.WritePropertyName(propName_small);
                writer.WriteTLObjectValue(obj.Small);
            }
            if (obj.Big != null)
            {
                writer.WritePropertyName(propName_big);
                writer.WriteTLObjectValue(obj.Big);
            }
            writer.WriteBoolean(propName_has_animation, obj.HasAnimation);
        }
    }

    partial class ChatPhotoInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatPhotoInfo");
        private static readonly JsonEncodedText propName_small = JsonEncodedText.Encode("small");
        private static readonly JsonEncodedText propName_big = JsonEncodedText.Encode("big");
        private static readonly JsonEncodedText propName_has_animation = JsonEncodedText.Encode("has_animation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatPhotoInfo)tlobj;
            if (obj.Small != null)
            {
                writer.WritePropertyName(propName_small);
                writer.WriteTLObjectValue(obj.Small);
            }
            if (obj.Big != null)
            {
                writer.WritePropertyName(propName_big);
                writer.WriteTLObjectValue(obj.Big);
            }
            writer.WriteBoolean(propName_has_animation, obj.HasAnimation);
        }
    }

    partial class UserTypeRegularConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userTypeRegular");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserTypeDeletedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userTypeDeleted");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserTypeBotConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userTypeBot");
        private static readonly JsonEncodedText propName_can_join_groups = JsonEncodedText.Encode("can_join_groups");
        private static readonly JsonEncodedText propName_can_read_all_group_messages = JsonEncodedText.Encode("can_read_all_group_messages");
        private static readonly JsonEncodedText propName_is_inline = JsonEncodedText.Encode("is_inline");
        private static readonly JsonEncodedText propName_inline_query_placeholder = JsonEncodedText.Encode("inline_query_placeholder");
        private static readonly JsonEncodedText propName_need_location = JsonEncodedText.Encode("need_location");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserTypeBot)tlobj;
            writer.WriteBoolean(propName_can_join_groups, obj.CanJoinGroups);
            writer.WriteBoolean(propName_can_read_all_group_messages, obj.CanReadAllGroupMessages);
            writer.WriteBoolean(propName_is_inline, obj.IsInline);
            writer.WriteString(propName_inline_query_placeholder, obj.InlineQueryPlaceholder);
            writer.WriteBoolean(propName_need_location, obj.NeedLocation);
        }
    }

    partial class UserTypeUnknownConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userTypeUnknown");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class BotCommandConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("botCommand");
        private static readonly JsonEncodedText propName_command = JsonEncodedText.Encode("command");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BotCommand)tlobj;
            writer.WriteString(propName_command, obj.Command);
            writer.WriteString(propName_description, obj.Description);
        }
    }

    partial class BotInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("botInfo");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_commands = JsonEncodedText.Encode("commands");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BotInfo)tlobj;
            writer.WriteString(propName_description, obj.Description);
            if (obj.Commands != null)
            {
                writer.WritePropertyName(propName_commands);
                writer.WriteArray(obj.Commands);
            }
        }
    }

    partial class ChatLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatLocation");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        private static readonly JsonEncodedText propName_address = JsonEncodedText.Encode("address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatLocation)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteString(propName_address, obj.Address);
        }
    }

    partial class AnimatedChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("animatedChatPhoto");
        private static readonly JsonEncodedText propName_length = JsonEncodedText.Encode("length");
        private static readonly JsonEncodedText propName_file = JsonEncodedText.Encode("file");
        private static readonly JsonEncodedText propName_main_frame_timestamp = JsonEncodedText.Encode("main_frame_timestamp");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnimatedChatPhoto)tlobj;
            writer.WriteNumber(propName_length, obj.Length);
            if (obj.File != null)
            {
                writer.WritePropertyName(propName_file);
                writer.WriteTLObjectValue(obj.File);
            }
            writer.WriteNumber(propName_main_frame_timestamp, obj.MainFrameTimestamp);
        }
    }

    partial class ChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatPhoto");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_added_date = JsonEncodedText.Encode("added_date");
        private static readonly JsonEncodedText propName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
        private static readonly JsonEncodedText propName_sizes = JsonEncodedText.Encode("sizes");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatPhoto)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(propName_added_date, obj.AddedDate);
            if (obj.Minithumbnail != null)
            {
                writer.WritePropertyName(propName_minithumbnail);
                writer.WriteTLObjectValue(obj.Minithumbnail);
            }
            if (obj.Sizes != null)
            {
                writer.WritePropertyName(propName_sizes);
                writer.WriteArray(obj.Sizes);
            }
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
        }
    }

    partial class ChatPhotosConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatPhotos");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_photos = JsonEncodedText.Encode("photos");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatPhotos)tlobj;
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            if (obj.Photos != null)
            {
                writer.WritePropertyName(propName_photos);
                writer.WriteArray(obj.Photos);
            }
        }
    }

    partial class InputChatPhotoPreviousConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputChatPhotoPrevious");
        private static readonly JsonEncodedText propName_chat_photo_id = JsonEncodedText.Encode("chat_photo_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputChatPhotoPrevious)tlobj;
            writer.WritePropertyName(propName_chat_photo_id);
            writer.WriteInt64String(obj.ChatPhotoId);
        }
    }

    partial class InputChatPhotoStaticConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputChatPhotoStatic");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputChatPhotoStatic)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
        }
    }

    partial class InputChatPhotoAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputChatPhotoAnimation");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        private static readonly JsonEncodedText propName_main_frame_timestamp = JsonEncodedText.Encode("main_frame_timestamp");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputChatPhotoAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            writer.WriteNumber(propName_main_frame_timestamp, obj.MainFrameTimestamp);
        }
    }

    partial class UserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("user");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_first_name = JsonEncodedText.Encode("first_name");
        private static readonly JsonEncodedText propName_last_name = JsonEncodedText.Encode("last_name");
        private static readonly JsonEncodedText propName_username = JsonEncodedText.Encode("username");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        private static readonly JsonEncodedText propName_status = JsonEncodedText.Encode("status");
        private static readonly JsonEncodedText propName_profile_photo = JsonEncodedText.Encode("profile_photo");
        private static readonly JsonEncodedText propName_is_contact = JsonEncodedText.Encode("is_contact");
        private static readonly JsonEncodedText propName_is_mutual_contact = JsonEncodedText.Encode("is_mutual_contact");
        private static readonly JsonEncodedText propName_is_verified = JsonEncodedText.Encode("is_verified");
        private static readonly JsonEncodedText propName_is_support = JsonEncodedText.Encode("is_support");
        private static readonly JsonEncodedText propName_restriction_reason = JsonEncodedText.Encode("restriction_reason");
        private static readonly JsonEncodedText propName_is_scam = JsonEncodedText.Encode("is_scam");
        private static readonly JsonEncodedText propName_have_access = JsonEncodedText.Encode("have_access");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_language_code = JsonEncodedText.Encode("language_code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (User)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteString(propName_first_name, obj.FirstName);
            writer.WriteString(propName_last_name, obj.LastName);
            writer.WriteString(propName_username, obj.Username);
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
            if (obj.Status != null)
            {
                writer.WritePropertyName(propName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
            if (obj.ProfilePhoto != null)
            {
                writer.WritePropertyName(propName_profile_photo);
                writer.WriteTLObjectValue(obj.ProfilePhoto);
            }
            writer.WriteBoolean(propName_is_contact, obj.IsContact);
            writer.WriteBoolean(propName_is_mutual_contact, obj.IsMutualContact);
            writer.WriteBoolean(propName_is_verified, obj.IsVerified);
            writer.WriteBoolean(propName_is_support, obj.IsSupport);
            writer.WriteString(propName_restriction_reason, obj.RestrictionReason);
            writer.WriteBoolean(propName_is_scam, obj.IsScam);
            writer.WriteBoolean(propName_have_access, obj.HaveAccess);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(propName_language_code, obj.LanguageCode);
        }
    }

    partial class UserFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userFullInfo");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_can_be_called = JsonEncodedText.Encode("can_be_called");
        private static readonly JsonEncodedText propName_supports_video_calls = JsonEncodedText.Encode("supports_video_calls");
        private static readonly JsonEncodedText propName_has_private_calls = JsonEncodedText.Encode("has_private_calls");
        private static readonly JsonEncodedText propName_need_phone_number_privacy_exception = JsonEncodedText.Encode("need_phone_number_privacy_exception");
        private static readonly JsonEncodedText propName_bio = JsonEncodedText.Encode("bio");
        private static readonly JsonEncodedText propName_share_text = JsonEncodedText.Encode("share_text");
        private static readonly JsonEncodedText propName_group_in_common_count = JsonEncodedText.Encode("group_in_common_count");
        private static readonly JsonEncodedText propName_bot_info = JsonEncodedText.Encode("bot_info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserFullInfo)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteBoolean(propName_can_be_called, obj.CanBeCalled);
            writer.WriteBoolean(propName_supports_video_calls, obj.SupportsVideoCalls);
            writer.WriteBoolean(propName_has_private_calls, obj.HasPrivateCalls);
            writer.WriteBoolean(propName_need_phone_number_privacy_exception, obj.NeedPhoneNumberPrivacyException);
            writer.WriteString(propName_bio, obj.Bio);
            writer.WriteString(propName_share_text, obj.ShareText);
            writer.WriteNumber(propName_group_in_common_count, obj.GroupInCommonCount);
            if (obj.BotInfo != null)
            {
                writer.WritePropertyName(propName_bot_info);
                writer.WriteTLObjectValue(obj.BotInfo);
            }
        }
    }

    partial class UsersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("users");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_user_ids = JsonEncodedText.Encode("user_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Users)tlobj;
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(propName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class ChatAdministratorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatAdministrator");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_custom_title = JsonEncodedText.Encode("custom_title");
        private static readonly JsonEncodedText propName_is_owner = JsonEncodedText.Encode("is_owner");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatAdministrator)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteString(propName_custom_title, obj.CustomTitle);
            writer.WriteBoolean(propName_is_owner, obj.IsOwner);
        }
    }

    partial class ChatAdministratorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatAdministrators");
        private static readonly JsonEncodedText propName_administrators = JsonEncodedText.Encode("administrators");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatAdministrators)tlobj;
            if (obj.Administrators != null)
            {
                writer.WritePropertyName(propName_administrators);
                writer.WriteArray(obj.Administrators);
            }
        }
    }

    partial class ChatPermissionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatPermissions");
        private static readonly JsonEncodedText propName_can_send_messages = JsonEncodedText.Encode("can_send_messages");
        private static readonly JsonEncodedText propName_can_send_media_messages = JsonEncodedText.Encode("can_send_media_messages");
        private static readonly JsonEncodedText propName_can_send_polls = JsonEncodedText.Encode("can_send_polls");
        private static readonly JsonEncodedText propName_can_send_other_messages = JsonEncodedText.Encode("can_send_other_messages");
        private static readonly JsonEncodedText propName_can_add_web_page_previews = JsonEncodedText.Encode("can_add_web_page_previews");
        private static readonly JsonEncodedText propName_can_change_info = JsonEncodedText.Encode("can_change_info");
        private static readonly JsonEncodedText propName_can_invite_users = JsonEncodedText.Encode("can_invite_users");
        private static readonly JsonEncodedText propName_can_pin_messages = JsonEncodedText.Encode("can_pin_messages");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatPermissions)tlobj;
            writer.WriteBoolean(propName_can_send_messages, obj.CanSendMessages);
            writer.WriteBoolean(propName_can_send_media_messages, obj.CanSendMediaMessages);
            writer.WriteBoolean(propName_can_send_polls, obj.CanSendPolls);
            writer.WriteBoolean(propName_can_send_other_messages, obj.CanSendOtherMessages);
            writer.WriteBoolean(propName_can_add_web_page_previews, obj.CanAddWebPagePreviews);
            writer.WriteBoolean(propName_can_change_info, obj.CanChangeInfo);
            writer.WriteBoolean(propName_can_invite_users, obj.CanInviteUsers);
            writer.WriteBoolean(propName_can_pin_messages, obj.CanPinMessages);
        }
    }

    partial class ChatMemberStatusCreatorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMemberStatusCreator");
        private static readonly JsonEncodedText propName_custom_title = JsonEncodedText.Encode("custom_title");
        private static readonly JsonEncodedText propName_is_anonymous = JsonEncodedText.Encode("is_anonymous");
        private static readonly JsonEncodedText propName_is_member = JsonEncodedText.Encode("is_member");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMemberStatusCreator)tlobj;
            writer.WriteString(propName_custom_title, obj.CustomTitle);
            writer.WriteBoolean(propName_is_anonymous, obj.IsAnonymous);
            writer.WriteBoolean(propName_is_member, obj.IsMember);
        }
    }

    partial class ChatMemberStatusAdministratorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMemberStatusAdministrator");
        private static readonly JsonEncodedText propName_custom_title = JsonEncodedText.Encode("custom_title");
        private static readonly JsonEncodedText propName_can_be_edited = JsonEncodedText.Encode("can_be_edited");
        private static readonly JsonEncodedText propName_can_change_info = JsonEncodedText.Encode("can_change_info");
        private static readonly JsonEncodedText propName_can_post_messages = JsonEncodedText.Encode("can_post_messages");
        private static readonly JsonEncodedText propName_can_edit_messages = JsonEncodedText.Encode("can_edit_messages");
        private static readonly JsonEncodedText propName_can_delete_messages = JsonEncodedText.Encode("can_delete_messages");
        private static readonly JsonEncodedText propName_can_invite_users = JsonEncodedText.Encode("can_invite_users");
        private static readonly JsonEncodedText propName_can_restrict_members = JsonEncodedText.Encode("can_restrict_members");
        private static readonly JsonEncodedText propName_can_pin_messages = JsonEncodedText.Encode("can_pin_messages");
        private static readonly JsonEncodedText propName_can_promote_members = JsonEncodedText.Encode("can_promote_members");
        private static readonly JsonEncodedText propName_is_anonymous = JsonEncodedText.Encode("is_anonymous");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMemberStatusAdministrator)tlobj;
            writer.WriteString(propName_custom_title, obj.CustomTitle);
            writer.WriteBoolean(propName_can_be_edited, obj.CanBeEdited);
            writer.WriteBoolean(propName_can_change_info, obj.CanChangeInfo);
            writer.WriteBoolean(propName_can_post_messages, obj.CanPostMessages);
            writer.WriteBoolean(propName_can_edit_messages, obj.CanEditMessages);
            writer.WriteBoolean(propName_can_delete_messages, obj.CanDeleteMessages);
            writer.WriteBoolean(propName_can_invite_users, obj.CanInviteUsers);
            writer.WriteBoolean(propName_can_restrict_members, obj.CanRestrictMembers);
            writer.WriteBoolean(propName_can_pin_messages, obj.CanPinMessages);
            writer.WriteBoolean(propName_can_promote_members, obj.CanPromoteMembers);
            writer.WriteBoolean(propName_is_anonymous, obj.IsAnonymous);
        }
    }

    partial class ChatMemberStatusMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMemberStatusMember");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMemberStatusRestrictedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMemberStatusRestricted");
        private static readonly JsonEncodedText propName_is_member = JsonEncodedText.Encode("is_member");
        private static readonly JsonEncodedText propName_restricted_until_date = JsonEncodedText.Encode("restricted_until_date");
        private static readonly JsonEncodedText propName_permissions = JsonEncodedText.Encode("permissions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMemberStatusRestricted)tlobj;
            writer.WriteBoolean(propName_is_member, obj.IsMember);
            writer.WriteNumber(propName_restricted_until_date, obj.RestrictedUntilDate);
            if (obj.Permissions != null)
            {
                writer.WritePropertyName(propName_permissions);
                writer.WriteTLObjectValue(obj.Permissions);
            }
        }
    }

    partial class ChatMemberStatusLeftConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMemberStatusLeft");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMemberStatusBannedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMemberStatusBanned");
        private static readonly JsonEncodedText propName_banned_until_date = JsonEncodedText.Encode("banned_until_date");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMemberStatusBanned)tlobj;
            writer.WriteNumber(propName_banned_until_date, obj.BannedUntilDate);
        }
    }

    partial class ChatMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMember");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_inviter_user_id = JsonEncodedText.Encode("inviter_user_id");
        private static readonly JsonEncodedText propName_joined_chat_date = JsonEncodedText.Encode("joined_chat_date");
        private static readonly JsonEncodedText propName_status = JsonEncodedText.Encode("status");
        private static readonly JsonEncodedText propName_bot_info = JsonEncodedText.Encode("bot_info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMember)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteNumber(propName_inviter_user_id, obj.InviterUserId);
            writer.WriteNumber(propName_joined_chat_date, obj.JoinedChatDate);
            if (obj.Status != null)
            {
                writer.WritePropertyName(propName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
            if (obj.BotInfo != null)
            {
                writer.WritePropertyName(propName_bot_info);
                writer.WriteTLObjectValue(obj.BotInfo);
            }
        }
    }

    partial class ChatMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMembers");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_members = JsonEncodedText.Encode("members");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatMembers)tlobj;
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            if (obj.Members != null)
            {
                writer.WritePropertyName(propName_members);
                writer.WriteArray(obj.Members);
            }
        }
    }

    partial class ChatMembersFilterContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMembersFilterContacts");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMembersFilterAdministratorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMembersFilterAdministrators");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMembersFilterMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMembersFilterMembers");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMembersFilterRestrictedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMembersFilterRestricted");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMembersFilterBannedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMembersFilterBanned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatMembersFilterBotsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatMembersFilterBots");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SupergroupMembersFilterRecentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterRecent");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SupergroupMembersFilterContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterContacts");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupMembersFilterContacts)tlobj;
            writer.WriteString(propName_query, obj.Query);
        }
    }

    partial class SupergroupMembersFilterAdministratorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterAdministrators");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SupergroupMembersFilterSearchConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterSearch");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupMembersFilterSearch)tlobj;
            writer.WriteString(propName_query, obj.Query);
        }
    }

    partial class SupergroupMembersFilterRestrictedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterRestricted");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupMembersFilterRestricted)tlobj;
            writer.WriteString(propName_query, obj.Query);
        }
    }

    partial class SupergroupMembersFilterBannedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterBanned");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupMembersFilterBanned)tlobj;
            writer.WriteString(propName_query, obj.Query);
        }
    }

    partial class SupergroupMembersFilterBotsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterBots");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class BasicGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("basicGroup");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_member_count = JsonEncodedText.Encode("member_count");
        private static readonly JsonEncodedText propName_status = JsonEncodedText.Encode("status");
        private static readonly JsonEncodedText propName_is_active = JsonEncodedText.Encode("is_active");
        private static readonly JsonEncodedText propName_upgraded_to_supergroup_id = JsonEncodedText.Encode("upgraded_to_supergroup_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BasicGroup)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteNumber(propName_member_count, obj.MemberCount);
            if (obj.Status != null)
            {
                writer.WritePropertyName(propName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
            writer.WriteBoolean(propName_is_active, obj.IsActive);
            writer.WriteNumber(propName_upgraded_to_supergroup_id, obj.UpgradedToSupergroupId);
        }
    }

    partial class BasicGroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("basicGroupFullInfo");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_creator_user_id = JsonEncodedText.Encode("creator_user_id");
        private static readonly JsonEncodedText propName_members = JsonEncodedText.Encode("members");
        private static readonly JsonEncodedText propName_invite_link = JsonEncodedText.Encode("invite_link");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BasicGroupFullInfo)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(propName_description, obj.Description);
            writer.WriteNumber(propName_creator_user_id, obj.CreatorUserId);
            if (obj.Members != null)
            {
                writer.WritePropertyName(propName_members);
                writer.WriteArray(obj.Members);
            }
            writer.WriteString(propName_invite_link, obj.InviteLink);
        }
    }

    partial class SupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("supergroup");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_username = JsonEncodedText.Encode("username");
        private static readonly JsonEncodedText propName_date = JsonEncodedText.Encode("date");
        private static readonly JsonEncodedText propName_status = JsonEncodedText.Encode("status");
        private static readonly JsonEncodedText propName_member_count = JsonEncodedText.Encode("member_count");
        private static readonly JsonEncodedText propName_has_linked_chat = JsonEncodedText.Encode("has_linked_chat");
        private static readonly JsonEncodedText propName_has_location = JsonEncodedText.Encode("has_location");
        private static readonly JsonEncodedText propName_sign_messages = JsonEncodedText.Encode("sign_messages");
        private static readonly JsonEncodedText propName_is_slow_mode_enabled = JsonEncodedText.Encode("is_slow_mode_enabled");
        private static readonly JsonEncodedText propName_is_channel = JsonEncodedText.Encode("is_channel");
        private static readonly JsonEncodedText propName_is_verified = JsonEncodedText.Encode("is_verified");
        private static readonly JsonEncodedText propName_restriction_reason = JsonEncodedText.Encode("restriction_reason");
        private static readonly JsonEncodedText propName_is_scam = JsonEncodedText.Encode("is_scam");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Supergroup)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteString(propName_username, obj.Username);
            writer.WriteNumber(propName_date, obj.Date);
            if (obj.Status != null)
            {
                writer.WritePropertyName(propName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
            writer.WriteNumber(propName_member_count, obj.MemberCount);
            writer.WriteBoolean(propName_has_linked_chat, obj.HasLinkedChat);
            writer.WriteBoolean(propName_has_location, obj.HasLocation);
            writer.WriteBoolean(propName_sign_messages, obj.SignMessages);
            writer.WriteBoolean(propName_is_slow_mode_enabled, obj.IsSlowModeEnabled);
            writer.WriteBoolean(propName_is_channel, obj.IsChannel);
            writer.WriteBoolean(propName_is_verified, obj.IsVerified);
            writer.WriteString(propName_restriction_reason, obj.RestrictionReason);
            writer.WriteBoolean(propName_is_scam, obj.IsScam);
        }
    }

    partial class SupergroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("supergroupFullInfo");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_member_count = JsonEncodedText.Encode("member_count");
        private static readonly JsonEncodedText propName_administrator_count = JsonEncodedText.Encode("administrator_count");
        private static readonly JsonEncodedText propName_restricted_count = JsonEncodedText.Encode("restricted_count");
        private static readonly JsonEncodedText propName_banned_count = JsonEncodedText.Encode("banned_count");
        private static readonly JsonEncodedText propName_linked_chat_id = JsonEncodedText.Encode("linked_chat_id");
        private static readonly JsonEncodedText propName_slow_mode_delay = JsonEncodedText.Encode("slow_mode_delay");
        private static readonly JsonEncodedText propName_slow_mode_delay_expires_in = JsonEncodedText.Encode("slow_mode_delay_expires_in");
        private static readonly JsonEncodedText propName_can_get_members = JsonEncodedText.Encode("can_get_members");
        private static readonly JsonEncodedText propName_can_set_username = JsonEncodedText.Encode("can_set_username");
        private static readonly JsonEncodedText propName_can_set_sticker_set = JsonEncodedText.Encode("can_set_sticker_set");
        private static readonly JsonEncodedText propName_can_set_location = JsonEncodedText.Encode("can_set_location");
        private static readonly JsonEncodedText propName_can_get_statistics = JsonEncodedText.Encode("can_get_statistics");
        private static readonly JsonEncodedText propName_is_all_history_available = JsonEncodedText.Encode("is_all_history_available");
        private static readonly JsonEncodedText propName_sticker_set_id = JsonEncodedText.Encode("sticker_set_id");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        private static readonly JsonEncodedText propName_invite_link = JsonEncodedText.Encode("invite_link");
        private static readonly JsonEncodedText propName_upgraded_from_basic_group_id = JsonEncodedText.Encode("upgraded_from_basic_group_id");
        private static readonly JsonEncodedText propName_upgraded_from_max_message_id = JsonEncodedText.Encode("upgraded_from_max_message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SupergroupFullInfo)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(propName_description, obj.Description);
            writer.WriteNumber(propName_member_count, obj.MemberCount);
            writer.WriteNumber(propName_administrator_count, obj.AdministratorCount);
            writer.WriteNumber(propName_restricted_count, obj.RestrictedCount);
            writer.WriteNumber(propName_banned_count, obj.BannedCount);
            writer.WriteNumber(propName_linked_chat_id, obj.LinkedChatId);
            writer.WriteNumber(propName_slow_mode_delay, obj.SlowModeDelay);
            writer.WriteNumber(propName_slow_mode_delay_expires_in, obj.SlowModeDelayExpiresIn);
            writer.WriteBoolean(propName_can_get_members, obj.CanGetMembers);
            writer.WriteBoolean(propName_can_set_username, obj.CanSetUsername);
            writer.WriteBoolean(propName_can_set_sticker_set, obj.CanSetStickerSet);
            writer.WriteBoolean(propName_can_set_location, obj.CanSetLocation);
            writer.WriteBoolean(propName_can_get_statistics, obj.CanGetStatistics);
            writer.WriteBoolean(propName_is_all_history_available, obj.IsAllHistoryAvailable);
            writer.WritePropertyName(propName_sticker_set_id);
            writer.WriteInt64String(obj.StickerSetId);
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteString(propName_invite_link, obj.InviteLink);
            writer.WriteNumber(propName_upgraded_from_basic_group_id, obj.UpgradedFromBasicGroupId);
            writer.WriteNumber(propName_upgraded_from_max_message_id, obj.UpgradedFromMaxMessageId);
        }
    }

    partial class SecretChatStatePendingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("secretChatStatePending");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SecretChatStateReadyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("secretChatStateReady");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SecretChatStateClosedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("secretChatStateClosed");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("secretChat");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_state = JsonEncodedText.Encode("state");
        private static readonly JsonEncodedText propName_is_outbound = JsonEncodedText.Encode("is_outbound");
        private static readonly JsonEncodedText propName_ttl = JsonEncodedText.Encode("ttl");
        private static readonly JsonEncodedText propName_key_hash = JsonEncodedText.Encode("key_hash");
        private static readonly JsonEncodedText propName_layer = JsonEncodedText.Encode("layer");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SecretChat)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.State != null)
            {
                writer.WritePropertyName(propName_state);
                writer.WriteTLObjectValue(obj.State);
            }
            writer.WriteBoolean(propName_is_outbound, obj.IsOutbound);
            writer.WriteNumber(propName_ttl, obj.Ttl);
            if (obj.KeyHash != null)
            {
                writer.WriteBase64String(propName_key_hash, obj.KeyHash);
            }
            writer.WriteNumber(propName_layer, obj.Layer);
        }
    }

    partial class MessageForwardOriginUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageForwardOriginUser");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardOriginUser)tlobj;
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
        }
    }

    partial class MessageForwardOriginChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageForwardOriginChat");
        private static readonly JsonEncodedText propName_sender_chat_id = JsonEncodedText.Encode("sender_chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardOriginChat)tlobj;
            writer.WriteNumber(propName_sender_chat_id, obj.SenderChatId);
        }
    }

    partial class MessageForwardOriginHiddenUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageForwardOriginHiddenUser");
        private static readonly JsonEncodedText propName_sender_name = JsonEncodedText.Encode("sender_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardOriginHiddenUser)tlobj;
            writer.WriteString(propName_sender_name, obj.SenderName);
        }
    }

    partial class MessageForwardOriginChannelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageForwardOriginChannel");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_author_signature = JsonEncodedText.Encode("author_signature");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardOriginChannel)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteString(propName_author_signature, obj.AuthorSignature);
        }
    }

    partial class MessageForwardInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageForwardInfo");
        private static readonly JsonEncodedText propName_origin = JsonEncodedText.Encode("origin");
        private static readonly JsonEncodedText propName_date = JsonEncodedText.Encode("date");
        private static readonly JsonEncodedText propName_public_service_announcement_type = JsonEncodedText.Encode("public_service_announcement_type");
        private static readonly JsonEncodedText propName_from_chat_id = JsonEncodedText.Encode("from_chat_id");
        private static readonly JsonEncodedText propName_from_message_id = JsonEncodedText.Encode("from_message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageForwardInfo)tlobj;
            if (obj.Origin != null)
            {
                writer.WritePropertyName(propName_origin);
                writer.WriteTLObjectValue(obj.Origin);
            }
            writer.WriteNumber(propName_date, obj.Date);
            writer.WriteString(propName_public_service_announcement_type, obj.PublicServiceAnnouncementType);
            writer.WriteNumber(propName_from_chat_id, obj.FromChatId);
            writer.WriteNumber(propName_from_message_id, obj.FromMessageId);
        }
    }

    partial class MessageReplyInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageReplyInfo");
        private static readonly JsonEncodedText propName_reply_count = JsonEncodedText.Encode("reply_count");
        private static readonly JsonEncodedText propName_recent_replier_user_ids = JsonEncodedText.Encode("recent_replier_user_ids");
        private static readonly JsonEncodedText propName_last_read_inbox_message_id = JsonEncodedText.Encode("last_read_inbox_message_id");
        private static readonly JsonEncodedText propName_last_read_outbox_message_id = JsonEncodedText.Encode("last_read_outbox_message_id");
        private static readonly JsonEncodedText propName_last_message_id = JsonEncodedText.Encode("last_message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageReplyInfo)tlobj;
            writer.WriteNumber(propName_reply_count, obj.ReplyCount);
            if (obj.RecentReplierUserIds != null)
            {
                writer.WritePropertyName(propName_recent_replier_user_ids);
                writer.WriteArray(obj.RecentReplierUserIds);
            }
            writer.WriteNumber(propName_last_read_inbox_message_id, obj.LastReadInboxMessageId);
            writer.WriteNumber(propName_last_read_outbox_message_id, obj.LastReadOutboxMessageId);
            writer.WriteNumber(propName_last_message_id, obj.LastMessageId);
        }
    }

    partial class MessageInteractionInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageInteractionInfo");
        private static readonly JsonEncodedText propName_view_count = JsonEncodedText.Encode("view_count");
        private static readonly JsonEncodedText propName_forward_count = JsonEncodedText.Encode("forward_count");
        private static readonly JsonEncodedText propName_reply_info = JsonEncodedText.Encode("reply_info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageInteractionInfo)tlobj;
            writer.WriteNumber(propName_view_count, obj.ViewCount);
            writer.WriteNumber(propName_forward_count, obj.ForwardCount);
            if (obj.ReplyInfo != null)
            {
                writer.WritePropertyName(propName_reply_info);
                writer.WriteTLObjectValue(obj.ReplyInfo);
            }
        }
    }

    partial class MessageSendingStatePendingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageSendingStatePending");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageSendingStateFailedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageSendingStateFailed");
        private static readonly JsonEncodedText propName_error_code = JsonEncodedText.Encode("error_code");
        private static readonly JsonEncodedText propName_error_message = JsonEncodedText.Encode("error_message");
        private static readonly JsonEncodedText propName_can_retry = JsonEncodedText.Encode("can_retry");
        private static readonly JsonEncodedText propName_retry_after = JsonEncodedText.Encode("retry_after");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSendingStateFailed)tlobj;
            writer.WriteNumber(propName_error_code, obj.ErrorCode);
            writer.WriteString(propName_error_message, obj.ErrorMessage);
            writer.WriteBoolean(propName_can_retry, obj.CanRetry);
            writer.WriteNumber(propName_retry_after, obj.RetryAfter);
        }
    }

    partial class MessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("message");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        private static readonly JsonEncodedText propName_sender_chat_id = JsonEncodedText.Encode("sender_chat_id");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_sending_state = JsonEncodedText.Encode("sending_state");
        private static readonly JsonEncodedText propName_scheduling_state = JsonEncodedText.Encode("scheduling_state");
        private static readonly JsonEncodedText propName_is_outgoing = JsonEncodedText.Encode("is_outgoing");
        private static readonly JsonEncodedText propName_can_be_edited = JsonEncodedText.Encode("can_be_edited");
        private static readonly JsonEncodedText propName_can_be_forwarded = JsonEncodedText.Encode("can_be_forwarded");
        private static readonly JsonEncodedText propName_can_be_deleted_only_for_self = JsonEncodedText.Encode("can_be_deleted_only_for_self");
        private static readonly JsonEncodedText propName_can_be_deleted_for_all_users = JsonEncodedText.Encode("can_be_deleted_for_all_users");
        private static readonly JsonEncodedText propName_can_get_statistics = JsonEncodedText.Encode("can_get_statistics");
        private static readonly JsonEncodedText propName_can_get_message_thread = JsonEncodedText.Encode("can_get_message_thread");
        private static readonly JsonEncodedText propName_is_channel_post = JsonEncodedText.Encode("is_channel_post");
        private static readonly JsonEncodedText propName_contains_unread_mention = JsonEncodedText.Encode("contains_unread_mention");
        private static readonly JsonEncodedText propName_date = JsonEncodedText.Encode("date");
        private static readonly JsonEncodedText propName_edit_date = JsonEncodedText.Encode("edit_date");
        private static readonly JsonEncodedText propName_forward_info = JsonEncodedText.Encode("forward_info");
        private static readonly JsonEncodedText propName_interaction_info = JsonEncodedText.Encode("interaction_info");
        private static readonly JsonEncodedText propName_reply_in_chat_id = JsonEncodedText.Encode("reply_in_chat_id");
        private static readonly JsonEncodedText propName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
        private static readonly JsonEncodedText propName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
        private static readonly JsonEncodedText propName_ttl = JsonEncodedText.Encode("ttl");
        private static readonly JsonEncodedText propName_ttl_expires_in = JsonEncodedText.Encode("ttl_expires_in");
        private static readonly JsonEncodedText propName_via_bot_user_id = JsonEncodedText.Encode("via_bot_user_id");
        private static readonly JsonEncodedText propName_author_signature = JsonEncodedText.Encode("author_signature");
        private static readonly JsonEncodedText propName_media_album_id = JsonEncodedText.Encode("media_album_id");
        private static readonly JsonEncodedText propName_restriction_reason = JsonEncodedText.Encode("restriction_reason");
        private static readonly JsonEncodedText propName_content = JsonEncodedText.Encode("content");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Message)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
            writer.WriteNumber(propName_sender_chat_id, obj.SenderChatId);
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.SendingState != null)
            {
                writer.WritePropertyName(propName_sending_state);
                writer.WriteTLObjectValue(obj.SendingState);
            }
            if (obj.SchedulingState != null)
            {
                writer.WritePropertyName(propName_scheduling_state);
                writer.WriteTLObjectValue(obj.SchedulingState);
            }
            writer.WriteBoolean(propName_is_outgoing, obj.IsOutgoing);
            writer.WriteBoolean(propName_can_be_edited, obj.CanBeEdited);
            writer.WriteBoolean(propName_can_be_forwarded, obj.CanBeForwarded);
            writer.WriteBoolean(propName_can_be_deleted_only_for_self, obj.CanBeDeletedOnlyForSelf);
            writer.WriteBoolean(propName_can_be_deleted_for_all_users, obj.CanBeDeletedForAllUsers);
            writer.WriteBoolean(propName_can_get_statistics, obj.CanGetStatistics);
            writer.WriteBoolean(propName_can_get_message_thread, obj.CanGetMessageThread);
            writer.WriteBoolean(propName_is_channel_post, obj.IsChannelPost);
            writer.WriteBoolean(propName_contains_unread_mention, obj.ContainsUnreadMention);
            writer.WriteNumber(propName_date, obj.Date);
            writer.WriteNumber(propName_edit_date, obj.EditDate);
            if (obj.ForwardInfo != null)
            {
                writer.WritePropertyName(propName_forward_info);
                writer.WriteTLObjectValue(obj.ForwardInfo);
            }
            if (obj.InteractionInfo != null)
            {
                writer.WritePropertyName(propName_interaction_info);
                writer.WriteTLObjectValue(obj.InteractionInfo);
            }
            writer.WriteNumber(propName_reply_in_chat_id, obj.ReplyInChatId);
            writer.WriteNumber(propName_reply_to_message_id, obj.ReplyToMessageId);
            writer.WriteNumber(propName_message_thread_id, obj.MessageThreadId);
            writer.WriteNumber(propName_ttl, obj.Ttl);
            writer.WriteNumber(propName_ttl_expires_in, obj.TtlExpiresIn);
            writer.WriteNumber(propName_via_bot_user_id, obj.ViaBotUserId);
            writer.WriteString(propName_author_signature, obj.AuthorSignature);
            writer.WritePropertyName(propName_media_album_id);
            writer.WriteInt64String(obj.MediaAlbumId);
            writer.WriteString(propName_restriction_reason, obj.RestrictionReason);
            if (obj.Content != null)
            {
                writer.WritePropertyName(propName_content);
                writer.WriteTLObjectValue(obj.Content);
            }
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class MessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messages");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_messages = JsonEncodedText.Encode("messages");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Messages)tlobj;
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            if (obj.Messages_ != null)
            {
                writer.WritePropertyName(propName_messages);
                writer.WriteArray(obj.Messages_);
            }
        }
    }

    partial class FoundMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("foundMessages");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_messages = JsonEncodedText.Encode("messages");
        private static readonly JsonEncodedText propName_next_offset = JsonEncodedText.Encode("next_offset");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (FoundMessages)tlobj;
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            if (obj.Messages != null)
            {
                writer.WritePropertyName(propName_messages);
                writer.WriteArray(obj.Messages);
            }
            writer.WriteString(propName_next_offset, obj.NextOffset);
        }
    }

    partial class NotificationSettingsScopePrivateChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationSettingsScopePrivateChats");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationSettingsScopeGroupChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationSettingsScopeGroupChats");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationSettingsScopeChannelChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationSettingsScopeChannelChats");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatNotificationSettings");
        private static readonly JsonEncodedText propName_use_default_mute_for = JsonEncodedText.Encode("use_default_mute_for");
        private static readonly JsonEncodedText propName_mute_for = JsonEncodedText.Encode("mute_for");
        private static readonly JsonEncodedText propName_use_default_sound = JsonEncodedText.Encode("use_default_sound");
        private static readonly JsonEncodedText propName_sound = JsonEncodedText.Encode("sound");
        private static readonly JsonEncodedText propName_use_default_show_preview = JsonEncodedText.Encode("use_default_show_preview");
        private static readonly JsonEncodedText propName_show_preview = JsonEncodedText.Encode("show_preview");
        private static readonly JsonEncodedText propName_use_default_disable_pinned_message_notifications = JsonEncodedText.Encode("use_default_disable_pinned_message_notifications");
        private static readonly JsonEncodedText propName_disable_pinned_message_notifications = JsonEncodedText.Encode("disable_pinned_message_notifications");
        private static readonly JsonEncodedText propName_use_default_disable_mention_notifications = JsonEncodedText.Encode("use_default_disable_mention_notifications");
        private static readonly JsonEncodedText propName_disable_mention_notifications = JsonEncodedText.Encode("disable_mention_notifications");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatNotificationSettings)tlobj;
            writer.WriteBoolean(propName_use_default_mute_for, obj.UseDefaultMuteFor);
            writer.WriteNumber(propName_mute_for, obj.MuteFor);
            writer.WriteBoolean(propName_use_default_sound, obj.UseDefaultSound);
            writer.WriteString(propName_sound, obj.Sound);
            writer.WriteBoolean(propName_use_default_show_preview, obj.UseDefaultShowPreview);
            writer.WriteBoolean(propName_show_preview, obj.ShowPreview);
            writer.WriteBoolean(propName_use_default_disable_pinned_message_notifications, obj.UseDefaultDisablePinnedMessageNotifications);
            writer.WriteBoolean(propName_disable_pinned_message_notifications, obj.DisablePinnedMessageNotifications);
            writer.WriteBoolean(propName_use_default_disable_mention_notifications, obj.UseDefaultDisableMentionNotifications);
            writer.WriteBoolean(propName_disable_mention_notifications, obj.DisableMentionNotifications);
        }
    }

    partial class ScopeNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("scopeNotificationSettings");
        private static readonly JsonEncodedText propName_mute_for = JsonEncodedText.Encode("mute_for");
        private static readonly JsonEncodedText propName_sound = JsonEncodedText.Encode("sound");
        private static readonly JsonEncodedText propName_show_preview = JsonEncodedText.Encode("show_preview");
        private static readonly JsonEncodedText propName_disable_pinned_message_notifications = JsonEncodedText.Encode("disable_pinned_message_notifications");
        private static readonly JsonEncodedText propName_disable_mention_notifications = JsonEncodedText.Encode("disable_mention_notifications");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ScopeNotificationSettings)tlobj;
            writer.WriteNumber(propName_mute_for, obj.MuteFor);
            writer.WriteString(propName_sound, obj.Sound);
            writer.WriteBoolean(propName_show_preview, obj.ShowPreview);
            writer.WriteBoolean(propName_disable_pinned_message_notifications, obj.DisablePinnedMessageNotifications);
            writer.WriteBoolean(propName_disable_mention_notifications, obj.DisableMentionNotifications);
        }
    }

    partial class DraftMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("draftMessage");
        private static readonly JsonEncodedText propName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
        private static readonly JsonEncodedText propName_date = JsonEncodedText.Encode("date");
        private static readonly JsonEncodedText propName_input_message_text = JsonEncodedText.Encode("input_message_text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DraftMessage)tlobj;
            writer.WriteNumber(propName_reply_to_message_id, obj.ReplyToMessageId);
            writer.WriteNumber(propName_date, obj.Date);
            if (obj.InputMessageText != null)
            {
                writer.WritePropertyName(propName_input_message_text);
                writer.WriteTLObjectValue(obj.InputMessageText);
            }
        }
    }

    partial class ChatTypePrivateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatTypePrivate");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatTypePrivate)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class ChatTypeBasicGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatTypeBasicGroup");
        private static readonly JsonEncodedText propName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatTypeBasicGroup)tlobj;
            writer.WriteNumber(propName_basic_group_id, obj.BasicGroupId);
        }
    }

    partial class ChatTypeSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatTypeSupergroup");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        private static readonly JsonEncodedText propName_is_channel = JsonEncodedText.Encode("is_channel");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatTypeSupergroup)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
            writer.WriteBoolean(propName_is_channel, obj.IsChannel);
        }
    }

    partial class ChatTypeSecretConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatTypeSecret");
        private static readonly JsonEncodedText propName_secret_chat_id = JsonEncodedText.Encode("secret_chat_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatTypeSecret)tlobj;
            writer.WriteNumber(propName_secret_chat_id, obj.SecretChatId);
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class ChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatFilter");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_icon_name = JsonEncodedText.Encode("icon_name");
        private static readonly JsonEncodedText propName_pinned_chat_ids = JsonEncodedText.Encode("pinned_chat_ids");
        private static readonly JsonEncodedText propName_included_chat_ids = JsonEncodedText.Encode("included_chat_ids");
        private static readonly JsonEncodedText propName_excluded_chat_ids = JsonEncodedText.Encode("excluded_chat_ids");
        private static readonly JsonEncodedText propName_exclude_muted = JsonEncodedText.Encode("exclude_muted");
        private static readonly JsonEncodedText propName_exclude_read = JsonEncodedText.Encode("exclude_read");
        private static readonly JsonEncodedText propName_exclude_archived = JsonEncodedText.Encode("exclude_archived");
        private static readonly JsonEncodedText propName_include_contacts = JsonEncodedText.Encode("include_contacts");
        private static readonly JsonEncodedText propName_include_non_contacts = JsonEncodedText.Encode("include_non_contacts");
        private static readonly JsonEncodedText propName_include_bots = JsonEncodedText.Encode("include_bots");
        private static readonly JsonEncodedText propName_include_groups = JsonEncodedText.Encode("include_groups");
        private static readonly JsonEncodedText propName_include_channels = JsonEncodedText.Encode("include_channels");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatFilter)tlobj;
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_icon_name, obj.IconName);
            if (obj.PinnedChatIds != null)
            {
                writer.WritePropertyName(propName_pinned_chat_ids);
                writer.WriteArray(obj.PinnedChatIds);
            }
            if (obj.IncludedChatIds != null)
            {
                writer.WritePropertyName(propName_included_chat_ids);
                writer.WriteArray(obj.IncludedChatIds);
            }
            if (obj.ExcludedChatIds != null)
            {
                writer.WritePropertyName(propName_excluded_chat_ids);
                writer.WriteArray(obj.ExcludedChatIds);
            }
            writer.WriteBoolean(propName_exclude_muted, obj.ExcludeMuted);
            writer.WriteBoolean(propName_exclude_read, obj.ExcludeRead);
            writer.WriteBoolean(propName_exclude_archived, obj.ExcludeArchived);
            writer.WriteBoolean(propName_include_contacts, obj.IncludeContacts);
            writer.WriteBoolean(propName_include_non_contacts, obj.IncludeNonContacts);
            writer.WriteBoolean(propName_include_bots, obj.IncludeBots);
            writer.WriteBoolean(propName_include_groups, obj.IncludeGroups);
            writer.WriteBoolean(propName_include_channels, obj.IncludeChannels);
        }
    }

    partial class ChatFilterInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatFilterInfo");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_icon_name = JsonEncodedText.Encode("icon_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatFilterInfo)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_icon_name, obj.IconName);
        }
    }

    partial class RecommendedChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("recommendedChatFilter");
        private static readonly JsonEncodedText propName_filter = JsonEncodedText.Encode("filter");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RecommendedChatFilter)tlobj;
            if (obj.Filter != null)
            {
                writer.WritePropertyName(propName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteString(propName_description, obj.Description);
        }
    }

    partial class RecommendedChatFiltersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("recommendedChatFilters");
        private static readonly JsonEncodedText propName_chat_filters = JsonEncodedText.Encode("chat_filters");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RecommendedChatFilters)tlobj;
            if (obj.ChatFilters != null)
            {
                writer.WritePropertyName(propName_chat_filters);
                writer.WriteArray(obj.ChatFilters);
            }
        }
    }

    partial class ChatListMainConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatListMain");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatListArchiveConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatListArchive");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatListFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatListFilter");
        private static readonly JsonEncodedText propName_chat_filter_id = JsonEncodedText.Encode("chat_filter_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatListFilter)tlobj;
            writer.WriteNumber(propName_chat_filter_id, obj.ChatFilterId);
        }
    }

    partial class ChatListsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatLists");
        private static readonly JsonEncodedText propName_chat_lists = JsonEncodedText.Encode("chat_lists");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatLists)tlobj;
            if (obj.ChatLists_ != null)
            {
                writer.WritePropertyName(propName_chat_lists);
                writer.WriteArray(obj.ChatLists_);
            }
        }
    }

    partial class ChatSourceMtprotoProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatSourceMtprotoProxy");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatSourcePublicServiceAnnouncementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatSourcePublicServiceAnnouncement");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatSourcePublicServiceAnnouncement)tlobj;
            writer.WriteString(propName_type, obj.Type);
            writer.WriteString(propName_text, obj.Text);
        }
    }

    partial class ChatPositionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatPosition");
        private static readonly JsonEncodedText propName_list = JsonEncodedText.Encode("list");
        private static readonly JsonEncodedText propName_order = JsonEncodedText.Encode("order");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        private static readonly JsonEncodedText propName_source = JsonEncodedText.Encode("source");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatPosition)tlobj;
            if (obj.List != null)
            {
                writer.WritePropertyName(propName_list);
                writer.WriteTLObjectValue(obj.List);
            }
            writer.WritePropertyName(propName_order);
            writer.WriteInt64String(obj.Order);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
            if (obj.Source != null)
            {
                writer.WritePropertyName(propName_source);
                writer.WriteTLObjectValue(obj.Source);
            }
        }
    }

    partial class ChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chat");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_permissions = JsonEncodedText.Encode("permissions");
        private static readonly JsonEncodedText propName_last_message = JsonEncodedText.Encode("last_message");
        private static readonly JsonEncodedText propName_positions = JsonEncodedText.Encode("positions");
        private static readonly JsonEncodedText propName_is_marked_as_unread = JsonEncodedText.Encode("is_marked_as_unread");
        private static readonly JsonEncodedText propName_is_blocked = JsonEncodedText.Encode("is_blocked");
        private static readonly JsonEncodedText propName_has_scheduled_messages = JsonEncodedText.Encode("has_scheduled_messages");
        private static readonly JsonEncodedText propName_can_be_deleted_only_for_self = JsonEncodedText.Encode("can_be_deleted_only_for_self");
        private static readonly JsonEncodedText propName_can_be_deleted_for_all_users = JsonEncodedText.Encode("can_be_deleted_for_all_users");
        private static readonly JsonEncodedText propName_can_be_reported = JsonEncodedText.Encode("can_be_reported");
        private static readonly JsonEncodedText propName_default_disable_notification = JsonEncodedText.Encode("default_disable_notification");
        private static readonly JsonEncodedText propName_unread_count = JsonEncodedText.Encode("unread_count");
        private static readonly JsonEncodedText propName_last_read_inbox_message_id = JsonEncodedText.Encode("last_read_inbox_message_id");
        private static readonly JsonEncodedText propName_last_read_outbox_message_id = JsonEncodedText.Encode("last_read_outbox_message_id");
        private static readonly JsonEncodedText propName_unread_mention_count = JsonEncodedText.Encode("unread_mention_count");
        private static readonly JsonEncodedText propName_notification_settings = JsonEncodedText.Encode("notification_settings");
        private static readonly JsonEncodedText propName_action_bar = JsonEncodedText.Encode("action_bar");
        private static readonly JsonEncodedText propName_pinned_message_id = JsonEncodedText.Encode("pinned_message_id");
        private static readonly JsonEncodedText propName_reply_markup_message_id = JsonEncodedText.Encode("reply_markup_message_id");
        private static readonly JsonEncodedText propName_draft_message = JsonEncodedText.Encode("draft_message");
        private static readonly JsonEncodedText propName_client_data = JsonEncodedText.Encode("client_data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Chat)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(propName_title, obj.Title);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            if (obj.Permissions != null)
            {
                writer.WritePropertyName(propName_permissions);
                writer.WriteTLObjectValue(obj.Permissions);
            }
            if (obj.LastMessage != null)
            {
                writer.WritePropertyName(propName_last_message);
                writer.WriteTLObjectValue(obj.LastMessage);
            }
            if (obj.Positions != null)
            {
                writer.WritePropertyName(propName_positions);
                writer.WriteArray(obj.Positions);
            }
            writer.WriteBoolean(propName_is_marked_as_unread, obj.IsMarkedAsUnread);
            writer.WriteBoolean(propName_is_blocked, obj.IsBlocked);
            writer.WriteBoolean(propName_has_scheduled_messages, obj.HasScheduledMessages);
            writer.WriteBoolean(propName_can_be_deleted_only_for_self, obj.CanBeDeletedOnlyForSelf);
            writer.WriteBoolean(propName_can_be_deleted_for_all_users, obj.CanBeDeletedForAllUsers);
            writer.WriteBoolean(propName_can_be_reported, obj.CanBeReported);
            writer.WriteBoolean(propName_default_disable_notification, obj.DefaultDisableNotification);
            writer.WriteNumber(propName_unread_count, obj.UnreadCount);
            writer.WriteNumber(propName_last_read_inbox_message_id, obj.LastReadInboxMessageId);
            writer.WriteNumber(propName_last_read_outbox_message_id, obj.LastReadOutboxMessageId);
            writer.WriteNumber(propName_unread_mention_count, obj.UnreadMentionCount);
            if (obj.NotificationSettings != null)
            {
                writer.WritePropertyName(propName_notification_settings);
                writer.WriteTLObjectValue(obj.NotificationSettings);
            }
            if (obj.ActionBar != null)
            {
                writer.WritePropertyName(propName_action_bar);
                writer.WriteTLObjectValue(obj.ActionBar);
            }
            writer.WriteNumber(propName_pinned_message_id, obj.PinnedMessageId);
            writer.WriteNumber(propName_reply_markup_message_id, obj.ReplyMarkupMessageId);
            if (obj.DraftMessage != null)
            {
                writer.WritePropertyName(propName_draft_message);
                writer.WriteTLObjectValue(obj.DraftMessage);
            }
            writer.WriteString(propName_client_data, obj.ClientData);
        }
    }

    partial class ChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chats");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_chat_ids = JsonEncodedText.Encode("chat_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Chats)tlobj;
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            if (obj.ChatIds != null)
            {
                writer.WritePropertyName(propName_chat_ids);
                writer.WriteArray(obj.ChatIds);
            }
        }
    }

    partial class ChatNearbyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatNearby");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_distance = JsonEncodedText.Encode("distance");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatNearby)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_distance, obj.Distance);
        }
    }

    partial class ChatsNearbyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatsNearby");
        private static readonly JsonEncodedText propName_users_nearby = JsonEncodedText.Encode("users_nearby");
        private static readonly JsonEncodedText propName_supergroups_nearby = JsonEncodedText.Encode("supergroups_nearby");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatsNearby)tlobj;
            if (obj.UsersNearby != null)
            {
                writer.WritePropertyName(propName_users_nearby);
                writer.WriteArray(obj.UsersNearby);
            }
            if (obj.SupergroupsNearby != null)
            {
                writer.WritePropertyName(propName_supergroups_nearby);
                writer.WriteArray(obj.SupergroupsNearby);
            }
        }
    }

    partial class ChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatInviteLink");
        private static readonly JsonEncodedText propName_invite_link = JsonEncodedText.Encode("invite_link");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatInviteLink)tlobj;
            writer.WriteString(propName_invite_link, obj.InviteLink);
        }
    }

    partial class ChatInviteLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatInviteLinkInfo");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_accessible_for = JsonEncodedText.Encode("accessible_for");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_member_count = JsonEncodedText.Encode("member_count");
        private static readonly JsonEncodedText propName_member_user_ids = JsonEncodedText.Encode("member_user_ids");
        private static readonly JsonEncodedText propName_is_public = JsonEncodedText.Encode("is_public");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatInviteLinkInfo)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_accessible_for, obj.AccessibleFor);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(propName_title, obj.Title);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteNumber(propName_member_count, obj.MemberCount);
            if (obj.MemberUserIds != null)
            {
                writer.WritePropertyName(propName_member_user_ids);
                writer.WriteArray(obj.MemberUserIds);
            }
            writer.WriteBoolean(propName_is_public, obj.IsPublic);
        }
    }

    partial class PublicChatTypeHasUsernameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("publicChatTypeHasUsername");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PublicChatTypeIsLocationBasedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("publicChatTypeIsLocationBased");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionBarReportSpamConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionBarReportSpam");
        private static readonly JsonEncodedText propName_can_unarchive = JsonEncodedText.Encode("can_unarchive");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionBarReportSpam)tlobj;
            writer.WriteBoolean(propName_can_unarchive, obj.CanUnarchive);
        }
    }

    partial class ChatActionBarReportUnrelatedLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionBarReportUnrelatedLocation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionBarReportAddBlockConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionBarReportAddBlock");
        private static readonly JsonEncodedText propName_can_unarchive = JsonEncodedText.Encode("can_unarchive");
        private static readonly JsonEncodedText propName_distance = JsonEncodedText.Encode("distance");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionBarReportAddBlock)tlobj;
            writer.WriteBoolean(propName_can_unarchive, obj.CanUnarchive);
            writer.WriteNumber(propName_distance, obj.Distance);
        }
    }

    partial class ChatActionBarAddContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionBarAddContact");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionBarSharePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionBarSharePhoneNumber");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class KeyboardButtonTypeTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("keyboardButtonTypeText");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class KeyboardButtonTypeRequestPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("keyboardButtonTypeRequestPhoneNumber");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class KeyboardButtonTypeRequestLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("keyboardButtonTypeRequestLocation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class KeyboardButtonTypeRequestPollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("keyboardButtonTypeRequestPoll");
        private static readonly JsonEncodedText propName_force_regular = JsonEncodedText.Encode("force_regular");
        private static readonly JsonEncodedText propName_force_quiz = JsonEncodedText.Encode("force_quiz");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (KeyboardButtonTypeRequestPoll)tlobj;
            writer.WriteBoolean(propName_force_regular, obj.ForceRegular);
            writer.WriteBoolean(propName_force_quiz, obj.ForceQuiz);
        }
    }

    partial class KeyboardButtonConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("keyboardButton");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (KeyboardButton)tlobj;
            writer.WriteString(propName_text, obj.Text);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class InlineKeyboardButtonTypeUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeUrl");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButtonTypeUrl)tlobj;
            writer.WriteString(propName_url, obj.Url);
        }
    }

    partial class InlineKeyboardButtonTypeLoginUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeLoginUrl");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_forward_text = JsonEncodedText.Encode("forward_text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButtonTypeLoginUrl)tlobj;
            writer.WriteString(propName_url, obj.Url);
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteString(propName_forward_text, obj.ForwardText);
        }
    }

    partial class InlineKeyboardButtonTypeCallbackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeCallback");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButtonTypeCallback)tlobj;
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
        }
    }

    partial class InlineKeyboardButtonTypeCallbackWithPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeCallbackWithPassword");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButtonTypeCallbackWithPassword)tlobj;
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
        }
    }

    partial class InlineKeyboardButtonTypeCallbackGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeCallbackGame");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InlineKeyboardButtonTypeSwitchInlineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeSwitchInline");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_in_current_chat = JsonEncodedText.Encode("in_current_chat");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButtonTypeSwitchInline)tlobj;
            writer.WriteString(propName_query, obj.Query);
            writer.WriteBoolean(propName_in_current_chat, obj.InCurrentChat);
        }
    }

    partial class InlineKeyboardButtonTypeBuyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeBuy");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class InlineKeyboardButtonConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineKeyboardButton");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineKeyboardButton)tlobj;
            writer.WriteString(propName_text, obj.Text);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class ReplyMarkupRemoveKeyboardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("replyMarkupRemoveKeyboard");
        private static readonly JsonEncodedText propName_is_personal = JsonEncodedText.Encode("is_personal");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReplyMarkupRemoveKeyboard)tlobj;
            writer.WriteBoolean(propName_is_personal, obj.IsPersonal);
        }
    }

    partial class ReplyMarkupForceReplyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("replyMarkupForceReply");
        private static readonly JsonEncodedText propName_is_personal = JsonEncodedText.Encode("is_personal");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReplyMarkupForceReply)tlobj;
            writer.WriteBoolean(propName_is_personal, obj.IsPersonal);
        }
    }

    partial class ReplyMarkupShowKeyboardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("replyMarkupShowKeyboard");
        private static readonly JsonEncodedText propName_rows = JsonEncodedText.Encode("rows");
        private static readonly JsonEncodedText propName_resize_keyboard = JsonEncodedText.Encode("resize_keyboard");
        private static readonly JsonEncodedText propName_one_time = JsonEncodedText.Encode("one_time");
        private static readonly JsonEncodedText propName_is_personal = JsonEncodedText.Encode("is_personal");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReplyMarkupShowKeyboard)tlobj;
            if (obj.Rows != null)
            {
                writer.WritePropertyName(propName_rows);
                writer.WriteArray(obj.Rows);
            }
            writer.WriteBoolean(propName_resize_keyboard, obj.ResizeKeyboard);
            writer.WriteBoolean(propName_one_time, obj.OneTime);
            writer.WriteBoolean(propName_is_personal, obj.IsPersonal);
        }
    }

    partial class ReplyMarkupInlineKeyboardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("replyMarkupInlineKeyboard");
        private static readonly JsonEncodedText propName_rows = JsonEncodedText.Encode("rows");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReplyMarkupInlineKeyboard)tlobj;
            if (obj.Rows != null)
            {
                writer.WritePropertyName(propName_rows);
                writer.WriteArray(obj.Rows);
            }
        }
    }

    partial class LoginUrlInfoOpenConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("loginUrlInfoOpen");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_skip_confirm = JsonEncodedText.Encode("skip_confirm");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LoginUrlInfoOpen)tlobj;
            writer.WriteString(propName_url, obj.Url);
            writer.WriteBoolean(propName_skip_confirm, obj.SkipConfirm);
        }
    }

    partial class LoginUrlInfoRequestConfirmationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("loginUrlInfoRequestConfirmation");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_domain = JsonEncodedText.Encode("domain");
        private static readonly JsonEncodedText propName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
        private static readonly JsonEncodedText propName_request_write_access = JsonEncodedText.Encode("request_write_access");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LoginUrlInfoRequestConfirmation)tlobj;
            writer.WriteString(propName_url, obj.Url);
            writer.WriteString(propName_domain, obj.Domain);
            writer.WriteNumber(propName_bot_user_id, obj.BotUserId);
            writer.WriteBoolean(propName_request_write_access, obj.RequestWriteAccess);
        }
    }

    partial class MessageThreadInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageThreadInfo");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
        private static readonly JsonEncodedText propName_reply_info = JsonEncodedText.Encode("reply_info");
        private static readonly JsonEncodedText propName_messages = JsonEncodedText.Encode("messages");
        private static readonly JsonEncodedText propName_draft_message = JsonEncodedText.Encode("draft_message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageThreadInfo)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_thread_id, obj.MessageThreadId);
            if (obj.ReplyInfo != null)
            {
                writer.WritePropertyName(propName_reply_info);
                writer.WriteTLObjectValue(obj.ReplyInfo);
            }
            if (obj.Messages != null)
            {
                writer.WritePropertyName(propName_messages);
                writer.WriteArray(obj.Messages);
            }
            if (obj.DraftMessage != null)
            {
                writer.WritePropertyName(propName_draft_message);
                writer.WriteTLObjectValue(obj.DraftMessage);
            }
        }
    }

    partial class RichTextPlainConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextPlain");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextPlain)tlobj;
            writer.WriteString(propName_text, obj.Text);
        }
    }

    partial class RichTextBoldConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextBold");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextBold)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextItalicConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextItalic");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextItalic)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextUnderlineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextUnderline");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextUnderline)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextStrikethroughConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextStrikethrough");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextStrikethrough)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextFixedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextFixed");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextFixed)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextUrl");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_is_cached = JsonEncodedText.Encode("is_cached");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextUrl)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(propName_url, obj.Url);
            writer.WriteBoolean(propName_is_cached, obj.IsCached);
        }
    }

    partial class RichTextEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextEmailAddress");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_email_address = JsonEncodedText.Encode("email_address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextEmailAddress)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(propName_email_address, obj.EmailAddress);
        }
    }

    partial class RichTextSubscriptConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextSubscript");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextSubscript)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextSuperscriptConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextSuperscript");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextSuperscript)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextMarkedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextMarked");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextMarked)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class RichTextPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextPhoneNumber");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextPhoneNumber)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
        }
    }

    partial class RichTextIconConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextIcon");
        private static readonly JsonEncodedText propName_document = JsonEncodedText.Encode("document");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextIcon)tlobj;
            if (obj.Document != null)
            {
                writer.WritePropertyName(propName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
        }
    }

    partial class RichTextReferenceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextReference");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_reference_text = JsonEncodedText.Encode("reference_text");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextReference)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            if (obj.ReferenceText != null)
            {
                writer.WritePropertyName(propName_reference_text);
                writer.WriteTLObjectValue(obj.ReferenceText);
            }
            writer.WriteString(propName_url, obj.Url);
        }
    }

    partial class RichTextAnchorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextAnchor");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextAnchor)tlobj;
            writer.WriteString(propName_name, obj.Name);
        }
    }

    partial class RichTextAnchorLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTextAnchorLink");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTextAnchorLink)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(propName_name, obj.Name);
            writer.WriteString(propName_url, obj.Url);
        }
    }

    partial class RichTextsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("richTexts");
        private static readonly JsonEncodedText propName_texts = JsonEncodedText.Encode("texts");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RichTexts)tlobj;
            if (obj.Texts != null)
            {
                writer.WritePropertyName(propName_texts);
                writer.WriteArray(obj.Texts);
            }
        }
    }

    partial class PageBlockCaptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockCaption");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_credit = JsonEncodedText.Encode("credit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockCaption)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            if (obj.Credit != null)
            {
                writer.WritePropertyName(propName_credit);
                writer.WriteTLObjectValue(obj.Credit);
            }
        }
    }

    partial class PageBlockListItemConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockListItem");
        private static readonly JsonEncodedText propName_label = JsonEncodedText.Encode("label");
        private static readonly JsonEncodedText propName_page_blocks = JsonEncodedText.Encode("page_blocks");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockListItem)tlobj;
            writer.WriteString(propName_label, obj.Label);
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(propName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
        }
    }

    partial class PageBlockHorizontalAlignmentLeftConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockHorizontalAlignmentLeft");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockHorizontalAlignmentCenterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockHorizontalAlignmentCenter");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockHorizontalAlignmentRightConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockHorizontalAlignmentRight");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockVerticalAlignmentTopConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockVerticalAlignmentTop");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockVerticalAlignmentMiddleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockVerticalAlignmentMiddle");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockVerticalAlignmentBottomConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockVerticalAlignmentBottom");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockTableCellConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockTableCell");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_is_header = JsonEncodedText.Encode("is_header");
        private static readonly JsonEncodedText propName_colspan = JsonEncodedText.Encode("colspan");
        private static readonly JsonEncodedText propName_rowspan = JsonEncodedText.Encode("rowspan");
        private static readonly JsonEncodedText propName_align = JsonEncodedText.Encode("align");
        private static readonly JsonEncodedText propName_valign = JsonEncodedText.Encode("valign");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockTableCell)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteBoolean(propName_is_header, obj.IsHeader);
            writer.WriteNumber(propName_colspan, obj.Colspan);
            writer.WriteNumber(propName_rowspan, obj.Rowspan);
            if (obj.Align != null)
            {
                writer.WritePropertyName(propName_align);
                writer.WriteTLObjectValue(obj.Align);
            }
            if (obj.Valign != null)
            {
                writer.WritePropertyName(propName_valign);
                writer.WriteTLObjectValue(obj.Valign);
            }
        }
    }

    partial class PageBlockRelatedArticleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockRelatedArticle");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_author = JsonEncodedText.Encode("author");
        private static readonly JsonEncodedText propName_publish_date = JsonEncodedText.Encode("publish_date");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockRelatedArticle)tlobj;
            writer.WriteString(propName_url, obj.Url);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(propName_author, obj.Author);
            writer.WriteNumber(propName_publish_date, obj.PublishDate);
        }
    }

    partial class PageBlockTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockTitle");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockTitle)tlobj;
            if (obj.Title != null)
            {
                writer.WritePropertyName(propName_title);
                writer.WriteTLObjectValue(obj.Title);
            }
        }
    }

    partial class PageBlockSubtitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockSubtitle");
        private static readonly JsonEncodedText propName_subtitle = JsonEncodedText.Encode("subtitle");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockSubtitle)tlobj;
            if (obj.Subtitle != null)
            {
                writer.WritePropertyName(propName_subtitle);
                writer.WriteTLObjectValue(obj.Subtitle);
            }
        }
    }

    partial class PageBlockAuthorDateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockAuthorDate");
        private static readonly JsonEncodedText propName_author = JsonEncodedText.Encode("author");
        private static readonly JsonEncodedText propName_publish_date = JsonEncodedText.Encode("publish_date");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockAuthorDate)tlobj;
            if (obj.Author != null)
            {
                writer.WritePropertyName(propName_author);
                writer.WriteTLObjectValue(obj.Author);
            }
            writer.WriteNumber(propName_publish_date, obj.PublishDate);
        }
    }

    partial class PageBlockHeaderConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockHeader");
        private static readonly JsonEncodedText propName_header = JsonEncodedText.Encode("header");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockHeader)tlobj;
            if (obj.Header != null)
            {
                writer.WritePropertyName(propName_header);
                writer.WriteTLObjectValue(obj.Header);
            }
        }
    }

    partial class PageBlockSubheaderConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockSubheader");
        private static readonly JsonEncodedText propName_subheader = JsonEncodedText.Encode("subheader");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockSubheader)tlobj;
            if (obj.Subheader != null)
            {
                writer.WritePropertyName(propName_subheader);
                writer.WriteTLObjectValue(obj.Subheader);
            }
        }
    }

    partial class PageBlockKickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockKicker");
        private static readonly JsonEncodedText propName_kicker = JsonEncodedText.Encode("kicker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockKicker)tlobj;
            if (obj.Kicker != null)
            {
                writer.WritePropertyName(propName_kicker);
                writer.WriteTLObjectValue(obj.Kicker);
            }
        }
    }

    partial class PageBlockParagraphConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockParagraph");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockParagraph)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class PageBlockPreformattedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockPreformatted");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_language = JsonEncodedText.Encode("language");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockPreformatted)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteString(propName_language, obj.Language);
        }
    }

    partial class PageBlockFooterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockFooter");
        private static readonly JsonEncodedText propName_footer = JsonEncodedText.Encode("footer");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockFooter)tlobj;
            if (obj.Footer != null)
            {
                writer.WritePropertyName(propName_footer);
                writer.WriteTLObjectValue(obj.Footer);
            }
        }
    }

    partial class PageBlockDividerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockDivider");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PageBlockAnchorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockAnchor");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockAnchor)tlobj;
            writer.WriteString(propName_name, obj.Name);
        }
    }

    partial class PageBlockListConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockList");
        private static readonly JsonEncodedText propName_items = JsonEncodedText.Encode("items");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockList)tlobj;
            if (obj.Items != null)
            {
                writer.WritePropertyName(propName_items);
                writer.WriteArray(obj.Items);
            }
        }
    }

    partial class PageBlockBlockQuoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockBlockQuote");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_credit = JsonEncodedText.Encode("credit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockBlockQuote)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            if (obj.Credit != null)
            {
                writer.WritePropertyName(propName_credit);
                writer.WriteTLObjectValue(obj.Credit);
            }
        }
    }

    partial class PageBlockPullQuoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockPullQuote");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_credit = JsonEncodedText.Encode("credit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockPullQuote)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            if (obj.Credit != null)
            {
                writer.WritePropertyName(propName_credit);
                writer.WriteTLObjectValue(obj.Credit);
            }
        }
    }

    partial class PageBlockAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockAnimation");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_need_autoplay = JsonEncodedText.Encode("need_autoplay");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(propName_need_autoplay, obj.NeedAutoplay);
        }
    }

    partial class PageBlockAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockAudio");
        private static readonly JsonEncodedText propName_audio = JsonEncodedText.Encode("audio");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockAudio)tlobj;
            if (obj.Audio != null)
            {
                writer.WritePropertyName(propName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class PageBlockPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockPhoto");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockPhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteString(propName_url, obj.Url);
        }
    }

    partial class PageBlockVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockVideo");
        private static readonly JsonEncodedText propName_video = JsonEncodedText.Encode("video");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_need_autoplay = JsonEncodedText.Encode("need_autoplay");
        private static readonly JsonEncodedText propName_is_looped = JsonEncodedText.Encode("is_looped");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockVideo)tlobj;
            if (obj.Video != null)
            {
                writer.WritePropertyName(propName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(propName_need_autoplay, obj.NeedAutoplay);
            writer.WriteBoolean(propName_is_looped, obj.IsLooped);
        }
    }

    partial class PageBlockVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockVoiceNote");
        private static readonly JsonEncodedText propName_voice_note = JsonEncodedText.Encode("voice_note");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockVoiceNote)tlobj;
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(propName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class PageBlockCoverConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockCover");
        private static readonly JsonEncodedText propName_cover = JsonEncodedText.Encode("cover");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockCover)tlobj;
            if (obj.Cover != null)
            {
                writer.WritePropertyName(propName_cover);
                writer.WriteTLObjectValue(obj.Cover);
            }
        }
    }

    partial class PageBlockEmbeddedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockEmbedded");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_html = JsonEncodedText.Encode("html");
        private static readonly JsonEncodedText propName_poster_photo = JsonEncodedText.Encode("poster_photo");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_is_full_width = JsonEncodedText.Encode("is_full_width");
        private static readonly JsonEncodedText propName_allow_scrolling = JsonEncodedText.Encode("allow_scrolling");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockEmbedded)tlobj;
            writer.WriteString(propName_url, obj.Url);
            writer.WriteString(propName_html, obj.Html);
            if (obj.PosterPhoto != null)
            {
                writer.WritePropertyName(propName_poster_photo);
                writer.WriteTLObjectValue(obj.PosterPhoto);
            }
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(propName_is_full_width, obj.IsFullWidth);
            writer.WriteBoolean(propName_allow_scrolling, obj.AllowScrolling);
        }
    }

    partial class PageBlockEmbeddedPostConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockEmbeddedPost");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_author = JsonEncodedText.Encode("author");
        private static readonly JsonEncodedText propName_author_photo = JsonEncodedText.Encode("author_photo");
        private static readonly JsonEncodedText propName_date = JsonEncodedText.Encode("date");
        private static readonly JsonEncodedText propName_page_blocks = JsonEncodedText.Encode("page_blocks");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockEmbeddedPost)tlobj;
            writer.WriteString(propName_url, obj.Url);
            writer.WriteString(propName_author, obj.Author);
            if (obj.AuthorPhoto != null)
            {
                writer.WritePropertyName(propName_author_photo);
                writer.WriteTLObjectValue(obj.AuthorPhoto);
            }
            writer.WriteNumber(propName_date, obj.Date);
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(propName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class PageBlockCollageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockCollage");
        private static readonly JsonEncodedText propName_page_blocks = JsonEncodedText.Encode("page_blocks");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockCollage)tlobj;
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(propName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class PageBlockSlideshowConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockSlideshow");
        private static readonly JsonEncodedText propName_page_blocks = JsonEncodedText.Encode("page_blocks");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockSlideshow)tlobj;
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(propName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class PageBlockChatLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockChatLink");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_username = JsonEncodedText.Encode("username");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockChatLink)tlobj;
            writer.WriteString(propName_title, obj.Title);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(propName_username, obj.Username);
        }
    }

    partial class PageBlockTableConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockTable");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_cells = JsonEncodedText.Encode("cells");
        private static readonly JsonEncodedText propName_is_bordered = JsonEncodedText.Encode("is_bordered");
        private static readonly JsonEncodedText propName_is_striped = JsonEncodedText.Encode("is_striped");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockTable)tlobj;
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            if (obj.Cells != null)
            {
                writer.WritePropertyName(propName_cells);
                writer.WriteArray(obj.Cells);
            }
            writer.WriteBoolean(propName_is_bordered, obj.IsBordered);
            writer.WriteBoolean(propName_is_striped, obj.IsStriped);
        }
    }

    partial class PageBlockDetailsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockDetails");
        private static readonly JsonEncodedText propName_header = JsonEncodedText.Encode("header");
        private static readonly JsonEncodedText propName_page_blocks = JsonEncodedText.Encode("page_blocks");
        private static readonly JsonEncodedText propName_is_open = JsonEncodedText.Encode("is_open");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockDetails)tlobj;
            if (obj.Header != null)
            {
                writer.WritePropertyName(propName_header);
                writer.WriteTLObjectValue(obj.Header);
            }
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(propName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
            writer.WriteBoolean(propName_is_open, obj.IsOpen);
        }
    }

    partial class PageBlockRelatedArticlesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockRelatedArticles");
        private static readonly JsonEncodedText propName_header = JsonEncodedText.Encode("header");
        private static readonly JsonEncodedText propName_articles = JsonEncodedText.Encode("articles");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockRelatedArticles)tlobj;
            if (obj.Header != null)
            {
                writer.WritePropertyName(propName_header);
                writer.WriteTLObjectValue(obj.Header);
            }
            if (obj.Articles != null)
            {
                writer.WritePropertyName(propName_articles);
                writer.WriteArray(obj.Articles);
            }
        }
    }

    partial class PageBlockMapConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pageBlockMap");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        private static readonly JsonEncodedText propName_zoom = JsonEncodedText.Encode("zoom");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PageBlockMap)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(propName_zoom, obj.Zoom);
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class WebPageInstantViewConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("webPageInstantView");
        private static readonly JsonEncodedText propName_page_blocks = JsonEncodedText.Encode("page_blocks");
        private static readonly JsonEncodedText propName_view_count = JsonEncodedText.Encode("view_count");
        private static readonly JsonEncodedText propName_version = JsonEncodedText.Encode("version");
        private static readonly JsonEncodedText propName_is_rtl = JsonEncodedText.Encode("is_rtl");
        private static readonly JsonEncodedText propName_is_full = JsonEncodedText.Encode("is_full");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (WebPageInstantView)tlobj;
            if (obj.PageBlocks != null)
            {
                writer.WritePropertyName(propName_page_blocks);
                writer.WriteArray(obj.PageBlocks);
            }
            writer.WriteNumber(propName_view_count, obj.ViewCount);
            writer.WriteNumber(propName_version, obj.Version);
            writer.WriteBoolean(propName_is_rtl, obj.IsRtl);
            writer.WriteBoolean(propName_is_full, obj.IsFull);
        }
    }

    partial class WebPageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("webPage");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_display_url = JsonEncodedText.Encode("display_url");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_site_name = JsonEncodedText.Encode("site_name");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_embed_url = JsonEncodedText.Encode("embed_url");
        private static readonly JsonEncodedText propName_embed_type = JsonEncodedText.Encode("embed_type");
        private static readonly JsonEncodedText propName_embed_width = JsonEncodedText.Encode("embed_width");
        private static readonly JsonEncodedText propName_embed_height = JsonEncodedText.Encode("embed_height");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_author = JsonEncodedText.Encode("author");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        private static readonly JsonEncodedText propName_audio = JsonEncodedText.Encode("audio");
        private static readonly JsonEncodedText propName_document = JsonEncodedText.Encode("document");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        private static readonly JsonEncodedText propName_video = JsonEncodedText.Encode("video");
        private static readonly JsonEncodedText propName_video_note = JsonEncodedText.Encode("video_note");
        private static readonly JsonEncodedText propName_voice_note = JsonEncodedText.Encode("voice_note");
        private static readonly JsonEncodedText propName_instant_view_version = JsonEncodedText.Encode("instant_view_version");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (WebPage)tlobj;
            writer.WriteString(propName_url, obj.Url);
            writer.WriteString(propName_display_url, obj.DisplayUrl);
            writer.WriteString(propName_type, obj.Type);
            writer.WriteString(propName_site_name, obj.SiteName);
            writer.WriteString(propName_title, obj.Title);
            if (obj.Description != null)
            {
                writer.WritePropertyName(propName_description);
                writer.WriteTLObjectValue(obj.Description);
            }
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(propName_embed_url, obj.EmbedUrl);
            writer.WriteString(propName_embed_type, obj.EmbedType);
            writer.WriteNumber(propName_embed_width, obj.EmbedWidth);
            writer.WriteNumber(propName_embed_height, obj.EmbedHeight);
            writer.WriteNumber(propName_duration, obj.Duration);
            writer.WriteString(propName_author, obj.Author);
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            if (obj.Audio != null)
            {
                writer.WritePropertyName(propName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
            if (obj.Document != null)
            {
                writer.WritePropertyName(propName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            if (obj.Video != null)
            {
                writer.WritePropertyName(propName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            if (obj.VideoNote != null)
            {
                writer.WritePropertyName(propName_video_note);
                writer.WriteTLObjectValue(obj.VideoNote);
            }
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(propName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            writer.WriteNumber(propName_instant_view_version, obj.InstantViewVersion);
        }
    }

    partial class CountryInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("countryInfo");
        private static readonly JsonEncodedText propName_country_code = JsonEncodedText.Encode("country_code");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_english_name = JsonEncodedText.Encode("english_name");
        private static readonly JsonEncodedText propName_is_hidden = JsonEncodedText.Encode("is_hidden");
        private static readonly JsonEncodedText propName_calling_codes = JsonEncodedText.Encode("calling_codes");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CountryInfo)tlobj;
            writer.WriteString(propName_country_code, obj.CountryCode);
            writer.WriteString(propName_name, obj.Name);
            writer.WriteString(propName_english_name, obj.EnglishName);
            writer.WriteBoolean(propName_is_hidden, obj.IsHidden);
            if (obj.CallingCodes != null)
            {
                writer.WritePropertyName(propName_calling_codes);
                writer.WriteArray(obj.CallingCodes);
            }
        }
    }

    partial class CountriesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("countries");
        private static readonly JsonEncodedText propName_countries = JsonEncodedText.Encode("countries");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Countries)tlobj;
            if (obj.Countries_ != null)
            {
                writer.WritePropertyName(propName_countries);
                writer.WriteArray(obj.Countries_);
            }
        }
    }

    partial class PhoneNumberInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("phoneNumberInfo");
        private static readonly JsonEncodedText propName_country = JsonEncodedText.Encode("country");
        private static readonly JsonEncodedText propName_country_calling_code = JsonEncodedText.Encode("country_calling_code");
        private static readonly JsonEncodedText propName_formatted_phone_number = JsonEncodedText.Encode("formatted_phone_number");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PhoneNumberInfo)tlobj;
            if (obj.Country != null)
            {
                writer.WritePropertyName(propName_country);
                writer.WriteTLObjectValue(obj.Country);
            }
            writer.WriteString(propName_country_calling_code, obj.CountryCallingCode);
            writer.WriteString(propName_formatted_phone_number, obj.FormattedPhoneNumber);
        }
    }

    partial class BankCardActionOpenUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("bankCardActionOpenUrl");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BankCardActionOpenUrl)tlobj;
            writer.WriteString(propName_text, obj.Text);
            writer.WriteString(propName_url, obj.Url);
        }
    }

    partial class BankCardInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("bankCardInfo");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_actions = JsonEncodedText.Encode("actions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BankCardInfo)tlobj;
            writer.WriteString(propName_title, obj.Title);
            if (obj.Actions != null)
            {
                writer.WritePropertyName(propName_actions);
                writer.WriteArray(obj.Actions);
            }
        }
    }

    partial class AddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("address");
        private static readonly JsonEncodedText propName_country_code = JsonEncodedText.Encode("country_code");
        private static readonly JsonEncodedText propName_state = JsonEncodedText.Encode("state");
        private static readonly JsonEncodedText propName_city = JsonEncodedText.Encode("city");
        private static readonly JsonEncodedText propName_street_line1 = JsonEncodedText.Encode("street_line1");
        private static readonly JsonEncodedText propName_street_line2 = JsonEncodedText.Encode("street_line2");
        private static readonly JsonEncodedText propName_postal_code = JsonEncodedText.Encode("postal_code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Address)tlobj;
            writer.WriteString(propName_country_code, obj.CountryCode);
            writer.WriteString(propName_state, obj.State);
            writer.WriteString(propName_city, obj.City);
            writer.WriteString(propName_street_line1, obj.StreetLine1);
            writer.WriteString(propName_street_line2, obj.StreetLine2);
            writer.WriteString(propName_postal_code, obj.PostalCode);
        }
    }

    partial class LabeledPricePartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("labeledPricePart");
        private static readonly JsonEncodedText propName_label = JsonEncodedText.Encode("label");
        private static readonly JsonEncodedText propName_amount = JsonEncodedText.Encode("amount");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LabeledPricePart)tlobj;
            writer.WriteString(propName_label, obj.Label);
            writer.WriteNumber(propName_amount, obj.Amount);
        }
    }

    partial class InvoiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("invoice");
        private static readonly JsonEncodedText propName_currency = JsonEncodedText.Encode("currency");
        private static readonly JsonEncodedText propName_price_parts = JsonEncodedText.Encode("price_parts");
        private static readonly JsonEncodedText propName_is_test = JsonEncodedText.Encode("is_test");
        private static readonly JsonEncodedText propName_need_name = JsonEncodedText.Encode("need_name");
        private static readonly JsonEncodedText propName_need_phone_number = JsonEncodedText.Encode("need_phone_number");
        private static readonly JsonEncodedText propName_need_email_address = JsonEncodedText.Encode("need_email_address");
        private static readonly JsonEncodedText propName_need_shipping_address = JsonEncodedText.Encode("need_shipping_address");
        private static readonly JsonEncodedText propName_send_phone_number_to_provider = JsonEncodedText.Encode("send_phone_number_to_provider");
        private static readonly JsonEncodedText propName_send_email_address_to_provider = JsonEncodedText.Encode("send_email_address_to_provider");
        private static readonly JsonEncodedText propName_is_flexible = JsonEncodedText.Encode("is_flexible");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Invoice)tlobj;
            writer.WriteString(propName_currency, obj.Currency);
            if (obj.PriceParts != null)
            {
                writer.WritePropertyName(propName_price_parts);
                writer.WriteArray(obj.PriceParts);
            }
            writer.WriteBoolean(propName_is_test, obj.IsTest);
            writer.WriteBoolean(propName_need_name, obj.NeedName);
            writer.WriteBoolean(propName_need_phone_number, obj.NeedPhoneNumber);
            writer.WriteBoolean(propName_need_email_address, obj.NeedEmailAddress);
            writer.WriteBoolean(propName_need_shipping_address, obj.NeedShippingAddress);
            writer.WriteBoolean(propName_send_phone_number_to_provider, obj.SendPhoneNumberToProvider);
            writer.WriteBoolean(propName_send_email_address_to_provider, obj.SendEmailAddressToProvider);
            writer.WriteBoolean(propName_is_flexible, obj.IsFlexible);
        }
    }

    partial class OrderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("orderInfo");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        private static readonly JsonEncodedText propName_email_address = JsonEncodedText.Encode("email_address");
        private static readonly JsonEncodedText propName_shipping_address = JsonEncodedText.Encode("shipping_address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OrderInfo)tlobj;
            writer.WriteString(propName_name, obj.Name);
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
            writer.WriteString(propName_email_address, obj.EmailAddress);
            if (obj.ShippingAddress != null)
            {
                writer.WritePropertyName(propName_shipping_address);
                writer.WriteTLObjectValue(obj.ShippingAddress);
            }
        }
    }

    partial class ShippingOptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("shippingOption");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_price_parts = JsonEncodedText.Encode("price_parts");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ShippingOption)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_title, obj.Title);
            if (obj.PriceParts != null)
            {
                writer.WritePropertyName(propName_price_parts);
                writer.WriteArray(obj.PriceParts);
            }
        }
    }

    partial class SavedCredentialsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("savedCredentials");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SavedCredentials)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_title, obj.Title);
        }
    }

    partial class InputCredentialsSavedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputCredentialsSaved");
        private static readonly JsonEncodedText propName_saved_credentials_id = JsonEncodedText.Encode("saved_credentials_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputCredentialsSaved)tlobj;
            writer.WriteString(propName_saved_credentials_id, obj.SavedCredentialsId);
        }
    }

    partial class InputCredentialsNewConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputCredentialsNew");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        private static readonly JsonEncodedText propName_allow_save = JsonEncodedText.Encode("allow_save");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputCredentialsNew)tlobj;
            writer.WriteString(propName_data, obj.Data);
            writer.WriteBoolean(propName_allow_save, obj.AllowSave);
        }
    }

    partial class InputCredentialsAndroidPayConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputCredentialsAndroidPay");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputCredentialsAndroidPay)tlobj;
            writer.WriteString(propName_data, obj.Data);
        }
    }

    partial class InputCredentialsApplePayConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputCredentialsApplePay");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputCredentialsApplePay)tlobj;
            writer.WriteString(propName_data, obj.Data);
        }
    }

    partial class PaymentsProviderStripeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("paymentsProviderStripe");
        private static readonly JsonEncodedText propName_publishable_key = JsonEncodedText.Encode("publishable_key");
        private static readonly JsonEncodedText propName_need_country = JsonEncodedText.Encode("need_country");
        private static readonly JsonEncodedText propName_need_postal_code = JsonEncodedText.Encode("need_postal_code");
        private static readonly JsonEncodedText propName_need_cardholder_name = JsonEncodedText.Encode("need_cardholder_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PaymentsProviderStripe)tlobj;
            writer.WriteString(propName_publishable_key, obj.PublishableKey);
            writer.WriteBoolean(propName_need_country, obj.NeedCountry);
            writer.WriteBoolean(propName_need_postal_code, obj.NeedPostalCode);
            writer.WriteBoolean(propName_need_cardholder_name, obj.NeedCardholderName);
        }
    }

    partial class PaymentFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("paymentForm");
        private static readonly JsonEncodedText propName_invoice = JsonEncodedText.Encode("invoice");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_payments_provider = JsonEncodedText.Encode("payments_provider");
        private static readonly JsonEncodedText propName_saved_order_info = JsonEncodedText.Encode("saved_order_info");
        private static readonly JsonEncodedText propName_saved_credentials = JsonEncodedText.Encode("saved_credentials");
        private static readonly JsonEncodedText propName_can_save_credentials = JsonEncodedText.Encode("can_save_credentials");
        private static readonly JsonEncodedText propName_need_password = JsonEncodedText.Encode("need_password");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PaymentForm)tlobj;
            if (obj.Invoice != null)
            {
                writer.WritePropertyName(propName_invoice);
                writer.WriteTLObjectValue(obj.Invoice);
            }
            writer.WriteString(propName_url, obj.Url);
            if (obj.PaymentsProvider != null)
            {
                writer.WritePropertyName(propName_payments_provider);
                writer.WriteTLObjectValue(obj.PaymentsProvider);
            }
            if (obj.SavedOrderInfo != null)
            {
                writer.WritePropertyName(propName_saved_order_info);
                writer.WriteTLObjectValue(obj.SavedOrderInfo);
            }
            if (obj.SavedCredentials != null)
            {
                writer.WritePropertyName(propName_saved_credentials);
                writer.WriteTLObjectValue(obj.SavedCredentials);
            }
            writer.WriteBoolean(propName_can_save_credentials, obj.CanSaveCredentials);
            writer.WriteBoolean(propName_need_password, obj.NeedPassword);
        }
    }

    partial class ValidatedOrderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("validatedOrderInfo");
        private static readonly JsonEncodedText propName_order_info_id = JsonEncodedText.Encode("order_info_id");
        private static readonly JsonEncodedText propName_shipping_options = JsonEncodedText.Encode("shipping_options");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ValidatedOrderInfo)tlobj;
            writer.WriteString(propName_order_info_id, obj.OrderInfoId);
            if (obj.ShippingOptions != null)
            {
                writer.WritePropertyName(propName_shipping_options);
                writer.WriteArray(obj.ShippingOptions);
            }
        }
    }

    partial class PaymentResultConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("paymentResult");
        private static readonly JsonEncodedText propName_success = JsonEncodedText.Encode("success");
        private static readonly JsonEncodedText propName_verification_url = JsonEncodedText.Encode("verification_url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PaymentResult)tlobj;
            writer.WriteBoolean(propName_success, obj.Success);
            writer.WriteString(propName_verification_url, obj.VerificationUrl);
        }
    }

    partial class PaymentReceiptConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("paymentReceipt");
        private static readonly JsonEncodedText propName_date = JsonEncodedText.Encode("date");
        private static readonly JsonEncodedText propName_payments_provider_user_id = JsonEncodedText.Encode("payments_provider_user_id");
        private static readonly JsonEncodedText propName_invoice = JsonEncodedText.Encode("invoice");
        private static readonly JsonEncodedText propName_order_info = JsonEncodedText.Encode("order_info");
        private static readonly JsonEncodedText propName_shipping_option = JsonEncodedText.Encode("shipping_option");
        private static readonly JsonEncodedText propName_credentials_title = JsonEncodedText.Encode("credentials_title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PaymentReceipt)tlobj;
            writer.WriteNumber(propName_date, obj.Date);
            writer.WriteNumber(propName_payments_provider_user_id, obj.PaymentsProviderUserId);
            if (obj.Invoice != null)
            {
                writer.WritePropertyName(propName_invoice);
                writer.WriteTLObjectValue(obj.Invoice);
            }
            if (obj.OrderInfo != null)
            {
                writer.WritePropertyName(propName_order_info);
                writer.WriteTLObjectValue(obj.OrderInfo);
            }
            if (obj.ShippingOption != null)
            {
                writer.WritePropertyName(propName_shipping_option);
                writer.WriteTLObjectValue(obj.ShippingOption);
            }
            writer.WriteString(propName_credentials_title, obj.CredentialsTitle);
        }
    }

    partial class DatedFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("datedFile");
        private static readonly JsonEncodedText propName_file = JsonEncodedText.Encode("file");
        private static readonly JsonEncodedText propName_date = JsonEncodedText.Encode("date");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DatedFile)tlobj;
            if (obj.File != null)
            {
                writer.WritePropertyName(propName_file);
                writer.WriteTLObjectValue(obj.File);
            }
            writer.WriteNumber(propName_date, obj.Date);
        }
    }

    partial class PassportElementTypePersonalDetailsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypePersonalDetails");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypePassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypePassport");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeDriverLicenseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypeDriverLicense");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeIdentityCardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypeIdentityCard");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeInternalPassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypeInternalPassport");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypeAddress");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeUtilityBillConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypeUtilityBill");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeBankStatementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypeBankStatement");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeRentalAgreementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypeRentalAgreement");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypePassportRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypePassportRegistration");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeTemporaryRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypeTemporaryRegistration");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypePhoneNumber");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementTypeEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTypeEmailAddress");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("date");
        private static readonly JsonEncodedText propName_day = JsonEncodedText.Encode("day");
        private static readonly JsonEncodedText propName_month = JsonEncodedText.Encode("month");
        private static readonly JsonEncodedText propName_year = JsonEncodedText.Encode("year");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Date)tlobj;
            writer.WriteNumber(propName_day, obj.Day);
            writer.WriteNumber(propName_month, obj.Month);
            writer.WriteNumber(propName_year, obj.Year);
        }
    }

    partial class PersonalDetailsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("personalDetails");
        private static readonly JsonEncodedText propName_first_name = JsonEncodedText.Encode("first_name");
        private static readonly JsonEncodedText propName_middle_name = JsonEncodedText.Encode("middle_name");
        private static readonly JsonEncodedText propName_last_name = JsonEncodedText.Encode("last_name");
        private static readonly JsonEncodedText propName_native_first_name = JsonEncodedText.Encode("native_first_name");
        private static readonly JsonEncodedText propName_native_middle_name = JsonEncodedText.Encode("native_middle_name");
        private static readonly JsonEncodedText propName_native_last_name = JsonEncodedText.Encode("native_last_name");
        private static readonly JsonEncodedText propName_birthdate = JsonEncodedText.Encode("birthdate");
        private static readonly JsonEncodedText propName_gender = JsonEncodedText.Encode("gender");
        private static readonly JsonEncodedText propName_country_code = JsonEncodedText.Encode("country_code");
        private static readonly JsonEncodedText propName_residence_country_code = JsonEncodedText.Encode("residence_country_code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PersonalDetails)tlobj;
            writer.WriteString(propName_first_name, obj.FirstName);
            writer.WriteString(propName_middle_name, obj.MiddleName);
            writer.WriteString(propName_last_name, obj.LastName);
            writer.WriteString(propName_native_first_name, obj.NativeFirstName);
            writer.WriteString(propName_native_middle_name, obj.NativeMiddleName);
            writer.WriteString(propName_native_last_name, obj.NativeLastName);
            if (obj.Birthdate != null)
            {
                writer.WritePropertyName(propName_birthdate);
                writer.WriteTLObjectValue(obj.Birthdate);
            }
            writer.WriteString(propName_gender, obj.Gender);
            writer.WriteString(propName_country_code, obj.CountryCode);
            writer.WriteString(propName_residence_country_code, obj.ResidenceCountryCode);
        }
    }

    partial class IdentityDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("identityDocument");
        private static readonly JsonEncodedText propName_number = JsonEncodedText.Encode("number");
        private static readonly JsonEncodedText propName_expiry_date = JsonEncodedText.Encode("expiry_date");
        private static readonly JsonEncodedText propName_front_side = JsonEncodedText.Encode("front_side");
        private static readonly JsonEncodedText propName_reverse_side = JsonEncodedText.Encode("reverse_side");
        private static readonly JsonEncodedText propName_selfie = JsonEncodedText.Encode("selfie");
        private static readonly JsonEncodedText propName_translation = JsonEncodedText.Encode("translation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (IdentityDocument)tlobj;
            writer.WriteString(propName_number, obj.Number);
            if (obj.ExpiryDate != null)
            {
                writer.WritePropertyName(propName_expiry_date);
                writer.WriteTLObjectValue(obj.ExpiryDate);
            }
            if (obj.FrontSide != null)
            {
                writer.WritePropertyName(propName_front_side);
                writer.WriteTLObjectValue(obj.FrontSide);
            }
            if (obj.ReverseSide != null)
            {
                writer.WritePropertyName(propName_reverse_side);
                writer.WriteTLObjectValue(obj.ReverseSide);
            }
            if (obj.Selfie != null)
            {
                writer.WritePropertyName(propName_selfie);
                writer.WriteTLObjectValue(obj.Selfie);
            }
            if (obj.Translation != null)
            {
                writer.WritePropertyName(propName_translation);
                writer.WriteArray(obj.Translation);
            }
        }
    }

    partial class InputIdentityDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputIdentityDocument");
        private static readonly JsonEncodedText propName_number = JsonEncodedText.Encode("number");
        private static readonly JsonEncodedText propName_expiry_date = JsonEncodedText.Encode("expiry_date");
        private static readonly JsonEncodedText propName_front_side = JsonEncodedText.Encode("front_side");
        private static readonly JsonEncodedText propName_reverse_side = JsonEncodedText.Encode("reverse_side");
        private static readonly JsonEncodedText propName_selfie = JsonEncodedText.Encode("selfie");
        private static readonly JsonEncodedText propName_translation = JsonEncodedText.Encode("translation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputIdentityDocument)tlobj;
            writer.WriteString(propName_number, obj.Number);
            if (obj.ExpiryDate != null)
            {
                writer.WritePropertyName(propName_expiry_date);
                writer.WriteTLObjectValue(obj.ExpiryDate);
            }
            if (obj.FrontSide != null)
            {
                writer.WritePropertyName(propName_front_side);
                writer.WriteTLObjectValue(obj.FrontSide);
            }
            if (obj.ReverseSide != null)
            {
                writer.WritePropertyName(propName_reverse_side);
                writer.WriteTLObjectValue(obj.ReverseSide);
            }
            if (obj.Selfie != null)
            {
                writer.WritePropertyName(propName_selfie);
                writer.WriteTLObjectValue(obj.Selfie);
            }
            if (obj.Translation != null)
            {
                writer.WritePropertyName(propName_translation);
                writer.WriteArray(obj.Translation);
            }
        }
    }

    partial class PersonalDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("personalDocument");
        private static readonly JsonEncodedText propName_files = JsonEncodedText.Encode("files");
        private static readonly JsonEncodedText propName_translation = JsonEncodedText.Encode("translation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PersonalDocument)tlobj;
            if (obj.Files != null)
            {
                writer.WritePropertyName(propName_files);
                writer.WriteArray(obj.Files);
            }
            if (obj.Translation != null)
            {
                writer.WritePropertyName(propName_translation);
                writer.WriteArray(obj.Translation);
            }
        }
    }

    partial class InputPersonalDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPersonalDocument");
        private static readonly JsonEncodedText propName_files = JsonEncodedText.Encode("files");
        private static readonly JsonEncodedText propName_translation = JsonEncodedText.Encode("translation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPersonalDocument)tlobj;
            if (obj.Files != null)
            {
                writer.WritePropertyName(propName_files);
                writer.WriteArray(obj.Files);
            }
            if (obj.Translation != null)
            {
                writer.WritePropertyName(propName_translation);
                writer.WriteArray(obj.Translation);
            }
        }
    }

    partial class PassportElementPersonalDetailsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementPersonalDetails");
        private static readonly JsonEncodedText propName_personal_details = JsonEncodedText.Encode("personal_details");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementPersonalDetails)tlobj;
            if (obj.PersonalDetails != null)
            {
                writer.WritePropertyName(propName_personal_details);
                writer.WriteTLObjectValue(obj.PersonalDetails);
            }
        }
    }

    partial class PassportElementPassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementPassport");
        private static readonly JsonEncodedText propName_passport = JsonEncodedText.Encode("passport");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementPassport)tlobj;
            if (obj.Passport != null)
            {
                writer.WritePropertyName(propName_passport);
                writer.WriteTLObjectValue(obj.Passport);
            }
        }
    }

    partial class PassportElementDriverLicenseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementDriverLicense");
        private static readonly JsonEncodedText propName_driver_license = JsonEncodedText.Encode("driver_license");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementDriverLicense)tlobj;
            if (obj.DriverLicense != null)
            {
                writer.WritePropertyName(propName_driver_license);
                writer.WriteTLObjectValue(obj.DriverLicense);
            }
        }
    }

    partial class PassportElementIdentityCardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementIdentityCard");
        private static readonly JsonEncodedText propName_identity_card = JsonEncodedText.Encode("identity_card");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementIdentityCard)tlobj;
            if (obj.IdentityCard != null)
            {
                writer.WritePropertyName(propName_identity_card);
                writer.WriteTLObjectValue(obj.IdentityCard);
            }
        }
    }

    partial class PassportElementInternalPassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementInternalPassport");
        private static readonly JsonEncodedText propName_internal_passport = JsonEncodedText.Encode("internal_passport");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementInternalPassport)tlobj;
            if (obj.InternalPassport != null)
            {
                writer.WritePropertyName(propName_internal_passport);
                writer.WriteTLObjectValue(obj.InternalPassport);
            }
        }
    }

    partial class PassportElementAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementAddress");
        private static readonly JsonEncodedText propName_address = JsonEncodedText.Encode("address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementAddress)tlobj;
            if (obj.Address != null)
            {
                writer.WritePropertyName(propName_address);
                writer.WriteTLObjectValue(obj.Address);
            }
        }
    }

    partial class PassportElementUtilityBillConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementUtilityBill");
        private static readonly JsonEncodedText propName_utility_bill = JsonEncodedText.Encode("utility_bill");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementUtilityBill)tlobj;
            if (obj.UtilityBill != null)
            {
                writer.WritePropertyName(propName_utility_bill);
                writer.WriteTLObjectValue(obj.UtilityBill);
            }
        }
    }

    partial class PassportElementBankStatementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementBankStatement");
        private static readonly JsonEncodedText propName_bank_statement = JsonEncodedText.Encode("bank_statement");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementBankStatement)tlobj;
            if (obj.BankStatement != null)
            {
                writer.WritePropertyName(propName_bank_statement);
                writer.WriteTLObjectValue(obj.BankStatement);
            }
        }
    }

    partial class PassportElementRentalAgreementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementRentalAgreement");
        private static readonly JsonEncodedText propName_rental_agreement = JsonEncodedText.Encode("rental_agreement");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementRentalAgreement)tlobj;
            if (obj.RentalAgreement != null)
            {
                writer.WritePropertyName(propName_rental_agreement);
                writer.WriteTLObjectValue(obj.RentalAgreement);
            }
        }
    }

    partial class PassportElementPassportRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementPassportRegistration");
        private static readonly JsonEncodedText propName_passport_registration = JsonEncodedText.Encode("passport_registration");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementPassportRegistration)tlobj;
            if (obj.PassportRegistration != null)
            {
                writer.WritePropertyName(propName_passport_registration);
                writer.WriteTLObjectValue(obj.PassportRegistration);
            }
        }
    }

    partial class PassportElementTemporaryRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementTemporaryRegistration");
        private static readonly JsonEncodedText propName_temporary_registration = JsonEncodedText.Encode("temporary_registration");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementTemporaryRegistration)tlobj;
            if (obj.TemporaryRegistration != null)
            {
                writer.WritePropertyName(propName_temporary_registration);
                writer.WriteTLObjectValue(obj.TemporaryRegistration);
            }
        }
    }

    partial class PassportElementPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementPhoneNumber");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementPhoneNumber)tlobj;
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
        }
    }

    partial class PassportElementEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementEmailAddress");
        private static readonly JsonEncodedText propName_email_address = JsonEncodedText.Encode("email_address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementEmailAddress)tlobj;
            writer.WriteString(propName_email_address, obj.EmailAddress);
        }
    }

    partial class InputPassportElementPersonalDetailsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementPersonalDetails");
        private static readonly JsonEncodedText propName_personal_details = JsonEncodedText.Encode("personal_details");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementPersonalDetails)tlobj;
            if (obj.PersonalDetails != null)
            {
                writer.WritePropertyName(propName_personal_details);
                writer.WriteTLObjectValue(obj.PersonalDetails);
            }
        }
    }

    partial class InputPassportElementPassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementPassport");
        private static readonly JsonEncodedText propName_passport = JsonEncodedText.Encode("passport");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementPassport)tlobj;
            if (obj.Passport != null)
            {
                writer.WritePropertyName(propName_passport);
                writer.WriteTLObjectValue(obj.Passport);
            }
        }
    }

    partial class InputPassportElementDriverLicenseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementDriverLicense");
        private static readonly JsonEncodedText propName_driver_license = JsonEncodedText.Encode("driver_license");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementDriverLicense)tlobj;
            if (obj.DriverLicense != null)
            {
                writer.WritePropertyName(propName_driver_license);
                writer.WriteTLObjectValue(obj.DriverLicense);
            }
        }
    }

    partial class InputPassportElementIdentityCardConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementIdentityCard");
        private static readonly JsonEncodedText propName_identity_card = JsonEncodedText.Encode("identity_card");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementIdentityCard)tlobj;
            if (obj.IdentityCard != null)
            {
                writer.WritePropertyName(propName_identity_card);
                writer.WriteTLObjectValue(obj.IdentityCard);
            }
        }
    }

    partial class InputPassportElementInternalPassportConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementInternalPassport");
        private static readonly JsonEncodedText propName_internal_passport = JsonEncodedText.Encode("internal_passport");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementInternalPassport)tlobj;
            if (obj.InternalPassport != null)
            {
                writer.WritePropertyName(propName_internal_passport);
                writer.WriteTLObjectValue(obj.InternalPassport);
            }
        }
    }

    partial class InputPassportElementAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementAddress");
        private static readonly JsonEncodedText propName_address = JsonEncodedText.Encode("address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementAddress)tlobj;
            if (obj.Address != null)
            {
                writer.WritePropertyName(propName_address);
                writer.WriteTLObjectValue(obj.Address);
            }
        }
    }

    partial class InputPassportElementUtilityBillConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementUtilityBill");
        private static readonly JsonEncodedText propName_utility_bill = JsonEncodedText.Encode("utility_bill");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementUtilityBill)tlobj;
            if (obj.UtilityBill != null)
            {
                writer.WritePropertyName(propName_utility_bill);
                writer.WriteTLObjectValue(obj.UtilityBill);
            }
        }
    }

    partial class InputPassportElementBankStatementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementBankStatement");
        private static readonly JsonEncodedText propName_bank_statement = JsonEncodedText.Encode("bank_statement");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementBankStatement)tlobj;
            if (obj.BankStatement != null)
            {
                writer.WritePropertyName(propName_bank_statement);
                writer.WriteTLObjectValue(obj.BankStatement);
            }
        }
    }

    partial class InputPassportElementRentalAgreementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementRentalAgreement");
        private static readonly JsonEncodedText propName_rental_agreement = JsonEncodedText.Encode("rental_agreement");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementRentalAgreement)tlobj;
            if (obj.RentalAgreement != null)
            {
                writer.WritePropertyName(propName_rental_agreement);
                writer.WriteTLObjectValue(obj.RentalAgreement);
            }
        }
    }

    partial class InputPassportElementPassportRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementPassportRegistration");
        private static readonly JsonEncodedText propName_passport_registration = JsonEncodedText.Encode("passport_registration");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementPassportRegistration)tlobj;
            if (obj.PassportRegistration != null)
            {
                writer.WritePropertyName(propName_passport_registration);
                writer.WriteTLObjectValue(obj.PassportRegistration);
            }
        }
    }

    partial class InputPassportElementTemporaryRegistrationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementTemporaryRegistration");
        private static readonly JsonEncodedText propName_temporary_registration = JsonEncodedText.Encode("temporary_registration");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementTemporaryRegistration)tlobj;
            if (obj.TemporaryRegistration != null)
            {
                writer.WritePropertyName(propName_temporary_registration);
                writer.WriteTLObjectValue(obj.TemporaryRegistration);
            }
        }
    }

    partial class InputPassportElementPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementPhoneNumber");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementPhoneNumber)tlobj;
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
        }
    }

    partial class InputPassportElementEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementEmailAddress");
        private static readonly JsonEncodedText propName_email_address = JsonEncodedText.Encode("email_address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementEmailAddress)tlobj;
            writer.WriteString(propName_email_address, obj.EmailAddress);
        }
    }

    partial class PassportElementsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElements");
        private static readonly JsonEncodedText propName_elements = JsonEncodedText.Encode("elements");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElements)tlobj;
            if (obj.Elements != null)
            {
                writer.WritePropertyName(propName_elements);
                writer.WriteArray(obj.Elements);
            }
        }
    }

    partial class PassportElementErrorSourceUnspecifiedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceUnspecified");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorSourceDataFieldConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceDataField");
        private static readonly JsonEncodedText propName_field_name = JsonEncodedText.Encode("field_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementErrorSourceDataField)tlobj;
            writer.WriteString(propName_field_name, obj.FieldName);
        }
    }

    partial class PassportElementErrorSourceFrontSideConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceFrontSide");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorSourceReverseSideConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceReverseSide");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorSourceSelfieConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceSelfie");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorSourceTranslationFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceTranslationFile");
        private static readonly JsonEncodedText propName_file_index = JsonEncodedText.Encode("file_index");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementErrorSourceTranslationFile)tlobj;
            writer.WriteNumber(propName_file_index, obj.FileIndex);
        }
    }

    partial class PassportElementErrorSourceTranslationFilesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceTranslationFiles");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorSourceFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceFile");
        private static readonly JsonEncodedText propName_file_index = JsonEncodedText.Encode("file_index");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementErrorSourceFile)tlobj;
            writer.WriteNumber(propName_file_index, obj.FileIndex);
        }
    }

    partial class PassportElementErrorSourceFilesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceFiles");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PassportElementErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementError");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        private static readonly JsonEncodedText propName_source = JsonEncodedText.Encode("source");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementError)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(propName_message, obj.Message);
            if (obj.Source != null)
            {
                writer.WritePropertyName(propName_source);
                writer.WriteTLObjectValue(obj.Source);
            }
        }
    }

    partial class PassportSuitableElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportSuitableElement");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_is_selfie_required = JsonEncodedText.Encode("is_selfie_required");
        private static readonly JsonEncodedText propName_is_translation_required = JsonEncodedText.Encode("is_translation_required");
        private static readonly JsonEncodedText propName_is_native_name_required = JsonEncodedText.Encode("is_native_name_required");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportSuitableElement)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteBoolean(propName_is_selfie_required, obj.IsSelfieRequired);
            writer.WriteBoolean(propName_is_translation_required, obj.IsTranslationRequired);
            writer.WriteBoolean(propName_is_native_name_required, obj.IsNativeNameRequired);
        }
    }

    partial class PassportRequiredElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportRequiredElement");
        private static readonly JsonEncodedText propName_suitable_elements = JsonEncodedText.Encode("suitable_elements");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportRequiredElement)tlobj;
            if (obj.SuitableElements != null)
            {
                writer.WritePropertyName(propName_suitable_elements);
                writer.WriteArray(obj.SuitableElements);
            }
        }
    }

    partial class PassportAuthorizationFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportAuthorizationForm");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_required_elements = JsonEncodedText.Encode("required_elements");
        private static readonly JsonEncodedText propName_privacy_policy_url = JsonEncodedText.Encode("privacy_policy_url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportAuthorizationForm)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            if (obj.RequiredElements != null)
            {
                writer.WritePropertyName(propName_required_elements);
                writer.WriteArray(obj.RequiredElements);
            }
            writer.WriteString(propName_privacy_policy_url, obj.PrivacyPolicyUrl);
        }
    }

    partial class PassportElementsWithErrorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("passportElementsWithErrors");
        private static readonly JsonEncodedText propName_elements = JsonEncodedText.Encode("elements");
        private static readonly JsonEncodedText propName_errors = JsonEncodedText.Encode("errors");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PassportElementsWithErrors)tlobj;
            if (obj.Elements != null)
            {
                writer.WritePropertyName(propName_elements);
                writer.WriteArray(obj.Elements);
            }
            if (obj.Errors != null)
            {
                writer.WritePropertyName(propName_errors);
                writer.WriteArray(obj.Errors);
            }
        }
    }

    partial class EncryptedCredentialsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("encryptedCredentials");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        private static readonly JsonEncodedText propName_hash = JsonEncodedText.Encode("hash");
        private static readonly JsonEncodedText propName_secret = JsonEncodedText.Encode("secret");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EncryptedCredentials)tlobj;
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
            if (obj.Hash != null)
            {
                writer.WriteBase64String(propName_hash, obj.Hash);
            }
            if (obj.Secret != null)
            {
                writer.WriteBase64String(propName_secret, obj.Secret);
            }
        }
    }

    partial class EncryptedPassportElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("encryptedPassportElement");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        private static readonly JsonEncodedText propName_front_side = JsonEncodedText.Encode("front_side");
        private static readonly JsonEncodedText propName_reverse_side = JsonEncodedText.Encode("reverse_side");
        private static readonly JsonEncodedText propName_selfie = JsonEncodedText.Encode("selfie");
        private static readonly JsonEncodedText propName_translation = JsonEncodedText.Encode("translation");
        private static readonly JsonEncodedText propName_files = JsonEncodedText.Encode("files");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        private static readonly JsonEncodedText propName_hash = JsonEncodedText.Encode("hash");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EncryptedPassportElement)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
            if (obj.FrontSide != null)
            {
                writer.WritePropertyName(propName_front_side);
                writer.WriteTLObjectValue(obj.FrontSide);
            }
            if (obj.ReverseSide != null)
            {
                writer.WritePropertyName(propName_reverse_side);
                writer.WriteTLObjectValue(obj.ReverseSide);
            }
            if (obj.Selfie != null)
            {
                writer.WritePropertyName(propName_selfie);
                writer.WriteTLObjectValue(obj.Selfie);
            }
            if (obj.Translation != null)
            {
                writer.WritePropertyName(propName_translation);
                writer.WriteArray(obj.Translation);
            }
            if (obj.Files != null)
            {
                writer.WritePropertyName(propName_files);
                writer.WriteArray(obj.Files);
            }
            writer.WriteString(propName_value, obj.Value);
            writer.WriteString(propName_hash, obj.Hash);
        }
    }

    partial class InputPassportElementErrorSourceUnspecifiedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceUnspecified");
        private static readonly JsonEncodedText propName_element_hash = JsonEncodedText.Encode("element_hash");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceUnspecified)tlobj;
            if (obj.ElementHash != null)
            {
                writer.WriteBase64String(propName_element_hash, obj.ElementHash);
            }
        }
    }

    partial class InputPassportElementErrorSourceDataFieldConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceDataField");
        private static readonly JsonEncodedText propName_field_name = JsonEncodedText.Encode("field_name");
        private static readonly JsonEncodedText propName_data_hash = JsonEncodedText.Encode("data_hash");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceDataField)tlobj;
            writer.WriteString(propName_field_name, obj.FieldName);
            if (obj.DataHash != null)
            {
                writer.WriteBase64String(propName_data_hash, obj.DataHash);
            }
        }
    }

    partial class InputPassportElementErrorSourceFrontSideConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceFrontSide");
        private static readonly JsonEncodedText propName_file_hash = JsonEncodedText.Encode("file_hash");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceFrontSide)tlobj;
            if (obj.FileHash != null)
            {
                writer.WriteBase64String(propName_file_hash, obj.FileHash);
            }
        }
    }

    partial class InputPassportElementErrorSourceReverseSideConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceReverseSide");
        private static readonly JsonEncodedText propName_file_hash = JsonEncodedText.Encode("file_hash");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceReverseSide)tlobj;
            if (obj.FileHash != null)
            {
                writer.WriteBase64String(propName_file_hash, obj.FileHash);
            }
        }
    }

    partial class InputPassportElementErrorSourceSelfieConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceSelfie");
        private static readonly JsonEncodedText propName_file_hash = JsonEncodedText.Encode("file_hash");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceSelfie)tlobj;
            if (obj.FileHash != null)
            {
                writer.WriteBase64String(propName_file_hash, obj.FileHash);
            }
        }
    }

    partial class InputPassportElementErrorSourceTranslationFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceTranslationFile");
        private static readonly JsonEncodedText propName_file_hash = JsonEncodedText.Encode("file_hash");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceTranslationFile)tlobj;
            if (obj.FileHash != null)
            {
                writer.WriteBase64String(propName_file_hash, obj.FileHash);
            }
        }
    }

    partial class InputPassportElementErrorSourceTranslationFilesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceTranslationFiles");
        private static readonly JsonEncodedText propName_file_hashes = JsonEncodedText.Encode("file_hashes");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceTranslationFiles)tlobj;
            if (obj.FileHashes != null)
            {
                writer.WritePropertyName(propName_file_hashes);
                writer.WriteArray(obj.FileHashes);
            }
        }
    }

    partial class InputPassportElementErrorSourceFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceFile");
        private static readonly JsonEncodedText propName_file_hash = JsonEncodedText.Encode("file_hash");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceFile)tlobj;
            if (obj.FileHash != null)
            {
                writer.WriteBase64String(propName_file_hash, obj.FileHash);
            }
        }
    }

    partial class InputPassportElementErrorSourceFilesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceFiles");
        private static readonly JsonEncodedText propName_file_hashes = JsonEncodedText.Encode("file_hashes");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementErrorSourceFiles)tlobj;
            if (obj.FileHashes != null)
            {
                writer.WritePropertyName(propName_file_hashes);
                writer.WriteArray(obj.FileHashes);
            }
        }
    }

    partial class InputPassportElementErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputPassportElementError");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        private static readonly JsonEncodedText propName_source = JsonEncodedText.Encode("source");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputPassportElementError)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(propName_message, obj.Message);
            if (obj.Source != null)
            {
                writer.WritePropertyName(propName_source);
                writer.WriteTLObjectValue(obj.Source);
            }
        }
    }

    partial class MessageTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageText");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_web_page = JsonEncodedText.Encode("web_page");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageText)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            if (obj.WebPage != null)
            {
                writer.WritePropertyName(propName_web_page);
                writer.WriteTLObjectValue(obj.WebPage);
            }
        }
    }

    partial class MessageAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageAnimation");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_is_secret = JsonEncodedText.Encode("is_secret");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(propName_is_secret, obj.IsSecret);
        }
    }

    partial class MessageAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageAudio");
        private static readonly JsonEncodedText propName_audio = JsonEncodedText.Encode("audio");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageAudio)tlobj;
            if (obj.Audio != null)
            {
                writer.WritePropertyName(propName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class MessageDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageDocument");
        private static readonly JsonEncodedText propName_document = JsonEncodedText.Encode("document");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageDocument)tlobj;
            if (obj.Document != null)
            {
                writer.WritePropertyName(propName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class MessagePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messagePhoto");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_is_secret = JsonEncodedText.Encode("is_secret");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(propName_is_secret, obj.IsSecret);
        }
    }

    partial class MessageExpiredPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageExpiredPhoto");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageSticker");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSticker)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class MessageVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageVideo");
        private static readonly JsonEncodedText propName_video = JsonEncodedText.Encode("video");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_is_secret = JsonEncodedText.Encode("is_secret");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVideo)tlobj;
            if (obj.Video != null)
            {
                writer.WritePropertyName(propName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(propName_is_secret, obj.IsSecret);
        }
    }

    partial class MessageExpiredVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageExpiredVideo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageVideoNote");
        private static readonly JsonEncodedText propName_video_note = JsonEncodedText.Encode("video_note");
        private static readonly JsonEncodedText propName_is_viewed = JsonEncodedText.Encode("is_viewed");
        private static readonly JsonEncodedText propName_is_secret = JsonEncodedText.Encode("is_secret");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVideoNote)tlobj;
            if (obj.VideoNote != null)
            {
                writer.WritePropertyName(propName_video_note);
                writer.WriteTLObjectValue(obj.VideoNote);
            }
            writer.WriteBoolean(propName_is_viewed, obj.IsViewed);
            writer.WriteBoolean(propName_is_secret, obj.IsSecret);
        }
    }

    partial class MessageVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageVoiceNote");
        private static readonly JsonEncodedText propName_voice_note = JsonEncodedText.Encode("voice_note");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_is_listened = JsonEncodedText.Encode("is_listened");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVoiceNote)tlobj;
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(propName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteBoolean(propName_is_listened, obj.IsListened);
        }
    }

    partial class MessageLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageLocation");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        private static readonly JsonEncodedText propName_live_period = JsonEncodedText.Encode("live_period");
        private static readonly JsonEncodedText propName_expires_in = JsonEncodedText.Encode("expires_in");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageLocation)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(propName_live_period, obj.LivePeriod);
            writer.WriteNumber(propName_expires_in, obj.ExpiresIn);
        }
    }

    partial class MessageVenueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageVenue");
        private static readonly JsonEncodedText propName_venue = JsonEncodedText.Encode("venue");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageVenue)tlobj;
            if (obj.Venue != null)
            {
                writer.WritePropertyName(propName_venue);
                writer.WriteTLObjectValue(obj.Venue);
            }
        }
    }

    partial class MessageContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageContact");
        private static readonly JsonEncodedText propName_contact = JsonEncodedText.Encode("contact");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageContact)tlobj;
            if (obj.Contact != null)
            {
                writer.WritePropertyName(propName_contact);
                writer.WriteTLObjectValue(obj.Contact);
            }
        }
    }

    partial class MessageDiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageDice");
        private static readonly JsonEncodedText propName_initial_state_sticker = JsonEncodedText.Encode("initial_state_sticker");
        private static readonly JsonEncodedText propName_final_state_sticker = JsonEncodedText.Encode("final_state_sticker");
        private static readonly JsonEncodedText propName_emoji = JsonEncodedText.Encode("emoji");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        private static readonly JsonEncodedText propName_success_animation_frame_number = JsonEncodedText.Encode("success_animation_frame_number");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageDice)tlobj;
            if (obj.InitialStateSticker != null)
            {
                writer.WritePropertyName(propName_initial_state_sticker);
                writer.WriteTLObjectValue(obj.InitialStateSticker);
            }
            if (obj.FinalStateSticker != null)
            {
                writer.WritePropertyName(propName_final_state_sticker);
                writer.WriteTLObjectValue(obj.FinalStateSticker);
            }
            writer.WriteString(propName_emoji, obj.Emoji);
            writer.WriteNumber(propName_value, obj.Value);
            writer.WriteNumber(propName_success_animation_frame_number, obj.SuccessAnimationFrameNumber);
        }
    }

    partial class MessageGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageGame");
        private static readonly JsonEncodedText propName_game = JsonEncodedText.Encode("game");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageGame)tlobj;
            if (obj.Game != null)
            {
                writer.WritePropertyName(propName_game);
                writer.WriteTLObjectValue(obj.Game);
            }
        }
    }

    partial class MessagePollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messagePoll");
        private static readonly JsonEncodedText propName_poll = JsonEncodedText.Encode("poll");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePoll)tlobj;
            if (obj.Poll != null)
            {
                writer.WritePropertyName(propName_poll);
                writer.WriteTLObjectValue(obj.Poll);
            }
        }
    }

    partial class MessageInvoiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageInvoice");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_currency = JsonEncodedText.Encode("currency");
        private static readonly JsonEncodedText propName_total_amount = JsonEncodedText.Encode("total_amount");
        private static readonly JsonEncodedText propName_start_parameter = JsonEncodedText.Encode("start_parameter");
        private static readonly JsonEncodedText propName_is_test = JsonEncodedText.Encode("is_test");
        private static readonly JsonEncodedText propName_need_shipping_address = JsonEncodedText.Encode("need_shipping_address");
        private static readonly JsonEncodedText propName_receipt_message_id = JsonEncodedText.Encode("receipt_message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageInvoice)tlobj;
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(propName_currency, obj.Currency);
            writer.WriteNumber(propName_total_amount, obj.TotalAmount);
            writer.WriteString(propName_start_parameter, obj.StartParameter);
            writer.WriteBoolean(propName_is_test, obj.IsTest);
            writer.WriteBoolean(propName_need_shipping_address, obj.NeedShippingAddress);
            writer.WriteNumber(propName_receipt_message_id, obj.ReceiptMessageId);
        }
    }

    partial class MessageCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageCall");
        private static readonly JsonEncodedText propName_is_video = JsonEncodedText.Encode("is_video");
        private static readonly JsonEncodedText propName_discard_reason = JsonEncodedText.Encode("discard_reason");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageCall)tlobj;
            writer.WriteBoolean(propName_is_video, obj.IsVideo);
            if (obj.DiscardReason != null)
            {
                writer.WritePropertyName(propName_discard_reason);
                writer.WriteTLObjectValue(obj.DiscardReason);
            }
            writer.WriteNumber(propName_duration, obj.Duration);
        }
    }

    partial class MessageBasicGroupChatCreateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageBasicGroupChatCreate");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_member_user_ids = JsonEncodedText.Encode("member_user_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageBasicGroupChatCreate)tlobj;
            writer.WriteString(propName_title, obj.Title);
            if (obj.MemberUserIds != null)
            {
                writer.WritePropertyName(propName_member_user_ids);
                writer.WriteArray(obj.MemberUserIds);
            }
        }
    }

    partial class MessageSupergroupChatCreateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageSupergroupChatCreate");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSupergroupChatCreate)tlobj;
            writer.WriteString(propName_title, obj.Title);
        }
    }

    partial class MessageChatChangeTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageChatChangeTitle");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatChangeTitle)tlobj;
            writer.WriteString(propName_title, obj.Title);
        }
    }

    partial class MessageChatChangePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageChatChangePhoto");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatChangePhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
        }
    }

    partial class MessageChatDeletePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageChatDeletePhoto");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageChatAddMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageChatAddMembers");
        private static readonly JsonEncodedText propName_member_user_ids = JsonEncodedText.Encode("member_user_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatAddMembers)tlobj;
            if (obj.MemberUserIds != null)
            {
                writer.WritePropertyName(propName_member_user_ids);
                writer.WriteArray(obj.MemberUserIds);
            }
        }
    }

    partial class MessageChatJoinByLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageChatJoinByLink");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageChatDeleteMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageChatDeleteMember");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatDeleteMember)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class MessageChatUpgradeToConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageChatUpgradeTo");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatUpgradeTo)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class MessageChatUpgradeFromConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageChatUpgradeFrom");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatUpgradeFrom)tlobj;
            writer.WriteString(propName_title, obj.Title);
            writer.WriteNumber(propName_basic_group_id, obj.BasicGroupId);
        }
    }

    partial class MessagePinMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messagePinMessage");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePinMessage)tlobj;
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class MessageScreenshotTakenConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageScreenshotTaken");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageChatSetTtlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageChatSetTtl");
        private static readonly JsonEncodedText propName_ttl = JsonEncodedText.Encode("ttl");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageChatSetTtl)tlobj;
            writer.WriteNumber(propName_ttl, obj.Ttl);
        }
    }

    partial class MessageCustomServiceActionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageCustomServiceAction");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageCustomServiceAction)tlobj;
            writer.WriteString(propName_text, obj.Text);
        }
    }

    partial class MessageGameScoreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageGameScore");
        private static readonly JsonEncodedText propName_game_message_id = JsonEncodedText.Encode("game_message_id");
        private static readonly JsonEncodedText propName_game_id = JsonEncodedText.Encode("game_id");
        private static readonly JsonEncodedText propName_score = JsonEncodedText.Encode("score");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageGameScore)tlobj;
            writer.WriteNumber(propName_game_message_id, obj.GameMessageId);
            writer.WritePropertyName(propName_game_id);
            writer.WriteInt64String(obj.GameId);
            writer.WriteNumber(propName_score, obj.Score);
        }
    }

    partial class MessagePaymentSuccessfulConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messagePaymentSuccessful");
        private static readonly JsonEncodedText propName_invoice_message_id = JsonEncodedText.Encode("invoice_message_id");
        private static readonly JsonEncodedText propName_currency = JsonEncodedText.Encode("currency");
        private static readonly JsonEncodedText propName_total_amount = JsonEncodedText.Encode("total_amount");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePaymentSuccessful)tlobj;
            writer.WriteNumber(propName_invoice_message_id, obj.InvoiceMessageId);
            writer.WriteString(propName_currency, obj.Currency);
            writer.WriteNumber(propName_total_amount, obj.TotalAmount);
        }
    }

    partial class MessagePaymentSuccessfulBotConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messagePaymentSuccessfulBot");
        private static readonly JsonEncodedText propName_invoice_message_id = JsonEncodedText.Encode("invoice_message_id");
        private static readonly JsonEncodedText propName_currency = JsonEncodedText.Encode("currency");
        private static readonly JsonEncodedText propName_total_amount = JsonEncodedText.Encode("total_amount");
        private static readonly JsonEncodedText propName_invoice_payload = JsonEncodedText.Encode("invoice_payload");
        private static readonly JsonEncodedText propName_shipping_option_id = JsonEncodedText.Encode("shipping_option_id");
        private static readonly JsonEncodedText propName_order_info = JsonEncodedText.Encode("order_info");
        private static readonly JsonEncodedText propName_telegram_payment_charge_id = JsonEncodedText.Encode("telegram_payment_charge_id");
        private static readonly JsonEncodedText propName_provider_payment_charge_id = JsonEncodedText.Encode("provider_payment_charge_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePaymentSuccessfulBot)tlobj;
            writer.WriteNumber(propName_invoice_message_id, obj.InvoiceMessageId);
            writer.WriteString(propName_currency, obj.Currency);
            writer.WriteNumber(propName_total_amount, obj.TotalAmount);
            if (obj.InvoicePayload != null)
            {
                writer.WriteBase64String(propName_invoice_payload, obj.InvoicePayload);
            }
            writer.WriteString(propName_shipping_option_id, obj.ShippingOptionId);
            if (obj.OrderInfo != null)
            {
                writer.WritePropertyName(propName_order_info);
                writer.WriteTLObjectValue(obj.OrderInfo);
            }
            writer.WriteString(propName_telegram_payment_charge_id, obj.TelegramPaymentChargeId);
            writer.WriteString(propName_provider_payment_charge_id, obj.ProviderPaymentChargeId);
        }
    }

    partial class MessageContactRegisteredConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageContactRegistered");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageWebsiteConnectedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageWebsiteConnected");
        private static readonly JsonEncodedText propName_domain_name = JsonEncodedText.Encode("domain_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageWebsiteConnected)tlobj;
            writer.WriteString(propName_domain_name, obj.DomainName);
        }
    }

    partial class MessagePassportDataSentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messagePassportDataSent");
        private static readonly JsonEncodedText propName_types = JsonEncodedText.Encode("types");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePassportDataSent)tlobj;
            if (obj.Types != null)
            {
                writer.WritePropertyName(propName_types);
                writer.WriteArray(obj.Types);
            }
        }
    }

    partial class MessagePassportDataReceivedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messagePassportDataReceived");
        private static readonly JsonEncodedText propName_elements = JsonEncodedText.Encode("elements");
        private static readonly JsonEncodedText propName_credentials = JsonEncodedText.Encode("credentials");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessagePassportDataReceived)tlobj;
            if (obj.Elements != null)
            {
                writer.WritePropertyName(propName_elements);
                writer.WriteArray(obj.Elements);
            }
            if (obj.Credentials != null)
            {
                writer.WritePropertyName(propName_credentials);
                writer.WriteTLObjectValue(obj.Credentials);
            }
        }
    }

    partial class MessageUnsupportedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageUnsupported");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeMentionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeMention");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeHashtagConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeHashtag");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeCashtagConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeCashtag");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeBotCommandConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeBotCommand");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeUrl");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeEmailAddress");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypePhoneNumber");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeBankCardNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeBankCardNumber");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeBoldConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeBold");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeItalicConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeItalic");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeUnderlineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeUnderline");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeStrikethroughConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeStrikethrough");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypeCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeCode");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypePreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypePre");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TextEntityTypePreCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypePreCode");
        private static readonly JsonEncodedText propName_language = JsonEncodedText.Encode("language");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntityTypePreCode)tlobj;
            writer.WriteString(propName_language, obj.Language);
        }
    }

    partial class TextEntityTypeTextUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeTextUrl");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntityTypeTextUrl)tlobj;
            writer.WriteString(propName_url, obj.Url);
        }
    }

    partial class TextEntityTypeMentionNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textEntityTypeMentionName");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextEntityTypeMentionName)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class InputThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputThumbnail");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputThumbnail)tlobj;
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
        }
    }

    partial class MessageSchedulingStateSendAtDateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageSchedulingStateSendAtDate");
        private static readonly JsonEncodedText propName_send_date = JsonEncodedText.Encode("send_date");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSchedulingStateSendAtDate)tlobj;
            writer.WriteNumber(propName_send_date, obj.SendDate);
        }
    }

    partial class MessageSchedulingStateSendWhenOnlineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageSchedulingStateSendWhenOnline");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class MessageSendOptionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageSendOptions");
        private static readonly JsonEncodedText propName_disable_notification = JsonEncodedText.Encode("disable_notification");
        private static readonly JsonEncodedText propName_from_background = JsonEncodedText.Encode("from_background");
        private static readonly JsonEncodedText propName_scheduling_state = JsonEncodedText.Encode("scheduling_state");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageSendOptions)tlobj;
            writer.WriteBoolean(propName_disable_notification, obj.DisableNotification);
            writer.WriteBoolean(propName_from_background, obj.FromBackground);
            if (obj.SchedulingState != null)
            {
                writer.WritePropertyName(propName_scheduling_state);
                writer.WriteTLObjectValue(obj.SchedulingState);
            }
        }
    }

    partial class MessageCopyOptionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageCopyOptions");
        private static readonly JsonEncodedText propName_send_copy = JsonEncodedText.Encode("send_copy");
        private static readonly JsonEncodedText propName_replace_caption = JsonEncodedText.Encode("replace_caption");
        private static readonly JsonEncodedText propName_new_caption = JsonEncodedText.Encode("new_caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageCopyOptions)tlobj;
            writer.WriteBoolean(propName_send_copy, obj.SendCopy);
            writer.WriteBoolean(propName_replace_caption, obj.ReplaceCaption);
            if (obj.NewCaption != null)
            {
                writer.WritePropertyName(propName_new_caption);
                writer.WriteTLObjectValue(obj.NewCaption);
            }
        }
    }

    partial class InputMessageTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageText");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_disable_web_page_preview = JsonEncodedText.Encode("disable_web_page_preview");
        private static readonly JsonEncodedText propName_clear_draft = JsonEncodedText.Encode("clear_draft");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageText)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteBoolean(propName_disable_web_page_preview, obj.DisableWebPagePreview);
            writer.WriteBoolean(propName_clear_draft, obj.ClearDraft);
        }
    }

    partial class InputMessageAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageAnimation");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_added_sticker_file_ids = JsonEncodedText.Encode("added_sticker_file_ids");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.AddedStickerFileIds != null)
            {
                writer.WritePropertyName(propName_added_sticker_file_ids);
                writer.WriteArray(obj.AddedStickerFileIds);
            }
            writer.WriteNumber(propName_duration, obj.Duration);
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class InputMessageAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageAudio");
        private static readonly JsonEncodedText propName_audio = JsonEncodedText.Encode("audio");
        private static readonly JsonEncodedText propName_album_cover_thumbnail = JsonEncodedText.Encode("album_cover_thumbnail");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_performer = JsonEncodedText.Encode("performer");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageAudio)tlobj;
            if (obj.Audio != null)
            {
                writer.WritePropertyName(propName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
            if (obj.AlbumCoverThumbnail != null)
            {
                writer.WritePropertyName(propName_album_cover_thumbnail);
                writer.WriteTLObjectValue(obj.AlbumCoverThumbnail);
            }
            writer.WriteNumber(propName_duration, obj.Duration);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_performer, obj.Performer);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class InputMessageDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageDocument");
        private static readonly JsonEncodedText propName_document = JsonEncodedText.Encode("document");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_disable_content_type_detection = JsonEncodedText.Encode("disable_content_type_detection");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageDocument)tlobj;
            if (obj.Document != null)
            {
                writer.WritePropertyName(propName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            writer.WriteBoolean(propName_disable_content_type_detection, obj.DisableContentTypeDetection);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class InputMessagePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessagePhoto");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_added_sticker_file_ids = JsonEncodedText.Encode("added_sticker_file_ids");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_ttl = JsonEncodedText.Encode("ttl");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessagePhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.AddedStickerFileIds != null)
            {
                writer.WritePropertyName(propName_added_sticker_file_ids);
                writer.WriteArray(obj.AddedStickerFileIds);
            }
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteNumber(propName_ttl, obj.Ttl);
        }
    }

    partial class InputMessageStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageSticker");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageSticker)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
        }
    }

    partial class InputMessageVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageVideo");
        private static readonly JsonEncodedText propName_video = JsonEncodedText.Encode("video");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_added_sticker_file_ids = JsonEncodedText.Encode("added_sticker_file_ids");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_supports_streaming = JsonEncodedText.Encode("supports_streaming");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_ttl = JsonEncodedText.Encode("ttl");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageVideo)tlobj;
            if (obj.Video != null)
            {
                writer.WritePropertyName(propName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            if (obj.AddedStickerFileIds != null)
            {
                writer.WritePropertyName(propName_added_sticker_file_ids);
                writer.WriteArray(obj.AddedStickerFileIds);
            }
            writer.WriteNumber(propName_duration, obj.Duration);
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            writer.WriteBoolean(propName_supports_streaming, obj.SupportsStreaming);
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
            writer.WriteNumber(propName_ttl, obj.Ttl);
        }
    }

    partial class InputMessageVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageVideoNote");
        private static readonly JsonEncodedText propName_video_note = JsonEncodedText.Encode("video_note");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_length = JsonEncodedText.Encode("length");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageVideoNote)tlobj;
            if (obj.VideoNote != null)
            {
                writer.WritePropertyName(propName_video_note);
                writer.WriteTLObjectValue(obj.VideoNote);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            writer.WriteNumber(propName_duration, obj.Duration);
            writer.WriteNumber(propName_length, obj.Length);
        }
    }

    partial class InputMessageVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageVoiceNote");
        private static readonly JsonEncodedText propName_voice_note = JsonEncodedText.Encode("voice_note");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_waveform = JsonEncodedText.Encode("waveform");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageVoiceNote)tlobj;
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(propName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            writer.WriteNumber(propName_duration, obj.Duration);
            if (obj.Waveform != null)
            {
                writer.WriteBase64String(propName_waveform, obj.Waveform);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class InputMessageLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageLocation");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        private static readonly JsonEncodedText propName_live_period = JsonEncodedText.Encode("live_period");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageLocation)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(propName_live_period, obj.LivePeriod);
        }
    }

    partial class InputMessageVenueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageVenue");
        private static readonly JsonEncodedText propName_venue = JsonEncodedText.Encode("venue");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageVenue)tlobj;
            if (obj.Venue != null)
            {
                writer.WritePropertyName(propName_venue);
                writer.WriteTLObjectValue(obj.Venue);
            }
        }
    }

    partial class InputMessageContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageContact");
        private static readonly JsonEncodedText propName_contact = JsonEncodedText.Encode("contact");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageContact)tlobj;
            if (obj.Contact != null)
            {
                writer.WritePropertyName(propName_contact);
                writer.WriteTLObjectValue(obj.Contact);
            }
        }
    }

    partial class InputMessageDiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageDice");
        private static readonly JsonEncodedText propName_emoji = JsonEncodedText.Encode("emoji");
        private static readonly JsonEncodedText propName_clear_draft = JsonEncodedText.Encode("clear_draft");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageDice)tlobj;
            writer.WriteString(propName_emoji, obj.Emoji);
            writer.WriteBoolean(propName_clear_draft, obj.ClearDraft);
        }
    }

    partial class InputMessageGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageGame");
        private static readonly JsonEncodedText propName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
        private static readonly JsonEncodedText propName_game_short_name = JsonEncodedText.Encode("game_short_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageGame)tlobj;
            writer.WriteNumber(propName_bot_user_id, obj.BotUserId);
            writer.WriteString(propName_game_short_name, obj.GameShortName);
        }
    }

    partial class InputMessageInvoiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageInvoice");
        private static readonly JsonEncodedText propName_invoice = JsonEncodedText.Encode("invoice");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_photo_url = JsonEncodedText.Encode("photo_url");
        private static readonly JsonEncodedText propName_photo_size = JsonEncodedText.Encode("photo_size");
        private static readonly JsonEncodedText propName_photo_width = JsonEncodedText.Encode("photo_width");
        private static readonly JsonEncodedText propName_photo_height = JsonEncodedText.Encode("photo_height");
        private static readonly JsonEncodedText propName_payload = JsonEncodedText.Encode("payload");
        private static readonly JsonEncodedText propName_provider_token = JsonEncodedText.Encode("provider_token");
        private static readonly JsonEncodedText propName_provider_data = JsonEncodedText.Encode("provider_data");
        private static readonly JsonEncodedText propName_start_parameter = JsonEncodedText.Encode("start_parameter");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageInvoice)tlobj;
            if (obj.Invoice != null)
            {
                writer.WritePropertyName(propName_invoice);
                writer.WriteTLObjectValue(obj.Invoice);
            }
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
            writer.WriteString(propName_photo_url, obj.PhotoUrl);
            writer.WriteNumber(propName_photo_size, obj.PhotoSize);
            writer.WriteNumber(propName_photo_width, obj.PhotoWidth);
            writer.WriteNumber(propName_photo_height, obj.PhotoHeight);
            if (obj.Payload != null)
            {
                writer.WriteBase64String(propName_payload, obj.Payload);
            }
            writer.WriteString(propName_provider_token, obj.ProviderToken);
            writer.WriteString(propName_provider_data, obj.ProviderData);
            writer.WriteString(propName_start_parameter, obj.StartParameter);
        }
    }

    partial class InputMessagePollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessagePoll");
        private static readonly JsonEncodedText propName_question = JsonEncodedText.Encode("question");
        private static readonly JsonEncodedText propName_options = JsonEncodedText.Encode("options");
        private static readonly JsonEncodedText propName_is_anonymous = JsonEncodedText.Encode("is_anonymous");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_open_period = JsonEncodedText.Encode("open_period");
        private static readonly JsonEncodedText propName_close_date = JsonEncodedText.Encode("close_date");
        private static readonly JsonEncodedText propName_is_closed = JsonEncodedText.Encode("is_closed");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessagePoll)tlobj;
            writer.WriteString(propName_question, obj.Question);
            if (obj.Options != null)
            {
                writer.WritePropertyName(propName_options);
                writer.WriteArray(obj.Options);
            }
            writer.WriteBoolean(propName_is_anonymous, obj.IsAnonymous);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteNumber(propName_open_period, obj.OpenPeriod);
            writer.WriteNumber(propName_close_date, obj.CloseDate);
            writer.WriteBoolean(propName_is_closed, obj.IsClosed);
        }
    }

    partial class InputMessageForwardedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputMessageForwarded");
        private static readonly JsonEncodedText propName_from_chat_id = JsonEncodedText.Encode("from_chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_in_game_share = JsonEncodedText.Encode("in_game_share");
        private static readonly JsonEncodedText propName_copy_options = JsonEncodedText.Encode("copy_options");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputMessageForwarded)tlobj;
            writer.WriteNumber(propName_from_chat_id, obj.FromChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteBoolean(propName_in_game_share, obj.InGameShare);
            if (obj.CopyOptions != null)
            {
                writer.WritePropertyName(propName_copy_options);
                writer.WriteTLObjectValue(obj.CopyOptions);
            }
        }
    }

    partial class SearchMessagesFilterEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterEmpty");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterAnimation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterAudio");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterDocument");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterPhoto");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterVideo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterVoiceNote");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterPhotoAndVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterPhotoAndVideo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterUrl");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterChatPhoto");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterCall");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterMissedCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterMissedCall");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterVideoNote");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterVoiceAndVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterVoiceAndVideoNote");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterMentionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterMention");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterUnreadMentionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterUnreadMention");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchMessagesFilterFailedToSendConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessagesFilterFailedToSend");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionTypingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionTyping");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionRecordingVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionRecordingVideo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionUploadingVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionUploadingVideo");
        private static readonly JsonEncodedText propName_progress = JsonEncodedText.Encode("progress");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionUploadingVideo)tlobj;
            writer.WriteNumber(propName_progress, obj.Progress);
        }
    }

    partial class ChatActionRecordingVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionRecordingVoiceNote");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionUploadingVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionUploadingVoiceNote");
        private static readonly JsonEncodedText propName_progress = JsonEncodedText.Encode("progress");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionUploadingVoiceNote)tlobj;
            writer.WriteNumber(propName_progress, obj.Progress);
        }
    }

    partial class ChatActionUploadingPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionUploadingPhoto");
        private static readonly JsonEncodedText propName_progress = JsonEncodedText.Encode("progress");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionUploadingPhoto)tlobj;
            writer.WriteNumber(propName_progress, obj.Progress);
        }
    }

    partial class ChatActionUploadingDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionUploadingDocument");
        private static readonly JsonEncodedText propName_progress = JsonEncodedText.Encode("progress");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionUploadingDocument)tlobj;
            writer.WriteNumber(propName_progress, obj.Progress);
        }
    }

    partial class ChatActionChoosingLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionChoosingLocation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionChoosingContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionChoosingContact");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionStartPlayingGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionStartPlayingGame");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionRecordingVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionRecordingVideoNote");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatActionUploadingVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionUploadingVideoNote");
        private static readonly JsonEncodedText propName_progress = JsonEncodedText.Encode("progress");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatActionUploadingVideoNote)tlobj;
            writer.WriteNumber(propName_progress, obj.Progress);
        }
    }

    partial class ChatActionCancelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatActionCancel");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserStatusEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userStatusEmpty");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserStatusOnlineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userStatusOnline");
        private static readonly JsonEncodedText propName_expires = JsonEncodedText.Encode("expires");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserStatusOnline)tlobj;
            writer.WriteNumber(propName_expires, obj.Expires);
        }
    }

    partial class UserStatusOfflineConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userStatusOffline");
        private static readonly JsonEncodedText propName_was_online = JsonEncodedText.Encode("was_online");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserStatusOffline)tlobj;
            writer.WriteNumber(propName_was_online, obj.WasOnline);
        }
    }

    partial class UserStatusRecentlyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userStatusRecently");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserStatusLastWeekConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userStatusLastWeek");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserStatusLastMonthConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userStatusLastMonth");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class StickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("stickers");
        private static readonly JsonEncodedText propName_stickers = JsonEncodedText.Encode("stickers");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Stickers)tlobj;
            if (obj.Stickers_ != null)
            {
                writer.WritePropertyName(propName_stickers);
                writer.WriteArray(obj.Stickers_);
            }
        }
    }

    partial class EmojisConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("emojis");
        private static readonly JsonEncodedText propName_emojis = JsonEncodedText.Encode("emojis");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Emojis)tlobj;
            if (obj.Emojis_ != null)
            {
                writer.WritePropertyName(propName_emojis);
                writer.WriteArray(obj.Emojis_);
            }
        }
    }

    partial class StickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("stickerSet");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_is_installed = JsonEncodedText.Encode("is_installed");
        private static readonly JsonEncodedText propName_is_archived = JsonEncodedText.Encode("is_archived");
        private static readonly JsonEncodedText propName_is_official = JsonEncodedText.Encode("is_official");
        private static readonly JsonEncodedText propName_is_animated = JsonEncodedText.Encode("is_animated");
        private static readonly JsonEncodedText propName_is_masks = JsonEncodedText.Encode("is_masks");
        private static readonly JsonEncodedText propName_is_viewed = JsonEncodedText.Encode("is_viewed");
        private static readonly JsonEncodedText propName_stickers = JsonEncodedText.Encode("stickers");
        private static readonly JsonEncodedText propName_emojis = JsonEncodedText.Encode("emojis");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StickerSet)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_name, obj.Name);
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            writer.WriteBoolean(propName_is_installed, obj.IsInstalled);
            writer.WriteBoolean(propName_is_archived, obj.IsArchived);
            writer.WriteBoolean(propName_is_official, obj.IsOfficial);
            writer.WriteBoolean(propName_is_animated, obj.IsAnimated);
            writer.WriteBoolean(propName_is_masks, obj.IsMasks);
            writer.WriteBoolean(propName_is_viewed, obj.IsViewed);
            if (obj.Stickers != null)
            {
                writer.WritePropertyName(propName_stickers);
                writer.WriteArray(obj.Stickers);
            }
            if (obj.Emojis != null)
            {
                writer.WritePropertyName(propName_emojis);
                writer.WriteArray(obj.Emojis);
            }
        }
    }

    partial class StickerSetInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("stickerSetInfo");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        private static readonly JsonEncodedText propName_is_installed = JsonEncodedText.Encode("is_installed");
        private static readonly JsonEncodedText propName_is_archived = JsonEncodedText.Encode("is_archived");
        private static readonly JsonEncodedText propName_is_official = JsonEncodedText.Encode("is_official");
        private static readonly JsonEncodedText propName_is_animated = JsonEncodedText.Encode("is_animated");
        private static readonly JsonEncodedText propName_is_masks = JsonEncodedText.Encode("is_masks");
        private static readonly JsonEncodedText propName_is_viewed = JsonEncodedText.Encode("is_viewed");
        private static readonly JsonEncodedText propName_size = JsonEncodedText.Encode("size");
        private static readonly JsonEncodedText propName_covers = JsonEncodedText.Encode("covers");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StickerSetInfo)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_name, obj.Name);
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
            writer.WriteBoolean(propName_is_installed, obj.IsInstalled);
            writer.WriteBoolean(propName_is_archived, obj.IsArchived);
            writer.WriteBoolean(propName_is_official, obj.IsOfficial);
            writer.WriteBoolean(propName_is_animated, obj.IsAnimated);
            writer.WriteBoolean(propName_is_masks, obj.IsMasks);
            writer.WriteBoolean(propName_is_viewed, obj.IsViewed);
            writer.WriteNumber(propName_size, obj.Size);
            if (obj.Covers != null)
            {
                writer.WritePropertyName(propName_covers);
                writer.WriteArray(obj.Covers);
            }
        }
    }

    partial class StickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("stickerSets");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_sets = JsonEncodedText.Encode("sets");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StickerSets)tlobj;
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            if (obj.Sets != null)
            {
                writer.WritePropertyName(propName_sets);
                writer.WriteArray(obj.Sets);
            }
        }
    }

    partial class CallDiscardReasonEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callDiscardReasonEmpty");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallDiscardReasonMissedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callDiscardReasonMissed");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallDiscardReasonDeclinedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callDiscardReasonDeclined");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallDiscardReasonDisconnectedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callDiscardReasonDisconnected");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallDiscardReasonHungUpConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callDiscardReasonHungUp");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProtocolConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callProtocol");
        private static readonly JsonEncodedText propName_udp_p2p = JsonEncodedText.Encode("udp_p2p");
        private static readonly JsonEncodedText propName_udp_reflector = JsonEncodedText.Encode("udp_reflector");
        private static readonly JsonEncodedText propName_min_layer = JsonEncodedText.Encode("min_layer");
        private static readonly JsonEncodedText propName_max_layer = JsonEncodedText.Encode("max_layer");
        private static readonly JsonEncodedText propName_library_versions = JsonEncodedText.Encode("library_versions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallProtocol)tlobj;
            writer.WriteBoolean(propName_udp_p2p, obj.UdpP2p);
            writer.WriteBoolean(propName_udp_reflector, obj.UdpReflector);
            writer.WriteNumber(propName_min_layer, obj.MinLayer);
            writer.WriteNumber(propName_max_layer, obj.MaxLayer);
            if (obj.LibraryVersions != null)
            {
                writer.WritePropertyName(propName_library_versions);
                writer.WriteArray(obj.LibraryVersions);
            }
        }
    }

    partial class CallServerTypeTelegramReflectorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callServerTypeTelegramReflector");
        private static readonly JsonEncodedText propName_peer_tag = JsonEncodedText.Encode("peer_tag");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallServerTypeTelegramReflector)tlobj;
            if (obj.PeerTag != null)
            {
                writer.WriteBase64String(propName_peer_tag, obj.PeerTag);
            }
        }
    }

    partial class CallServerTypeWebrtcConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callServerTypeWebrtc");
        private static readonly JsonEncodedText propName_username = JsonEncodedText.Encode("username");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        private static readonly JsonEncodedText propName_supports_turn = JsonEncodedText.Encode("supports_turn");
        private static readonly JsonEncodedText propName_supports_stun = JsonEncodedText.Encode("supports_stun");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallServerTypeWebrtc)tlobj;
            writer.WriteString(propName_username, obj.Username);
            writer.WriteString(propName_password, obj.Password);
            writer.WriteBoolean(propName_supports_turn, obj.SupportsTurn);
            writer.WriteBoolean(propName_supports_stun, obj.SupportsStun);
        }
    }

    partial class CallServerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callServer");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_ip_address = JsonEncodedText.Encode("ip_address");
        private static readonly JsonEncodedText propName_ipv6_address = JsonEncodedText.Encode("ipv6_address");
        private static readonly JsonEncodedText propName_port = JsonEncodedText.Encode("port");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallServer)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(propName_ip_address, obj.IpAddress);
            writer.WriteString(propName_ipv6_address, obj.Ipv6Address);
            writer.WriteNumber(propName_port, obj.Port);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class CallIdConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callId");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallId)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
        }
    }

    partial class CallStatePendingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callStatePending");
        private static readonly JsonEncodedText propName_is_created = JsonEncodedText.Encode("is_created");
        private static readonly JsonEncodedText propName_is_received = JsonEncodedText.Encode("is_received");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallStatePending)tlobj;
            writer.WriteBoolean(propName_is_created, obj.IsCreated);
            writer.WriteBoolean(propName_is_received, obj.IsReceived);
        }
    }

    partial class CallStateExchangingKeysConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callStateExchangingKeys");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallStateReadyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callStateReady");
        private static readonly JsonEncodedText propName_protocol = JsonEncodedText.Encode("protocol");
        private static readonly JsonEncodedText propName_servers = JsonEncodedText.Encode("servers");
        private static readonly JsonEncodedText propName_config = JsonEncodedText.Encode("config");
        private static readonly JsonEncodedText propName_encryption_key = JsonEncodedText.Encode("encryption_key");
        private static readonly JsonEncodedText propName_emojis = JsonEncodedText.Encode("emojis");
        private static readonly JsonEncodedText propName_allow_p2p = JsonEncodedText.Encode("allow_p2p");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallStateReady)tlobj;
            if (obj.Protocol != null)
            {
                writer.WritePropertyName(propName_protocol);
                writer.WriteTLObjectValue(obj.Protocol);
            }
            if (obj.Servers != null)
            {
                writer.WritePropertyName(propName_servers);
                writer.WriteArray(obj.Servers);
            }
            writer.WriteString(propName_config, obj.Config);
            if (obj.EncryptionKey != null)
            {
                writer.WriteBase64String(propName_encryption_key, obj.EncryptionKey);
            }
            if (obj.Emojis != null)
            {
                writer.WritePropertyName(propName_emojis);
                writer.WriteArray(obj.Emojis);
            }
            writer.WriteBoolean(propName_allow_p2p, obj.AllowP2p);
        }
    }

    partial class CallStateHangingUpConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callStateHangingUp");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallStateDiscardedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callStateDiscarded");
        private static readonly JsonEncodedText propName_reason = JsonEncodedText.Encode("reason");
        private static readonly JsonEncodedText propName_need_rating = JsonEncodedText.Encode("need_rating");
        private static readonly JsonEncodedText propName_need_debug_information = JsonEncodedText.Encode("need_debug_information");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallStateDiscarded)tlobj;
            if (obj.Reason != null)
            {
                writer.WritePropertyName(propName_reason);
                writer.WriteTLObjectValue(obj.Reason);
            }
            writer.WriteBoolean(propName_need_rating, obj.NeedRating);
            writer.WriteBoolean(propName_need_debug_information, obj.NeedDebugInformation);
        }
    }

    partial class CallStateErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callStateError");
        private static readonly JsonEncodedText propName_error = JsonEncodedText.Encode("error");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallStateError)tlobj;
            if (obj.Error != null)
            {
                writer.WritePropertyName(propName_error);
                writer.WriteTLObjectValue(obj.Error);
            }
        }
    }

    partial class CallProblemEchoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callProblemEcho");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemNoiseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callProblemNoise");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemInterruptionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callProblemInterruptions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemDistortedSpeechConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callProblemDistortedSpeech");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemSilentLocalConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callProblemSilentLocal");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemSilentRemoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callProblemSilentRemote");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemDroppedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callProblemDropped");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemDistortedVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callProblemDistortedVideo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallProblemPixelatedVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callProblemPixelatedVideo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("call");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_is_outgoing = JsonEncodedText.Encode("is_outgoing");
        private static readonly JsonEncodedText propName_is_video = JsonEncodedText.Encode("is_video");
        private static readonly JsonEncodedText propName_state = JsonEncodedText.Encode("state");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Call)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteBoolean(propName_is_outgoing, obj.IsOutgoing);
            writer.WriteBoolean(propName_is_video, obj.IsVideo);
            if (obj.State != null)
            {
                writer.WritePropertyName(propName_state);
                writer.WriteTLObjectValue(obj.State);
            }
        }
    }

    partial class PhoneNumberAuthenticationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("phoneNumberAuthenticationSettings");
        private static readonly JsonEncodedText propName_allow_flash_call = JsonEncodedText.Encode("allow_flash_call");
        private static readonly JsonEncodedText propName_is_current_phone_number = JsonEncodedText.Encode("is_current_phone_number");
        private static readonly JsonEncodedText propName_allow_sms_retriever_api = JsonEncodedText.Encode("allow_sms_retriever_api");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PhoneNumberAuthenticationSettings)tlobj;
            writer.WriteBoolean(propName_allow_flash_call, obj.AllowFlashCall);
            writer.WriteBoolean(propName_is_current_phone_number, obj.IsCurrentPhoneNumber);
            writer.WriteBoolean(propName_allow_sms_retriever_api, obj.AllowSmsRetrieverApi);
        }
    }

    partial class AnimationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("animations");
        private static readonly JsonEncodedText propName_animations = JsonEncodedText.Encode("animations");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Animations)tlobj;
            if (obj.Animations_ != null)
            {
                writer.WritePropertyName(propName_animations);
                writer.WriteArray(obj.Animations_);
            }
        }
    }

    partial class ImportedContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("importedContacts");
        private static readonly JsonEncodedText propName_user_ids = JsonEncodedText.Encode("user_ids");
        private static readonly JsonEncodedText propName_importer_count = JsonEncodedText.Encode("importer_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ImportedContacts)tlobj;
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(propName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
            if (obj.ImporterCount != null)
            {
                writer.WritePropertyName(propName_importer_count);
                writer.WriteArray(obj.ImporterCount);
            }
        }
    }

    partial class HttpUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("httpUrl");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (HttpUrl)tlobj;
            writer.WriteString(propName_url, obj.Url);
        }
    }

    partial class InputInlineQueryResultAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultAnimation");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
        private static readonly JsonEncodedText propName_thumbnail_mime_type = JsonEncodedText.Encode("thumbnail_mime_type");
        private static readonly JsonEncodedText propName_video_url = JsonEncodedText.Encode("video_url");
        private static readonly JsonEncodedText propName_video_mime_type = JsonEncodedText.Encode("video_mime_type");
        private static readonly JsonEncodedText propName_video_duration = JsonEncodedText.Encode("video_duration");
        private static readonly JsonEncodedText propName_video_width = JsonEncodedText.Encode("video_width");
        private static readonly JsonEncodedText propName_video_height = JsonEncodedText.Encode("video_height");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultAnimation)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteString(propName_thumbnail_mime_type, obj.ThumbnailMimeType);
            writer.WriteString(propName_video_url, obj.VideoUrl);
            writer.WriteString(propName_video_mime_type, obj.VideoMimeType);
            writer.WriteNumber(propName_video_duration, obj.VideoDuration);
            writer.WriteNumber(propName_video_width, obj.VideoWidth);
            writer.WriteNumber(propName_video_height, obj.VideoHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultArticleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultArticle");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_hide_url = JsonEncodedText.Encode("hide_url");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
        private static readonly JsonEncodedText propName_thumbnail_width = JsonEncodedText.Encode("thumbnail_width");
        private static readonly JsonEncodedText propName_thumbnail_height = JsonEncodedText.Encode("thumbnail_height");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultArticle)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_url, obj.Url);
            writer.WriteBoolean(propName_hide_url, obj.HideUrl);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
            writer.WriteString(propName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteNumber(propName_thumbnail_width, obj.ThumbnailWidth);
            writer.WriteNumber(propName_thumbnail_height, obj.ThumbnailHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultAudio");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_performer = JsonEncodedText.Encode("performer");
        private static readonly JsonEncodedText propName_audio_url = JsonEncodedText.Encode("audio_url");
        private static readonly JsonEncodedText propName_audio_duration = JsonEncodedText.Encode("audio_duration");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultAudio)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_performer, obj.Performer);
            writer.WriteString(propName_audio_url, obj.AudioUrl);
            writer.WriteNumber(propName_audio_duration, obj.AudioDuration);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultContact");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_contact = JsonEncodedText.Encode("contact");
        private static readonly JsonEncodedText propName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
        private static readonly JsonEncodedText propName_thumbnail_width = JsonEncodedText.Encode("thumbnail_width");
        private static readonly JsonEncodedText propName_thumbnail_height = JsonEncodedText.Encode("thumbnail_height");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultContact)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Contact != null)
            {
                writer.WritePropertyName(propName_contact);
                writer.WriteTLObjectValue(obj.Contact);
            }
            writer.WriteString(propName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteNumber(propName_thumbnail_width, obj.ThumbnailWidth);
            writer.WriteNumber(propName_thumbnail_height, obj.ThumbnailHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultDocument");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_document_url = JsonEncodedText.Encode("document_url");
        private static readonly JsonEncodedText propName_mime_type = JsonEncodedText.Encode("mime_type");
        private static readonly JsonEncodedText propName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
        private static readonly JsonEncodedText propName_thumbnail_width = JsonEncodedText.Encode("thumbnail_width");
        private static readonly JsonEncodedText propName_thumbnail_height = JsonEncodedText.Encode("thumbnail_height");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultDocument)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
            writer.WriteString(propName_document_url, obj.DocumentUrl);
            writer.WriteString(propName_mime_type, obj.MimeType);
            writer.WriteString(propName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteNumber(propName_thumbnail_width, obj.ThumbnailWidth);
            writer.WriteNumber(propName_thumbnail_height, obj.ThumbnailHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultGame");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_game_short_name = JsonEncodedText.Encode("game_short_name");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultGame)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_game_short_name, obj.GameShortName);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class InputInlineQueryResultLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultLocation");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        private static readonly JsonEncodedText propName_live_period = JsonEncodedText.Encode("live_period");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
        private static readonly JsonEncodedText propName_thumbnail_width = JsonEncodedText.Encode("thumbnail_width");
        private static readonly JsonEncodedText propName_thumbnail_height = JsonEncodedText.Encode("thumbnail_height");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultLocation)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(propName_live_period, obj.LivePeriod);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteNumber(propName_thumbnail_width, obj.ThumbnailWidth);
            writer.WriteNumber(propName_thumbnail_height, obj.ThumbnailHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultPhoto");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
        private static readonly JsonEncodedText propName_photo_url = JsonEncodedText.Encode("photo_url");
        private static readonly JsonEncodedText propName_photo_width = JsonEncodedText.Encode("photo_width");
        private static readonly JsonEncodedText propName_photo_height = JsonEncodedText.Encode("photo_height");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultPhoto)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
            writer.WriteString(propName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteString(propName_photo_url, obj.PhotoUrl);
            writer.WriteNumber(propName_photo_width, obj.PhotoWidth);
            writer.WriteNumber(propName_photo_height, obj.PhotoHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultSticker");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
        private static readonly JsonEncodedText propName_sticker_url = JsonEncodedText.Encode("sticker_url");
        private static readonly JsonEncodedText propName_sticker_width = JsonEncodedText.Encode("sticker_width");
        private static readonly JsonEncodedText propName_sticker_height = JsonEncodedText.Encode("sticker_height");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultSticker)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteString(propName_sticker_url, obj.StickerUrl);
            writer.WriteNumber(propName_sticker_width, obj.StickerWidth);
            writer.WriteNumber(propName_sticker_height, obj.StickerHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultVenueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultVenue");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_venue = JsonEncodedText.Encode("venue");
        private static readonly JsonEncodedText propName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
        private static readonly JsonEncodedText propName_thumbnail_width = JsonEncodedText.Encode("thumbnail_width");
        private static readonly JsonEncodedText propName_thumbnail_height = JsonEncodedText.Encode("thumbnail_height");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultVenue)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Venue != null)
            {
                writer.WritePropertyName(propName_venue);
                writer.WriteTLObjectValue(obj.Venue);
            }
            writer.WriteString(propName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteNumber(propName_thumbnail_width, obj.ThumbnailWidth);
            writer.WriteNumber(propName_thumbnail_height, obj.ThumbnailHeight);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultVideo");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
        private static readonly JsonEncodedText propName_video_url = JsonEncodedText.Encode("video_url");
        private static readonly JsonEncodedText propName_mime_type = JsonEncodedText.Encode("mime_type");
        private static readonly JsonEncodedText propName_video_width = JsonEncodedText.Encode("video_width");
        private static readonly JsonEncodedText propName_video_height = JsonEncodedText.Encode("video_height");
        private static readonly JsonEncodedText propName_video_duration = JsonEncodedText.Encode("video_duration");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultVideo)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
            writer.WriteString(propName_thumbnail_url, obj.ThumbnailUrl);
            writer.WriteString(propName_video_url, obj.VideoUrl);
            writer.WriteString(propName_mime_type, obj.MimeType);
            writer.WriteNumber(propName_video_width, obj.VideoWidth);
            writer.WriteNumber(propName_video_height, obj.VideoHeight);
            writer.WriteNumber(propName_video_duration, obj.VideoDuration);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InputInlineQueryResultVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultVoiceNote");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_voice_note_url = JsonEncodedText.Encode("voice_note_url");
        private static readonly JsonEncodedText propName_voice_note_duration = JsonEncodedText.Encode("voice_note_duration");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputInlineQueryResultVoiceNote)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_voice_note_url, obj.VoiceNoteUrl);
            writer.WriteNumber(propName_voice_note_duration, obj.VoiceNoteDuration);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class InlineQueryResultArticleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultArticle");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_hide_url = JsonEncodedText.Encode("hide_url");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultArticle)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_url, obj.Url);
            writer.WriteBoolean(propName_hide_url, obj.HideUrl);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
        }
    }

    partial class InlineQueryResultContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultContact");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_contact = JsonEncodedText.Encode("contact");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultContact)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Contact != null)
            {
                writer.WritePropertyName(propName_contact);
                writer.WriteTLObjectValue(obj.Contact);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
        }
    }

    partial class InlineQueryResultLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultLocation");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultLocation)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteString(propName_title, obj.Title);
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
        }
    }

    partial class InlineQueryResultVenueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultVenue");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_venue = JsonEncodedText.Encode("venue");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultVenue)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Venue != null)
            {
                writer.WritePropertyName(propName_venue);
                writer.WriteTLObjectValue(obj.Venue);
            }
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
        }
    }

    partial class InlineQueryResultGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultGame");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_game = JsonEncodedText.Encode("game");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultGame)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Game != null)
            {
                writer.WritePropertyName(propName_game);
                writer.WriteTLObjectValue(obj.Game);
            }
        }
    }

    partial class InlineQueryResultAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultAnimation");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultAnimation)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            writer.WriteString(propName_title, obj.Title);
        }
    }

    partial class InlineQueryResultAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultAudio");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_audio = JsonEncodedText.Encode("audio");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultAudio)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Audio != null)
            {
                writer.WritePropertyName(propName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
        }
    }

    partial class InlineQueryResultDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultDocument");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_document = JsonEncodedText.Encode("document");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultDocument)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Document != null)
            {
                writer.WritePropertyName(propName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
        }
    }

    partial class InlineQueryResultPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultPhoto");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultPhoto)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
        }
    }

    partial class InlineQueryResultStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultSticker");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultSticker)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class InlineQueryResultVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultVideo");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_video = JsonEncodedText.Encode("video");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultVideo)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.Video != null)
            {
                writer.WritePropertyName(propName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_description, obj.Description);
        }
    }

    partial class InlineQueryResultVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResultVoiceNote");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_voice_note = JsonEncodedText.Encode("voice_note");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResultVoiceNote)tlobj;
            writer.WriteString(propName_id, obj.Id);
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(propName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            writer.WriteString(propName_title, obj.Title);
        }
    }

    partial class InlineQueryResultsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inlineQueryResults");
        private static readonly JsonEncodedText propName_inline_query_id = JsonEncodedText.Encode("inline_query_id");
        private static readonly JsonEncodedText propName_next_offset = JsonEncodedText.Encode("next_offset");
        private static readonly JsonEncodedText propName_results = JsonEncodedText.Encode("results");
        private static readonly JsonEncodedText propName_switch_pm_text = JsonEncodedText.Encode("switch_pm_text");
        private static readonly JsonEncodedText propName_switch_pm_parameter = JsonEncodedText.Encode("switch_pm_parameter");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InlineQueryResults)tlobj;
            writer.WritePropertyName(propName_inline_query_id);
            writer.WriteInt64String(obj.InlineQueryId);
            writer.WriteString(propName_next_offset, obj.NextOffset);
            if (obj.Results != null)
            {
                writer.WritePropertyName(propName_results);
                writer.WriteArray(obj.Results);
            }
            writer.WriteString(propName_switch_pm_text, obj.SwitchPmText);
            writer.WriteString(propName_switch_pm_parameter, obj.SwitchPmParameter);
        }
    }

    partial class CallbackQueryPayloadDataConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callbackQueryPayloadData");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallbackQueryPayloadData)tlobj;
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
        }
    }

    partial class CallbackQueryPayloadDataWithPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callbackQueryPayloadDataWithPassword");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallbackQueryPayloadDataWithPassword)tlobj;
            writer.WriteString(propName_password, obj.Password);
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
        }
    }

    partial class CallbackQueryPayloadGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callbackQueryPayloadGame");
        private static readonly JsonEncodedText propName_game_short_name = JsonEncodedText.Encode("game_short_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallbackQueryPayloadGame)tlobj;
            writer.WriteString(propName_game_short_name, obj.GameShortName);
        }
    }

    partial class CallbackQueryAnswerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("callbackQueryAnswer");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_show_alert = JsonEncodedText.Encode("show_alert");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CallbackQueryAnswer)tlobj;
            writer.WriteString(propName_text, obj.Text);
            writer.WriteBoolean(propName_show_alert, obj.ShowAlert);
            writer.WriteString(propName_url, obj.Url);
        }
    }

    partial class CustomRequestResultConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("customRequestResult");
        private static readonly JsonEncodedText propName_result = JsonEncodedText.Encode("result");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CustomRequestResult)tlobj;
            writer.WriteString(propName_result, obj.Result);
        }
    }

    partial class GameHighScoreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("gameHighScore");
        private static readonly JsonEncodedText propName_position = JsonEncodedText.Encode("position");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_score = JsonEncodedText.Encode("score");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GameHighScore)tlobj;
            writer.WriteNumber(propName_position, obj.Position);
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteNumber(propName_score, obj.Score);
        }
    }

    partial class GameHighScoresConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("gameHighScores");
        private static readonly JsonEncodedText propName_scores = JsonEncodedText.Encode("scores");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GameHighScores)tlobj;
            if (obj.Scores != null)
            {
                writer.WritePropertyName(propName_scores);
                writer.WriteArray(obj.Scores);
            }
        }
    }

    partial class ChatEventMessageEditedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventMessageEdited");
        private static readonly JsonEncodedText propName_old_message = JsonEncodedText.Encode("old_message");
        private static readonly JsonEncodedText propName_new_message = JsonEncodedText.Encode("new_message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMessageEdited)tlobj;
            if (obj.OldMessage != null)
            {
                writer.WritePropertyName(propName_old_message);
                writer.WriteTLObjectValue(obj.OldMessage);
            }
            if (obj.NewMessage != null)
            {
                writer.WritePropertyName(propName_new_message);
                writer.WriteTLObjectValue(obj.NewMessage);
            }
        }
    }

    partial class ChatEventMessageDeletedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventMessageDeleted");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMessageDeleted)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(propName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class ChatEventPollStoppedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventPollStopped");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventPollStopped)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(propName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class ChatEventMessagePinnedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventMessagePinned");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMessagePinned)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(propName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class ChatEventMessageUnpinnedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventMessageUnpinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatEventMemberJoinedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventMemberJoined");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatEventMemberLeftConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventMemberLeft");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatEventMemberInvitedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventMemberInvited");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_status = JsonEncodedText.Encode("status");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMemberInvited)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.Status != null)
            {
                writer.WritePropertyName(propName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
        }
    }

    partial class ChatEventMemberPromotedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventMemberPromoted");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_old_status = JsonEncodedText.Encode("old_status");
        private static readonly JsonEncodedText propName_new_status = JsonEncodedText.Encode("new_status");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMemberPromoted)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.OldStatus != null)
            {
                writer.WritePropertyName(propName_old_status);
                writer.WriteTLObjectValue(obj.OldStatus);
            }
            if (obj.NewStatus != null)
            {
                writer.WritePropertyName(propName_new_status);
                writer.WriteTLObjectValue(obj.NewStatus);
            }
        }
    }

    partial class ChatEventMemberRestrictedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventMemberRestricted");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_old_status = JsonEncodedText.Encode("old_status");
        private static readonly JsonEncodedText propName_new_status = JsonEncodedText.Encode("new_status");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventMemberRestricted)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.OldStatus != null)
            {
                writer.WritePropertyName(propName_old_status);
                writer.WriteTLObjectValue(obj.OldStatus);
            }
            if (obj.NewStatus != null)
            {
                writer.WritePropertyName(propName_new_status);
                writer.WriteTLObjectValue(obj.NewStatus);
            }
        }
    }

    partial class ChatEventTitleChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventTitleChanged");
        private static readonly JsonEncodedText propName_old_title = JsonEncodedText.Encode("old_title");
        private static readonly JsonEncodedText propName_new_title = JsonEncodedText.Encode("new_title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventTitleChanged)tlobj;
            writer.WriteString(propName_old_title, obj.OldTitle);
            writer.WriteString(propName_new_title, obj.NewTitle);
        }
    }

    partial class ChatEventPermissionsChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventPermissionsChanged");
        private static readonly JsonEncodedText propName_old_permissions = JsonEncodedText.Encode("old_permissions");
        private static readonly JsonEncodedText propName_new_permissions = JsonEncodedText.Encode("new_permissions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventPermissionsChanged)tlobj;
            if (obj.OldPermissions != null)
            {
                writer.WritePropertyName(propName_old_permissions);
                writer.WriteTLObjectValue(obj.OldPermissions);
            }
            if (obj.NewPermissions != null)
            {
                writer.WritePropertyName(propName_new_permissions);
                writer.WriteTLObjectValue(obj.NewPermissions);
            }
        }
    }

    partial class ChatEventDescriptionChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventDescriptionChanged");
        private static readonly JsonEncodedText propName_old_description = JsonEncodedText.Encode("old_description");
        private static readonly JsonEncodedText propName_new_description = JsonEncodedText.Encode("new_description");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventDescriptionChanged)tlobj;
            writer.WriteString(propName_old_description, obj.OldDescription);
            writer.WriteString(propName_new_description, obj.NewDescription);
        }
    }

    partial class ChatEventUsernameChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventUsernameChanged");
        private static readonly JsonEncodedText propName_old_username = JsonEncodedText.Encode("old_username");
        private static readonly JsonEncodedText propName_new_username = JsonEncodedText.Encode("new_username");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventUsernameChanged)tlobj;
            writer.WriteString(propName_old_username, obj.OldUsername);
            writer.WriteString(propName_new_username, obj.NewUsername);
        }
    }

    partial class ChatEventPhotoChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventPhotoChanged");
        private static readonly JsonEncodedText propName_old_photo = JsonEncodedText.Encode("old_photo");
        private static readonly JsonEncodedText propName_new_photo = JsonEncodedText.Encode("new_photo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventPhotoChanged)tlobj;
            if (obj.OldPhoto != null)
            {
                writer.WritePropertyName(propName_old_photo);
                writer.WriteTLObjectValue(obj.OldPhoto);
            }
            if (obj.NewPhoto != null)
            {
                writer.WritePropertyName(propName_new_photo);
                writer.WriteTLObjectValue(obj.NewPhoto);
            }
        }
    }

    partial class ChatEventInvitesToggledConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventInvitesToggled");
        private static readonly JsonEncodedText propName_can_invite_users = JsonEncodedText.Encode("can_invite_users");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventInvitesToggled)tlobj;
            writer.WriteBoolean(propName_can_invite_users, obj.CanInviteUsers);
        }
    }

    partial class ChatEventLinkedChatChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventLinkedChatChanged");
        private static readonly JsonEncodedText propName_old_linked_chat_id = JsonEncodedText.Encode("old_linked_chat_id");
        private static readonly JsonEncodedText propName_new_linked_chat_id = JsonEncodedText.Encode("new_linked_chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventLinkedChatChanged)tlobj;
            writer.WriteNumber(propName_old_linked_chat_id, obj.OldLinkedChatId);
            writer.WriteNumber(propName_new_linked_chat_id, obj.NewLinkedChatId);
        }
    }

    partial class ChatEventSlowModeDelayChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventSlowModeDelayChanged");
        private static readonly JsonEncodedText propName_old_slow_mode_delay = JsonEncodedText.Encode("old_slow_mode_delay");
        private static readonly JsonEncodedText propName_new_slow_mode_delay = JsonEncodedText.Encode("new_slow_mode_delay");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventSlowModeDelayChanged)tlobj;
            writer.WriteNumber(propName_old_slow_mode_delay, obj.OldSlowModeDelay);
            writer.WriteNumber(propName_new_slow_mode_delay, obj.NewSlowModeDelay);
        }
    }

    partial class ChatEventSignMessagesToggledConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventSignMessagesToggled");
        private static readonly JsonEncodedText propName_sign_messages = JsonEncodedText.Encode("sign_messages");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventSignMessagesToggled)tlobj;
            writer.WriteBoolean(propName_sign_messages, obj.SignMessages);
        }
    }

    partial class ChatEventStickerSetChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventStickerSetChanged");
        private static readonly JsonEncodedText propName_old_sticker_set_id = JsonEncodedText.Encode("old_sticker_set_id");
        private static readonly JsonEncodedText propName_new_sticker_set_id = JsonEncodedText.Encode("new_sticker_set_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventStickerSetChanged)tlobj;
            writer.WritePropertyName(propName_old_sticker_set_id);
            writer.WriteInt64String(obj.OldStickerSetId);
            writer.WritePropertyName(propName_new_sticker_set_id);
            writer.WriteInt64String(obj.NewStickerSetId);
        }
    }

    partial class ChatEventLocationChangedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventLocationChanged");
        private static readonly JsonEncodedText propName_old_location = JsonEncodedText.Encode("old_location");
        private static readonly JsonEncodedText propName_new_location = JsonEncodedText.Encode("new_location");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventLocationChanged)tlobj;
            if (obj.OldLocation != null)
            {
                writer.WritePropertyName(propName_old_location);
                writer.WriteTLObjectValue(obj.OldLocation);
            }
            if (obj.NewLocation != null)
            {
                writer.WritePropertyName(propName_new_location);
                writer.WriteTLObjectValue(obj.NewLocation);
            }
        }
    }

    partial class ChatEventIsAllHistoryAvailableToggledConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventIsAllHistoryAvailableToggled");
        private static readonly JsonEncodedText propName_is_all_history_available = JsonEncodedText.Encode("is_all_history_available");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventIsAllHistoryAvailableToggled)tlobj;
            writer.WriteBoolean(propName_is_all_history_available, obj.IsAllHistoryAvailable);
        }
    }

    partial class ChatEventConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEvent");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_date = JsonEncodedText.Encode("date");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_action = JsonEncodedText.Encode("action");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEvent)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(propName_date, obj.Date);
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.Action != null)
            {
                writer.WritePropertyName(propName_action);
                writer.WriteTLObjectValue(obj.Action);
            }
        }
    }

    partial class ChatEventsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEvents");
        private static readonly JsonEncodedText propName_events = JsonEncodedText.Encode("events");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEvents)tlobj;
            if (obj.Events != null)
            {
                writer.WritePropertyName(propName_events);
                writer.WriteArray(obj.Events);
            }
        }
    }

    partial class ChatEventLogFiltersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatEventLogFilters");
        private static readonly JsonEncodedText propName_message_edits = JsonEncodedText.Encode("message_edits");
        private static readonly JsonEncodedText propName_message_deletions = JsonEncodedText.Encode("message_deletions");
        private static readonly JsonEncodedText propName_message_pins = JsonEncodedText.Encode("message_pins");
        private static readonly JsonEncodedText propName_member_joins = JsonEncodedText.Encode("member_joins");
        private static readonly JsonEncodedText propName_member_leaves = JsonEncodedText.Encode("member_leaves");
        private static readonly JsonEncodedText propName_member_invites = JsonEncodedText.Encode("member_invites");
        private static readonly JsonEncodedText propName_member_promotions = JsonEncodedText.Encode("member_promotions");
        private static readonly JsonEncodedText propName_member_restrictions = JsonEncodedText.Encode("member_restrictions");
        private static readonly JsonEncodedText propName_info_changes = JsonEncodedText.Encode("info_changes");
        private static readonly JsonEncodedText propName_setting_changes = JsonEncodedText.Encode("setting_changes");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatEventLogFilters)tlobj;
            writer.WriteBoolean(propName_message_edits, obj.MessageEdits);
            writer.WriteBoolean(propName_message_deletions, obj.MessageDeletions);
            writer.WriteBoolean(propName_message_pins, obj.MessagePins);
            writer.WriteBoolean(propName_member_joins, obj.MemberJoins);
            writer.WriteBoolean(propName_member_leaves, obj.MemberLeaves);
            writer.WriteBoolean(propName_member_invites, obj.MemberInvites);
            writer.WriteBoolean(propName_member_promotions, obj.MemberPromotions);
            writer.WriteBoolean(propName_member_restrictions, obj.MemberRestrictions);
            writer.WriteBoolean(propName_info_changes, obj.InfoChanges);
            writer.WriteBoolean(propName_setting_changes, obj.SettingChanges);
        }
    }

    partial class LanguagePackStringValueOrdinaryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("languagePackStringValueOrdinary");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LanguagePackStringValueOrdinary)tlobj;
            writer.WriteString(propName_value, obj.Value);
        }
    }

    partial class LanguagePackStringValuePluralizedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("languagePackStringValuePluralized");
        private static readonly JsonEncodedText propName_zero_value = JsonEncodedText.Encode("zero_value");
        private static readonly JsonEncodedText propName_one_value = JsonEncodedText.Encode("one_value");
        private static readonly JsonEncodedText propName_two_value = JsonEncodedText.Encode("two_value");
        private static readonly JsonEncodedText propName_few_value = JsonEncodedText.Encode("few_value");
        private static readonly JsonEncodedText propName_many_value = JsonEncodedText.Encode("many_value");
        private static readonly JsonEncodedText propName_other_value = JsonEncodedText.Encode("other_value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LanguagePackStringValuePluralized)tlobj;
            writer.WriteString(propName_zero_value, obj.ZeroValue);
            writer.WriteString(propName_one_value, obj.OneValue);
            writer.WriteString(propName_two_value, obj.TwoValue);
            writer.WriteString(propName_few_value, obj.FewValue);
            writer.WriteString(propName_many_value, obj.ManyValue);
            writer.WriteString(propName_other_value, obj.OtherValue);
        }
    }

    partial class LanguagePackStringValueDeletedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("languagePackStringValueDeleted");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class LanguagePackStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("languagePackString");
        private static readonly JsonEncodedText propName_key = JsonEncodedText.Encode("key");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LanguagePackString)tlobj;
            writer.WriteString(propName_key, obj.Key);
            if (obj.Value != null)
            {
                writer.WritePropertyName(propName_value);
                writer.WriteTLObjectValue(obj.Value);
            }
        }
    }

    partial class LanguagePackStringsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("languagePackStrings");
        private static readonly JsonEncodedText propName_strings = JsonEncodedText.Encode("strings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LanguagePackStrings)tlobj;
            if (obj.Strings != null)
            {
                writer.WritePropertyName(propName_strings);
                writer.WriteArray(obj.Strings);
            }
        }
    }

    partial class LanguagePackInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("languagePackInfo");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_base_language_pack_id = JsonEncodedText.Encode("base_language_pack_id");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_native_name = JsonEncodedText.Encode("native_name");
        private static readonly JsonEncodedText propName_plural_code = JsonEncodedText.Encode("plural_code");
        private static readonly JsonEncodedText propName_is_official = JsonEncodedText.Encode("is_official");
        private static readonly JsonEncodedText propName_is_rtl = JsonEncodedText.Encode("is_rtl");
        private static readonly JsonEncodedText propName_is_beta = JsonEncodedText.Encode("is_beta");
        private static readonly JsonEncodedText propName_is_installed = JsonEncodedText.Encode("is_installed");
        private static readonly JsonEncodedText propName_total_string_count = JsonEncodedText.Encode("total_string_count");
        private static readonly JsonEncodedText propName_translated_string_count = JsonEncodedText.Encode("translated_string_count");
        private static readonly JsonEncodedText propName_local_string_count = JsonEncodedText.Encode("local_string_count");
        private static readonly JsonEncodedText propName_translation_url = JsonEncodedText.Encode("translation_url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LanguagePackInfo)tlobj;
            writer.WriteString(propName_id, obj.Id);
            writer.WriteString(propName_base_language_pack_id, obj.BaseLanguagePackId);
            writer.WriteString(propName_name, obj.Name);
            writer.WriteString(propName_native_name, obj.NativeName);
            writer.WriteString(propName_plural_code, obj.PluralCode);
            writer.WriteBoolean(propName_is_official, obj.IsOfficial);
            writer.WriteBoolean(propName_is_rtl, obj.IsRtl);
            writer.WriteBoolean(propName_is_beta, obj.IsBeta);
            writer.WriteBoolean(propName_is_installed, obj.IsInstalled);
            writer.WriteNumber(propName_total_string_count, obj.TotalStringCount);
            writer.WriteNumber(propName_translated_string_count, obj.TranslatedStringCount);
            writer.WriteNumber(propName_local_string_count, obj.LocalStringCount);
            writer.WriteString(propName_translation_url, obj.TranslationUrl);
        }
    }

    partial class LocalizationTargetInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("localizationTargetInfo");
        private static readonly JsonEncodedText propName_language_packs = JsonEncodedText.Encode("language_packs");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LocalizationTargetInfo)tlobj;
            if (obj.LanguagePacks != null)
            {
                writer.WritePropertyName(propName_language_packs);
                writer.WriteArray(obj.LanguagePacks);
            }
        }
    }

    partial class DeviceTokenFirebaseCloudMessagingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenFirebaseCloudMessaging");
        private static readonly JsonEncodedText propName_token = JsonEncodedText.Encode("token");
        private static readonly JsonEncodedText propName_encrypt = JsonEncodedText.Encode("encrypt");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenFirebaseCloudMessaging)tlobj;
            writer.WriteString(propName_token, obj.Token);
            writer.WriteBoolean(propName_encrypt, obj.Encrypt);
        }
    }

    partial class DeviceTokenApplePushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenApplePush");
        private static readonly JsonEncodedText propName_device_token = JsonEncodedText.Encode("device_token");
        private static readonly JsonEncodedText propName_is_app_sandbox = JsonEncodedText.Encode("is_app_sandbox");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenApplePush)tlobj;
            writer.WriteString(propName_device_token, obj.DeviceToken);
            writer.WriteBoolean(propName_is_app_sandbox, obj.IsAppSandbox);
        }
    }

    partial class DeviceTokenApplePushVoIPConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenApplePushVoIP");
        private static readonly JsonEncodedText propName_device_token = JsonEncodedText.Encode("device_token");
        private static readonly JsonEncodedText propName_is_app_sandbox = JsonEncodedText.Encode("is_app_sandbox");
        private static readonly JsonEncodedText propName_encrypt = JsonEncodedText.Encode("encrypt");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenApplePushVoIP)tlobj;
            writer.WriteString(propName_device_token, obj.DeviceToken);
            writer.WriteBoolean(propName_is_app_sandbox, obj.IsAppSandbox);
            writer.WriteBoolean(propName_encrypt, obj.Encrypt);
        }
    }

    partial class DeviceTokenWindowsPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenWindowsPush");
        private static readonly JsonEncodedText propName_access_token = JsonEncodedText.Encode("access_token");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenWindowsPush)tlobj;
            writer.WriteString(propName_access_token, obj.AccessToken);
        }
    }

    partial class DeviceTokenMicrosoftPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenMicrosoftPush");
        private static readonly JsonEncodedText propName_channel_uri = JsonEncodedText.Encode("channel_uri");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenMicrosoftPush)tlobj;
            writer.WriteString(propName_channel_uri, obj.ChannelUri);
        }
    }

    partial class DeviceTokenMicrosoftPushVoIPConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenMicrosoftPushVoIP");
        private static readonly JsonEncodedText propName_channel_uri = JsonEncodedText.Encode("channel_uri");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenMicrosoftPushVoIP)tlobj;
            writer.WriteString(propName_channel_uri, obj.ChannelUri);
        }
    }

    partial class DeviceTokenWebPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenWebPush");
        private static readonly JsonEncodedText propName_endpoint = JsonEncodedText.Encode("endpoint");
        private static readonly JsonEncodedText propName_p256dh_base64url = JsonEncodedText.Encode("p256dh_base64url");
        private static readonly JsonEncodedText propName_auth_base64url = JsonEncodedText.Encode("auth_base64url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenWebPush)tlobj;
            writer.WriteString(propName_endpoint, obj.Endpoint);
            writer.WriteString(propName_p256dh_base64url, obj.P256dhBase64url);
            writer.WriteString(propName_auth_base64url, obj.AuthBase64url);
        }
    }

    partial class DeviceTokenSimplePushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenSimplePush");
        private static readonly JsonEncodedText propName_endpoint = JsonEncodedText.Encode("endpoint");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenSimplePush)tlobj;
            writer.WriteString(propName_endpoint, obj.Endpoint);
        }
    }

    partial class DeviceTokenUbuntuPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenUbuntuPush");
        private static readonly JsonEncodedText propName_token = JsonEncodedText.Encode("token");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenUbuntuPush)tlobj;
            writer.WriteString(propName_token, obj.Token);
        }
    }

    partial class DeviceTokenBlackBerryPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenBlackBerryPush");
        private static readonly JsonEncodedText propName_token = JsonEncodedText.Encode("token");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenBlackBerryPush)tlobj;
            writer.WriteString(propName_token, obj.Token);
        }
    }

    partial class DeviceTokenTizenPushConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deviceTokenTizenPush");
        private static readonly JsonEncodedText propName_reg_id = JsonEncodedText.Encode("reg_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeviceTokenTizenPush)tlobj;
            writer.WriteString(propName_reg_id, obj.RegId);
        }
    }

    partial class PushReceiverIdConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushReceiverId");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushReceiverId)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
        }
    }

    partial class BackgroundFillSolidConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("backgroundFillSolid");
        private static readonly JsonEncodedText propName_color = JsonEncodedText.Encode("color");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundFillSolid)tlobj;
            writer.WriteNumber(propName_color, obj.Color);
        }
    }

    partial class BackgroundFillGradientConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("backgroundFillGradient");
        private static readonly JsonEncodedText propName_top_color = JsonEncodedText.Encode("top_color");
        private static readonly JsonEncodedText propName_bottom_color = JsonEncodedText.Encode("bottom_color");
        private static readonly JsonEncodedText propName_rotation_angle = JsonEncodedText.Encode("rotation_angle");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundFillGradient)tlobj;
            writer.WriteNumber(propName_top_color, obj.TopColor);
            writer.WriteNumber(propName_bottom_color, obj.BottomColor);
            writer.WriteNumber(propName_rotation_angle, obj.RotationAngle);
        }
    }

    partial class BackgroundTypeWallpaperConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("backgroundTypeWallpaper");
        private static readonly JsonEncodedText propName_is_blurred = JsonEncodedText.Encode("is_blurred");
        private static readonly JsonEncodedText propName_is_moving = JsonEncodedText.Encode("is_moving");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundTypeWallpaper)tlobj;
            writer.WriteBoolean(propName_is_blurred, obj.IsBlurred);
            writer.WriteBoolean(propName_is_moving, obj.IsMoving);
        }
    }

    partial class BackgroundTypePatternConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("backgroundTypePattern");
        private static readonly JsonEncodedText propName_fill = JsonEncodedText.Encode("fill");
        private static readonly JsonEncodedText propName_intensity = JsonEncodedText.Encode("intensity");
        private static readonly JsonEncodedText propName_is_moving = JsonEncodedText.Encode("is_moving");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundTypePattern)tlobj;
            if (obj.Fill != null)
            {
                writer.WritePropertyName(propName_fill);
                writer.WriteTLObjectValue(obj.Fill);
            }
            writer.WriteNumber(propName_intensity, obj.Intensity);
            writer.WriteBoolean(propName_is_moving, obj.IsMoving);
        }
    }

    partial class BackgroundTypeFillConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("backgroundTypeFill");
        private static readonly JsonEncodedText propName_fill = JsonEncodedText.Encode("fill");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BackgroundTypeFill)tlobj;
            if (obj.Fill != null)
            {
                writer.WritePropertyName(propName_fill);
                writer.WriteTLObjectValue(obj.Fill);
            }
        }
    }

    partial class BackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("background");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_is_default = JsonEncodedText.Encode("is_default");
        private static readonly JsonEncodedText propName_is_dark = JsonEncodedText.Encode("is_dark");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_document = JsonEncodedText.Encode("document");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Background)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteBoolean(propName_is_default, obj.IsDefault);
            writer.WriteBoolean(propName_is_dark, obj.IsDark);
            writer.WriteString(propName_name, obj.Name);
            if (obj.Document != null)
            {
                writer.WritePropertyName(propName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class BackgroundsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("backgrounds");
        private static readonly JsonEncodedText propName_backgrounds = JsonEncodedText.Encode("backgrounds");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Backgrounds)tlobj;
            if (obj.Backgrounds_ != null)
            {
                writer.WritePropertyName(propName_backgrounds);
                writer.WriteArray(obj.Backgrounds_);
            }
        }
    }

    partial class InputBackgroundLocalConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputBackgroundLocal");
        private static readonly JsonEncodedText propName_background = JsonEncodedText.Encode("background");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputBackgroundLocal)tlobj;
            if (obj.Background != null)
            {
                writer.WritePropertyName(propName_background);
                writer.WriteTLObjectValue(obj.Background);
            }
        }
    }

    partial class InputBackgroundRemoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputBackgroundRemote");
        private static readonly JsonEncodedText propName_background_id = JsonEncodedText.Encode("background_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputBackgroundRemote)tlobj;
            writer.WritePropertyName(propName_background_id);
            writer.WriteInt64String(obj.BackgroundId);
        }
    }

    partial class HashtagsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("hashtags");
        private static readonly JsonEncodedText propName_hashtags = JsonEncodedText.Encode("hashtags");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Hashtags)tlobj;
            if (obj.Hashtags_ != null)
            {
                writer.WritePropertyName(propName_hashtags);
                writer.WriteArray(obj.Hashtags_);
            }
        }
    }

    partial class CanTransferOwnershipResultOkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("canTransferOwnershipResultOk");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CanTransferOwnershipResultPasswordNeededConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("canTransferOwnershipResultPasswordNeeded");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CanTransferOwnershipResultPasswordTooFreshConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("canTransferOwnershipResultPasswordTooFresh");
        private static readonly JsonEncodedText propName_retry_after = JsonEncodedText.Encode("retry_after");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CanTransferOwnershipResultPasswordTooFresh)tlobj;
            writer.WriteNumber(propName_retry_after, obj.RetryAfter);
        }
    }

    partial class CanTransferOwnershipResultSessionTooFreshConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("canTransferOwnershipResultSessionTooFresh");
        private static readonly JsonEncodedText propName_retry_after = JsonEncodedText.Encode("retry_after");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CanTransferOwnershipResultSessionTooFresh)tlobj;
            writer.WriteNumber(propName_retry_after, obj.RetryAfter);
        }
    }

    partial class CheckChatUsernameResultOkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkChatUsernameResultOk");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChatUsernameResultUsernameInvalidConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkChatUsernameResultUsernameInvalid");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChatUsernameResultUsernameOccupiedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkChatUsernameResultUsernameOccupied");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChatUsernameResultPublicChatsTooMuchConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkChatUsernameResultPublicChatsTooMuch");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChatUsernameResultPublicGroupsUnavailableConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkChatUsernameResultPublicGroupsUnavailable");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentHiddenConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentHidden");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentHidden)tlobj;
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentAnimation");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
            writer.WriteString(propName_caption, obj.Caption);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentAudio");
        private static readonly JsonEncodedText propName_audio = JsonEncodedText.Encode("audio");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentAudio)tlobj;
            if (obj.Audio != null)
            {
                writer.WritePropertyName(propName_audio);
                writer.WriteTLObjectValue(obj.Audio);
            }
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentContact");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentContact)tlobj;
            writer.WriteString(propName_name, obj.Name);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentContactRegisteredConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentContactRegistered");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentDocument");
        private static readonly JsonEncodedText propName_document = JsonEncodedText.Encode("document");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentDocument)tlobj;
            if (obj.Document != null)
            {
                writer.WritePropertyName(propName_document);
                writer.WriteTLObjectValue(obj.Document);
            }
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentGameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentGame");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentGame)tlobj;
            writer.WriteString(propName_title, obj.Title);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentGameScoreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentGameScore");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_score = JsonEncodedText.Encode("score");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentGameScore)tlobj;
            writer.WriteString(propName_title, obj.Title);
            writer.WriteNumber(propName_score, obj.Score);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentInvoiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentInvoice");
        private static readonly JsonEncodedText propName_price = JsonEncodedText.Encode("price");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentInvoice)tlobj;
            writer.WriteString(propName_price, obj.Price);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentLocation");
        private static readonly JsonEncodedText propName_is_live = JsonEncodedText.Encode("is_live");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentLocation)tlobj;
            writer.WriteBoolean(propName_is_live, obj.IsLive);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentPhoto");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_is_secret = JsonEncodedText.Encode("is_secret");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentPhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
            writer.WriteString(propName_caption, obj.Caption);
            writer.WriteBoolean(propName_is_secret, obj.IsSecret);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentPollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentPoll");
        private static readonly JsonEncodedText propName_question = JsonEncodedText.Encode("question");
        private static readonly JsonEncodedText propName_is_regular = JsonEncodedText.Encode("is_regular");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentPoll)tlobj;
            writer.WriteString(propName_question, obj.Question);
            writer.WriteBoolean(propName_is_regular, obj.IsRegular);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentScreenshotTakenConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentScreenshotTaken");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentSticker");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        private static readonly JsonEncodedText propName_emoji = JsonEncodedText.Encode("emoji");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentSticker)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            writer.WriteString(propName_emoji, obj.Emoji);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentText");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentText)tlobj;
            writer.WriteString(propName_text, obj.Text);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentVideo");
        private static readonly JsonEncodedText propName_video = JsonEncodedText.Encode("video");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        private static readonly JsonEncodedText propName_is_secret = JsonEncodedText.Encode("is_secret");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentVideo)tlobj;
            if (obj.Video != null)
            {
                writer.WritePropertyName(propName_video);
                writer.WriteTLObjectValue(obj.Video);
            }
            writer.WriteString(propName_caption, obj.Caption);
            writer.WriteBoolean(propName_is_secret, obj.IsSecret);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentVideoNote");
        private static readonly JsonEncodedText propName_video_note = JsonEncodedText.Encode("video_note");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentVideoNote)tlobj;
            if (obj.VideoNote != null)
            {
                writer.WritePropertyName(propName_video_note);
                writer.WriteTLObjectValue(obj.VideoNote);
            }
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentVoiceNote");
        private static readonly JsonEncodedText propName_voice_note = JsonEncodedText.Encode("voice_note");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentVoiceNote)tlobj;
            if (obj.VoiceNote != null)
            {
                writer.WritePropertyName(propName_voice_note);
                writer.WriteTLObjectValue(obj.VoiceNote);
            }
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class PushMessageContentBasicGroupChatCreateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentBasicGroupChatCreate");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentChatAddMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentChatAddMembers");
        private static readonly JsonEncodedText propName_member_name = JsonEncodedText.Encode("member_name");
        private static readonly JsonEncodedText propName_is_current_user = JsonEncodedText.Encode("is_current_user");
        private static readonly JsonEncodedText propName_is_returned = JsonEncodedText.Encode("is_returned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentChatAddMembers)tlobj;
            writer.WriteString(propName_member_name, obj.MemberName);
            writer.WriteBoolean(propName_is_current_user, obj.IsCurrentUser);
            writer.WriteBoolean(propName_is_returned, obj.IsReturned);
        }
    }

    partial class PushMessageContentChatChangePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentChatChangePhoto");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentChatChangeTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentChatChangeTitle");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentChatChangeTitle)tlobj;
            writer.WriteString(propName_title, obj.Title);
        }
    }

    partial class PushMessageContentChatDeleteMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentChatDeleteMember");
        private static readonly JsonEncodedText propName_member_name = JsonEncodedText.Encode("member_name");
        private static readonly JsonEncodedText propName_is_current_user = JsonEncodedText.Encode("is_current_user");
        private static readonly JsonEncodedText propName_is_left = JsonEncodedText.Encode("is_left");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentChatDeleteMember)tlobj;
            writer.WriteString(propName_member_name, obj.MemberName);
            writer.WriteBoolean(propName_is_current_user, obj.IsCurrentUser);
            writer.WriteBoolean(propName_is_left, obj.IsLeft);
        }
    }

    partial class PushMessageContentChatJoinByLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentChatJoinByLink");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class PushMessageContentMessageForwardsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentMessageForwards");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentMessageForwards)tlobj;
            writer.WriteNumber(propName_total_count, obj.TotalCount);
        }
    }

    partial class PushMessageContentMediaAlbumConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pushMessageContentMediaAlbum");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_has_photos = JsonEncodedText.Encode("has_photos");
        private static readonly JsonEncodedText propName_has_videos = JsonEncodedText.Encode("has_videos");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PushMessageContentMediaAlbum)tlobj;
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            writer.WriteBoolean(propName_has_photos, obj.HasPhotos);
            writer.WriteBoolean(propName_has_videos, obj.HasVideos);
        }
    }

    partial class NotificationTypeNewMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationTypeNewMessage");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NotificationTypeNewMessage)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(propName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class NotificationTypeNewSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationTypeNewSecretChat");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationTypeNewCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationTypeNewCall");
        private static readonly JsonEncodedText propName_call_id = JsonEncodedText.Encode("call_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NotificationTypeNewCall)tlobj;
            writer.WriteNumber(propName_call_id, obj.CallId);
        }
    }

    partial class NotificationTypeNewPushMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationTypeNewPushMessage");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        private static readonly JsonEncodedText propName_sender_chat_id = JsonEncodedText.Encode("sender_chat_id");
        private static readonly JsonEncodedText propName_sender_name = JsonEncodedText.Encode("sender_name");
        private static readonly JsonEncodedText propName_is_outgoing = JsonEncodedText.Encode("is_outgoing");
        private static readonly JsonEncodedText propName_content = JsonEncodedText.Encode("content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NotificationTypeNewPushMessage)tlobj;
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
            writer.WriteNumber(propName_sender_chat_id, obj.SenderChatId);
            writer.WriteString(propName_sender_name, obj.SenderName);
            writer.WriteBoolean(propName_is_outgoing, obj.IsOutgoing);
            if (obj.Content != null)
            {
                writer.WritePropertyName(propName_content);
                writer.WriteTLObjectValue(obj.Content);
            }
        }
    }

    partial class NotificationGroupTypeMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationGroupTypeMessages");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationGroupTypeMentionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationGroupTypeMentions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationGroupTypeSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationGroupTypeSecretChat");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationGroupTypeCallsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationGroupTypeCalls");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notification");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_date = JsonEncodedText.Encode("date");
        private static readonly JsonEncodedText propName_is_silent = JsonEncodedText.Encode("is_silent");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Notification)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteNumber(propName_date, obj.Date);
            writer.WriteBoolean(propName_is_silent, obj.IsSilent);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class NotificationGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("notificationGroup");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_notifications = JsonEncodedText.Encode("notifications");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NotificationGroup)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            if (obj.Notifications != null)
            {
                writer.WritePropertyName(propName_notifications);
                writer.WriteArray(obj.Notifications);
            }
        }
    }

    partial class OptionValueBooleanConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("optionValueBoolean");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OptionValueBoolean)tlobj;
            writer.WriteBoolean(propName_value, obj.Value);
        }
    }

    partial class OptionValueEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("optionValueEmpty");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class OptionValueIntegerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("optionValueInteger");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OptionValueInteger)tlobj;
            writer.WritePropertyName(propName_value);
            writer.WriteInt64String(obj.Value);
        }
    }

    partial class OptionValueStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("optionValueString");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OptionValueString)tlobj;
            writer.WriteString(propName_value, obj.Value);
        }
    }

    partial class JsonObjectMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("jsonObjectMember");
        private static readonly JsonEncodedText propName_key = JsonEncodedText.Encode("key");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonObjectMember)tlobj;
            writer.WriteString(propName_key, obj.Key);
            if (obj.Value != null)
            {
                writer.WritePropertyName(propName_value);
                writer.WriteTLObjectValue(obj.Value);
            }
        }
    }

    partial class JsonValueNullConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("jsonValueNull");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class JsonValueBooleanConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("jsonValueBoolean");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonValueBoolean)tlobj;
            writer.WriteBoolean(propName_value, obj.Value);
        }
    }

    partial class JsonValueNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("jsonValueNumber");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonValueNumber)tlobj;
            writer.WriteNumber(propName_value, obj.Value);
        }
    }

    partial class JsonValueStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("jsonValueString");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonValueString)tlobj;
            writer.WriteString(propName_value, obj.Value);
        }
    }

    partial class JsonValueArrayConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("jsonValueArray");
        private static readonly JsonEncodedText propName_values = JsonEncodedText.Encode("values");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonValueArray)tlobj;
            if (obj.Values != null)
            {
                writer.WritePropertyName(propName_values);
                writer.WriteArray(obj.Values);
            }
        }
    }

    partial class JsonValueObjectConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("jsonValueObject");
        private static readonly JsonEncodedText propName_members = JsonEncodedText.Encode("members");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JsonValueObject)tlobj;
            if (obj.Members != null)
            {
                writer.WritePropertyName(propName_members);
                writer.WriteArray(obj.Members);
            }
        }
    }

    partial class UserPrivacySettingRuleAllowAllConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleAllowAll");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingRuleAllowContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleAllowContacts");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingRuleAllowUsersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleAllowUsers");
        private static readonly JsonEncodedText propName_user_ids = JsonEncodedText.Encode("user_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserPrivacySettingRuleAllowUsers)tlobj;
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(propName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class UserPrivacySettingRuleAllowChatMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleAllowChatMembers");
        private static readonly JsonEncodedText propName_chat_ids = JsonEncodedText.Encode("chat_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserPrivacySettingRuleAllowChatMembers)tlobj;
            if (obj.ChatIds != null)
            {
                writer.WritePropertyName(propName_chat_ids);
                writer.WriteArray(obj.ChatIds);
            }
        }
    }

    partial class UserPrivacySettingRuleRestrictAllConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleRestrictAll");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingRuleRestrictContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleRestrictContacts");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingRuleRestrictUsersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleRestrictUsers");
        private static readonly JsonEncodedText propName_user_ids = JsonEncodedText.Encode("user_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserPrivacySettingRuleRestrictUsers)tlobj;
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(propName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class UserPrivacySettingRuleRestrictChatMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleRestrictChatMembers");
        private static readonly JsonEncodedText propName_chat_ids = JsonEncodedText.Encode("chat_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserPrivacySettingRuleRestrictChatMembers)tlobj;
            if (obj.ChatIds != null)
            {
                writer.WritePropertyName(propName_chat_ids);
                writer.WriteArray(obj.ChatIds);
            }
        }
    }

    partial class UserPrivacySettingRulesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingRules");
        private static readonly JsonEncodedText propName_rules = JsonEncodedText.Encode("rules");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UserPrivacySettingRules)tlobj;
            if (obj.Rules != null)
            {
                writer.WritePropertyName(propName_rules);
                writer.WriteArray(obj.Rules);
            }
        }
    }

    partial class UserPrivacySettingShowStatusConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingShowStatus");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingShowProfilePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingShowProfilePhoto");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingShowLinkInForwardedMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingShowLinkInForwardedMessages");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingShowPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingShowPhoneNumber");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingAllowChatInvitesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingAllowChatInvites");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingAllowCallsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingAllowCalls");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingAllowPeerToPeerCallsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingAllowPeerToPeerCalls");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class UserPrivacySettingAllowFindingByPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("userPrivacySettingAllowFindingByPhoneNumber");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AccountTtlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("accountTtl");
        private static readonly JsonEncodedText propName_days = JsonEncodedText.Encode("days");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AccountTtl)tlobj;
            writer.WriteNumber(propName_days, obj.Days);
        }
    }

    partial class SessionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("session");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_is_current = JsonEncodedText.Encode("is_current");
        private static readonly JsonEncodedText propName_is_password_pending = JsonEncodedText.Encode("is_password_pending");
        private static readonly JsonEncodedText propName_api_id = JsonEncodedText.Encode("api_id");
        private static readonly JsonEncodedText propName_application_name = JsonEncodedText.Encode("application_name");
        private static readonly JsonEncodedText propName_application_version = JsonEncodedText.Encode("application_version");
        private static readonly JsonEncodedText propName_is_official_application = JsonEncodedText.Encode("is_official_application");
        private static readonly JsonEncodedText propName_device_model = JsonEncodedText.Encode("device_model");
        private static readonly JsonEncodedText propName_platform = JsonEncodedText.Encode("platform");
        private static readonly JsonEncodedText propName_system_version = JsonEncodedText.Encode("system_version");
        private static readonly JsonEncodedText propName_log_in_date = JsonEncodedText.Encode("log_in_date");
        private static readonly JsonEncodedText propName_last_active_date = JsonEncodedText.Encode("last_active_date");
        private static readonly JsonEncodedText propName_ip = JsonEncodedText.Encode("ip");
        private static readonly JsonEncodedText propName_country = JsonEncodedText.Encode("country");
        private static readonly JsonEncodedText propName_region = JsonEncodedText.Encode("region");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Session)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteBoolean(propName_is_current, obj.IsCurrent);
            writer.WriteBoolean(propName_is_password_pending, obj.IsPasswordPending);
            writer.WriteNumber(propName_api_id, obj.ApiId);
            writer.WriteString(propName_application_name, obj.ApplicationName);
            writer.WriteString(propName_application_version, obj.ApplicationVersion);
            writer.WriteBoolean(propName_is_official_application, obj.IsOfficialApplication);
            writer.WriteString(propName_device_model, obj.DeviceModel);
            writer.WriteString(propName_platform, obj.Platform);
            writer.WriteString(propName_system_version, obj.SystemVersion);
            writer.WriteNumber(propName_log_in_date, obj.LogInDate);
            writer.WriteNumber(propName_last_active_date, obj.LastActiveDate);
            writer.WriteString(propName_ip, obj.Ip);
            writer.WriteString(propName_country, obj.Country);
            writer.WriteString(propName_region, obj.Region);
        }
    }

    partial class SessionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sessions");
        private static readonly JsonEncodedText propName_sessions = JsonEncodedText.Encode("sessions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Sessions)tlobj;
            if (obj.Sessions_ != null)
            {
                writer.WritePropertyName(propName_sessions);
                writer.WriteArray(obj.Sessions_);
            }
        }
    }

    partial class ConnectedWebsiteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("connectedWebsite");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_domain_name = JsonEncodedText.Encode("domain_name");
        private static readonly JsonEncodedText propName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
        private static readonly JsonEncodedText propName_browser = JsonEncodedText.Encode("browser");
        private static readonly JsonEncodedText propName_platform = JsonEncodedText.Encode("platform");
        private static readonly JsonEncodedText propName_log_in_date = JsonEncodedText.Encode("log_in_date");
        private static readonly JsonEncodedText propName_last_active_date = JsonEncodedText.Encode("last_active_date");
        private static readonly JsonEncodedText propName_ip = JsonEncodedText.Encode("ip");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ConnectedWebsite)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(propName_domain_name, obj.DomainName);
            writer.WriteNumber(propName_bot_user_id, obj.BotUserId);
            writer.WriteString(propName_browser, obj.Browser);
            writer.WriteString(propName_platform, obj.Platform);
            writer.WriteNumber(propName_log_in_date, obj.LogInDate);
            writer.WriteNumber(propName_last_active_date, obj.LastActiveDate);
            writer.WriteString(propName_ip, obj.Ip);
            writer.WriteString(propName_location, obj.Location);
        }
    }

    partial class ConnectedWebsitesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("connectedWebsites");
        private static readonly JsonEncodedText propName_websites = JsonEncodedText.Encode("websites");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ConnectedWebsites)tlobj;
            if (obj.Websites != null)
            {
                writer.WritePropertyName(propName_websites);
                writer.WriteArray(obj.Websites);
            }
        }
    }

    partial class ChatReportReasonSpamConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatReportReasonSpam");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonViolenceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatReportReasonViolence");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonPornographyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatReportReasonPornography");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonChildAbuseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatReportReasonChildAbuse");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonCopyrightConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatReportReasonCopyright");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonUnrelatedLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatReportReasonUnrelatedLocation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChatReportReasonCustomConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatReportReasonCustom");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatReportReasonCustom)tlobj;
            writer.WriteString(propName_text, obj.Text);
        }
    }

    partial class MessageLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageLink");
        private static readonly JsonEncodedText propName_link = JsonEncodedText.Encode("link");
        private static readonly JsonEncodedText propName_is_public = JsonEncodedText.Encode("is_public");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageLink)tlobj;
            writer.WriteString(propName_link, obj.Link);
            writer.WriteBoolean(propName_is_public, obj.IsPublic);
        }
    }

    partial class MessageLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageLinkInfo");
        private static readonly JsonEncodedText propName_is_public = JsonEncodedText.Encode("is_public");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        private static readonly JsonEncodedText propName_for_album = JsonEncodedText.Encode("for_album");
        private static readonly JsonEncodedText propName_for_comment = JsonEncodedText.Encode("for_comment");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageLinkInfo)tlobj;
            writer.WriteBoolean(propName_is_public, obj.IsPublic);
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.Message != null)
            {
                writer.WritePropertyName(propName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
            writer.WriteBoolean(propName_for_album, obj.ForAlbum);
            writer.WriteBoolean(propName_for_comment, obj.ForComment);
        }
    }

    partial class FilePartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("filePart");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (FilePart)tlobj;
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
        }
    }

    partial class FileTypeNoneConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeNone");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeAnimation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeAudioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeAudio");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeDocumentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeDocument");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypePhoto");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeProfilePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeProfilePhoto");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeSecretConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeSecret");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeSecretThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeSecretThumbnail");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeSecureConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeSecure");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeSticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeThumbnail");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeUnknownConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeUnknown");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeVideoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeVideo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeVideoNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeVideoNote");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeVoiceNoteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeVoiceNote");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class FileTypeWallpaperConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("fileTypeWallpaper");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class StorageStatisticsByFileTypeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("storageStatisticsByFileType");
        private static readonly JsonEncodedText propName_file_type = JsonEncodedText.Encode("file_type");
        private static readonly JsonEncodedText propName_size = JsonEncodedText.Encode("size");
        private static readonly JsonEncodedText propName_count = JsonEncodedText.Encode("count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StorageStatisticsByFileType)tlobj;
            if (obj.FileType != null)
            {
                writer.WritePropertyName(propName_file_type);
                writer.WriteTLObjectValue(obj.FileType);
            }
            writer.WriteNumber(propName_size, obj.Size);
            writer.WriteNumber(propName_count, obj.Count);
        }
    }

    partial class StorageStatisticsByChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("storageStatisticsByChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_size = JsonEncodedText.Encode("size");
        private static readonly JsonEncodedText propName_count = JsonEncodedText.Encode("count");
        private static readonly JsonEncodedText propName_by_file_type = JsonEncodedText.Encode("by_file_type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StorageStatisticsByChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_size, obj.Size);
            writer.WriteNumber(propName_count, obj.Count);
            if (obj.ByFileType != null)
            {
                writer.WritePropertyName(propName_by_file_type);
                writer.WriteArray(obj.ByFileType);
            }
        }
    }

    partial class StorageStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("storageStatistics");
        private static readonly JsonEncodedText propName_size = JsonEncodedText.Encode("size");
        private static readonly JsonEncodedText propName_count = JsonEncodedText.Encode("count");
        private static readonly JsonEncodedText propName_by_chat = JsonEncodedText.Encode("by_chat");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StorageStatistics)tlobj;
            writer.WriteNumber(propName_size, obj.Size);
            writer.WriteNumber(propName_count, obj.Count);
            if (obj.ByChat != null)
            {
                writer.WritePropertyName(propName_by_chat);
                writer.WriteArray(obj.ByChat);
            }
        }
    }

    partial class StorageStatisticsFastConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("storageStatisticsFast");
        private static readonly JsonEncodedText propName_files_size = JsonEncodedText.Encode("files_size");
        private static readonly JsonEncodedText propName_file_count = JsonEncodedText.Encode("file_count");
        private static readonly JsonEncodedText propName_database_size = JsonEncodedText.Encode("database_size");
        private static readonly JsonEncodedText propName_language_pack_database_size = JsonEncodedText.Encode("language_pack_database_size");
        private static readonly JsonEncodedText propName_log_size = JsonEncodedText.Encode("log_size");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StorageStatisticsFast)tlobj;
            writer.WriteNumber(propName_files_size, obj.FilesSize);
            writer.WriteNumber(propName_file_count, obj.FileCount);
            writer.WriteNumber(propName_database_size, obj.DatabaseSize);
            writer.WriteNumber(propName_language_pack_database_size, obj.LanguagePackDatabaseSize);
            writer.WriteNumber(propName_log_size, obj.LogSize);
        }
    }

    partial class DatabaseStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("databaseStatistics");
        private static readonly JsonEncodedText propName_statistics = JsonEncodedText.Encode("statistics");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DatabaseStatistics)tlobj;
            writer.WriteString(propName_statistics, obj.Statistics);
        }
    }

    partial class NetworkTypeNoneConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("networkTypeNone");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NetworkTypeMobileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("networkTypeMobile");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NetworkTypeMobileRoamingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("networkTypeMobileRoaming");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NetworkTypeWiFiConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("networkTypeWiFi");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NetworkTypeOtherConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("networkTypeOther");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class NetworkStatisticsEntryFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("networkStatisticsEntryFile");
        private static readonly JsonEncodedText propName_file_type = JsonEncodedText.Encode("file_type");
        private static readonly JsonEncodedText propName_network_type = JsonEncodedText.Encode("network_type");
        private static readonly JsonEncodedText propName_sent_bytes = JsonEncodedText.Encode("sent_bytes");
        private static readonly JsonEncodedText propName_received_bytes = JsonEncodedText.Encode("received_bytes");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NetworkStatisticsEntryFile)tlobj;
            if (obj.FileType != null)
            {
                writer.WritePropertyName(propName_file_type);
                writer.WriteTLObjectValue(obj.FileType);
            }
            if (obj.NetworkType != null)
            {
                writer.WritePropertyName(propName_network_type);
                writer.WriteTLObjectValue(obj.NetworkType);
            }
            writer.WriteNumber(propName_sent_bytes, obj.SentBytes);
            writer.WriteNumber(propName_received_bytes, obj.ReceivedBytes);
        }
    }

    partial class NetworkStatisticsEntryCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("networkStatisticsEntryCall");
        private static readonly JsonEncodedText propName_network_type = JsonEncodedText.Encode("network_type");
        private static readonly JsonEncodedText propName_sent_bytes = JsonEncodedText.Encode("sent_bytes");
        private static readonly JsonEncodedText propName_received_bytes = JsonEncodedText.Encode("received_bytes");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NetworkStatisticsEntryCall)tlobj;
            if (obj.NetworkType != null)
            {
                writer.WritePropertyName(propName_network_type);
                writer.WriteTLObjectValue(obj.NetworkType);
            }
            writer.WriteNumber(propName_sent_bytes, obj.SentBytes);
            writer.WriteNumber(propName_received_bytes, obj.ReceivedBytes);
            writer.WriteNumber(propName_duration, obj.Duration);
        }
    }

    partial class NetworkStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("networkStatistics");
        private static readonly JsonEncodedText propName_since_date = JsonEncodedText.Encode("since_date");
        private static readonly JsonEncodedText propName_entries = JsonEncodedText.Encode("entries");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (NetworkStatistics)tlobj;
            writer.WriteNumber(propName_since_date, obj.SinceDate);
            if (obj.Entries != null)
            {
                writer.WritePropertyName(propName_entries);
                writer.WriteArray(obj.Entries);
            }
        }
    }

    partial class AutoDownloadSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("autoDownloadSettings");
        private static readonly JsonEncodedText propName_is_auto_download_enabled = JsonEncodedText.Encode("is_auto_download_enabled");
        private static readonly JsonEncodedText propName_max_photo_file_size = JsonEncodedText.Encode("max_photo_file_size");
        private static readonly JsonEncodedText propName_max_video_file_size = JsonEncodedText.Encode("max_video_file_size");
        private static readonly JsonEncodedText propName_max_other_file_size = JsonEncodedText.Encode("max_other_file_size");
        private static readonly JsonEncodedText propName_video_upload_bitrate = JsonEncodedText.Encode("video_upload_bitrate");
        private static readonly JsonEncodedText propName_preload_large_videos = JsonEncodedText.Encode("preload_large_videos");
        private static readonly JsonEncodedText propName_preload_next_audio = JsonEncodedText.Encode("preload_next_audio");
        private static readonly JsonEncodedText propName_use_less_data_for_calls = JsonEncodedText.Encode("use_less_data_for_calls");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AutoDownloadSettings)tlobj;
            writer.WriteBoolean(propName_is_auto_download_enabled, obj.IsAutoDownloadEnabled);
            writer.WriteNumber(propName_max_photo_file_size, obj.MaxPhotoFileSize);
            writer.WriteNumber(propName_max_video_file_size, obj.MaxVideoFileSize);
            writer.WriteNumber(propName_max_other_file_size, obj.MaxOtherFileSize);
            writer.WriteNumber(propName_video_upload_bitrate, obj.VideoUploadBitrate);
            writer.WriteBoolean(propName_preload_large_videos, obj.PreloadLargeVideos);
            writer.WriteBoolean(propName_preload_next_audio, obj.PreloadNextAudio);
            writer.WriteBoolean(propName_use_less_data_for_calls, obj.UseLessDataForCalls);
        }
    }

    partial class AutoDownloadSettingsPresetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("autoDownloadSettingsPresets");
        private static readonly JsonEncodedText propName_low = JsonEncodedText.Encode("low");
        private static readonly JsonEncodedText propName_medium = JsonEncodedText.Encode("medium");
        private static readonly JsonEncodedText propName_high = JsonEncodedText.Encode("high");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AutoDownloadSettingsPresets)tlobj;
            if (obj.Low != null)
            {
                writer.WritePropertyName(propName_low);
                writer.WriteTLObjectValue(obj.Low);
            }
            if (obj.Medium != null)
            {
                writer.WritePropertyName(propName_medium);
                writer.WriteTLObjectValue(obj.Medium);
            }
            if (obj.High != null)
            {
                writer.WritePropertyName(propName_high);
                writer.WriteTLObjectValue(obj.High);
            }
        }
    }

    partial class ConnectionStateWaitingForNetworkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("connectionStateWaitingForNetwork");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ConnectionStateConnectingToProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("connectionStateConnectingToProxy");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ConnectionStateConnectingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("connectionStateConnecting");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ConnectionStateUpdatingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("connectionStateUpdating");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ConnectionStateReadyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("connectionStateReady");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryUsersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("topChatCategoryUsers");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryBotsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("topChatCategoryBots");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryGroupsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("topChatCategoryGroups");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryChannelsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("topChatCategoryChannels");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryInlineBotsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("topChatCategoryInlineBots");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryCallsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("topChatCategoryCalls");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TopChatCategoryForwardChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("topChatCategoryForwardChats");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TMeUrlTypeUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("tMeUrlTypeUser");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrlTypeUser)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class TMeUrlTypeSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("tMeUrlTypeSupergroup");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrlTypeSupergroup)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class TMeUrlTypeChatInviteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("tMeUrlTypeChatInvite");
        private static readonly JsonEncodedText propName_info = JsonEncodedText.Encode("info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrlTypeChatInvite)tlobj;
            if (obj.Info != null)
            {
                writer.WritePropertyName(propName_info);
                writer.WriteTLObjectValue(obj.Info);
            }
        }
    }

    partial class TMeUrlTypeStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("tMeUrlTypeStickerSet");
        private static readonly JsonEncodedText propName_sticker_set_id = JsonEncodedText.Encode("sticker_set_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrlTypeStickerSet)tlobj;
            writer.WritePropertyName(propName_sticker_set_id);
            writer.WriteInt64String(obj.StickerSetId);
        }
    }

    partial class TMeUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("tMeUrl");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrl)tlobj;
            writer.WriteString(propName_url, obj.Url);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class TMeUrlsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("tMeUrls");
        private static readonly JsonEncodedText propName_urls = JsonEncodedText.Encode("urls");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TMeUrls)tlobj;
            if (obj.Urls != null)
            {
                writer.WritePropertyName(propName_urls);
                writer.WriteArray(obj.Urls);
            }
        }
    }

    partial class SuggestedActionEnableArchiveAndMuteNewChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("suggestedActionEnableArchiveAndMuteNewChats");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SuggestedActionCheckPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("suggestedActionCheckPhoneNumber");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("count");
        private static readonly JsonEncodedText propName_count = JsonEncodedText.Encode("count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Count)tlobj;
            writer.WriteNumber(propName_count, obj.Count_);
        }
    }

    partial class TextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Text)tlobj;
            writer.WriteString(propName_text, obj.Text_);
        }
    }

    partial class SecondsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("seconds");
        private static readonly JsonEncodedText propName_seconds = JsonEncodedText.Encode("seconds");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Seconds)tlobj;
            writer.WriteNumber(propName_seconds, obj.Seconds_);
        }
    }

    partial class DeepLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deepLinkInfo");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_need_update_application = JsonEncodedText.Encode("need_update_application");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeepLinkInfo)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
            writer.WriteBoolean(propName_need_update_application, obj.NeedUpdateApplication);
        }
    }

    partial class TextParseModeMarkdownConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textParseModeMarkdown");
        private static readonly JsonEncodedText propName_version = JsonEncodedText.Encode("version");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TextParseModeMarkdown)tlobj;
            writer.WriteNumber(propName_version, obj.Version);
        }
    }

    partial class TextParseModeHTMLConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("textParseModeHTML");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ProxyTypeSocks5Converter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("proxyTypeSocks5");
        private static readonly JsonEncodedText propName_username = JsonEncodedText.Encode("username");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ProxyTypeSocks5)tlobj;
            writer.WriteString(propName_username, obj.Username);
            writer.WriteString(propName_password, obj.Password);
        }
    }

    partial class ProxyTypeHttpConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("proxyTypeHttp");
        private static readonly JsonEncodedText propName_username = JsonEncodedText.Encode("username");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        private static readonly JsonEncodedText propName_http_only = JsonEncodedText.Encode("http_only");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ProxyTypeHttp)tlobj;
            writer.WriteString(propName_username, obj.Username);
            writer.WriteString(propName_password, obj.Password);
            writer.WriteBoolean(propName_http_only, obj.HttpOnly);
        }
    }

    partial class ProxyTypeMtprotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("proxyTypeMtproto");
        private static readonly JsonEncodedText propName_secret = JsonEncodedText.Encode("secret");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ProxyTypeMtproto)tlobj;
            writer.WriteString(propName_secret, obj.Secret);
        }
    }

    partial class ProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("proxy");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_server = JsonEncodedText.Encode("server");
        private static readonly JsonEncodedText propName_port = JsonEncodedText.Encode("port");
        private static readonly JsonEncodedText propName_last_used_date = JsonEncodedText.Encode("last_used_date");
        private static readonly JsonEncodedText propName_is_enabled = JsonEncodedText.Encode("is_enabled");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Proxy)tlobj;
            writer.WriteNumber(propName_id, obj.Id);
            writer.WriteString(propName_server, obj.Server);
            writer.WriteNumber(propName_port, obj.Port);
            writer.WriteNumber(propName_last_used_date, obj.LastUsedDate);
            writer.WriteBoolean(propName_is_enabled, obj.IsEnabled);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class ProxiesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("proxies");
        private static readonly JsonEncodedText propName_proxies = JsonEncodedText.Encode("proxies");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Proxies)tlobj;
            if (obj.Proxies_ != null)
            {
                writer.WritePropertyName(propName_proxies);
                writer.WriteArray(obj.Proxies_);
            }
        }
    }

    partial class InputStickerStaticConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputStickerStatic");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        private static readonly JsonEncodedText propName_emojis = JsonEncodedText.Encode("emojis");
        private static readonly JsonEncodedText propName_mask_position = JsonEncodedText.Encode("mask_position");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputStickerStatic)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            writer.WriteString(propName_emojis, obj.Emojis);
            if (obj.MaskPosition != null)
            {
                writer.WritePropertyName(propName_mask_position);
                writer.WriteTLObjectValue(obj.MaskPosition);
            }
        }
    }

    partial class InputStickerAnimatedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("inputStickerAnimated");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        private static readonly JsonEncodedText propName_emojis = JsonEncodedText.Encode("emojis");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (InputStickerAnimated)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            writer.WriteString(propName_emojis, obj.Emojis);
        }
    }

    partial class DateRangeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("dateRange");
        private static readonly JsonEncodedText propName_start_date = JsonEncodedText.Encode("start_date");
        private static readonly JsonEncodedText propName_end_date = JsonEncodedText.Encode("end_date");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DateRange)tlobj;
            writer.WriteNumber(propName_start_date, obj.StartDate);
            writer.WriteNumber(propName_end_date, obj.EndDate);
        }
    }

    partial class StatisticsValueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("statisticsValue");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        private static readonly JsonEncodedText propName_previous_value = JsonEncodedText.Encode("previous_value");
        private static readonly JsonEncodedText propName_growth_rate_percentage = JsonEncodedText.Encode("growth_rate_percentage");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StatisticsValue)tlobj;
            writer.WriteNumber(propName_value, obj.Value);
            writer.WriteNumber(propName_previous_value, obj.PreviousValue);
            writer.WriteNumber(propName_growth_rate_percentage, obj.GrowthRatePercentage);
        }
    }

    partial class StatisticsGraphDataConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("statisticsGraphData");
        private static readonly JsonEncodedText propName_json_data = JsonEncodedText.Encode("json_data");
        private static readonly JsonEncodedText propName_zoom_token = JsonEncodedText.Encode("zoom_token");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StatisticsGraphData)tlobj;
            writer.WriteString(propName_json_data, obj.JsonData);
            writer.WriteString(propName_zoom_token, obj.ZoomToken);
        }
    }

    partial class StatisticsGraphAsyncConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("statisticsGraphAsync");
        private static readonly JsonEncodedText propName_token = JsonEncodedText.Encode("token");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StatisticsGraphAsync)tlobj;
            writer.WriteString(propName_token, obj.Token);
        }
    }

    partial class StatisticsGraphErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("statisticsGraphError");
        private static readonly JsonEncodedText propName_error_message = JsonEncodedText.Encode("error_message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StatisticsGraphError)tlobj;
            writer.WriteString(propName_error_message, obj.ErrorMessage);
        }
    }

    partial class ChatStatisticsMessageInteractionInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatStatisticsMessageInteractionInfo");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_view_count = JsonEncodedText.Encode("view_count");
        private static readonly JsonEncodedText propName_forward_count = JsonEncodedText.Encode("forward_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsMessageInteractionInfo)tlobj;
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteNumber(propName_view_count, obj.ViewCount);
            writer.WriteNumber(propName_forward_count, obj.ForwardCount);
        }
    }

    partial class ChatStatisticsMessageSenderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatStatisticsMessageSenderInfo");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_sent_message_count = JsonEncodedText.Encode("sent_message_count");
        private static readonly JsonEncodedText propName_average_character_count = JsonEncodedText.Encode("average_character_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsMessageSenderInfo)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteNumber(propName_sent_message_count, obj.SentMessageCount);
            writer.WriteNumber(propName_average_character_count, obj.AverageCharacterCount);
        }
    }

    partial class ChatStatisticsAdministratorActionsInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatStatisticsAdministratorActionsInfo");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_deleted_message_count = JsonEncodedText.Encode("deleted_message_count");
        private static readonly JsonEncodedText propName_banned_user_count = JsonEncodedText.Encode("banned_user_count");
        private static readonly JsonEncodedText propName_restricted_user_count = JsonEncodedText.Encode("restricted_user_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsAdministratorActionsInfo)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteNumber(propName_deleted_message_count, obj.DeletedMessageCount);
            writer.WriteNumber(propName_banned_user_count, obj.BannedUserCount);
            writer.WriteNumber(propName_restricted_user_count, obj.RestrictedUserCount);
        }
    }

    partial class ChatStatisticsInviterInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatStatisticsInviterInfo");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_added_member_count = JsonEncodedText.Encode("added_member_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsInviterInfo)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteNumber(propName_added_member_count, obj.AddedMemberCount);
        }
    }

    partial class ChatStatisticsSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatStatisticsSupergroup");
        private static readonly JsonEncodedText propName_period = JsonEncodedText.Encode("period");
        private static readonly JsonEncodedText propName_member_count = JsonEncodedText.Encode("member_count");
        private static readonly JsonEncodedText propName_message_count = JsonEncodedText.Encode("message_count");
        private static readonly JsonEncodedText propName_viewer_count = JsonEncodedText.Encode("viewer_count");
        private static readonly JsonEncodedText propName_sender_count = JsonEncodedText.Encode("sender_count");
        private static readonly JsonEncodedText propName_member_count_graph = JsonEncodedText.Encode("member_count_graph");
        private static readonly JsonEncodedText propName_join_graph = JsonEncodedText.Encode("join_graph");
        private static readonly JsonEncodedText propName_join_by_source_graph = JsonEncodedText.Encode("join_by_source_graph");
        private static readonly JsonEncodedText propName_language_graph = JsonEncodedText.Encode("language_graph");
        private static readonly JsonEncodedText propName_message_content_graph = JsonEncodedText.Encode("message_content_graph");
        private static readonly JsonEncodedText propName_action_graph = JsonEncodedText.Encode("action_graph");
        private static readonly JsonEncodedText propName_day_graph = JsonEncodedText.Encode("day_graph");
        private static readonly JsonEncodedText propName_week_graph = JsonEncodedText.Encode("week_graph");
        private static readonly JsonEncodedText propName_top_senders = JsonEncodedText.Encode("top_senders");
        private static readonly JsonEncodedText propName_top_administrators = JsonEncodedText.Encode("top_administrators");
        private static readonly JsonEncodedText propName_top_inviters = JsonEncodedText.Encode("top_inviters");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsSupergroup)tlobj;
            if (obj.Period != null)
            {
                writer.WritePropertyName(propName_period);
                writer.WriteTLObjectValue(obj.Period);
            }
            if (obj.MemberCount != null)
            {
                writer.WritePropertyName(propName_member_count);
                writer.WriteTLObjectValue(obj.MemberCount);
            }
            if (obj.MessageCount != null)
            {
                writer.WritePropertyName(propName_message_count);
                writer.WriteTLObjectValue(obj.MessageCount);
            }
            if (obj.ViewerCount != null)
            {
                writer.WritePropertyName(propName_viewer_count);
                writer.WriteTLObjectValue(obj.ViewerCount);
            }
            if (obj.SenderCount != null)
            {
                writer.WritePropertyName(propName_sender_count);
                writer.WriteTLObjectValue(obj.SenderCount);
            }
            if (obj.MemberCountGraph != null)
            {
                writer.WritePropertyName(propName_member_count_graph);
                writer.WriteTLObjectValue(obj.MemberCountGraph);
            }
            if (obj.JoinGraph != null)
            {
                writer.WritePropertyName(propName_join_graph);
                writer.WriteTLObjectValue(obj.JoinGraph);
            }
            if (obj.JoinBySourceGraph != null)
            {
                writer.WritePropertyName(propName_join_by_source_graph);
                writer.WriteTLObjectValue(obj.JoinBySourceGraph);
            }
            if (obj.LanguageGraph != null)
            {
                writer.WritePropertyName(propName_language_graph);
                writer.WriteTLObjectValue(obj.LanguageGraph);
            }
            if (obj.MessageContentGraph != null)
            {
                writer.WritePropertyName(propName_message_content_graph);
                writer.WriteTLObjectValue(obj.MessageContentGraph);
            }
            if (obj.ActionGraph != null)
            {
                writer.WritePropertyName(propName_action_graph);
                writer.WriteTLObjectValue(obj.ActionGraph);
            }
            if (obj.DayGraph != null)
            {
                writer.WritePropertyName(propName_day_graph);
                writer.WriteTLObjectValue(obj.DayGraph);
            }
            if (obj.WeekGraph != null)
            {
                writer.WritePropertyName(propName_week_graph);
                writer.WriteTLObjectValue(obj.WeekGraph);
            }
            if (obj.TopSenders != null)
            {
                writer.WritePropertyName(propName_top_senders);
                writer.WriteArray(obj.TopSenders);
            }
            if (obj.TopAdministrators != null)
            {
                writer.WritePropertyName(propName_top_administrators);
                writer.WriteArray(obj.TopAdministrators);
            }
            if (obj.TopInviters != null)
            {
                writer.WritePropertyName(propName_top_inviters);
                writer.WriteArray(obj.TopInviters);
            }
        }
    }

    partial class ChatStatisticsChannelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("chatStatisticsChannel");
        private static readonly JsonEncodedText propName_period = JsonEncodedText.Encode("period");
        private static readonly JsonEncodedText propName_member_count = JsonEncodedText.Encode("member_count");
        private static readonly JsonEncodedText propName_mean_view_count = JsonEncodedText.Encode("mean_view_count");
        private static readonly JsonEncodedText propName_mean_share_count = JsonEncodedText.Encode("mean_share_count");
        private static readonly JsonEncodedText propName_enabled_notifications_percentage = JsonEncodedText.Encode("enabled_notifications_percentage");
        private static readonly JsonEncodedText propName_member_count_graph = JsonEncodedText.Encode("member_count_graph");
        private static readonly JsonEncodedText propName_join_graph = JsonEncodedText.Encode("join_graph");
        private static readonly JsonEncodedText propName_mute_graph = JsonEncodedText.Encode("mute_graph");
        private static readonly JsonEncodedText propName_view_count_by_hour_graph = JsonEncodedText.Encode("view_count_by_hour_graph");
        private static readonly JsonEncodedText propName_view_count_by_source_graph = JsonEncodedText.Encode("view_count_by_source_graph");
        private static readonly JsonEncodedText propName_join_by_source_graph = JsonEncodedText.Encode("join_by_source_graph");
        private static readonly JsonEncodedText propName_language_graph = JsonEncodedText.Encode("language_graph");
        private static readonly JsonEncodedText propName_message_interaction_graph = JsonEncodedText.Encode("message_interaction_graph");
        private static readonly JsonEncodedText propName_instant_view_interaction_graph = JsonEncodedText.Encode("instant_view_interaction_graph");
        private static readonly JsonEncodedText propName_recent_message_interactions = JsonEncodedText.Encode("recent_message_interactions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChatStatisticsChannel)tlobj;
            if (obj.Period != null)
            {
                writer.WritePropertyName(propName_period);
                writer.WriteTLObjectValue(obj.Period);
            }
            if (obj.MemberCount != null)
            {
                writer.WritePropertyName(propName_member_count);
                writer.WriteTLObjectValue(obj.MemberCount);
            }
            if (obj.MeanViewCount != null)
            {
                writer.WritePropertyName(propName_mean_view_count);
                writer.WriteTLObjectValue(obj.MeanViewCount);
            }
            if (obj.MeanShareCount != null)
            {
                writer.WritePropertyName(propName_mean_share_count);
                writer.WriteTLObjectValue(obj.MeanShareCount);
            }
            writer.WriteNumber(propName_enabled_notifications_percentage, obj.EnabledNotificationsPercentage);
            if (obj.MemberCountGraph != null)
            {
                writer.WritePropertyName(propName_member_count_graph);
                writer.WriteTLObjectValue(obj.MemberCountGraph);
            }
            if (obj.JoinGraph != null)
            {
                writer.WritePropertyName(propName_join_graph);
                writer.WriteTLObjectValue(obj.JoinGraph);
            }
            if (obj.MuteGraph != null)
            {
                writer.WritePropertyName(propName_mute_graph);
                writer.WriteTLObjectValue(obj.MuteGraph);
            }
            if (obj.ViewCountByHourGraph != null)
            {
                writer.WritePropertyName(propName_view_count_by_hour_graph);
                writer.WriteTLObjectValue(obj.ViewCountByHourGraph);
            }
            if (obj.ViewCountBySourceGraph != null)
            {
                writer.WritePropertyName(propName_view_count_by_source_graph);
                writer.WriteTLObjectValue(obj.ViewCountBySourceGraph);
            }
            if (obj.JoinBySourceGraph != null)
            {
                writer.WritePropertyName(propName_join_by_source_graph);
                writer.WriteTLObjectValue(obj.JoinBySourceGraph);
            }
            if (obj.LanguageGraph != null)
            {
                writer.WritePropertyName(propName_language_graph);
                writer.WriteTLObjectValue(obj.LanguageGraph);
            }
            if (obj.MessageInteractionGraph != null)
            {
                writer.WritePropertyName(propName_message_interaction_graph);
                writer.WriteTLObjectValue(obj.MessageInteractionGraph);
            }
            if (obj.InstantViewInteractionGraph != null)
            {
                writer.WritePropertyName(propName_instant_view_interaction_graph);
                writer.WriteTLObjectValue(obj.InstantViewInteractionGraph);
            }
            if (obj.RecentMessageInteractions != null)
            {
                writer.WritePropertyName(propName_recent_message_interactions);
                writer.WriteArray(obj.RecentMessageInteractions);
            }
        }
    }

    partial class MessageStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("messageStatistics");
        private static readonly JsonEncodedText propName_message_interaction_graph = JsonEncodedText.Encode("message_interaction_graph");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (MessageStatistics)tlobj;
            if (obj.MessageInteractionGraph != null)
            {
                writer.WritePropertyName(propName_message_interaction_graph);
                writer.WriteTLObjectValue(obj.MessageInteractionGraph);
            }
        }
    }

    partial class UpdateAuthorizationStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateAuthorizationState");
        private static readonly JsonEncodedText propName_authorization_state = JsonEncodedText.Encode("authorization_state");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateAuthorizationState)tlobj;
            if (obj.AuthorizationState != null)
            {
                writer.WritePropertyName(propName_authorization_state);
                writer.WriteTLObjectValue(obj.AuthorizationState);
            }
        }
    }

    partial class UpdateNewMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewMessage");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewMessage)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(propName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
        }
    }

    partial class UpdateMessageSendAcknowledgedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateMessageSendAcknowledged");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageSendAcknowledged)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class UpdateMessageSendSucceededConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateMessageSendSucceeded");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        private static readonly JsonEncodedText propName_old_message_id = JsonEncodedText.Encode("old_message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageSendSucceeded)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(propName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
            writer.WriteNumber(propName_old_message_id, obj.OldMessageId);
        }
    }

    partial class UpdateMessageSendFailedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateMessageSendFailed");
        private static readonly JsonEncodedText propName_message = JsonEncodedText.Encode("message");
        private static readonly JsonEncodedText propName_old_message_id = JsonEncodedText.Encode("old_message_id");
        private static readonly JsonEncodedText propName_error_code = JsonEncodedText.Encode("error_code");
        private static readonly JsonEncodedText propName_error_message = JsonEncodedText.Encode("error_message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageSendFailed)tlobj;
            if (obj.Message != null)
            {
                writer.WritePropertyName(propName_message);
                writer.WriteTLObjectValue(obj.Message);
            }
            writer.WriteNumber(propName_old_message_id, obj.OldMessageId);
            writer.WriteNumber(propName_error_code, obj.ErrorCode);
            writer.WriteString(propName_error_message, obj.ErrorMessage);
        }
    }

    partial class UpdateMessageContentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateMessageContent");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_new_content = JsonEncodedText.Encode("new_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageContent)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.NewContent != null)
            {
                writer.WritePropertyName(propName_new_content);
                writer.WriteTLObjectValue(obj.NewContent);
            }
        }
    }

    partial class UpdateMessageEditedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateMessageEdited");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_edit_date = JsonEncodedText.Encode("edit_date");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageEdited)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteNumber(propName_edit_date, obj.EditDate);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class UpdateMessageInteractionInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateMessageInteractionInfo");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_interaction_info = JsonEncodedText.Encode("interaction_info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageInteractionInfo)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.InteractionInfo != null)
            {
                writer.WritePropertyName(propName_interaction_info);
                writer.WriteTLObjectValue(obj.InteractionInfo);
            }
        }
    }

    partial class UpdateMessageContentOpenedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateMessageContentOpened");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageContentOpened)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class UpdateMessageMentionReadConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateMessageMentionRead");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_unread_mention_count = JsonEncodedText.Encode("unread_mention_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageMentionRead)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteNumber(propName_unread_mention_count, obj.UnreadMentionCount);
        }
    }

    partial class UpdateMessageLiveLocationViewedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateMessageLiveLocationViewed");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateMessageLiveLocationViewed)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class UpdateNewChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewChat");
        private static readonly JsonEncodedText propName_chat = JsonEncodedText.Encode("chat");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewChat)tlobj;
            if (obj.Chat != null)
            {
                writer.WritePropertyName(propName_chat);
                writer.WriteTLObjectValue(obj.Chat);
            }
        }
    }

    partial class UpdateChatTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatTitle");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatTitle)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_title, obj.Title);
        }
    }

    partial class UpdateChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatPhoto");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatPhoto)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
        }
    }

    partial class UpdateChatPermissionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatPermissions");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_permissions = JsonEncodedText.Encode("permissions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatPermissions)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.Permissions != null)
            {
                writer.WritePropertyName(propName_permissions);
                writer.WriteTLObjectValue(obj.Permissions);
            }
        }
    }

    partial class UpdateChatLastMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatLastMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_last_message = JsonEncodedText.Encode("last_message");
        private static readonly JsonEncodedText propName_positions = JsonEncodedText.Encode("positions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatLastMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.LastMessage != null)
            {
                writer.WritePropertyName(propName_last_message);
                writer.WriteTLObjectValue(obj.LastMessage);
            }
            if (obj.Positions != null)
            {
                writer.WritePropertyName(propName_positions);
                writer.WriteArray(obj.Positions);
            }
        }
    }

    partial class UpdateChatPositionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatPosition");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_position = JsonEncodedText.Encode("position");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatPosition)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.Position != null)
            {
                writer.WritePropertyName(propName_position);
                writer.WriteTLObjectValue(obj.Position);
            }
        }
    }

    partial class UpdateChatIsMarkedAsUnreadConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatIsMarkedAsUnread");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_is_marked_as_unread = JsonEncodedText.Encode("is_marked_as_unread");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatIsMarkedAsUnread)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteBoolean(propName_is_marked_as_unread, obj.IsMarkedAsUnread);
        }
    }

    partial class UpdateChatIsBlockedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatIsBlocked");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_is_blocked = JsonEncodedText.Encode("is_blocked");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatIsBlocked)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteBoolean(propName_is_blocked, obj.IsBlocked);
        }
    }

    partial class UpdateChatHasScheduledMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatHasScheduledMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_has_scheduled_messages = JsonEncodedText.Encode("has_scheduled_messages");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatHasScheduledMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteBoolean(propName_has_scheduled_messages, obj.HasScheduledMessages);
        }
    }

    partial class UpdateChatDefaultDisableNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatDefaultDisableNotification");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_default_disable_notification = JsonEncodedText.Encode("default_disable_notification");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatDefaultDisableNotification)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteBoolean(propName_default_disable_notification, obj.DefaultDisableNotification);
        }
    }

    partial class UpdateChatReadInboxConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatReadInbox");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_last_read_inbox_message_id = JsonEncodedText.Encode("last_read_inbox_message_id");
        private static readonly JsonEncodedText propName_unread_count = JsonEncodedText.Encode("unread_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatReadInbox)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_last_read_inbox_message_id, obj.LastReadInboxMessageId);
            writer.WriteNumber(propName_unread_count, obj.UnreadCount);
        }
    }

    partial class UpdateChatReadOutboxConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatReadOutbox");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_last_read_outbox_message_id = JsonEncodedText.Encode("last_read_outbox_message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatReadOutbox)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_last_read_outbox_message_id, obj.LastReadOutboxMessageId);
        }
    }

    partial class UpdateChatUnreadMentionCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatUnreadMentionCount");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_unread_mention_count = JsonEncodedText.Encode("unread_mention_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatUnreadMentionCount)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_unread_mention_count, obj.UnreadMentionCount);
        }
    }

    partial class UpdateChatNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatNotificationSettings");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_notification_settings = JsonEncodedText.Encode("notification_settings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatNotificationSettings)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.NotificationSettings != null)
            {
                writer.WritePropertyName(propName_notification_settings);
                writer.WriteTLObjectValue(obj.NotificationSettings);
            }
        }
    }

    partial class UpdateScopeNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateScopeNotificationSettings");
        private static readonly JsonEncodedText propName_scope = JsonEncodedText.Encode("scope");
        private static readonly JsonEncodedText propName_notification_settings = JsonEncodedText.Encode("notification_settings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateScopeNotificationSettings)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(propName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
            if (obj.NotificationSettings != null)
            {
                writer.WritePropertyName(propName_notification_settings);
                writer.WriteTLObjectValue(obj.NotificationSettings);
            }
        }
    }

    partial class UpdateChatActionBarConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatActionBar");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_action_bar = JsonEncodedText.Encode("action_bar");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatActionBar)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.ActionBar != null)
            {
                writer.WritePropertyName(propName_action_bar);
                writer.WriteTLObjectValue(obj.ActionBar);
            }
        }
    }

    partial class UpdateChatPinnedMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatPinnedMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_pinned_message_id = JsonEncodedText.Encode("pinned_message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatPinnedMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_pinned_message_id, obj.PinnedMessageId);
        }
    }

    partial class UpdateChatReplyMarkupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatReplyMarkup");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_reply_markup_message_id = JsonEncodedText.Encode("reply_markup_message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatReplyMarkup)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_reply_markup_message_id, obj.ReplyMarkupMessageId);
        }
    }

    partial class UpdateChatDraftMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatDraftMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_draft_message = JsonEncodedText.Encode("draft_message");
        private static readonly JsonEncodedText propName_positions = JsonEncodedText.Encode("positions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatDraftMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.DraftMessage != null)
            {
                writer.WritePropertyName(propName_draft_message);
                writer.WriteTLObjectValue(obj.DraftMessage);
            }
            if (obj.Positions != null)
            {
                writer.WritePropertyName(propName_positions);
                writer.WriteArray(obj.Positions);
            }
        }
    }

    partial class UpdateChatFiltersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatFilters");
        private static readonly JsonEncodedText propName_chat_filters = JsonEncodedText.Encode("chat_filters");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatFilters)tlobj;
            if (obj.ChatFilters != null)
            {
                writer.WritePropertyName(propName_chat_filters);
                writer.WriteArray(obj.ChatFilters);
            }
        }
    }

    partial class UpdateChatOnlineMemberCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateChatOnlineMemberCount");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_online_member_count = JsonEncodedText.Encode("online_member_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateChatOnlineMemberCount)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_online_member_count, obj.OnlineMemberCount);
        }
    }

    partial class UpdateNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNotification");
        private static readonly JsonEncodedText propName_notification_group_id = JsonEncodedText.Encode("notification_group_id");
        private static readonly JsonEncodedText propName_notification = JsonEncodedText.Encode("notification");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNotification)tlobj;
            writer.WriteNumber(propName_notification_group_id, obj.NotificationGroupId);
            if (obj.Notification != null)
            {
                writer.WritePropertyName(propName_notification);
                writer.WriteTLObjectValue(obj.Notification);
            }
        }
    }

    partial class UpdateNotificationGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNotificationGroup");
        private static readonly JsonEncodedText propName_notification_group_id = JsonEncodedText.Encode("notification_group_id");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_notification_settings_chat_id = JsonEncodedText.Encode("notification_settings_chat_id");
        private static readonly JsonEncodedText propName_is_silent = JsonEncodedText.Encode("is_silent");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_added_notifications = JsonEncodedText.Encode("added_notifications");
        private static readonly JsonEncodedText propName_removed_notification_ids = JsonEncodedText.Encode("removed_notification_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNotificationGroup)tlobj;
            writer.WriteNumber(propName_notification_group_id, obj.NotificationGroupId);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_notification_settings_chat_id, obj.NotificationSettingsChatId);
            writer.WriteBoolean(propName_is_silent, obj.IsSilent);
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            if (obj.AddedNotifications != null)
            {
                writer.WritePropertyName(propName_added_notifications);
                writer.WriteArray(obj.AddedNotifications);
            }
            if (obj.RemovedNotificationIds != null)
            {
                writer.WritePropertyName(propName_removed_notification_ids);
                writer.WriteArray(obj.RemovedNotificationIds);
            }
        }
    }

    partial class UpdateActiveNotificationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateActiveNotifications");
        private static readonly JsonEncodedText propName_groups = JsonEncodedText.Encode("groups");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateActiveNotifications)tlobj;
            if (obj.Groups != null)
            {
                writer.WritePropertyName(propName_groups);
                writer.WriteArray(obj.Groups);
            }
        }
    }

    partial class UpdateHavePendingNotificationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateHavePendingNotifications");
        private static readonly JsonEncodedText propName_have_delayed_notifications = JsonEncodedText.Encode("have_delayed_notifications");
        private static readonly JsonEncodedText propName_have_unreceived_notifications = JsonEncodedText.Encode("have_unreceived_notifications");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateHavePendingNotifications)tlobj;
            writer.WriteBoolean(propName_have_delayed_notifications, obj.HaveDelayedNotifications);
            writer.WriteBoolean(propName_have_unreceived_notifications, obj.HaveUnreceivedNotifications);
        }
    }

    partial class UpdateDeleteMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateDeleteMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_ids = JsonEncodedText.Encode("message_ids");
        private static readonly JsonEncodedText propName_is_permanent = JsonEncodedText.Encode("is_permanent");
        private static readonly JsonEncodedText propName_from_cache = JsonEncodedText.Encode("from_cache");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateDeleteMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(propName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
            writer.WriteBoolean(propName_is_permanent, obj.IsPermanent);
            writer.WriteBoolean(propName_from_cache, obj.FromCache);
        }
    }

    partial class UpdateUserChatActionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateUserChatAction");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_action = JsonEncodedText.Encode("action");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUserChatAction)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_thread_id, obj.MessageThreadId);
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.Action != null)
            {
                writer.WritePropertyName(propName_action);
                writer.WriteTLObjectValue(obj.Action);
            }
        }
    }

    partial class UpdateUserStatusConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateUserStatus");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_status = JsonEncodedText.Encode("status");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUserStatus)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.Status != null)
            {
                writer.WritePropertyName(propName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
        }
    }

    partial class UpdateUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateUser");
        private static readonly JsonEncodedText propName_user = JsonEncodedText.Encode("user");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUser)tlobj;
            if (obj.User != null)
            {
                writer.WritePropertyName(propName_user);
                writer.WriteTLObjectValue(obj.User);
            }
        }
    }

    partial class UpdateBasicGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateBasicGroup");
        private static readonly JsonEncodedText propName_basic_group = JsonEncodedText.Encode("basic_group");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateBasicGroup)tlobj;
            if (obj.BasicGroup != null)
            {
                writer.WritePropertyName(propName_basic_group);
                writer.WriteTLObjectValue(obj.BasicGroup);
            }
        }
    }

    partial class UpdateSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateSupergroup");
        private static readonly JsonEncodedText propName_supergroup = JsonEncodedText.Encode("supergroup");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSupergroup)tlobj;
            if (obj.Supergroup != null)
            {
                writer.WritePropertyName(propName_supergroup);
                writer.WriteTLObjectValue(obj.Supergroup);
            }
        }
    }

    partial class UpdateSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateSecretChat");
        private static readonly JsonEncodedText propName_secret_chat = JsonEncodedText.Encode("secret_chat");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSecretChat)tlobj;
            if (obj.SecretChat != null)
            {
                writer.WritePropertyName(propName_secret_chat);
                writer.WriteTLObjectValue(obj.SecretChat);
            }
        }
    }

    partial class UpdateUserFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateUserFullInfo");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_user_full_info = JsonEncodedText.Encode("user_full_info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUserFullInfo)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.UserFullInfo != null)
            {
                writer.WritePropertyName(propName_user_full_info);
                writer.WriteTLObjectValue(obj.UserFullInfo);
            }
        }
    }

    partial class UpdateBasicGroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateBasicGroupFullInfo");
        private static readonly JsonEncodedText propName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
        private static readonly JsonEncodedText propName_basic_group_full_info = JsonEncodedText.Encode("basic_group_full_info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateBasicGroupFullInfo)tlobj;
            writer.WriteNumber(propName_basic_group_id, obj.BasicGroupId);
            if (obj.BasicGroupFullInfo != null)
            {
                writer.WritePropertyName(propName_basic_group_full_info);
                writer.WriteTLObjectValue(obj.BasicGroupFullInfo);
            }
        }
    }

    partial class UpdateSupergroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateSupergroupFullInfo");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        private static readonly JsonEncodedText propName_supergroup_full_info = JsonEncodedText.Encode("supergroup_full_info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSupergroupFullInfo)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
            if (obj.SupergroupFullInfo != null)
            {
                writer.WritePropertyName(propName_supergroup_full_info);
                writer.WriteTLObjectValue(obj.SupergroupFullInfo);
            }
        }
    }

    partial class UpdateServiceNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateServiceNotification");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_content = JsonEncodedText.Encode("content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateServiceNotification)tlobj;
            writer.WriteString(propName_type, obj.Type);
            if (obj.Content != null)
            {
                writer.WritePropertyName(propName_content);
                writer.WriteTLObjectValue(obj.Content);
            }
        }
    }

    partial class UpdateFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateFile");
        private static readonly JsonEncodedText propName_file = JsonEncodedText.Encode("file");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateFile)tlobj;
            if (obj.File != null)
            {
                writer.WritePropertyName(propName_file);
                writer.WriteTLObjectValue(obj.File);
            }
        }
    }

    partial class UpdateFileGenerationStartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateFileGenerationStart");
        private static readonly JsonEncodedText propName_generation_id = JsonEncodedText.Encode("generation_id");
        private static readonly JsonEncodedText propName_original_path = JsonEncodedText.Encode("original_path");
        private static readonly JsonEncodedText propName_destination_path = JsonEncodedText.Encode("destination_path");
        private static readonly JsonEncodedText propName_conversion = JsonEncodedText.Encode("conversion");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateFileGenerationStart)tlobj;
            writer.WritePropertyName(propName_generation_id);
            writer.WriteInt64String(obj.GenerationId);
            writer.WriteString(propName_original_path, obj.OriginalPath);
            writer.WriteString(propName_destination_path, obj.DestinationPath);
            writer.WriteString(propName_conversion, obj.Conversion);
        }
    }

    partial class UpdateFileGenerationStopConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateFileGenerationStop");
        private static readonly JsonEncodedText propName_generation_id = JsonEncodedText.Encode("generation_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateFileGenerationStop)tlobj;
            writer.WritePropertyName(propName_generation_id);
            writer.WriteInt64String(obj.GenerationId);
        }
    }

    partial class UpdateCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateCall");
        private static readonly JsonEncodedText propName_call = JsonEncodedText.Encode("call");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateCall)tlobj;
            if (obj.Call != null)
            {
                writer.WritePropertyName(propName_call);
                writer.WriteTLObjectValue(obj.Call);
            }
        }
    }

    partial class UpdateNewCallSignalingDataConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewCallSignalingData");
        private static readonly JsonEncodedText propName_call_id = JsonEncodedText.Encode("call_id");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewCallSignalingData)tlobj;
            writer.WriteNumber(propName_call_id, obj.CallId);
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
        }
    }

    partial class UpdateUserPrivacySettingRulesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateUserPrivacySettingRules");
        private static readonly JsonEncodedText propName_setting = JsonEncodedText.Encode("setting");
        private static readonly JsonEncodedText propName_rules = JsonEncodedText.Encode("rules");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUserPrivacySettingRules)tlobj;
            if (obj.Setting != null)
            {
                writer.WritePropertyName(propName_setting);
                writer.WriteTLObjectValue(obj.Setting);
            }
            if (obj.Rules != null)
            {
                writer.WritePropertyName(propName_rules);
                writer.WriteTLObjectValue(obj.Rules);
            }
        }
    }

    partial class UpdateUnreadMessageCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateUnreadMessageCount");
        private static readonly JsonEncodedText propName_chat_list = JsonEncodedText.Encode("chat_list");
        private static readonly JsonEncodedText propName_unread_count = JsonEncodedText.Encode("unread_count");
        private static readonly JsonEncodedText propName_unread_unmuted_count = JsonEncodedText.Encode("unread_unmuted_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUnreadMessageCount)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(propName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WriteNumber(propName_unread_count, obj.UnreadCount);
            writer.WriteNumber(propName_unread_unmuted_count, obj.UnreadUnmutedCount);
        }
    }

    partial class UpdateUnreadChatCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateUnreadChatCount");
        private static readonly JsonEncodedText propName_chat_list = JsonEncodedText.Encode("chat_list");
        private static readonly JsonEncodedText propName_total_count = JsonEncodedText.Encode("total_count");
        private static readonly JsonEncodedText propName_unread_count = JsonEncodedText.Encode("unread_count");
        private static readonly JsonEncodedText propName_unread_unmuted_count = JsonEncodedText.Encode("unread_unmuted_count");
        private static readonly JsonEncodedText propName_marked_as_unread_count = JsonEncodedText.Encode("marked_as_unread_count");
        private static readonly JsonEncodedText propName_marked_as_unread_unmuted_count = JsonEncodedText.Encode("marked_as_unread_unmuted_count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUnreadChatCount)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(propName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WriteNumber(propName_total_count, obj.TotalCount);
            writer.WriteNumber(propName_unread_count, obj.UnreadCount);
            writer.WriteNumber(propName_unread_unmuted_count, obj.UnreadUnmutedCount);
            writer.WriteNumber(propName_marked_as_unread_count, obj.MarkedAsUnreadCount);
            writer.WriteNumber(propName_marked_as_unread_unmuted_count, obj.MarkedAsUnreadUnmutedCount);
        }
    }

    partial class UpdateOptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateOption");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateOption)tlobj;
            writer.WriteString(propName_name, obj.Name);
            if (obj.Value != null)
            {
                writer.WritePropertyName(propName_value);
                writer.WriteTLObjectValue(obj.Value);
            }
        }
    }

    partial class UpdateStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateStickerSet");
        private static readonly JsonEncodedText propName_sticker_set = JsonEncodedText.Encode("sticker_set");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateStickerSet)tlobj;
            if (obj.StickerSet != null)
            {
                writer.WritePropertyName(propName_sticker_set);
                writer.WriteTLObjectValue(obj.StickerSet);
            }
        }
    }

    partial class UpdateInstalledStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateInstalledStickerSets");
        private static readonly JsonEncodedText propName_is_masks = JsonEncodedText.Encode("is_masks");
        private static readonly JsonEncodedText propName_sticker_set_ids = JsonEncodedText.Encode("sticker_set_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateInstalledStickerSets)tlobj;
            writer.WriteBoolean(propName_is_masks, obj.IsMasks);
            if (obj.StickerSetIds != null)
            {
                writer.WritePropertyName(propName_sticker_set_ids);
                writer.WriteInt64Array(obj.StickerSetIds);
            }
        }
    }

    partial class UpdateTrendingStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateTrendingStickerSets");
        private static readonly JsonEncodedText propName_sticker_sets = JsonEncodedText.Encode("sticker_sets");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateTrendingStickerSets)tlobj;
            if (obj.StickerSets != null)
            {
                writer.WritePropertyName(propName_sticker_sets);
                writer.WriteTLObjectValue(obj.StickerSets);
            }
        }
    }

    partial class UpdateRecentStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateRecentStickers");
        private static readonly JsonEncodedText propName_is_attached = JsonEncodedText.Encode("is_attached");
        private static readonly JsonEncodedText propName_sticker_ids = JsonEncodedText.Encode("sticker_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateRecentStickers)tlobj;
            writer.WriteBoolean(propName_is_attached, obj.IsAttached);
            if (obj.StickerIds != null)
            {
                writer.WritePropertyName(propName_sticker_ids);
                writer.WriteArray(obj.StickerIds);
            }
        }
    }

    partial class UpdateFavoriteStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateFavoriteStickers");
        private static readonly JsonEncodedText propName_sticker_ids = JsonEncodedText.Encode("sticker_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateFavoriteStickers)tlobj;
            if (obj.StickerIds != null)
            {
                writer.WritePropertyName(propName_sticker_ids);
                writer.WriteArray(obj.StickerIds);
            }
        }
    }

    partial class UpdateSavedAnimationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateSavedAnimations");
        private static readonly JsonEncodedText propName_animation_ids = JsonEncodedText.Encode("animation_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSavedAnimations)tlobj;
            if (obj.AnimationIds != null)
            {
                writer.WritePropertyName(propName_animation_ids);
                writer.WriteArray(obj.AnimationIds);
            }
        }
    }

    partial class UpdateSelectedBackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateSelectedBackground");
        private static readonly JsonEncodedText propName_for_dark_theme = JsonEncodedText.Encode("for_dark_theme");
        private static readonly JsonEncodedText propName_background = JsonEncodedText.Encode("background");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSelectedBackground)tlobj;
            writer.WriteBoolean(propName_for_dark_theme, obj.ForDarkTheme);
            if (obj.Background != null)
            {
                writer.WritePropertyName(propName_background);
                writer.WriteTLObjectValue(obj.Background);
            }
        }
    }

    partial class UpdateLanguagePackStringsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateLanguagePackStrings");
        private static readonly JsonEncodedText propName_localization_target = JsonEncodedText.Encode("localization_target");
        private static readonly JsonEncodedText propName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
        private static readonly JsonEncodedText propName_strings = JsonEncodedText.Encode("strings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateLanguagePackStrings)tlobj;
            writer.WriteString(propName_localization_target, obj.LocalizationTarget);
            writer.WriteString(propName_language_pack_id, obj.LanguagePackId);
            if (obj.Strings != null)
            {
                writer.WritePropertyName(propName_strings);
                writer.WriteArray(obj.Strings);
            }
        }
    }

    partial class UpdateConnectionStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateConnectionState");
        private static readonly JsonEncodedText propName_state = JsonEncodedText.Encode("state");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateConnectionState)tlobj;
            if (obj.State != null)
            {
                writer.WritePropertyName(propName_state);
                writer.WriteTLObjectValue(obj.State);
            }
        }
    }

    partial class UpdateTermsOfServiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateTermsOfService");
        private static readonly JsonEncodedText propName_terms_of_service_id = JsonEncodedText.Encode("terms_of_service_id");
        private static readonly JsonEncodedText propName_terms_of_service = JsonEncodedText.Encode("terms_of_service");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateTermsOfService)tlobj;
            writer.WriteString(propName_terms_of_service_id, obj.TermsOfServiceId);
            if (obj.TermsOfService != null)
            {
                writer.WritePropertyName(propName_terms_of_service);
                writer.WriteTLObjectValue(obj.TermsOfService);
            }
        }
    }

    partial class UpdateUsersNearbyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateUsersNearby");
        private static readonly JsonEncodedText propName_users_nearby = JsonEncodedText.Encode("users_nearby");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateUsersNearby)tlobj;
            if (obj.UsersNearby != null)
            {
                writer.WritePropertyName(propName_users_nearby);
                writer.WriteArray(obj.UsersNearby);
            }
        }
    }

    partial class UpdateDiceEmojisConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateDiceEmojis");
        private static readonly JsonEncodedText propName_emojis = JsonEncodedText.Encode("emojis");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateDiceEmojis)tlobj;
            if (obj.Emojis != null)
            {
                writer.WritePropertyName(propName_emojis);
                writer.WriteArray(obj.Emojis);
            }
        }
    }

    partial class UpdateAnimationSearchParametersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateAnimationSearchParameters");
        private static readonly JsonEncodedText propName_provider = JsonEncodedText.Encode("provider");
        private static readonly JsonEncodedText propName_emojis = JsonEncodedText.Encode("emojis");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateAnimationSearchParameters)tlobj;
            writer.WriteString(propName_provider, obj.Provider);
            if (obj.Emojis != null)
            {
                writer.WritePropertyName(propName_emojis);
                writer.WriteArray(obj.Emojis);
            }
        }
    }

    partial class UpdateSuggestedActionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateSuggestedActions");
        private static readonly JsonEncodedText propName_added_actions = JsonEncodedText.Encode("added_actions");
        private static readonly JsonEncodedText propName_removed_actions = JsonEncodedText.Encode("removed_actions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateSuggestedActions)tlobj;
            if (obj.AddedActions != null)
            {
                writer.WritePropertyName(propName_added_actions);
                writer.WriteArray(obj.AddedActions);
            }
            if (obj.RemovedActions != null)
            {
                writer.WritePropertyName(propName_removed_actions);
                writer.WriteArray(obj.RemovedActions);
            }
        }
    }

    partial class UpdateNewInlineQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewInlineQuery");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        private static readonly JsonEncodedText propName_user_location = JsonEncodedText.Encode("user_location");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewInlineQuery)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
            if (obj.UserLocation != null)
            {
                writer.WritePropertyName(propName_user_location);
                writer.WriteTLObjectValue(obj.UserLocation);
            }
            writer.WriteString(propName_query, obj.Query);
            writer.WriteString(propName_offset, obj.Offset);
        }
    }

    partial class UpdateNewChosenInlineResultConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewChosenInlineResult");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        private static readonly JsonEncodedText propName_user_location = JsonEncodedText.Encode("user_location");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_result_id = JsonEncodedText.Encode("result_id");
        private static readonly JsonEncodedText propName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewChosenInlineResult)tlobj;
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
            if (obj.UserLocation != null)
            {
                writer.WritePropertyName(propName_user_location);
                writer.WriteTLObjectValue(obj.UserLocation);
            }
            writer.WriteString(propName_query, obj.Query);
            writer.WriteString(propName_result_id, obj.ResultId);
            writer.WriteString(propName_inline_message_id, obj.InlineMessageId);
        }
    }

    partial class UpdateNewCallbackQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewCallbackQuery");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_chat_instance = JsonEncodedText.Encode("chat_instance");
        private static readonly JsonEncodedText propName_payload = JsonEncodedText.Encode("payload");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewCallbackQuery)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WritePropertyName(propName_chat_instance);
            writer.WriteInt64String(obj.ChatInstance);
            if (obj.Payload != null)
            {
                writer.WritePropertyName(propName_payload);
                writer.WriteTLObjectValue(obj.Payload);
            }
        }
    }

    partial class UpdateNewInlineCallbackQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewInlineCallbackQuery");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        private static readonly JsonEncodedText propName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
        private static readonly JsonEncodedText propName_chat_instance = JsonEncodedText.Encode("chat_instance");
        private static readonly JsonEncodedText propName_payload = JsonEncodedText.Encode("payload");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewInlineCallbackQuery)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
            writer.WriteString(propName_inline_message_id, obj.InlineMessageId);
            writer.WritePropertyName(propName_chat_instance);
            writer.WriteInt64String(obj.ChatInstance);
            if (obj.Payload != null)
            {
                writer.WritePropertyName(propName_payload);
                writer.WriteTLObjectValue(obj.Payload);
            }
        }
    }

    partial class UpdateNewShippingQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewShippingQuery");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        private static readonly JsonEncodedText propName_invoice_payload = JsonEncodedText.Encode("invoice_payload");
        private static readonly JsonEncodedText propName_shipping_address = JsonEncodedText.Encode("shipping_address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewShippingQuery)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
            writer.WriteString(propName_invoice_payload, obj.InvoicePayload);
            if (obj.ShippingAddress != null)
            {
                writer.WritePropertyName(propName_shipping_address);
                writer.WriteTLObjectValue(obj.ShippingAddress);
            }
        }
    }

    partial class UpdateNewPreCheckoutQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewPreCheckoutQuery");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        private static readonly JsonEncodedText propName_currency = JsonEncodedText.Encode("currency");
        private static readonly JsonEncodedText propName_total_amount = JsonEncodedText.Encode("total_amount");
        private static readonly JsonEncodedText propName_invoice_payload = JsonEncodedText.Encode("invoice_payload");
        private static readonly JsonEncodedText propName_shipping_option_id = JsonEncodedText.Encode("shipping_option_id");
        private static readonly JsonEncodedText propName_order_info = JsonEncodedText.Encode("order_info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewPreCheckoutQuery)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
            writer.WriteString(propName_currency, obj.Currency);
            writer.WriteNumber(propName_total_amount, obj.TotalAmount);
            if (obj.InvoicePayload != null)
            {
                writer.WriteBase64String(propName_invoice_payload, obj.InvoicePayload);
            }
            writer.WriteString(propName_shipping_option_id, obj.ShippingOptionId);
            if (obj.OrderInfo != null)
            {
                writer.WritePropertyName(propName_order_info);
                writer.WriteTLObjectValue(obj.OrderInfo);
            }
        }
    }

    partial class UpdateNewCustomEventConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewCustomEvent");
        private static readonly JsonEncodedText propName_event = JsonEncodedText.Encode("event");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewCustomEvent)tlobj;
            writer.WriteString(propName_event, obj.Event);
        }
    }

    partial class UpdateNewCustomQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updateNewCustomQuery");
        private static readonly JsonEncodedText propName_id = JsonEncodedText.Encode("id");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        private static readonly JsonEncodedText propName_timeout = JsonEncodedText.Encode("timeout");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdateNewCustomQuery)tlobj;
            writer.WritePropertyName(propName_id);
            writer.WriteInt64String(obj.Id);
            writer.WriteString(propName_data, obj.Data);
            writer.WriteNumber(propName_timeout, obj.Timeout);
        }
    }

    partial class UpdatePollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updatePoll");
        private static readonly JsonEncodedText propName_poll = JsonEncodedText.Encode("poll");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdatePoll)tlobj;
            if (obj.Poll != null)
            {
                writer.WritePropertyName(propName_poll);
                writer.WriteTLObjectValue(obj.Poll);
            }
        }
    }

    partial class UpdatePollAnswerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updatePollAnswer");
        private static readonly JsonEncodedText propName_poll_id = JsonEncodedText.Encode("poll_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_option_ids = JsonEncodedText.Encode("option_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpdatePollAnswer)tlobj;
            writer.WritePropertyName(propName_poll_id);
            writer.WriteInt64String(obj.PollId);
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.OptionIds != null)
            {
                writer.WritePropertyName(propName_option_ids);
                writer.WriteArray(obj.OptionIds);
            }
        }
    }

    partial class UpdatesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("updates");
        private static readonly JsonEncodedText propName_updates = JsonEncodedText.Encode("updates");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (Updates)tlobj;
            if (obj.Updates_ != null)
            {
                writer.WritePropertyName(propName_updates);
                writer.WriteArray(obj.Updates_);
            }
        }
    }

    partial class LogStreamDefaultConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("logStreamDefault");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class LogStreamFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("logStreamFile");
        private static readonly JsonEncodedText propName_path = JsonEncodedText.Encode("path");
        private static readonly JsonEncodedText propName_max_file_size = JsonEncodedText.Encode("max_file_size");
        private static readonly JsonEncodedText propName_redirect_stderr = JsonEncodedText.Encode("redirect_stderr");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LogStreamFile)tlobj;
            writer.WriteString(propName_path, obj.Path);
            writer.WriteNumber(propName_max_file_size, obj.MaxFileSize);
            writer.WriteBoolean(propName_redirect_stderr, obj.RedirectStderr);
        }
    }

    partial class LogStreamEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("logStreamEmpty");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class LogVerbosityLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("logVerbosityLevel");
        private static readonly JsonEncodedText propName_verbosity_level = JsonEncodedText.Encode("verbosity_level");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LogVerbosityLevel)tlobj;
            writer.WriteNumber(propName_verbosity_level, obj.VerbosityLevel);
        }
    }

    partial class LogTagsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("logTags");
        private static readonly JsonEncodedText propName_tags = JsonEncodedText.Encode("tags");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LogTags)tlobj;
            if (obj.Tags != null)
            {
                writer.WritePropertyName(propName_tags);
                writer.WriteArray(obj.Tags);
            }
        }
    }

    partial class TestIntConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testInt");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestInt)tlobj;
            writer.WriteNumber(propName_value, obj.Value);
        }
    }

    partial class TestStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testString");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestString)tlobj;
            writer.WriteString(propName_value, obj.Value);
        }
    }

    partial class TestBytesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testBytes");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestBytes)tlobj;
            if (obj.Value != null)
            {
                writer.WriteBase64String(propName_value, obj.Value);
            }
        }
    }

    partial class TestVectorIntConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testVectorInt");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestVectorInt)tlobj;
            if (obj.Value != null)
            {
                writer.WritePropertyName(propName_value);
                writer.WriteArray(obj.Value);
            }
        }
    }

    partial class TestVectorIntObjectConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testVectorIntObject");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestVectorIntObject)tlobj;
            if (obj.Value != null)
            {
                writer.WritePropertyName(propName_value);
                writer.WriteArray(obj.Value);
            }
        }
    }

    partial class TestVectorStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testVectorString");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestVectorString)tlobj;
            if (obj.Value != null)
            {
                writer.WritePropertyName(propName_value);
                writer.WriteArray(obj.Value);
            }
        }
    }

    partial class TestVectorStringObjectConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testVectorStringObject");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestVectorStringObject)tlobj;
            if (obj.Value != null)
            {
                writer.WritePropertyName(propName_value);
                writer.WriteArray(obj.Value);
            }
        }
    }

    partial class GetAuthorizationStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getAuthorizationState");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetTdlibParametersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setTdlibParameters");
        private static readonly JsonEncodedText propName_parameters = JsonEncodedText.Encode("parameters");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetTdlibParameters)tlobj;
            if (obj.Parameters != null)
            {
                writer.WritePropertyName(propName_parameters);
                writer.WriteTLObjectValue(obj.Parameters);
            }
        }
    }

    partial class CheckDatabaseEncryptionKeyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkDatabaseEncryptionKey");
        private static readonly JsonEncodedText propName_encryption_key = JsonEncodedText.Encode("encryption_key");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckDatabaseEncryptionKey)tlobj;
            if (obj.EncryptionKey != null)
            {
                writer.WriteBase64String(propName_encryption_key, obj.EncryptionKey);
            }
        }
    }

    partial class SetAuthenticationPhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setAuthenticationPhoneNumber");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        private static readonly JsonEncodedText propName_settings = JsonEncodedText.Encode("settings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetAuthenticationPhoneNumber)tlobj;
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
            if (obj.Settings != null)
            {
                writer.WritePropertyName(propName_settings);
                writer.WriteTLObjectValue(obj.Settings);
            }
        }
    }

    partial class ResendAuthenticationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("resendAuthenticationCode");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckAuthenticationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkAuthenticationCode");
        private static readonly JsonEncodedText propName_code = JsonEncodedText.Encode("code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckAuthenticationCode)tlobj;
            writer.WriteString(propName_code, obj.Code);
        }
    }

    partial class RequestQrCodeAuthenticationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("requestQrCodeAuthentication");
        private static readonly JsonEncodedText propName_other_user_ids = JsonEncodedText.Encode("other_user_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RequestQrCodeAuthentication)tlobj;
            if (obj.OtherUserIds != null)
            {
                writer.WritePropertyName(propName_other_user_ids);
                writer.WriteArray(obj.OtherUserIds);
            }
        }
    }

    partial class RegisterUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("registerUser");
        private static readonly JsonEncodedText propName_first_name = JsonEncodedText.Encode("first_name");
        private static readonly JsonEncodedText propName_last_name = JsonEncodedText.Encode("last_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RegisterUser)tlobj;
            writer.WriteString(propName_first_name, obj.FirstName);
            writer.WriteString(propName_last_name, obj.LastName);
        }
    }

    partial class CheckAuthenticationPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkAuthenticationPassword");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckAuthenticationPassword)tlobj;
            writer.WriteString(propName_password, obj.Password);
        }
    }

    partial class RequestAuthenticationPasswordRecoveryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("requestAuthenticationPasswordRecovery");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class RecoverAuthenticationPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("recoverAuthenticationPassword");
        private static readonly JsonEncodedText propName_recovery_code = JsonEncodedText.Encode("recovery_code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RecoverAuthenticationPassword)tlobj;
            writer.WriteString(propName_recovery_code, obj.RecoveryCode);
        }
    }

    partial class CheckAuthenticationBotTokenConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkAuthenticationBotToken");
        private static readonly JsonEncodedText propName_token = JsonEncodedText.Encode("token");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckAuthenticationBotToken)tlobj;
            writer.WriteString(propName_token, obj.Token);
        }
    }

    partial class LogOutConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("logOut");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CloseConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("close");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DestroyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("destroy");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ConfirmQrCodeAuthenticationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("confirmQrCodeAuthentication");
        private static readonly JsonEncodedText propName_link = JsonEncodedText.Encode("link");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ConfirmQrCodeAuthentication)tlobj;
            writer.WriteString(propName_link, obj.Link);
        }
    }

    partial class GetCurrentStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getCurrentState");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetDatabaseEncryptionKeyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setDatabaseEncryptionKey");
        private static readonly JsonEncodedText propName_new_encryption_key = JsonEncodedText.Encode("new_encryption_key");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetDatabaseEncryptionKey)tlobj;
            if (obj.NewEncryptionKey != null)
            {
                writer.WriteBase64String(propName_new_encryption_key, obj.NewEncryptionKey);
            }
        }
    }

    partial class GetPasswordStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getPasswordState");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setPassword");
        private static readonly JsonEncodedText propName_old_password = JsonEncodedText.Encode("old_password");
        private static readonly JsonEncodedText propName_new_password = JsonEncodedText.Encode("new_password");
        private static readonly JsonEncodedText propName_new_hint = JsonEncodedText.Encode("new_hint");
        private static readonly JsonEncodedText propName_set_recovery_email_address = JsonEncodedText.Encode("set_recovery_email_address");
        private static readonly JsonEncodedText propName_new_recovery_email_address = JsonEncodedText.Encode("new_recovery_email_address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetPassword)tlobj;
            writer.WriteString(propName_old_password, obj.OldPassword);
            writer.WriteString(propName_new_password, obj.NewPassword);
            writer.WriteString(propName_new_hint, obj.NewHint);
            writer.WriteBoolean(propName_set_recovery_email_address, obj.SetRecoveryEmailAddress);
            writer.WriteString(propName_new_recovery_email_address, obj.NewRecoveryEmailAddress);
        }
    }

    partial class GetRecoveryEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getRecoveryEmailAddress");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRecoveryEmailAddress)tlobj;
            writer.WriteString(propName_password, obj.Password);
        }
    }

    partial class SetRecoveryEmailAddressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setRecoveryEmailAddress");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        private static readonly JsonEncodedText propName_new_recovery_email_address = JsonEncodedText.Encode("new_recovery_email_address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetRecoveryEmailAddress)tlobj;
            writer.WriteString(propName_password, obj.Password);
            writer.WriteString(propName_new_recovery_email_address, obj.NewRecoveryEmailAddress);
        }
    }

    partial class CheckRecoveryEmailAddressCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkRecoveryEmailAddressCode");
        private static readonly JsonEncodedText propName_code = JsonEncodedText.Encode("code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckRecoveryEmailAddressCode)tlobj;
            writer.WriteString(propName_code, obj.Code);
        }
    }

    partial class ResendRecoveryEmailAddressCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("resendRecoveryEmailAddressCode");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class RequestPasswordRecoveryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("requestPasswordRecovery");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class RecoverPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("recoverPassword");
        private static readonly JsonEncodedText propName_recovery_code = JsonEncodedText.Encode("recovery_code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RecoverPassword)tlobj;
            writer.WriteString(propName_recovery_code, obj.RecoveryCode);
        }
    }

    partial class CreateTemporaryPasswordConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createTemporaryPassword");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        private static readonly JsonEncodedText propName_valid_for = JsonEncodedText.Encode("valid_for");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateTemporaryPassword)tlobj;
            writer.WriteString(propName_password, obj.Password);
            writer.WriteNumber(propName_valid_for, obj.ValidFor);
        }
    }

    partial class GetTemporaryPasswordStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getTemporaryPasswordState");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetMeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMe");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getUser");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetUser)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class GetUserFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getUserFullInfo");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetUserFullInfo)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class GetBasicGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getBasicGroup");
        private static readonly JsonEncodedText propName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBasicGroup)tlobj;
            writer.WriteNumber(propName_basic_group_id, obj.BasicGroupId);
        }
    }

    partial class GetBasicGroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getBasicGroupFullInfo");
        private static readonly JsonEncodedText propName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBasicGroupFullInfo)tlobj;
            writer.WriteNumber(propName_basic_group_id, obj.BasicGroupId);
        }
    }

    partial class GetSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getSupergroup");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetSupergroup)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class GetSupergroupFullInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getSupergroupFullInfo");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetSupergroupFullInfo)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class GetSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getSecretChat");
        private static readonly JsonEncodedText propName_secret_chat_id = JsonEncodedText.Encode("secret_chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetSecretChat)tlobj;
            writer.WriteNumber(propName_secret_chat_id, obj.SecretChatId);
        }
    }

    partial class GetChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class GetMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class GetMessageLocallyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMessageLocally");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageLocally)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class GetRepliedMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getRepliedMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRepliedMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class GetChatPinnedMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatPinnedMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatPinnedMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class GetMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_ids = JsonEncodedText.Encode("message_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(propName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
        }
    }

    partial class GetMessageThreadConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMessageThread");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageThread)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class GetFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getFile");
        private static readonly JsonEncodedText propName_file_id = JsonEncodedText.Encode("file_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetFile)tlobj;
            writer.WriteNumber(propName_file_id, obj.FileId);
        }
    }

    partial class GetRemoteFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getRemoteFile");
        private static readonly JsonEncodedText propName_remote_file_id = JsonEncodedText.Encode("remote_file_id");
        private static readonly JsonEncodedText propName_file_type = JsonEncodedText.Encode("file_type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRemoteFile)tlobj;
            writer.WriteString(propName_remote_file_id, obj.RemoteFileId);
            if (obj.FileType != null)
            {
                writer.WritePropertyName(propName_file_type);
                writer.WriteTLObjectValue(obj.FileType);
            }
        }
    }

    partial class GetChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChats");
        private static readonly JsonEncodedText propName_chat_list = JsonEncodedText.Encode("chat_list");
        private static readonly JsonEncodedText propName_offset_order = JsonEncodedText.Encode("offset_order");
        private static readonly JsonEncodedText propName_offset_chat_id = JsonEncodedText.Encode("offset_chat_id");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChats)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(propName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WritePropertyName(propName_offset_order);
            writer.WriteInt64String(obj.OffsetOrder);
            writer.WriteNumber(propName_offset_chat_id, obj.OffsetChatId);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class SearchPublicChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchPublicChat");
        private static readonly JsonEncodedText propName_username = JsonEncodedText.Encode("username");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchPublicChat)tlobj;
            writer.WriteString(propName_username, obj.Username);
        }
    }

    partial class SearchPublicChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchPublicChats");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchPublicChats)tlobj;
            writer.WriteString(propName_query, obj.Query);
        }
    }

    partial class SearchChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchChats");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChats)tlobj;
            writer.WriteString(propName_query, obj.Query);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class SearchChatsOnServerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchChatsOnServer");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChatsOnServer)tlobj;
            writer.WriteString(propName_query, obj.Query);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class SearchChatsNearbyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchChatsNearby");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChatsNearby)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
        }
    }

    partial class GetTopChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getTopChats");
        private static readonly JsonEncodedText propName_category = JsonEncodedText.Encode("category");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetTopChats)tlobj;
            if (obj.Category != null)
            {
                writer.WritePropertyName(propName_category);
                writer.WriteTLObjectValue(obj.Category);
            }
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class RemoveTopChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeTopChat");
        private static readonly JsonEncodedText propName_category = JsonEncodedText.Encode("category");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveTopChat)tlobj;
            if (obj.Category != null)
            {
                writer.WritePropertyName(propName_category);
                writer.WriteTLObjectValue(obj.Category);
            }
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class AddRecentlyFoundChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addRecentlyFoundChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddRecentlyFoundChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class RemoveRecentlyFoundChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeRecentlyFoundChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveRecentlyFoundChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class ClearRecentlyFoundChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("clearRecentlyFoundChats");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChatUsernameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkChatUsername");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_username = JsonEncodedText.Encode("username");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckChatUsername)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_username, obj.Username);
        }
    }

    partial class GetCreatedPublicChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getCreatedPublicChats");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetCreatedPublicChats)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class CheckCreatedPublicChatsLimitConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkCreatedPublicChatsLimit");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckCreatedPublicChatsLimit)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class GetSuitableDiscussionChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getSuitableDiscussionChats");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetInactiveSupergroupChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getInactiveSupergroupChats");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetGroupsInCommonConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getGroupsInCommon");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_offset_chat_id = JsonEncodedText.Encode("offset_chat_id");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetGroupsInCommon)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteNumber(propName_offset_chat_id, obj.OffsetChatId);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class GetChatHistoryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatHistory");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_from_message_id = JsonEncodedText.Encode("from_message_id");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        private static readonly JsonEncodedText propName_only_local = JsonEncodedText.Encode("only_local");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatHistory)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_from_message_id, obj.FromMessageId);
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
            writer.WriteBoolean(propName_only_local, obj.OnlyLocal);
        }
    }

    partial class GetMessageThreadHistoryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMessageThreadHistory");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_from_message_id = JsonEncodedText.Encode("from_message_id");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageThreadHistory)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteNumber(propName_from_message_id, obj.FromMessageId);
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class DeleteChatHistoryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteChatHistory");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_remove_from_chat_list = JsonEncodedText.Encode("remove_from_chat_list");
        private static readonly JsonEncodedText propName_revoke = JsonEncodedText.Encode("revoke");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteChatHistory)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteBoolean(propName_remove_from_chat_list, obj.RemoveFromChatList);
            writer.WriteBoolean(propName_revoke, obj.Revoke);
        }
    }

    partial class SearchChatMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchChatMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        private static readonly JsonEncodedText propName_from_message_id = JsonEncodedText.Encode("from_message_id");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        private static readonly JsonEncodedText propName_filter = JsonEncodedText.Encode("filter");
        private static readonly JsonEncodedText propName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChatMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_query, obj.Query);
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
            writer.WriteNumber(propName_from_message_id, obj.FromMessageId);
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(propName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteNumber(propName_message_thread_id, obj.MessageThreadId);
        }
    }

    partial class SearchMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchMessages");
        private static readonly JsonEncodedText propName_chat_list = JsonEncodedText.Encode("chat_list");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_offset_date = JsonEncodedText.Encode("offset_date");
        private static readonly JsonEncodedText propName_offset_chat_id = JsonEncodedText.Encode("offset_chat_id");
        private static readonly JsonEncodedText propName_offset_message_id = JsonEncodedText.Encode("offset_message_id");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        private static readonly JsonEncodedText propName_filter = JsonEncodedText.Encode("filter");
        private static readonly JsonEncodedText propName_min_date = JsonEncodedText.Encode("min_date");
        private static readonly JsonEncodedText propName_max_date = JsonEncodedText.Encode("max_date");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchMessages)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(propName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WriteString(propName_query, obj.Query);
            writer.WriteNumber(propName_offset_date, obj.OffsetDate);
            writer.WriteNumber(propName_offset_chat_id, obj.OffsetChatId);
            writer.WriteNumber(propName_offset_message_id, obj.OffsetMessageId);
            writer.WriteNumber(propName_limit, obj.Limit);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(propName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteNumber(propName_min_date, obj.MinDate);
            writer.WriteNumber(propName_max_date, obj.MaxDate);
        }
    }

    partial class SearchSecretMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchSecretMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        private static readonly JsonEncodedText propName_filter = JsonEncodedText.Encode("filter");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchSecretMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_query, obj.Query);
            writer.WriteString(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(propName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
        }
    }

    partial class SearchCallMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchCallMessages");
        private static readonly JsonEncodedText propName_from_message_id = JsonEncodedText.Encode("from_message_id");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        private static readonly JsonEncodedText propName_only_missed = JsonEncodedText.Encode("only_missed");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchCallMessages)tlobj;
            writer.WriteNumber(propName_from_message_id, obj.FromMessageId);
            writer.WriteNumber(propName_limit, obj.Limit);
            writer.WriteBoolean(propName_only_missed, obj.OnlyMissed);
        }
    }

    partial class SearchChatRecentLocationMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchChatRecentLocationMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChatRecentLocationMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class GetActiveLiveLocationMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getActiveLiveLocationMessages");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetChatMessageByDateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatMessageByDate");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_date = JsonEncodedText.Encode("date");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatMessageByDate)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_date, obj.Date);
        }
    }

    partial class GetChatMessageCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatMessageCount");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_filter = JsonEncodedText.Encode("filter");
        private static readonly JsonEncodedText propName_return_local = JsonEncodedText.Encode("return_local");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatMessageCount)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(propName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteBoolean(propName_return_local, obj.ReturnLocal);
        }
    }

    partial class GetChatScheduledMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatScheduledMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatScheduledMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class GetMessagePublicForwardsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMessagePublicForwards");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessagePublicForwards)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteString(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class RemoveNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeNotification");
        private static readonly JsonEncodedText propName_notification_group_id = JsonEncodedText.Encode("notification_group_id");
        private static readonly JsonEncodedText propName_notification_id = JsonEncodedText.Encode("notification_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveNotification)tlobj;
            writer.WriteNumber(propName_notification_group_id, obj.NotificationGroupId);
            writer.WriteNumber(propName_notification_id, obj.NotificationId);
        }
    }

    partial class RemoveNotificationGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeNotificationGroup");
        private static readonly JsonEncodedText propName_notification_group_id = JsonEncodedText.Encode("notification_group_id");
        private static readonly JsonEncodedText propName_max_notification_id = JsonEncodedText.Encode("max_notification_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveNotificationGroup)tlobj;
            writer.WriteNumber(propName_notification_group_id, obj.NotificationGroupId);
            writer.WriteNumber(propName_max_notification_id, obj.MaxNotificationId);
        }
    }

    partial class GetMessageLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMessageLink");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_for_album = JsonEncodedText.Encode("for_album");
        private static readonly JsonEncodedText propName_for_comment = JsonEncodedText.Encode("for_comment");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageLink)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteBoolean(propName_for_album, obj.ForAlbum);
            writer.WriteBoolean(propName_for_comment, obj.ForComment);
        }
    }

    partial class GetMessageEmbeddingCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMessageEmbeddingCode");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_for_album = JsonEncodedText.Encode("for_album");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageEmbeddingCode)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteBoolean(propName_for_album, obj.ForAlbum);
        }
    }

    partial class GetMessageLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMessageLinkInfo");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageLinkInfo)tlobj;
            writer.WriteString(propName_url, obj.Url);
        }
    }

    partial class SendMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
        private static readonly JsonEncodedText propName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
        private static readonly JsonEncodedText propName_options = JsonEncodedText.Encode("options");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_thread_id, obj.MessageThreadId);
            writer.WriteNumber(propName_reply_to_message_id, obj.ReplyToMessageId);
            if (obj.Options != null)
            {
                writer.WritePropertyName(propName_options);
                writer.WriteTLObjectValue(obj.Options);
            }
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class SendMessageAlbumConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendMessageAlbum");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
        private static readonly JsonEncodedText propName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
        private static readonly JsonEncodedText propName_options = JsonEncodedText.Encode("options");
        private static readonly JsonEncodedText propName_input_message_contents = JsonEncodedText.Encode("input_message_contents");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendMessageAlbum)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_thread_id, obj.MessageThreadId);
            writer.WriteNumber(propName_reply_to_message_id, obj.ReplyToMessageId);
            if (obj.Options != null)
            {
                writer.WritePropertyName(propName_options);
                writer.WriteTLObjectValue(obj.Options);
            }
            if (obj.InputMessageContents != null)
            {
                writer.WritePropertyName(propName_input_message_contents);
                writer.WriteArray(obj.InputMessageContents);
            }
        }
    }

    partial class SendBotStartMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendBotStartMessage");
        private static readonly JsonEncodedText propName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_parameter = JsonEncodedText.Encode("parameter");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendBotStartMessage)tlobj;
            writer.WriteNumber(propName_bot_user_id, obj.BotUserId);
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_parameter, obj.Parameter);
        }
    }

    partial class SendInlineQueryResultMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendInlineQueryResultMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
        private static readonly JsonEncodedText propName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
        private static readonly JsonEncodedText propName_options = JsonEncodedText.Encode("options");
        private static readonly JsonEncodedText propName_query_id = JsonEncodedText.Encode("query_id");
        private static readonly JsonEncodedText propName_result_id = JsonEncodedText.Encode("result_id");
        private static readonly JsonEncodedText propName_hide_via_bot = JsonEncodedText.Encode("hide_via_bot");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendInlineQueryResultMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_thread_id, obj.MessageThreadId);
            writer.WriteNumber(propName_reply_to_message_id, obj.ReplyToMessageId);
            if (obj.Options != null)
            {
                writer.WritePropertyName(propName_options);
                writer.WriteTLObjectValue(obj.Options);
            }
            writer.WritePropertyName(propName_query_id);
            writer.WriteInt64String(obj.QueryId);
            writer.WriteString(propName_result_id, obj.ResultId);
            writer.WriteBoolean(propName_hide_via_bot, obj.HideViaBot);
        }
    }

    partial class ForwardMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("forwardMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_from_chat_id = JsonEncodedText.Encode("from_chat_id");
        private static readonly JsonEncodedText propName_message_ids = JsonEncodedText.Encode("message_ids");
        private static readonly JsonEncodedText propName_options = JsonEncodedText.Encode("options");
        private static readonly JsonEncodedText propName_send_copy = JsonEncodedText.Encode("send_copy");
        private static readonly JsonEncodedText propName_remove_caption = JsonEncodedText.Encode("remove_caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ForwardMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_from_chat_id, obj.FromChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(propName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
            if (obj.Options != null)
            {
                writer.WritePropertyName(propName_options);
                writer.WriteTLObjectValue(obj.Options);
            }
            writer.WriteBoolean(propName_send_copy, obj.SendCopy);
            writer.WriteBoolean(propName_remove_caption, obj.RemoveCaption);
        }
    }

    partial class ResendMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("resendMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_ids = JsonEncodedText.Encode("message_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ResendMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(propName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
        }
    }

    partial class SendChatSetTtlMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendChatSetTtlMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_ttl = JsonEncodedText.Encode("ttl");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendChatSetTtlMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_ttl, obj.Ttl);
        }
    }

    partial class SendChatScreenshotTakenNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendChatScreenshotTakenNotification");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendChatScreenshotTakenNotification)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class AddLocalMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addLocalMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
        private static readonly JsonEncodedText propName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
        private static readonly JsonEncodedText propName_disable_notification = JsonEncodedText.Encode("disable_notification");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddLocalMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_sender_user_id, obj.SenderUserId);
            writer.WriteNumber(propName_reply_to_message_id, obj.ReplyToMessageId);
            writer.WriteBoolean(propName_disable_notification, obj.DisableNotification);
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class DeleteMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_ids = JsonEncodedText.Encode("message_ids");
        private static readonly JsonEncodedText propName_revoke = JsonEncodedText.Encode("revoke");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(propName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
            writer.WriteBoolean(propName_revoke, obj.Revoke);
        }
    }

    partial class DeleteChatMessagesFromUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteChatMessagesFromUser");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteChatMessagesFromUser)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class EditMessageTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editMessageText");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageText)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class EditMessageLiveLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editMessageLiveLocation");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageLiveLocation)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
        }
    }

    partial class EditMessageMediaConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editMessageMedia");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageMedia)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class EditMessageCaptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editMessageCaption");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageCaption)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class EditMessageReplyMarkupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editMessageReplyMarkup");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageReplyMarkup)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class EditInlineMessageTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editInlineMessageText");
        private static readonly JsonEncodedText propName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditInlineMessageText)tlobj;
            writer.WriteString(propName_inline_message_id, obj.InlineMessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class EditInlineMessageLiveLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editInlineMessageLiveLocation");
        private static readonly JsonEncodedText propName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditInlineMessageLiveLocation)tlobj;
            writer.WriteString(propName_inline_message_id, obj.InlineMessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
        }
    }

    partial class EditInlineMessageMediaConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editInlineMessageMedia");
        private static readonly JsonEncodedText propName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_input_message_content = JsonEncodedText.Encode("input_message_content");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditInlineMessageMedia)tlobj;
            writer.WriteString(propName_inline_message_id, obj.InlineMessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.InputMessageContent != null)
            {
                writer.WritePropertyName(propName_input_message_content);
                writer.WriteTLObjectValue(obj.InputMessageContent);
            }
        }
    }

    partial class EditInlineMessageCaptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editInlineMessageCaption");
        private static readonly JsonEncodedText propName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        private static readonly JsonEncodedText propName_caption = JsonEncodedText.Encode("caption");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditInlineMessageCaption)tlobj;
            writer.WriteString(propName_inline_message_id, obj.InlineMessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
            if (obj.Caption != null)
            {
                writer.WritePropertyName(propName_caption);
                writer.WriteTLObjectValue(obj.Caption);
            }
        }
    }

    partial class EditInlineMessageReplyMarkupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editInlineMessageReplyMarkup");
        private static readonly JsonEncodedText propName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditInlineMessageReplyMarkup)tlobj;
            writer.WriteString(propName_inline_message_id, obj.InlineMessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class EditMessageSchedulingStateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editMessageSchedulingState");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_scheduling_state = JsonEncodedText.Encode("scheduling_state");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditMessageSchedulingState)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.SchedulingState != null)
            {
                writer.WritePropertyName(propName_scheduling_state);
                writer.WriteTLObjectValue(obj.SchedulingState);
            }
        }
    }

    partial class GetTextEntitiesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getTextEntities");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetTextEntities)tlobj;
            writer.WriteString(propName_text, obj.Text);
        }
    }

    partial class ParseTextEntitiesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("parseTextEntities");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_parse_mode = JsonEncodedText.Encode("parse_mode");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ParseTextEntities)tlobj;
            writer.WriteString(propName_text, obj.Text);
            if (obj.ParseMode != null)
            {
                writer.WritePropertyName(propName_parse_mode);
                writer.WriteTLObjectValue(obj.ParseMode);
            }
        }
    }

    partial class ParseMarkdownConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("parseMarkdown");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ParseMarkdown)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class GetMarkdownTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMarkdownText");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMarkdownText)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class GetFileMimeTypeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getFileMimeType");
        private static readonly JsonEncodedText propName_file_name = JsonEncodedText.Encode("file_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetFileMimeType)tlobj;
            writer.WriteString(propName_file_name, obj.FileName);
        }
    }

    partial class GetFileExtensionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getFileExtension");
        private static readonly JsonEncodedText propName_mime_type = JsonEncodedText.Encode("mime_type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetFileExtension)tlobj;
            writer.WriteString(propName_mime_type, obj.MimeType);
        }
    }

    partial class CleanFileNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("cleanFileName");
        private static readonly JsonEncodedText propName_file_name = JsonEncodedText.Encode("file_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CleanFileName)tlobj;
            writer.WriteString(propName_file_name, obj.FileName);
        }
    }

    partial class GetLanguagePackStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getLanguagePackString");
        private static readonly JsonEncodedText propName_language_pack_database_path = JsonEncodedText.Encode("language_pack_database_path");
        private static readonly JsonEncodedText propName_localization_target = JsonEncodedText.Encode("localization_target");
        private static readonly JsonEncodedText propName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
        private static readonly JsonEncodedText propName_key = JsonEncodedText.Encode("key");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLanguagePackString)tlobj;
            writer.WriteString(propName_language_pack_database_path, obj.LanguagePackDatabasePath);
            writer.WriteString(propName_localization_target, obj.LocalizationTarget);
            writer.WriteString(propName_language_pack_id, obj.LanguagePackId);
            writer.WriteString(propName_key, obj.Key);
        }
    }

    partial class GetJsonValueConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getJsonValue");
        private static readonly JsonEncodedText propName_json = JsonEncodedText.Encode("json");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetJsonValue)tlobj;
            writer.WriteString(propName_json, obj.Json);
        }
    }

    partial class GetJsonStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getJsonString");
        private static readonly JsonEncodedText propName_json_value = JsonEncodedText.Encode("json_value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetJsonString)tlobj;
            if (obj.JsonValue != null)
            {
                writer.WritePropertyName(propName_json_value);
                writer.WriteTLObjectValue(obj.JsonValue);
            }
        }
    }

    partial class SetPollAnswerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setPollAnswer");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_option_ids = JsonEncodedText.Encode("option_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetPollAnswer)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.OptionIds != null)
            {
                writer.WritePropertyName(propName_option_ids);
                writer.WriteArray(obj.OptionIds);
            }
        }
    }

    partial class GetPollVotersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getPollVoters");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_option_id = JsonEncodedText.Encode("option_id");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPollVoters)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteNumber(propName_option_id, obj.OptionId);
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class StopPollConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("stopPoll");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_reply_markup = JsonEncodedText.Encode("reply_markup");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (StopPoll)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.ReplyMarkup != null)
            {
                writer.WritePropertyName(propName_reply_markup);
                writer.WriteTLObjectValue(obj.ReplyMarkup);
            }
        }
    }

    partial class HideSuggestedActionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("hideSuggestedAction");
        private static readonly JsonEncodedText propName_action = JsonEncodedText.Encode("action");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (HideSuggestedAction)tlobj;
            if (obj.Action != null)
            {
                writer.WritePropertyName(propName_action);
                writer.WriteTLObjectValue(obj.Action);
            }
        }
    }

    partial class GetLoginUrlInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getLoginUrlInfo");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_button_id = JsonEncodedText.Encode("button_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLoginUrlInfo)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteNumber(propName_button_id, obj.ButtonId);
        }
    }

    partial class GetLoginUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getLoginUrl");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_button_id = JsonEncodedText.Encode("button_id");
        private static readonly JsonEncodedText propName_allow_write_access = JsonEncodedText.Encode("allow_write_access");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLoginUrl)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteNumber(propName_button_id, obj.ButtonId);
            writer.WriteBoolean(propName_allow_write_access, obj.AllowWriteAccess);
        }
    }

    partial class GetInlineQueryResultsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getInlineQueryResults");
        private static readonly JsonEncodedText propName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_user_location = JsonEncodedText.Encode("user_location");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetInlineQueryResults)tlobj;
            writer.WriteNumber(propName_bot_user_id, obj.BotUserId);
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.UserLocation != null)
            {
                writer.WritePropertyName(propName_user_location);
                writer.WriteTLObjectValue(obj.UserLocation);
            }
            writer.WriteString(propName_query, obj.Query);
            writer.WriteString(propName_offset, obj.Offset);
        }
    }

    partial class AnswerInlineQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("answerInlineQuery");
        private static readonly JsonEncodedText propName_inline_query_id = JsonEncodedText.Encode("inline_query_id");
        private static readonly JsonEncodedText propName_is_personal = JsonEncodedText.Encode("is_personal");
        private static readonly JsonEncodedText propName_results = JsonEncodedText.Encode("results");
        private static readonly JsonEncodedText propName_cache_time = JsonEncodedText.Encode("cache_time");
        private static readonly JsonEncodedText propName_next_offset = JsonEncodedText.Encode("next_offset");
        private static readonly JsonEncodedText propName_switch_pm_text = JsonEncodedText.Encode("switch_pm_text");
        private static readonly JsonEncodedText propName_switch_pm_parameter = JsonEncodedText.Encode("switch_pm_parameter");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnswerInlineQuery)tlobj;
            writer.WritePropertyName(propName_inline_query_id);
            writer.WriteInt64String(obj.InlineQueryId);
            writer.WriteBoolean(propName_is_personal, obj.IsPersonal);
            if (obj.Results != null)
            {
                writer.WritePropertyName(propName_results);
                writer.WriteArray(obj.Results);
            }
            writer.WriteNumber(propName_cache_time, obj.CacheTime);
            writer.WriteString(propName_next_offset, obj.NextOffset);
            writer.WriteString(propName_switch_pm_text, obj.SwitchPmText);
            writer.WriteString(propName_switch_pm_parameter, obj.SwitchPmParameter);
        }
    }

    partial class GetCallbackQueryAnswerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getCallbackQueryAnswer");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_payload = JsonEncodedText.Encode("payload");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetCallbackQueryAnswer)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.Payload != null)
            {
                writer.WritePropertyName(propName_payload);
                writer.WriteTLObjectValue(obj.Payload);
            }
        }
    }

    partial class AnswerCallbackQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("answerCallbackQuery");
        private static readonly JsonEncodedText propName_callback_query_id = JsonEncodedText.Encode("callback_query_id");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_show_alert = JsonEncodedText.Encode("show_alert");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_cache_time = JsonEncodedText.Encode("cache_time");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnswerCallbackQuery)tlobj;
            writer.WritePropertyName(propName_callback_query_id);
            writer.WriteInt64String(obj.CallbackQueryId);
            writer.WriteString(propName_text, obj.Text);
            writer.WriteBoolean(propName_show_alert, obj.ShowAlert);
            writer.WriteString(propName_url, obj.Url);
            writer.WriteNumber(propName_cache_time, obj.CacheTime);
        }
    }

    partial class AnswerShippingQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("answerShippingQuery");
        private static readonly JsonEncodedText propName_shipping_query_id = JsonEncodedText.Encode("shipping_query_id");
        private static readonly JsonEncodedText propName_shipping_options = JsonEncodedText.Encode("shipping_options");
        private static readonly JsonEncodedText propName_error_message = JsonEncodedText.Encode("error_message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnswerShippingQuery)tlobj;
            writer.WritePropertyName(propName_shipping_query_id);
            writer.WriteInt64String(obj.ShippingQueryId);
            if (obj.ShippingOptions != null)
            {
                writer.WritePropertyName(propName_shipping_options);
                writer.WriteArray(obj.ShippingOptions);
            }
            writer.WriteString(propName_error_message, obj.ErrorMessage);
        }
    }

    partial class AnswerPreCheckoutQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("answerPreCheckoutQuery");
        private static readonly JsonEncodedText propName_pre_checkout_query_id = JsonEncodedText.Encode("pre_checkout_query_id");
        private static readonly JsonEncodedText propName_error_message = JsonEncodedText.Encode("error_message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnswerPreCheckoutQuery)tlobj;
            writer.WritePropertyName(propName_pre_checkout_query_id);
            writer.WriteInt64String(obj.PreCheckoutQueryId);
            writer.WriteString(propName_error_message, obj.ErrorMessage);
        }
    }

    partial class SetGameScoreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setGameScore");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_edit_message = JsonEncodedText.Encode("edit_message");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_score = JsonEncodedText.Encode("score");
        private static readonly JsonEncodedText propName_force = JsonEncodedText.Encode("force");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetGameScore)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteBoolean(propName_edit_message, obj.EditMessage);
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteNumber(propName_score, obj.Score);
            writer.WriteBoolean(propName_force, obj.Force);
        }
    }

    partial class SetInlineGameScoreConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setInlineGameScore");
        private static readonly JsonEncodedText propName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
        private static readonly JsonEncodedText propName_edit_message = JsonEncodedText.Encode("edit_message");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_score = JsonEncodedText.Encode("score");
        private static readonly JsonEncodedText propName_force = JsonEncodedText.Encode("force");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetInlineGameScore)tlobj;
            writer.WriteString(propName_inline_message_id, obj.InlineMessageId);
            writer.WriteBoolean(propName_edit_message, obj.EditMessage);
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteNumber(propName_score, obj.Score);
            writer.WriteBoolean(propName_force, obj.Force);
        }
    }

    partial class GetGameHighScoresConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getGameHighScores");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetGameHighScores)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class GetInlineGameHighScoresConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getInlineGameHighScores");
        private static readonly JsonEncodedText propName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetInlineGameHighScores)tlobj;
            writer.WriteString(propName_inline_message_id, obj.InlineMessageId);
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class DeleteChatReplyMarkupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteChatReplyMarkup");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteChatReplyMarkup)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class SendChatActionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendChatAction");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
        private static readonly JsonEncodedText propName_action = JsonEncodedText.Encode("action");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendChatAction)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_thread_id, obj.MessageThreadId);
            if (obj.Action != null)
            {
                writer.WritePropertyName(propName_action);
                writer.WriteTLObjectValue(obj.Action);
            }
        }
    }

    partial class OpenChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("openChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OpenChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class CloseChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("closeChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CloseChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class ViewMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("viewMessages");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
        private static readonly JsonEncodedText propName_message_ids = JsonEncodedText.Encode("message_ids");
        private static readonly JsonEncodedText propName_force_read = JsonEncodedText.Encode("force_read");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ViewMessages)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_thread_id, obj.MessageThreadId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(propName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
            writer.WriteBoolean(propName_force_read, obj.ForceRead);
        }
    }

    partial class OpenMessageContentConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("openMessageContent");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OpenMessageContent)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class ReadAllChatMentionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("readAllChatMentions");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReadAllChatMentions)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class CreatePrivateChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createPrivateChat");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_force = JsonEncodedText.Encode("force");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreatePrivateChat)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteBoolean(propName_force, obj.Force);
        }
    }

    partial class CreateBasicGroupChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createBasicGroupChat");
        private static readonly JsonEncodedText propName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
        private static readonly JsonEncodedText propName_force = JsonEncodedText.Encode("force");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateBasicGroupChat)tlobj;
            writer.WriteNumber(propName_basic_group_id, obj.BasicGroupId);
            writer.WriteBoolean(propName_force, obj.Force);
        }
    }

    partial class CreateSupergroupChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createSupergroupChat");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        private static readonly JsonEncodedText propName_force = JsonEncodedText.Encode("force");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateSupergroupChat)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
            writer.WriteBoolean(propName_force, obj.Force);
        }
    }

    partial class CreateSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createSecretChat");
        private static readonly JsonEncodedText propName_secret_chat_id = JsonEncodedText.Encode("secret_chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateSecretChat)tlobj;
            writer.WriteNumber(propName_secret_chat_id, obj.SecretChatId);
        }
    }

    partial class CreateNewBasicGroupChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createNewBasicGroupChat");
        private static readonly JsonEncodedText propName_user_ids = JsonEncodedText.Encode("user_ids");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateNewBasicGroupChat)tlobj;
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(propName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
            writer.WriteString(propName_title, obj.Title);
        }
    }

    partial class CreateNewSupergroupChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createNewSupergroupChat");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_is_channel = JsonEncodedText.Encode("is_channel");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateNewSupergroupChat)tlobj;
            writer.WriteString(propName_title, obj.Title);
            writer.WriteBoolean(propName_is_channel, obj.IsChannel);
            writer.WriteString(propName_description, obj.Description);
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
        }
    }

    partial class CreateNewSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createNewSecretChat");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateNewSecretChat)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class UpgradeBasicGroupChatToSupergroupChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("upgradeBasicGroupChatToSupergroupChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UpgradeBasicGroupChatToSupergroupChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class GetChatListsToAddChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatListsToAddChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatListsToAddChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class AddChatToListConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addChatToList");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_chat_list = JsonEncodedText.Encode("chat_list");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddChatToList)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(propName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
        }
    }

    partial class GetChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatFilter");
        private static readonly JsonEncodedText propName_chat_filter_id = JsonEncodedText.Encode("chat_filter_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatFilter)tlobj;
            writer.WriteNumber(propName_chat_filter_id, obj.ChatFilterId);
        }
    }

    partial class CreateChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createChatFilter");
        private static readonly JsonEncodedText propName_filter = JsonEncodedText.Encode("filter");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateChatFilter)tlobj;
            if (obj.Filter != null)
            {
                writer.WritePropertyName(propName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
        }
    }

    partial class EditChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editChatFilter");
        private static readonly JsonEncodedText propName_chat_filter_id = JsonEncodedText.Encode("chat_filter_id");
        private static readonly JsonEncodedText propName_filter = JsonEncodedText.Encode("filter");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditChatFilter)tlobj;
            writer.WriteNumber(propName_chat_filter_id, obj.ChatFilterId);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(propName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
        }
    }

    partial class DeleteChatFilterConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteChatFilter");
        private static readonly JsonEncodedText propName_chat_filter_id = JsonEncodedText.Encode("chat_filter_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteChatFilter)tlobj;
            writer.WriteNumber(propName_chat_filter_id, obj.ChatFilterId);
        }
    }

    partial class ReorderChatFiltersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("reorderChatFilters");
        private static readonly JsonEncodedText propName_chat_filter_ids = JsonEncodedText.Encode("chat_filter_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReorderChatFilters)tlobj;
            if (obj.ChatFilterIds != null)
            {
                writer.WritePropertyName(propName_chat_filter_ids);
                writer.WriteArray(obj.ChatFilterIds);
            }
        }
    }

    partial class GetRecommendedChatFiltersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getRecommendedChatFilters");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetChatFilterDefaultIconNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatFilterDefaultIconName");
        private static readonly JsonEncodedText propName_filter = JsonEncodedText.Encode("filter");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatFilterDefaultIconName)tlobj;
            if (obj.Filter != null)
            {
                writer.WritePropertyName(propName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
        }
    }

    partial class SetChatTitleConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatTitle");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatTitle)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_title, obj.Title);
        }
    }

    partial class SetChatPhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatPhoto");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatPhoto)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
        }
    }

    partial class SetChatPermissionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatPermissions");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_permissions = JsonEncodedText.Encode("permissions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatPermissions)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.Permissions != null)
            {
                writer.WritePropertyName(propName_permissions);
                writer.WriteTLObjectValue(obj.Permissions);
            }
        }
    }

    partial class SetChatDraftMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatDraftMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
        private static readonly JsonEncodedText propName_draft_message = JsonEncodedText.Encode("draft_message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatDraftMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_thread_id, obj.MessageThreadId);
            if (obj.DraftMessage != null)
            {
                writer.WritePropertyName(propName_draft_message);
                writer.WriteTLObjectValue(obj.DraftMessage);
            }
        }
    }

    partial class SetChatNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatNotificationSettings");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_notification_settings = JsonEncodedText.Encode("notification_settings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatNotificationSettings)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.NotificationSettings != null)
            {
                writer.WritePropertyName(propName_notification_settings);
                writer.WriteTLObjectValue(obj.NotificationSettings);
            }
        }
    }

    partial class ToggleChatIsMarkedAsUnreadConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("toggleChatIsMarkedAsUnread");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_is_marked_as_unread = JsonEncodedText.Encode("is_marked_as_unread");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleChatIsMarkedAsUnread)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteBoolean(propName_is_marked_as_unread, obj.IsMarkedAsUnread);
        }
    }

    partial class ToggleChatIsBlockedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("toggleChatIsBlocked");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_is_blocked = JsonEncodedText.Encode("is_blocked");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleChatIsBlocked)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteBoolean(propName_is_blocked, obj.IsBlocked);
        }
    }

    partial class ToggleChatDefaultDisableNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("toggleChatDefaultDisableNotification");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_default_disable_notification = JsonEncodedText.Encode("default_disable_notification");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleChatDefaultDisableNotification)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteBoolean(propName_default_disable_notification, obj.DefaultDisableNotification);
        }
    }

    partial class SetChatClientDataConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatClientData");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_client_data = JsonEncodedText.Encode("client_data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatClientData)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_client_data, obj.ClientData);
        }
    }

    partial class SetChatDescriptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatDescription");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_description = JsonEncodedText.Encode("description");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatDescription)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_description, obj.Description);
        }
    }

    partial class SetChatDiscussionGroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatDiscussionGroup");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_discussion_chat_id = JsonEncodedText.Encode("discussion_chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatDiscussionGroup)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_discussion_chat_id, obj.DiscussionChatId);
        }
    }

    partial class SetChatLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatLocation");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatLocation)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
        }
    }

    partial class SetChatSlowModeDelayConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatSlowModeDelay");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_slow_mode_delay = JsonEncodedText.Encode("slow_mode_delay");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatSlowModeDelay)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_slow_mode_delay, obj.SlowModeDelay);
        }
    }

    partial class PinChatMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pinChatMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_disable_notification = JsonEncodedText.Encode("disable_notification");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PinChatMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteBoolean(propName_disable_notification, obj.DisableNotification);
        }
    }

    partial class UnpinChatMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("unpinChatMessage");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UnpinChatMessage)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class JoinChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("joinChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JoinChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class LeaveChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("leaveChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (LeaveChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class AddChatMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addChatMember");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_forward_limit = JsonEncodedText.Encode("forward_limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddChatMember)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteNumber(propName_forward_limit, obj.ForwardLimit);
        }
    }

    partial class AddChatMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addChatMembers");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_user_ids = JsonEncodedText.Encode("user_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddChatMembers)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(propName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class SetChatMemberStatusConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setChatMemberStatus");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_status = JsonEncodedText.Encode("status");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetChatMemberStatus)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.Status != null)
            {
                writer.WritePropertyName(propName_status);
                writer.WriteTLObjectValue(obj.Status);
            }
        }
    }

    partial class CanTransferOwnershipConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("canTransferOwnership");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TransferChatOwnershipConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("transferChatOwnership");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TransferChatOwnership)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteString(propName_password, obj.Password);
        }
    }

    partial class GetChatMemberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatMember");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatMember)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class SearchChatMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchChatMembers");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        private static readonly JsonEncodedText propName_filter = JsonEncodedText.Encode("filter");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchChatMembers)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_query, obj.Query);
            writer.WriteNumber(propName_limit, obj.Limit);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(propName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
        }
    }

    partial class GetChatAdministratorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatAdministrators");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatAdministrators)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class ClearAllDraftMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("clearAllDraftMessages");
        private static readonly JsonEncodedText propName_exclude_secret_chats = JsonEncodedText.Encode("exclude_secret_chats");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ClearAllDraftMessages)tlobj;
            writer.WriteBoolean(propName_exclude_secret_chats, obj.ExcludeSecretChats);
        }
    }

    partial class GetChatNotificationSettingsExceptionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatNotificationSettingsExceptions");
        private static readonly JsonEncodedText propName_scope = JsonEncodedText.Encode("scope");
        private static readonly JsonEncodedText propName_compare_sound = JsonEncodedText.Encode("compare_sound");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatNotificationSettingsExceptions)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(propName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
            writer.WriteBoolean(propName_compare_sound, obj.CompareSound);
        }
    }

    partial class GetScopeNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getScopeNotificationSettings");
        private static readonly JsonEncodedText propName_scope = JsonEncodedText.Encode("scope");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetScopeNotificationSettings)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(propName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
        }
    }

    partial class SetScopeNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setScopeNotificationSettings");
        private static readonly JsonEncodedText propName_scope = JsonEncodedText.Encode("scope");
        private static readonly JsonEncodedText propName_notification_settings = JsonEncodedText.Encode("notification_settings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetScopeNotificationSettings)tlobj;
            if (obj.Scope != null)
            {
                writer.WritePropertyName(propName_scope);
                writer.WriteTLObjectValue(obj.Scope);
            }
            if (obj.NotificationSettings != null)
            {
                writer.WritePropertyName(propName_notification_settings);
                writer.WriteTLObjectValue(obj.NotificationSettings);
            }
        }
    }

    partial class ResetAllNotificationSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("resetAllNotificationSettings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ToggleChatIsPinnedConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("toggleChatIsPinned");
        private static readonly JsonEncodedText propName_chat_list = JsonEncodedText.Encode("chat_list");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_is_pinned = JsonEncodedText.Encode("is_pinned");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleChatIsPinned)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(propName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteBoolean(propName_is_pinned, obj.IsPinned);
        }
    }

    partial class SetPinnedChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setPinnedChats");
        private static readonly JsonEncodedText propName_chat_list = JsonEncodedText.Encode("chat_list");
        private static readonly JsonEncodedText propName_chat_ids = JsonEncodedText.Encode("chat_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetPinnedChats)tlobj;
            if (obj.ChatList != null)
            {
                writer.WritePropertyName(propName_chat_list);
                writer.WriteTLObjectValue(obj.ChatList);
            }
            if (obj.ChatIds != null)
            {
                writer.WritePropertyName(propName_chat_ids);
                writer.WriteArray(obj.ChatIds);
            }
        }
    }

    partial class DownloadFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("downloadFile");
        private static readonly JsonEncodedText propName_file_id = JsonEncodedText.Encode("file_id");
        private static readonly JsonEncodedText propName_priority = JsonEncodedText.Encode("priority");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        private static readonly JsonEncodedText propName_synchronous = JsonEncodedText.Encode("synchronous");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DownloadFile)tlobj;
            writer.WriteNumber(propName_file_id, obj.FileId);
            writer.WriteNumber(propName_priority, obj.Priority);
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
            writer.WriteBoolean(propName_synchronous, obj.Synchronous);
        }
    }

    partial class GetFileDownloadedPrefixSizeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getFileDownloadedPrefixSize");
        private static readonly JsonEncodedText propName_file_id = JsonEncodedText.Encode("file_id");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetFileDownloadedPrefixSize)tlobj;
            writer.WriteNumber(propName_file_id, obj.FileId);
            writer.WriteNumber(propName_offset, obj.Offset);
        }
    }

    partial class CancelDownloadFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("cancelDownloadFile");
        private static readonly JsonEncodedText propName_file_id = JsonEncodedText.Encode("file_id");
        private static readonly JsonEncodedText propName_only_if_pending = JsonEncodedText.Encode("only_if_pending");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CancelDownloadFile)tlobj;
            writer.WriteNumber(propName_file_id, obj.FileId);
            writer.WriteBoolean(propName_only_if_pending, obj.OnlyIfPending);
        }
    }

    partial class UploadFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("uploadFile");
        private static readonly JsonEncodedText propName_file = JsonEncodedText.Encode("file");
        private static readonly JsonEncodedText propName_file_type = JsonEncodedText.Encode("file_type");
        private static readonly JsonEncodedText propName_priority = JsonEncodedText.Encode("priority");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UploadFile)tlobj;
            if (obj.File != null)
            {
                writer.WritePropertyName(propName_file);
                writer.WriteTLObjectValue(obj.File);
            }
            if (obj.FileType != null)
            {
                writer.WritePropertyName(propName_file_type);
                writer.WriteTLObjectValue(obj.FileType);
            }
            writer.WriteNumber(propName_priority, obj.Priority);
        }
    }

    partial class CancelUploadFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("cancelUploadFile");
        private static readonly JsonEncodedText propName_file_id = JsonEncodedText.Encode("file_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CancelUploadFile)tlobj;
            writer.WriteNumber(propName_file_id, obj.FileId);
        }
    }

    partial class WriteGeneratedFilePartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("writeGeneratedFilePart");
        private static readonly JsonEncodedText propName_generation_id = JsonEncodedText.Encode("generation_id");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (WriteGeneratedFilePart)tlobj;
            writer.WritePropertyName(propName_generation_id);
            writer.WriteInt64String(obj.GenerationId);
            writer.WriteNumber(propName_offset, obj.Offset);
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
        }
    }

    partial class SetFileGenerationProgressConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setFileGenerationProgress");
        private static readonly JsonEncodedText propName_generation_id = JsonEncodedText.Encode("generation_id");
        private static readonly JsonEncodedText propName_expected_size = JsonEncodedText.Encode("expected_size");
        private static readonly JsonEncodedText propName_local_prefix_size = JsonEncodedText.Encode("local_prefix_size");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetFileGenerationProgress)tlobj;
            writer.WritePropertyName(propName_generation_id);
            writer.WriteInt64String(obj.GenerationId);
            writer.WriteNumber(propName_expected_size, obj.ExpectedSize);
            writer.WriteNumber(propName_local_prefix_size, obj.LocalPrefixSize);
        }
    }

    partial class FinishFileGenerationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("finishFileGeneration");
        private static readonly JsonEncodedText propName_generation_id = JsonEncodedText.Encode("generation_id");
        private static readonly JsonEncodedText propName_error = JsonEncodedText.Encode("error");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (FinishFileGeneration)tlobj;
            writer.WritePropertyName(propName_generation_id);
            writer.WriteInt64String(obj.GenerationId);
            if (obj.Error != null)
            {
                writer.WritePropertyName(propName_error);
                writer.WriteTLObjectValue(obj.Error);
            }
        }
    }

    partial class ReadFilePartConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("readFilePart");
        private static readonly JsonEncodedText propName_file_id = JsonEncodedText.Encode("file_id");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_count = JsonEncodedText.Encode("count");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReadFilePart)tlobj;
            writer.WriteNumber(propName_file_id, obj.FileId);
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_count, obj.Count);
        }
    }

    partial class DeleteFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteFile");
        private static readonly JsonEncodedText propName_file_id = JsonEncodedText.Encode("file_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteFile)tlobj;
            writer.WriteNumber(propName_file_id, obj.FileId);
        }
    }

    partial class GenerateChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("generateChatInviteLink");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GenerateChatInviteLink)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class CheckChatInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkChatInviteLink");
        private static readonly JsonEncodedText propName_invite_link = JsonEncodedText.Encode("invite_link");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckChatInviteLink)tlobj;
            writer.WriteString(propName_invite_link, obj.InviteLink);
        }
    }

    partial class JoinChatByInviteLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("joinChatByInviteLink");
        private static readonly JsonEncodedText propName_invite_link = JsonEncodedText.Encode("invite_link");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (JoinChatByInviteLink)tlobj;
            writer.WriteString(propName_invite_link, obj.InviteLink);
        }
    }

    partial class CreateCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createCall");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_protocol = JsonEncodedText.Encode("protocol");
        private static readonly JsonEncodedText propName_is_video = JsonEncodedText.Encode("is_video");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateCall)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.Protocol != null)
            {
                writer.WritePropertyName(propName_protocol);
                writer.WriteTLObjectValue(obj.Protocol);
            }
            writer.WriteBoolean(propName_is_video, obj.IsVideo);
        }
    }

    partial class AcceptCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("acceptCall");
        private static readonly JsonEncodedText propName_call_id = JsonEncodedText.Encode("call_id");
        private static readonly JsonEncodedText propName_protocol = JsonEncodedText.Encode("protocol");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AcceptCall)tlobj;
            writer.WriteNumber(propName_call_id, obj.CallId);
            if (obj.Protocol != null)
            {
                writer.WritePropertyName(propName_protocol);
                writer.WriteTLObjectValue(obj.Protocol);
            }
        }
    }

    partial class SendCallSignalingDataConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendCallSignalingData");
        private static readonly JsonEncodedText propName_call_id = JsonEncodedText.Encode("call_id");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendCallSignalingData)tlobj;
            writer.WriteNumber(propName_call_id, obj.CallId);
            if (obj.Data != null)
            {
                writer.WriteBase64String(propName_data, obj.Data);
            }
        }
    }

    partial class DiscardCallConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("discardCall");
        private static readonly JsonEncodedText propName_call_id = JsonEncodedText.Encode("call_id");
        private static readonly JsonEncodedText propName_is_disconnected = JsonEncodedText.Encode("is_disconnected");
        private static readonly JsonEncodedText propName_duration = JsonEncodedText.Encode("duration");
        private static readonly JsonEncodedText propName_is_video = JsonEncodedText.Encode("is_video");
        private static readonly JsonEncodedText propName_connection_id = JsonEncodedText.Encode("connection_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DiscardCall)tlobj;
            writer.WriteNumber(propName_call_id, obj.CallId);
            writer.WriteBoolean(propName_is_disconnected, obj.IsDisconnected);
            writer.WriteNumber(propName_duration, obj.Duration);
            writer.WriteBoolean(propName_is_video, obj.IsVideo);
            writer.WritePropertyName(propName_connection_id);
            writer.WriteInt64String(obj.ConnectionId);
        }
    }

    partial class SendCallRatingConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendCallRating");
        private static readonly JsonEncodedText propName_call_id = JsonEncodedText.Encode("call_id");
        private static readonly JsonEncodedText propName_rating = JsonEncodedText.Encode("rating");
        private static readonly JsonEncodedText propName_comment = JsonEncodedText.Encode("comment");
        private static readonly JsonEncodedText propName_problems = JsonEncodedText.Encode("problems");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendCallRating)tlobj;
            writer.WriteNumber(propName_call_id, obj.CallId);
            writer.WriteNumber(propName_rating, obj.Rating);
            writer.WriteString(propName_comment, obj.Comment);
            if (obj.Problems != null)
            {
                writer.WritePropertyName(propName_problems);
                writer.WriteArray(obj.Problems);
            }
        }
    }

    partial class SendCallDebugInformationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendCallDebugInformation");
        private static readonly JsonEncodedText propName_call_id = JsonEncodedText.Encode("call_id");
        private static readonly JsonEncodedText propName_debug_information = JsonEncodedText.Encode("debug_information");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendCallDebugInformation)tlobj;
            writer.WriteNumber(propName_call_id, obj.CallId);
            writer.WriteString(propName_debug_information, obj.DebugInformation);
        }
    }

    partial class BlockChatFromRepliesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("blockChatFromReplies");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_delete_message = JsonEncodedText.Encode("delete_message");
        private static readonly JsonEncodedText propName_delete_all_messages = JsonEncodedText.Encode("delete_all_messages");
        private static readonly JsonEncodedText propName_report_spam = JsonEncodedText.Encode("report_spam");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (BlockChatFromReplies)tlobj;
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteBoolean(propName_delete_message, obj.DeleteMessage);
            writer.WriteBoolean(propName_delete_all_messages, obj.DeleteAllMessages);
            writer.WriteBoolean(propName_report_spam, obj.ReportSpam);
        }
    }

    partial class GetBlockedChatsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getBlockedChats");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBlockedChats)tlobj;
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class AddContactConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addContact");
        private static readonly JsonEncodedText propName_contact = JsonEncodedText.Encode("contact");
        private static readonly JsonEncodedText propName_share_phone_number = JsonEncodedText.Encode("share_phone_number");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddContact)tlobj;
            if (obj.Contact != null)
            {
                writer.WritePropertyName(propName_contact);
                writer.WriteTLObjectValue(obj.Contact);
            }
            writer.WriteBoolean(propName_share_phone_number, obj.SharePhoneNumber);
        }
    }

    partial class ImportContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("importContacts");
        private static readonly JsonEncodedText propName_contacts = JsonEncodedText.Encode("contacts");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ImportContacts)tlobj;
            if (obj.Contacts != null)
            {
                writer.WritePropertyName(propName_contacts);
                writer.WriteArray(obj.Contacts);
            }
        }
    }

    partial class GetContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getContacts");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchContacts");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchContacts)tlobj;
            writer.WriteString(propName_query, obj.Query);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class RemoveContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeContacts");
        private static readonly JsonEncodedText propName_user_ids = JsonEncodedText.Encode("user_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveContacts)tlobj;
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(propName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class GetImportedContactCountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getImportedContactCount");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class ChangeImportedContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("changeImportedContacts");
        private static readonly JsonEncodedText propName_contacts = JsonEncodedText.Encode("contacts");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChangeImportedContacts)tlobj;
            if (obj.Contacts != null)
            {
                writer.WritePropertyName(propName_contacts);
                writer.WriteArray(obj.Contacts);
            }
        }
    }

    partial class ClearImportedContactsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("clearImportedContacts");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SharePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sharePhoneNumber");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SharePhoneNumber)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
        }
    }

    partial class GetUserProfilePhotosConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getUserProfilePhotos");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetUserProfilePhotos)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class GetStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getStickers");
        private static readonly JsonEncodedText propName_emoji = JsonEncodedText.Encode("emoji");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetStickers)tlobj;
            writer.WriteString(propName_emoji, obj.Emoji);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class SearchStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchStickers");
        private static readonly JsonEncodedText propName_emoji = JsonEncodedText.Encode("emoji");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchStickers)tlobj;
            writer.WriteString(propName_emoji, obj.Emoji);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class GetInstalledStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getInstalledStickerSets");
        private static readonly JsonEncodedText propName_is_masks = JsonEncodedText.Encode("is_masks");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetInstalledStickerSets)tlobj;
            writer.WriteBoolean(propName_is_masks, obj.IsMasks);
        }
    }

    partial class GetArchivedStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getArchivedStickerSets");
        private static readonly JsonEncodedText propName_is_masks = JsonEncodedText.Encode("is_masks");
        private static readonly JsonEncodedText propName_offset_sticker_set_id = JsonEncodedText.Encode("offset_sticker_set_id");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetArchivedStickerSets)tlobj;
            writer.WriteBoolean(propName_is_masks, obj.IsMasks);
            writer.WritePropertyName(propName_offset_sticker_set_id);
            writer.WriteInt64String(obj.OffsetStickerSetId);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class GetTrendingStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getTrendingStickerSets");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetTrendingStickerSets)tlobj;
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class GetAttachedStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getAttachedStickerSets");
        private static readonly JsonEncodedText propName_file_id = JsonEncodedText.Encode("file_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetAttachedStickerSets)tlobj;
            writer.WriteNumber(propName_file_id, obj.FileId);
        }
    }

    partial class GetStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getStickerSet");
        private static readonly JsonEncodedText propName_set_id = JsonEncodedText.Encode("set_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetStickerSet)tlobj;
            writer.WritePropertyName(propName_set_id);
            writer.WriteInt64String(obj.SetId);
        }
    }

    partial class SearchStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchStickerSet");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchStickerSet)tlobj;
            writer.WriteString(propName_name, obj.Name);
        }
    }

    partial class SearchInstalledStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchInstalledStickerSets");
        private static readonly JsonEncodedText propName_is_masks = JsonEncodedText.Encode("is_masks");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchInstalledStickerSets)tlobj;
            writer.WriteBoolean(propName_is_masks, obj.IsMasks);
            writer.WriteString(propName_query, obj.Query);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class SearchStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchStickerSets");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchStickerSets)tlobj;
            writer.WriteString(propName_query, obj.Query);
        }
    }

    partial class ChangeStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("changeStickerSet");
        private static readonly JsonEncodedText propName_set_id = JsonEncodedText.Encode("set_id");
        private static readonly JsonEncodedText propName_is_installed = JsonEncodedText.Encode("is_installed");
        private static readonly JsonEncodedText propName_is_archived = JsonEncodedText.Encode("is_archived");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChangeStickerSet)tlobj;
            writer.WritePropertyName(propName_set_id);
            writer.WriteInt64String(obj.SetId);
            writer.WriteBoolean(propName_is_installed, obj.IsInstalled);
            writer.WriteBoolean(propName_is_archived, obj.IsArchived);
        }
    }

    partial class ViewTrendingStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("viewTrendingStickerSets");
        private static readonly JsonEncodedText propName_sticker_set_ids = JsonEncodedText.Encode("sticker_set_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ViewTrendingStickerSets)tlobj;
            if (obj.StickerSetIds != null)
            {
                writer.WritePropertyName(propName_sticker_set_ids);
                writer.WriteInt64Array(obj.StickerSetIds);
            }
        }
    }

    partial class ReorderInstalledStickerSetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("reorderInstalledStickerSets");
        private static readonly JsonEncodedText propName_is_masks = JsonEncodedText.Encode("is_masks");
        private static readonly JsonEncodedText propName_sticker_set_ids = JsonEncodedText.Encode("sticker_set_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReorderInstalledStickerSets)tlobj;
            writer.WriteBoolean(propName_is_masks, obj.IsMasks);
            if (obj.StickerSetIds != null)
            {
                writer.WritePropertyName(propName_sticker_set_ids);
                writer.WriteInt64Array(obj.StickerSetIds);
            }
        }
    }

    partial class GetRecentStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getRecentStickers");
        private static readonly JsonEncodedText propName_is_attached = JsonEncodedText.Encode("is_attached");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRecentStickers)tlobj;
            writer.WriteBoolean(propName_is_attached, obj.IsAttached);
        }
    }

    partial class AddRecentStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addRecentSticker");
        private static readonly JsonEncodedText propName_is_attached = JsonEncodedText.Encode("is_attached");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddRecentSticker)tlobj;
            writer.WriteBoolean(propName_is_attached, obj.IsAttached);
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class RemoveRecentStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeRecentSticker");
        private static readonly JsonEncodedText propName_is_attached = JsonEncodedText.Encode("is_attached");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveRecentSticker)tlobj;
            writer.WriteBoolean(propName_is_attached, obj.IsAttached);
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class ClearRecentStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("clearRecentStickers");
        private static readonly JsonEncodedText propName_is_attached = JsonEncodedText.Encode("is_attached");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ClearRecentStickers)tlobj;
            writer.WriteBoolean(propName_is_attached, obj.IsAttached);
        }
    }

    partial class GetFavoriteStickersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getFavoriteStickers");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AddFavoriteStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addFavoriteSticker");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddFavoriteSticker)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class RemoveFavoriteStickerConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeFavoriteSticker");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveFavoriteSticker)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class GetStickerEmojisConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getStickerEmojis");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetStickerEmojis)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class SearchEmojisConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchEmojis");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        private static readonly JsonEncodedText propName_exact_match = JsonEncodedText.Encode("exact_match");
        private static readonly JsonEncodedText propName_input_language_codes = JsonEncodedText.Encode("input_language_codes");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchEmojis)tlobj;
            writer.WriteString(propName_text, obj.Text);
            writer.WriteBoolean(propName_exact_match, obj.ExactMatch);
            if (obj.InputLanguageCodes != null)
            {
                writer.WritePropertyName(propName_input_language_codes);
                writer.WriteArray(obj.InputLanguageCodes);
            }
        }
    }

    partial class GetEmojiSuggestionsUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getEmojiSuggestionsUrl");
        private static readonly JsonEncodedText propName_language_code = JsonEncodedText.Encode("language_code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetEmojiSuggestionsUrl)tlobj;
            writer.WriteString(propName_language_code, obj.LanguageCode);
        }
    }

    partial class GetSavedAnimationsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getSavedAnimations");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class AddSavedAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addSavedAnimation");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddSavedAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
        }
    }

    partial class RemoveSavedAnimationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeSavedAnimation");
        private static readonly JsonEncodedText propName_animation = JsonEncodedText.Encode("animation");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveSavedAnimation)tlobj;
            if (obj.Animation != null)
            {
                writer.WritePropertyName(propName_animation);
                writer.WriteTLObjectValue(obj.Animation);
            }
        }
    }

    partial class GetRecentInlineBotsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getRecentInlineBots");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SearchHashtagsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchHashtags");
        private static readonly JsonEncodedText propName_prefix = JsonEncodedText.Encode("prefix");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchHashtags)tlobj;
            writer.WriteString(propName_prefix, obj.Prefix);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class RemoveRecentHashtagConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeRecentHashtag");
        private static readonly JsonEncodedText propName_hashtag = JsonEncodedText.Encode("hashtag");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveRecentHashtag)tlobj;
            writer.WriteString(propName_hashtag, obj.Hashtag);
        }
    }

    partial class GetWebPagePreviewConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getWebPagePreview");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetWebPagePreview)tlobj;
            if (obj.Text != null)
            {
                writer.WritePropertyName(propName_text);
                writer.WriteTLObjectValue(obj.Text);
            }
        }
    }

    partial class GetWebPageInstantViewConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getWebPageInstantView");
        private static readonly JsonEncodedText propName_url = JsonEncodedText.Encode("url");
        private static readonly JsonEncodedText propName_force_full = JsonEncodedText.Encode("force_full");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetWebPageInstantView)tlobj;
            writer.WriteString(propName_url, obj.Url);
            writer.WriteBoolean(propName_force_full, obj.ForceFull);
        }
    }

    partial class SetProfilePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setProfilePhoto");
        private static readonly JsonEncodedText propName_photo = JsonEncodedText.Encode("photo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetProfilePhoto)tlobj;
            if (obj.Photo != null)
            {
                writer.WritePropertyName(propName_photo);
                writer.WriteTLObjectValue(obj.Photo);
            }
        }
    }

    partial class DeleteProfilePhotoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteProfilePhoto");
        private static readonly JsonEncodedText propName_profile_photo_id = JsonEncodedText.Encode("profile_photo_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteProfilePhoto)tlobj;
            writer.WritePropertyName(propName_profile_photo_id);
            writer.WriteInt64String(obj.ProfilePhotoId);
        }
    }

    partial class SetNameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setName");
        private static readonly JsonEncodedText propName_first_name = JsonEncodedText.Encode("first_name");
        private static readonly JsonEncodedText propName_last_name = JsonEncodedText.Encode("last_name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetName)tlobj;
            writer.WriteString(propName_first_name, obj.FirstName);
            writer.WriteString(propName_last_name, obj.LastName);
        }
    }

    partial class SetBioConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setBio");
        private static readonly JsonEncodedText propName_bio = JsonEncodedText.Encode("bio");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetBio)tlobj;
            writer.WriteString(propName_bio, obj.Bio);
        }
    }

    partial class SetUsernameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setUsername");
        private static readonly JsonEncodedText propName_username = JsonEncodedText.Encode("username");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetUsername)tlobj;
            writer.WriteString(propName_username, obj.Username);
        }
    }

    partial class SetLocationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setLocation");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetLocation)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
        }
    }

    partial class ChangePhoneNumberConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("changePhoneNumber");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        private static readonly JsonEncodedText propName_settings = JsonEncodedText.Encode("settings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ChangePhoneNumber)tlobj;
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
            if (obj.Settings != null)
            {
                writer.WritePropertyName(propName_settings);
                writer.WriteTLObjectValue(obj.Settings);
            }
        }
    }

    partial class ResendChangePhoneNumberCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("resendChangePhoneNumberCode");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckChangePhoneNumberCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkChangePhoneNumberCode");
        private static readonly JsonEncodedText propName_code = JsonEncodedText.Encode("code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckChangePhoneNumberCode)tlobj;
            writer.WriteString(propName_code, obj.Code);
        }
    }

    partial class SetCommandsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setCommands");
        private static readonly JsonEncodedText propName_commands = JsonEncodedText.Encode("commands");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetCommands)tlobj;
            if (obj.Commands != null)
            {
                writer.WritePropertyName(propName_commands);
                writer.WriteArray(obj.Commands);
            }
        }
    }

    partial class GetActiveSessionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getActiveSessions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TerminateSessionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("terminateSession");
        private static readonly JsonEncodedText propName_session_id = JsonEncodedText.Encode("session_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TerminateSession)tlobj;
            writer.WritePropertyName(propName_session_id);
            writer.WriteInt64String(obj.SessionId);
        }
    }

    partial class TerminateAllOtherSessionsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("terminateAllOtherSessions");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetConnectedWebsitesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getConnectedWebsites");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DisconnectWebsiteConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("disconnectWebsite");
        private static readonly JsonEncodedText propName_website_id = JsonEncodedText.Encode("website_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DisconnectWebsite)tlobj;
            writer.WritePropertyName(propName_website_id);
            writer.WriteInt64String(obj.WebsiteId);
        }
    }

    partial class DisconnectAllWebsitesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("disconnectAllWebsites");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetSupergroupUsernameConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setSupergroupUsername");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        private static readonly JsonEncodedText propName_username = JsonEncodedText.Encode("username");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetSupergroupUsername)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
            writer.WriteString(propName_username, obj.Username);
        }
    }

    partial class SetSupergroupStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setSupergroupStickerSet");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        private static readonly JsonEncodedText propName_sticker_set_id = JsonEncodedText.Encode("sticker_set_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetSupergroupStickerSet)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
            writer.WritePropertyName(propName_sticker_set_id);
            writer.WriteInt64String(obj.StickerSetId);
        }
    }

    partial class ToggleSupergroupSignMessagesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("toggleSupergroupSignMessages");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        private static readonly JsonEncodedText propName_sign_messages = JsonEncodedText.Encode("sign_messages");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleSupergroupSignMessages)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
            writer.WriteBoolean(propName_sign_messages, obj.SignMessages);
        }
    }

    partial class ToggleSupergroupIsAllHistoryAvailableConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("toggleSupergroupIsAllHistoryAvailable");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        private static readonly JsonEncodedText propName_is_all_history_available = JsonEncodedText.Encode("is_all_history_available");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ToggleSupergroupIsAllHistoryAvailable)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
            writer.WriteBoolean(propName_is_all_history_available, obj.IsAllHistoryAvailable);
        }
    }

    partial class ReportSupergroupSpamConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("reportSupergroupSpam");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_message_ids = JsonEncodedText.Encode("message_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReportSupergroupSpam)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(propName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
        }
    }

    partial class GetSupergroupMembersConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getSupergroupMembers");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        private static readonly JsonEncodedText propName_filter = JsonEncodedText.Encode("filter");
        private static readonly JsonEncodedText propName_offset = JsonEncodedText.Encode("offset");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetSupergroupMembers)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
            if (obj.Filter != null)
            {
                writer.WritePropertyName(propName_filter);
                writer.WriteTLObjectValue(obj.Filter);
            }
            writer.WriteNumber(propName_offset, obj.Offset);
            writer.WriteNumber(propName_limit, obj.Limit);
        }
    }

    partial class DeleteSupergroupConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteSupergroup");
        private static readonly JsonEncodedText propName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteSupergroup)tlobj;
            writer.WriteNumber(propName_supergroup_id, obj.SupergroupId);
        }
    }

    partial class CloseSecretChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("closeSecretChat");
        private static readonly JsonEncodedText propName_secret_chat_id = JsonEncodedText.Encode("secret_chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CloseSecretChat)tlobj;
            writer.WriteNumber(propName_secret_chat_id, obj.SecretChatId);
        }
    }

    partial class GetChatEventLogConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatEventLog");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_query = JsonEncodedText.Encode("query");
        private static readonly JsonEncodedText propName_from_event_id = JsonEncodedText.Encode("from_event_id");
        private static readonly JsonEncodedText propName_limit = JsonEncodedText.Encode("limit");
        private static readonly JsonEncodedText propName_filters = JsonEncodedText.Encode("filters");
        private static readonly JsonEncodedText propName_user_ids = JsonEncodedText.Encode("user_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatEventLog)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_query, obj.Query);
            writer.WritePropertyName(propName_from_event_id);
            writer.WriteInt64String(obj.FromEventId);
            writer.WriteNumber(propName_limit, obj.Limit);
            if (obj.Filters != null)
            {
                writer.WritePropertyName(propName_filters);
                writer.WriteTLObjectValue(obj.Filters);
            }
            if (obj.UserIds != null)
            {
                writer.WritePropertyName(propName_user_ids);
                writer.WriteArray(obj.UserIds);
            }
        }
    }

    partial class GetPaymentFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getPaymentForm");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPaymentForm)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class ValidateOrderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("validateOrderInfo");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_order_info = JsonEncodedText.Encode("order_info");
        private static readonly JsonEncodedText propName_allow_save = JsonEncodedText.Encode("allow_save");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ValidateOrderInfo)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            if (obj.OrderInfo != null)
            {
                writer.WritePropertyName(propName_order_info);
                writer.WriteTLObjectValue(obj.OrderInfo);
            }
            writer.WriteBoolean(propName_allow_save, obj.AllowSave);
        }
    }

    partial class SendPaymentFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendPaymentForm");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_order_info_id = JsonEncodedText.Encode("order_info_id");
        private static readonly JsonEncodedText propName_shipping_option_id = JsonEncodedText.Encode("shipping_option_id");
        private static readonly JsonEncodedText propName_credentials = JsonEncodedText.Encode("credentials");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendPaymentForm)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteString(propName_order_info_id, obj.OrderInfoId);
            writer.WriteString(propName_shipping_option_id, obj.ShippingOptionId);
            if (obj.Credentials != null)
            {
                writer.WritePropertyName(propName_credentials);
                writer.WriteTLObjectValue(obj.Credentials);
            }
        }
    }

    partial class GetPaymentReceiptConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getPaymentReceipt");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPaymentReceipt)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
        }
    }

    partial class GetSavedOrderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getSavedOrderInfo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DeleteSavedOrderInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteSavedOrderInfo");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DeleteSavedCredentialsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteSavedCredentials");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetSupportUserConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getSupportUser");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetBackgroundsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getBackgrounds");
        private static readonly JsonEncodedText propName_for_dark_theme = JsonEncodedText.Encode("for_dark_theme");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBackgrounds)tlobj;
            writer.WriteBoolean(propName_for_dark_theme, obj.ForDarkTheme);
        }
    }

    partial class GetBackgroundUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getBackgroundUrl");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBackgroundUrl)tlobj;
            writer.WriteString(propName_name, obj.Name);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class SearchBackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("searchBackground");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SearchBackground)tlobj;
            writer.WriteString(propName_name, obj.Name);
        }
    }

    partial class SetBackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setBackground");
        private static readonly JsonEncodedText propName_background = JsonEncodedText.Encode("background");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_for_dark_theme = JsonEncodedText.Encode("for_dark_theme");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetBackground)tlobj;
            if (obj.Background != null)
            {
                writer.WritePropertyName(propName_background);
                writer.WriteTLObjectValue(obj.Background);
            }
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteBoolean(propName_for_dark_theme, obj.ForDarkTheme);
        }
    }

    partial class RemoveBackgroundConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeBackground");
        private static readonly JsonEncodedText propName_background_id = JsonEncodedText.Encode("background_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveBackground)tlobj;
            writer.WritePropertyName(propName_background_id);
            writer.WriteInt64String(obj.BackgroundId);
        }
    }

    partial class ResetBackgroundsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("resetBackgrounds");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetLocalizationTargetInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getLocalizationTargetInfo");
        private static readonly JsonEncodedText propName_only_local = JsonEncodedText.Encode("only_local");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLocalizationTargetInfo)tlobj;
            writer.WriteBoolean(propName_only_local, obj.OnlyLocal);
        }
    }

    partial class GetLanguagePackInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getLanguagePackInfo");
        private static readonly JsonEncodedText propName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLanguagePackInfo)tlobj;
            writer.WriteString(propName_language_pack_id, obj.LanguagePackId);
        }
    }

    partial class GetLanguagePackStringsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getLanguagePackStrings");
        private static readonly JsonEncodedText propName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
        private static readonly JsonEncodedText propName_keys = JsonEncodedText.Encode("keys");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLanguagePackStrings)tlobj;
            writer.WriteString(propName_language_pack_id, obj.LanguagePackId);
            if (obj.Keys != null)
            {
                writer.WritePropertyName(propName_keys);
                writer.WriteArray(obj.Keys);
            }
        }
    }

    partial class SynchronizeLanguagePackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("synchronizeLanguagePack");
        private static readonly JsonEncodedText propName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SynchronizeLanguagePack)tlobj;
            writer.WriteString(propName_language_pack_id, obj.LanguagePackId);
        }
    }

    partial class AddCustomServerLanguagePackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addCustomServerLanguagePack");
        private static readonly JsonEncodedText propName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddCustomServerLanguagePack)tlobj;
            writer.WriteString(propName_language_pack_id, obj.LanguagePackId);
        }
    }

    partial class SetCustomLanguagePackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setCustomLanguagePack");
        private static readonly JsonEncodedText propName_info = JsonEncodedText.Encode("info");
        private static readonly JsonEncodedText propName_strings = JsonEncodedText.Encode("strings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetCustomLanguagePack)tlobj;
            if (obj.Info != null)
            {
                writer.WritePropertyName(propName_info);
                writer.WriteTLObjectValue(obj.Info);
            }
            if (obj.Strings != null)
            {
                writer.WritePropertyName(propName_strings);
                writer.WriteArray(obj.Strings);
            }
        }
    }

    partial class EditCustomLanguagePackInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editCustomLanguagePackInfo");
        private static readonly JsonEncodedText propName_info = JsonEncodedText.Encode("info");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditCustomLanguagePackInfo)tlobj;
            if (obj.Info != null)
            {
                writer.WritePropertyName(propName_info);
                writer.WriteTLObjectValue(obj.Info);
            }
        }
    }

    partial class SetCustomLanguagePackStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setCustomLanguagePackString");
        private static readonly JsonEncodedText propName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
        private static readonly JsonEncodedText propName_new_string = JsonEncodedText.Encode("new_string");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetCustomLanguagePackString)tlobj;
            writer.WriteString(propName_language_pack_id, obj.LanguagePackId);
            if (obj.NewString != null)
            {
                writer.WritePropertyName(propName_new_string);
                writer.WriteTLObjectValue(obj.NewString);
            }
        }
    }

    partial class DeleteLanguagePackConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteLanguagePack");
        private static readonly JsonEncodedText propName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteLanguagePack)tlobj;
            writer.WriteString(propName_language_pack_id, obj.LanguagePackId);
        }
    }

    partial class RegisterDeviceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("registerDevice");
        private static readonly JsonEncodedText propName_device_token = JsonEncodedText.Encode("device_token");
        private static readonly JsonEncodedText propName_other_user_ids = JsonEncodedText.Encode("other_user_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RegisterDevice)tlobj;
            if (obj.DeviceToken != null)
            {
                writer.WritePropertyName(propName_device_token);
                writer.WriteTLObjectValue(obj.DeviceToken);
            }
            if (obj.OtherUserIds != null)
            {
                writer.WritePropertyName(propName_other_user_ids);
                writer.WriteArray(obj.OtherUserIds);
            }
        }
    }

    partial class ProcessPushNotificationConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("processPushNotification");
        private static readonly JsonEncodedText propName_payload = JsonEncodedText.Encode("payload");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ProcessPushNotification)tlobj;
            writer.WriteString(propName_payload, obj.Payload);
        }
    }

    partial class GetPushReceiverIdConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getPushReceiverId");
        private static readonly JsonEncodedText propName_payload = JsonEncodedText.Encode("payload");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPushReceiverId)tlobj;
            writer.WriteString(propName_payload, obj.Payload);
        }
    }

    partial class GetRecentlyVisitedTMeUrlsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getRecentlyVisitedTMeUrls");
        private static readonly JsonEncodedText propName_referrer = JsonEncodedText.Encode("referrer");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetRecentlyVisitedTMeUrls)tlobj;
            writer.WriteString(propName_referrer, obj.Referrer);
        }
    }

    partial class SetUserPrivacySettingRulesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setUserPrivacySettingRules");
        private static readonly JsonEncodedText propName_setting = JsonEncodedText.Encode("setting");
        private static readonly JsonEncodedText propName_rules = JsonEncodedText.Encode("rules");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetUserPrivacySettingRules)tlobj;
            if (obj.Setting != null)
            {
                writer.WritePropertyName(propName_setting);
                writer.WriteTLObjectValue(obj.Setting);
            }
            if (obj.Rules != null)
            {
                writer.WritePropertyName(propName_rules);
                writer.WriteTLObjectValue(obj.Rules);
            }
        }
    }

    partial class GetUserPrivacySettingRulesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getUserPrivacySettingRules");
        private static readonly JsonEncodedText propName_setting = JsonEncodedText.Encode("setting");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetUserPrivacySettingRules)tlobj;
            if (obj.Setting != null)
            {
                writer.WritePropertyName(propName_setting);
                writer.WriteTLObjectValue(obj.Setting);
            }
        }
    }

    partial class GetOptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getOption");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetOption)tlobj;
            writer.WriteString(propName_name, obj.Name);
        }
    }

    partial class SetOptionConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setOption");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_value = JsonEncodedText.Encode("value");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetOption)tlobj;
            writer.WriteString(propName_name, obj.Name);
            if (obj.Value != null)
            {
                writer.WritePropertyName(propName_value);
                writer.WriteTLObjectValue(obj.Value);
            }
        }
    }

    partial class SetAccountTtlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setAccountTtl");
        private static readonly JsonEncodedText propName_ttl = JsonEncodedText.Encode("ttl");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetAccountTtl)tlobj;
            if (obj.Ttl != null)
            {
                writer.WritePropertyName(propName_ttl);
                writer.WriteTLObjectValue(obj.Ttl);
            }
        }
    }

    partial class GetAccountTtlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getAccountTtl");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class DeleteAccountConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deleteAccount");
        private static readonly JsonEncodedText propName_reason = JsonEncodedText.Encode("reason");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeleteAccount)tlobj;
            writer.WriteString(propName_reason, obj.Reason);
        }
    }

    partial class RemoveChatActionBarConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeChatActionBar");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveChatActionBar)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class ReportChatConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("reportChat");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_reason = JsonEncodedText.Encode("reason");
        private static readonly JsonEncodedText propName_message_ids = JsonEncodedText.Encode("message_ids");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (ReportChat)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.Reason != null)
            {
                writer.WritePropertyName(propName_reason);
                writer.WriteTLObjectValue(obj.Reason);
            }
            if (obj.MessageIds != null)
            {
                writer.WritePropertyName(propName_message_ids);
                writer.WriteArray(obj.MessageIds);
            }
        }
    }

    partial class GetChatStatisticsUrlConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatStatisticsUrl");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_parameters = JsonEncodedText.Encode("parameters");
        private static readonly JsonEncodedText propName_is_dark = JsonEncodedText.Encode("is_dark");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatStatisticsUrl)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_parameters, obj.Parameters);
            writer.WriteBoolean(propName_is_dark, obj.IsDark);
        }
    }

    partial class GetChatStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getChatStatistics");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_is_dark = JsonEncodedText.Encode("is_dark");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetChatStatistics)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteBoolean(propName_is_dark, obj.IsDark);
        }
    }

    partial class GetMessageStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMessageStatistics");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_message_id = JsonEncodedText.Encode("message_id");
        private static readonly JsonEncodedText propName_is_dark = JsonEncodedText.Encode("is_dark");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMessageStatistics)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteNumber(propName_message_id, obj.MessageId);
            writer.WriteBoolean(propName_is_dark, obj.IsDark);
        }
    }

    partial class GetStatisticsGraphConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getStatisticsGraph");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_token = JsonEncodedText.Encode("token");
        private static readonly JsonEncodedText propName_x = JsonEncodedText.Encode("x");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetStatisticsGraph)tlobj;
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            writer.WriteString(propName_token, obj.Token);
            writer.WriteNumber(propName_x, obj.X);
        }
    }

    partial class GetStorageStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getStorageStatistics");
        private static readonly JsonEncodedText propName_chat_limit = JsonEncodedText.Encode("chat_limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetStorageStatistics)tlobj;
            writer.WriteNumber(propName_chat_limit, obj.ChatLimit);
        }
    }

    partial class GetStorageStatisticsFastConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getStorageStatisticsFast");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetDatabaseStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getDatabaseStatistics");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class OptimizeStorageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("optimizeStorage");
        private static readonly JsonEncodedText propName_size = JsonEncodedText.Encode("size");
        private static readonly JsonEncodedText propName_ttl = JsonEncodedText.Encode("ttl");
        private static readonly JsonEncodedText propName_count = JsonEncodedText.Encode("count");
        private static readonly JsonEncodedText propName_immunity_delay = JsonEncodedText.Encode("immunity_delay");
        private static readonly JsonEncodedText propName_file_types = JsonEncodedText.Encode("file_types");
        private static readonly JsonEncodedText propName_chat_ids = JsonEncodedText.Encode("chat_ids");
        private static readonly JsonEncodedText propName_exclude_chat_ids = JsonEncodedText.Encode("exclude_chat_ids");
        private static readonly JsonEncodedText propName_return_deleted_file_statistics = JsonEncodedText.Encode("return_deleted_file_statistics");
        private static readonly JsonEncodedText propName_chat_limit = JsonEncodedText.Encode("chat_limit");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (OptimizeStorage)tlobj;
            writer.WriteNumber(propName_size, obj.Size);
            writer.WriteNumber(propName_ttl, obj.Ttl);
            writer.WriteNumber(propName_count, obj.Count);
            writer.WriteNumber(propName_immunity_delay, obj.ImmunityDelay);
            if (obj.FileTypes != null)
            {
                writer.WritePropertyName(propName_file_types);
                writer.WriteArray(obj.FileTypes);
            }
            if (obj.ChatIds != null)
            {
                writer.WritePropertyName(propName_chat_ids);
                writer.WriteArray(obj.ChatIds);
            }
            if (obj.ExcludeChatIds != null)
            {
                writer.WritePropertyName(propName_exclude_chat_ids);
                writer.WriteArray(obj.ExcludeChatIds);
            }
            writer.WriteBoolean(propName_return_deleted_file_statistics, obj.ReturnDeletedFileStatistics);
            writer.WriteNumber(propName_chat_limit, obj.ChatLimit);
        }
    }

    partial class SetNetworkTypeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setNetworkType");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetNetworkType)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class GetNetworkStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getNetworkStatistics");
        private static readonly JsonEncodedText propName_only_current = JsonEncodedText.Encode("only_current");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetNetworkStatistics)tlobj;
            writer.WriteBoolean(propName_only_current, obj.OnlyCurrent);
        }
    }

    partial class AddNetworkStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addNetworkStatistics");
        private static readonly JsonEncodedText propName_entry = JsonEncodedText.Encode("entry");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddNetworkStatistics)tlobj;
            if (obj.Entry != null)
            {
                writer.WritePropertyName(propName_entry);
                writer.WriteTLObjectValue(obj.Entry);
            }
        }
    }

    partial class ResetNetworkStatisticsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("resetNetworkStatistics");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetAutoDownloadSettingsPresetsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getAutoDownloadSettingsPresets");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetAutoDownloadSettingsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setAutoDownloadSettings");
        private static readonly JsonEncodedText propName_settings = JsonEncodedText.Encode("settings");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetAutoDownloadSettings)tlobj;
            if (obj.Settings != null)
            {
                writer.WritePropertyName(propName_settings);
                writer.WriteTLObjectValue(obj.Settings);
            }
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class GetBankCardInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getBankCardInfo");
        private static readonly JsonEncodedText propName_bank_card_number = JsonEncodedText.Encode("bank_card_number");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetBankCardInfo)tlobj;
            writer.WriteString(propName_bank_card_number, obj.BankCardNumber);
        }
    }

    partial class GetPassportElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getPassportElement");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPassportElement)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteString(propName_password, obj.Password);
        }
    }

    partial class GetAllPassportElementsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getAllPassportElements");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetAllPassportElements)tlobj;
            writer.WriteString(propName_password, obj.Password);
        }
    }

    partial class SetPassportElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setPassportElement");
        private static readonly JsonEncodedText propName_element = JsonEncodedText.Encode("element");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetPassportElement)tlobj;
            if (obj.Element != null)
            {
                writer.WritePropertyName(propName_element);
                writer.WriteTLObjectValue(obj.Element);
            }
            writer.WriteString(propName_password, obj.Password);
        }
    }

    partial class DeletePassportElementConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("deletePassportElement");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (DeletePassportElement)tlobj;
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class SetPassportElementErrorsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setPassportElementErrors");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_errors = JsonEncodedText.Encode("errors");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetPassportElementErrors)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.Errors != null)
            {
                writer.WritePropertyName(propName_errors);
                writer.WriteArray(obj.Errors);
            }
        }
    }

    partial class GetPreferredCountryLanguageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getPreferredCountryLanguage");
        private static readonly JsonEncodedText propName_country_code = JsonEncodedText.Encode("country_code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPreferredCountryLanguage)tlobj;
            writer.WriteString(propName_country_code, obj.CountryCode);
        }
    }

    partial class SendPhoneNumberVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendPhoneNumberVerificationCode");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        private static readonly JsonEncodedText propName_settings = JsonEncodedText.Encode("settings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendPhoneNumberVerificationCode)tlobj;
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
            if (obj.Settings != null)
            {
                writer.WritePropertyName(propName_settings);
                writer.WriteTLObjectValue(obj.Settings);
            }
        }
    }

    partial class ResendPhoneNumberVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("resendPhoneNumberVerificationCode");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckPhoneNumberVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkPhoneNumberVerificationCode");
        private static readonly JsonEncodedText propName_code = JsonEncodedText.Encode("code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckPhoneNumberVerificationCode)tlobj;
            writer.WriteString(propName_code, obj.Code);
        }
    }

    partial class SendEmailAddressVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendEmailAddressVerificationCode");
        private static readonly JsonEncodedText propName_email_address = JsonEncodedText.Encode("email_address");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendEmailAddressVerificationCode)tlobj;
            writer.WriteString(propName_email_address, obj.EmailAddress);
        }
    }

    partial class ResendEmailAddressVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("resendEmailAddressVerificationCode");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckEmailAddressVerificationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkEmailAddressVerificationCode");
        private static readonly JsonEncodedText propName_code = JsonEncodedText.Encode("code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckEmailAddressVerificationCode)tlobj;
            writer.WriteString(propName_code, obj.Code);
        }
    }

    partial class GetPassportAuthorizationFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getPassportAuthorizationForm");
        private static readonly JsonEncodedText propName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
        private static readonly JsonEncodedText propName_scope = JsonEncodedText.Encode("scope");
        private static readonly JsonEncodedText propName_public_key = JsonEncodedText.Encode("public_key");
        private static readonly JsonEncodedText propName_nonce = JsonEncodedText.Encode("nonce");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPassportAuthorizationForm)tlobj;
            writer.WriteNumber(propName_bot_user_id, obj.BotUserId);
            writer.WriteString(propName_scope, obj.Scope);
            writer.WriteString(propName_public_key, obj.PublicKey);
            writer.WriteString(propName_nonce, obj.Nonce);
        }
    }

    partial class GetPassportAuthorizationFormAvailableElementsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getPassportAuthorizationFormAvailableElements");
        private static readonly JsonEncodedText propName_autorization_form_id = JsonEncodedText.Encode("autorization_form_id");
        private static readonly JsonEncodedText propName_password = JsonEncodedText.Encode("password");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPassportAuthorizationFormAvailableElements)tlobj;
            writer.WriteNumber(propName_autorization_form_id, obj.AutorizationFormId);
            writer.WriteString(propName_password, obj.Password);
        }
    }

    partial class SendPassportAuthorizationFormConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendPassportAuthorizationForm");
        private static readonly JsonEncodedText propName_autorization_form_id = JsonEncodedText.Encode("autorization_form_id");
        private static readonly JsonEncodedText propName_types = JsonEncodedText.Encode("types");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendPassportAuthorizationForm)tlobj;
            writer.WriteNumber(propName_autorization_form_id, obj.AutorizationFormId);
            if (obj.Types != null)
            {
                writer.WritePropertyName(propName_types);
                writer.WriteArray(obj.Types);
            }
        }
    }

    partial class SendPhoneNumberConfirmationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendPhoneNumberConfirmationCode");
        private static readonly JsonEncodedText propName_hash = JsonEncodedText.Encode("hash");
        private static readonly JsonEncodedText propName_phone_number = JsonEncodedText.Encode("phone_number");
        private static readonly JsonEncodedText propName_settings = JsonEncodedText.Encode("settings");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendPhoneNumberConfirmationCode)tlobj;
            writer.WriteString(propName_hash, obj.Hash);
            writer.WriteString(propName_phone_number, obj.PhoneNumber);
            if (obj.Settings != null)
            {
                writer.WritePropertyName(propName_settings);
                writer.WriteTLObjectValue(obj.Settings);
            }
        }
    }

    partial class ResendPhoneNumberConfirmationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("resendPhoneNumberConfirmationCode");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class CheckPhoneNumberConfirmationCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("checkPhoneNumberConfirmationCode");
        private static readonly JsonEncodedText propName_code = JsonEncodedText.Encode("code");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CheckPhoneNumberConfirmationCode)tlobj;
            writer.WriteString(propName_code, obj.Code);
        }
    }

    partial class SetBotUpdatesStatusConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setBotUpdatesStatus");
        private static readonly JsonEncodedText propName_pending_update_count = JsonEncodedText.Encode("pending_update_count");
        private static readonly JsonEncodedText propName_error_message = JsonEncodedText.Encode("error_message");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetBotUpdatesStatus)tlobj;
            writer.WriteNumber(propName_pending_update_count, obj.PendingUpdateCount);
            writer.WriteString(propName_error_message, obj.ErrorMessage);
        }
    }

    partial class UploadStickerFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("uploadStickerFile");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_png_sticker = JsonEncodedText.Encode("png_sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (UploadStickerFile)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            if (obj.PngSticker != null)
            {
                writer.WritePropertyName(propName_png_sticker);
                writer.WriteTLObjectValue(obj.PngSticker);
            }
        }
    }

    partial class CreateNewStickerSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("createNewStickerSet");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_title = JsonEncodedText.Encode("title");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_is_masks = JsonEncodedText.Encode("is_masks");
        private static readonly JsonEncodedText propName_stickers = JsonEncodedText.Encode("stickers");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (CreateNewStickerSet)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteString(propName_title, obj.Title);
            writer.WriteString(propName_name, obj.Name);
            writer.WriteBoolean(propName_is_masks, obj.IsMasks);
            if (obj.Stickers != null)
            {
                writer.WritePropertyName(propName_stickers);
                writer.WriteArray(obj.Stickers);
            }
        }
    }

    partial class AddStickerToSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addStickerToSet");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddStickerToSet)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteString(propName_name, obj.Name);
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class SetStickerSetThumbnailConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setStickerSetThumbnail");
        private static readonly JsonEncodedText propName_user_id = JsonEncodedText.Encode("user_id");
        private static readonly JsonEncodedText propName_name = JsonEncodedText.Encode("name");
        private static readonly JsonEncodedText propName_thumbnail = JsonEncodedText.Encode("thumbnail");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetStickerSetThumbnail)tlobj;
            writer.WriteNumber(propName_user_id, obj.UserId);
            writer.WriteString(propName_name, obj.Name);
            if (obj.Thumbnail != null)
            {
                writer.WritePropertyName(propName_thumbnail);
                writer.WriteTLObjectValue(obj.Thumbnail);
            }
        }
    }

    partial class SetStickerPositionInSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setStickerPositionInSet");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        private static readonly JsonEncodedText propName_position = JsonEncodedText.Encode("position");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetStickerPositionInSet)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
            writer.WriteNumber(propName_position, obj.Position);
        }
    }

    partial class RemoveStickerFromSetConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeStickerFromSet");
        private static readonly JsonEncodedText propName_sticker = JsonEncodedText.Encode("sticker");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveStickerFromSet)tlobj;
            if (obj.Sticker != null)
            {
                writer.WritePropertyName(propName_sticker);
                writer.WriteTLObjectValue(obj.Sticker);
            }
        }
    }

    partial class GetMapThumbnailFileConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getMapThumbnailFile");
        private static readonly JsonEncodedText propName_location = JsonEncodedText.Encode("location");
        private static readonly JsonEncodedText propName_zoom = JsonEncodedText.Encode("zoom");
        private static readonly JsonEncodedText propName_width = JsonEncodedText.Encode("width");
        private static readonly JsonEncodedText propName_height = JsonEncodedText.Encode("height");
        private static readonly JsonEncodedText propName_scale = JsonEncodedText.Encode("scale");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetMapThumbnailFile)tlobj;
            if (obj.Location != null)
            {
                writer.WritePropertyName(propName_location);
                writer.WriteTLObjectValue(obj.Location);
            }
            writer.WriteNumber(propName_zoom, obj.Zoom);
            writer.WriteNumber(propName_width, obj.Width);
            writer.WriteNumber(propName_height, obj.Height);
            writer.WriteNumber(propName_scale, obj.Scale);
            writer.WriteNumber(propName_chat_id, obj.ChatId);
        }
    }

    partial class AcceptTermsOfServiceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("acceptTermsOfService");
        private static readonly JsonEncodedText propName_terms_of_service_id = JsonEncodedText.Encode("terms_of_service_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AcceptTermsOfService)tlobj;
            writer.WriteString(propName_terms_of_service_id, obj.TermsOfServiceId);
        }
    }

    partial class SendCustomRequestConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("sendCustomRequest");
        private static readonly JsonEncodedText propName_method = JsonEncodedText.Encode("method");
        private static readonly JsonEncodedText propName_parameters = JsonEncodedText.Encode("parameters");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SendCustomRequest)tlobj;
            writer.WriteString(propName_method, obj.Method);
            writer.WriteString(propName_parameters, obj.Parameters);
        }
    }

    partial class AnswerCustomQueryConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("answerCustomQuery");
        private static readonly JsonEncodedText propName_custom_query_id = JsonEncodedText.Encode("custom_query_id");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AnswerCustomQuery)tlobj;
            writer.WritePropertyName(propName_custom_query_id);
            writer.WriteInt64String(obj.CustomQueryId);
            writer.WriteString(propName_data, obj.Data);
        }
    }

    partial class SetAlarmConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setAlarm");
        private static readonly JsonEncodedText propName_seconds = JsonEncodedText.Encode("seconds");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetAlarm)tlobj;
            writer.WriteNumber(propName_seconds, obj.Seconds);
        }
    }

    partial class GetCountriesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getCountries");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetCountryCodeConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getCountryCode");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetPhoneNumberInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getPhoneNumberInfo");
        private static readonly JsonEncodedText propName_phone_number_prefix = JsonEncodedText.Encode("phone_number_prefix");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetPhoneNumberInfo)tlobj;
            writer.WriteString(propName_phone_number_prefix, obj.PhoneNumberPrefix);
        }
    }

    partial class GetInviteTextConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getInviteText");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetDeepLinkInfoConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getDeepLinkInfo");
        private static readonly JsonEncodedText propName_link = JsonEncodedText.Encode("link");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetDeepLinkInfo)tlobj;
            writer.WriteString(propName_link, obj.Link);
        }
    }

    partial class GetApplicationConfigConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getApplicationConfig");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SaveApplicationLogEventConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("saveApplicationLogEvent");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_chat_id = JsonEncodedText.Encode("chat_id");
        private static readonly JsonEncodedText propName_data = JsonEncodedText.Encode("data");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SaveApplicationLogEvent)tlobj;
            writer.WriteString(propName_type, obj.Type);
            writer.WriteNumber(propName_chat_id, obj.ChatId);
            if (obj.Data != null)
            {
                writer.WritePropertyName(propName_data);
                writer.WriteTLObjectValue(obj.Data);
            }
        }
    }

    partial class AddProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addProxy");
        private static readonly JsonEncodedText propName_server = JsonEncodedText.Encode("server");
        private static readonly JsonEncodedText propName_port = JsonEncodedText.Encode("port");
        private static readonly JsonEncodedText propName_enable = JsonEncodedText.Encode("enable");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddProxy)tlobj;
            writer.WriteString(propName_server, obj.Server);
            writer.WriteNumber(propName_port, obj.Port);
            writer.WriteBoolean(propName_enable, obj.Enable);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class EditProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("editProxy");
        private static readonly JsonEncodedText propName_proxy_id = JsonEncodedText.Encode("proxy_id");
        private static readonly JsonEncodedText propName_server = JsonEncodedText.Encode("server");
        private static readonly JsonEncodedText propName_port = JsonEncodedText.Encode("port");
        private static readonly JsonEncodedText propName_enable = JsonEncodedText.Encode("enable");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EditProxy)tlobj;
            writer.WriteNumber(propName_proxy_id, obj.ProxyId);
            writer.WriteString(propName_server, obj.Server);
            writer.WriteNumber(propName_port, obj.Port);
            writer.WriteBoolean(propName_enable, obj.Enable);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
        }
    }

    partial class EnableProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("enableProxy");
        private static readonly JsonEncodedText propName_proxy_id = JsonEncodedText.Encode("proxy_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (EnableProxy)tlobj;
            writer.WriteNumber(propName_proxy_id, obj.ProxyId);
        }
    }

    partial class DisableProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("disableProxy");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class RemoveProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("removeProxy");
        private static readonly JsonEncodedText propName_proxy_id = JsonEncodedText.Encode("proxy_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (RemoveProxy)tlobj;
            writer.WriteNumber(propName_proxy_id, obj.ProxyId);
        }
    }

    partial class GetProxiesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getProxies");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetProxyLinkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getProxyLink");
        private static readonly JsonEncodedText propName_proxy_id = JsonEncodedText.Encode("proxy_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetProxyLink)tlobj;
            writer.WriteNumber(propName_proxy_id, obj.ProxyId);
        }
    }

    partial class PingProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("pingProxy");
        private static readonly JsonEncodedText propName_proxy_id = JsonEncodedText.Encode("proxy_id");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (PingProxy)tlobj;
            writer.WriteNumber(propName_proxy_id, obj.ProxyId);
        }
    }

    partial class SetLogStreamConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setLogStream");
        private static readonly JsonEncodedText propName_log_stream = JsonEncodedText.Encode("log_stream");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetLogStream)tlobj;
            if (obj.LogStream != null)
            {
                writer.WritePropertyName(propName_log_stream);
                writer.WriteTLObjectValue(obj.LogStream);
            }
        }
    }

    partial class GetLogStreamConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getLogStream");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetLogVerbosityLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setLogVerbosityLevel");
        private static readonly JsonEncodedText propName_new_verbosity_level = JsonEncodedText.Encode("new_verbosity_level");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetLogVerbosityLevel)tlobj;
            writer.WriteNumber(propName_new_verbosity_level, obj.NewVerbosityLevel);
        }
    }

    partial class GetLogVerbosityLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getLogVerbosityLevel");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class GetLogTagsConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getLogTags");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class SetLogTagVerbosityLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("setLogTagVerbosityLevel");
        private static readonly JsonEncodedText propName_tag = JsonEncodedText.Encode("tag");
        private static readonly JsonEncodedText propName_new_verbosity_level = JsonEncodedText.Encode("new_verbosity_level");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (SetLogTagVerbosityLevel)tlobj;
            writer.WriteString(propName_tag, obj.Tag);
            writer.WriteNumber(propName_new_verbosity_level, obj.NewVerbosityLevel);
        }
    }

    partial class GetLogTagVerbosityLevelConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("getLogTagVerbosityLevel");
        private static readonly JsonEncodedText propName_tag = JsonEncodedText.Encode("tag");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (GetLogTagVerbosityLevel)tlobj;
            writer.WriteString(propName_tag, obj.Tag);
        }
    }

    partial class AddLogMessageConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("addLogMessage");
        private static readonly JsonEncodedText propName_verbosity_level = JsonEncodedText.Encode("verbosity_level");
        private static readonly JsonEncodedText propName_text = JsonEncodedText.Encode("text");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (AddLogMessage)tlobj;
            writer.WriteNumber(propName_verbosity_level, obj.VerbosityLevel);
            writer.WriteString(propName_text, obj.Text);
        }
    }

    partial class TestCallEmptyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testCallEmpty");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TestCallStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testCallString");
        private static readonly JsonEncodedText propName_x = JsonEncodedText.Encode("x");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallString)tlobj;
            writer.WriteString(propName_x, obj.X);
        }
    }

    partial class TestCallBytesConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testCallBytes");
        private static readonly JsonEncodedText propName_x = JsonEncodedText.Encode("x");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallBytes)tlobj;
            if (obj.X != null)
            {
                writer.WriteBase64String(propName_x, obj.X);
            }
        }
    }

    partial class TestCallVectorIntConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testCallVectorInt");
        private static readonly JsonEncodedText propName_x = JsonEncodedText.Encode("x");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallVectorInt)tlobj;
            if (obj.X != null)
            {
                writer.WritePropertyName(propName_x);
                writer.WriteArray(obj.X);
            }
        }
    }

    partial class TestCallVectorIntObjectConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testCallVectorIntObject");
        private static readonly JsonEncodedText propName_x = JsonEncodedText.Encode("x");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallVectorIntObject)tlobj;
            if (obj.X != null)
            {
                writer.WritePropertyName(propName_x);
                writer.WriteArray(obj.X);
            }
        }
    }

    partial class TestCallVectorStringConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testCallVectorString");
        private static readonly JsonEncodedText propName_x = JsonEncodedText.Encode("x");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallVectorString)tlobj;
            if (obj.X != null)
            {
                writer.WritePropertyName(propName_x);
                writer.WriteArray(obj.X);
            }
        }
    }

    partial class TestCallVectorStringObjectConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testCallVectorStringObject");
        private static readonly JsonEncodedText propName_x = JsonEncodedText.Encode("x");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestCallVectorStringObject)tlobj;
            if (obj.X != null)
            {
                writer.WritePropertyName(propName_x);
                writer.WriteArray(obj.X);
            }
        }
    }

    partial class TestSquareIntConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testSquareInt");
        private static readonly JsonEncodedText propName_x = JsonEncodedText.Encode("x");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestSquareInt)tlobj;
            writer.WriteNumber(propName_x, obj.X);
        }
    }

    partial class TestNetworkConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testNetwork");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TestProxyConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testProxy");
        private static readonly JsonEncodedText propName_server = JsonEncodedText.Encode("server");
        private static readonly JsonEncodedText propName_port = JsonEncodedText.Encode("port");
        private static readonly JsonEncodedText propName_type = JsonEncodedText.Encode("type");
        private static readonly JsonEncodedText propName_dc_id = JsonEncodedText.Encode("dc_id");
        private static readonly JsonEncodedText propName_timeout = JsonEncodedText.Encode("timeout");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestProxy)tlobj;
            writer.WriteString(propName_server, obj.Server);
            writer.WriteNumber(propName_port, obj.Port);
            if (obj.Type != null)
            {
                writer.WritePropertyName(propName_type);
                writer.WriteTLObjectValue(obj.Type);
            }
            writer.WriteNumber(propName_dc_id, obj.DcId);
            writer.WriteNumber(propName_timeout, obj.Timeout);
        }
    }

    partial class TestGetDifferenceConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testGetDifference");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TestUseUpdateConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testUseUpdate");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
        }
    }

    partial class TestReturnErrorConverter
    {
        private static readonly JsonEncodedText jsonTypeName = JsonEncodedText.Encode("testReturnError");
        private static readonly JsonEncodedText propName_error = JsonEncodedText.Encode("error");
        public override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
        {
            writer.WriteStartObject();
            writer.WriteString(TdJsonWriter.TypePropertyName, jsonTypeName);
            var obj = (TestReturnError)tlobj;
            if (obj.Error != null)
            {
                writer.WritePropertyName(propName_error);
                writer.WriteTLObjectValue(obj.Error);
            }
        }
    }

}
