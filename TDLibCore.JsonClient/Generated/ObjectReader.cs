// generated by codegen/genreader.rb
using System;
using System.Text.Json;
using TDLibCore.Api;

namespace TDLibCore.JsonClient.ObjectConverter
{
    [TLType("error")]
    partial class ErrorConverter : TLObjectConverter<Error>
    {
        public static BaseConverter CreateConverterInstance() => new ErrorConverter();
        public override TLObject CreateObjectInstance() => new Error();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Error)tlobj;
            if (name.SequenceEqual(propName_code))
            {
                obj.Code = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_message))
            {
                obj.Message = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("ok")]
    partial class OkConverter : TLObjectConverter<Ok>
    {
        public static BaseConverter CreateConverterInstance() => new OkConverter();
        public override TLObject CreateObjectInstance() => new Ok();
    }

    [TLType("tdlibParameters")]
    partial class TdlibParametersConverter : TLObjectConverter<TdlibParameters>
    {
        public static BaseConverter CreateConverterInstance() => new TdlibParametersConverter();
        public override TLObject CreateObjectInstance() => new TdlibParameters();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TdlibParameters)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x1D421803u when name.SequenceEqual(propName_use_test_dc):
                    obj.UseTestDc = reader.ReadBool();
                    return true;
                case 0x48D7F0E8u when name.SequenceEqual(propName_database_directory):
                    obj.DatabaseDirectory = reader.ReadString();
                    return true;
                case 0xFB48CE80u when name.SequenceEqual(propName_files_directory):
                    obj.FilesDirectory = reader.ReadString();
                    return true;
                case 0x13D44325u when name.SequenceEqual(propName_use_file_database):
                    obj.UseFileDatabase = reader.ReadBool();
                    return true;
                case 0x5B4622A4u when name.SequenceEqual(propName_use_chat_info_database):
                    obj.UseChatInfoDatabase = reader.ReadBool();
                    return true;
                case 0xA0BFE868u when name.SequenceEqual(propName_use_message_database):
                    obj.UseMessageDatabase = reader.ReadBool();
                    return true;
                case 0xFD76A729u when name.SequenceEqual(propName_use_secret_chats):
                    obj.UseSecretChats = reader.ReadBool();
                    return true;
                case 0x45A1DC75u when name.SequenceEqual(propName_api_id):
                    obj.ApiId = reader.ReadInt();
                    return true;
                case 0xD1FDE798u when name.SequenceEqual(propName_api_hash):
                    obj.ApiHash = reader.ReadString();
                    return true;
                case 0x67AFF225u when name.SequenceEqual(propName_system_language_code):
                    obj.SystemLanguageCode = reader.ReadString();
                    return true;
                case 0xB398D2B1u when name.SequenceEqual(propName_device_model):
                    obj.DeviceModel = reader.ReadString();
                    return true;
                case 0xC8C94F83u when name.SequenceEqual(propName_system_version):
                    obj.SystemVersion = reader.ReadString();
                    return true;
                case 0xE6576A12u when name.SequenceEqual(propName_application_version):
                    obj.ApplicationVersion = reader.ReadString();
                    return true;
                case 0x06FD1CCCu when name.SequenceEqual(propName_enable_storage_optimizer):
                    obj.EnableStorageOptimizer = reader.ReadBool();
                    return true;
                case 0xD6CECD95u when name.SequenceEqual(propName_ignore_file_names):
                    obj.IgnoreFileNames = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("authenticationCodeTypeTelegramMessage")]
    partial class AuthenticationCodeTypeTelegramMessageConverter : TLObjectConverter<AuthenticationCodeTypeTelegramMessage>
    {
        public static BaseConverter CreateConverterInstance() => new AuthenticationCodeTypeTelegramMessageConverter();
        public override TLObject CreateObjectInstance() => new AuthenticationCodeTypeTelegramMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AuthenticationCodeTypeTelegramMessage)tlobj;
            if (name.SequenceEqual(propName_length))
            {
                obj.Length = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("authenticationCodeTypeSms")]
    partial class AuthenticationCodeTypeSmsConverter : TLObjectConverter<AuthenticationCodeTypeSms>
    {
        public static BaseConverter CreateConverterInstance() => new AuthenticationCodeTypeSmsConverter();
        public override TLObject CreateObjectInstance() => new AuthenticationCodeTypeSms();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AuthenticationCodeTypeSms)tlobj;
            if (name.SequenceEqual(propName_length))
            {
                obj.Length = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("authenticationCodeTypeCall")]
    partial class AuthenticationCodeTypeCallConverter : TLObjectConverter<AuthenticationCodeTypeCall>
    {
        public static BaseConverter CreateConverterInstance() => new AuthenticationCodeTypeCallConverter();
        public override TLObject CreateObjectInstance() => new AuthenticationCodeTypeCall();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AuthenticationCodeTypeCall)tlobj;
            if (name.SequenceEqual(propName_length))
            {
                obj.Length = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("authenticationCodeTypeFlashCall")]
    partial class AuthenticationCodeTypeFlashCallConverter : TLObjectConverter<AuthenticationCodeTypeFlashCall>
    {
        public static BaseConverter CreateConverterInstance() => new AuthenticationCodeTypeFlashCallConverter();
        public override TLObject CreateObjectInstance() => new AuthenticationCodeTypeFlashCall();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AuthenticationCodeTypeFlashCall)tlobj;
            if (name.SequenceEqual(propName_pattern))
            {
                obj.Pattern = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("authenticationCodeInfo")]
    partial class AuthenticationCodeInfoConverter : TLObjectConverter<AuthenticationCodeInfo>
    {
        public static BaseConverter CreateConverterInstance() => new AuthenticationCodeInfoConverter();
        public override TLObject CreateObjectInstance() => new AuthenticationCodeInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AuthenticationCodeInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x56E140E1u when name.SequenceEqual(propName_phone_number):
                    obj.PhoneNumber = reader.ReadString();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<AuthenticationCodeType>();
                    return true;
                case 0xF484993Du when name.SequenceEqual(propName_next_type):
                    obj.NextType = reader.ReadTLObject<AuthenticationCodeType>();
                    return true;
                case 0x97F68388u when name.SequenceEqual(propName_timeout):
                    obj.Timeout = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("emailAddressAuthenticationCodeInfo")]
    partial class EmailAddressAuthenticationCodeInfoConverter : TLObjectConverter<EmailAddressAuthenticationCodeInfo>
    {
        public static BaseConverter CreateConverterInstance() => new EmailAddressAuthenticationCodeInfoConverter();
        public override TLObject CreateObjectInstance() => new EmailAddressAuthenticationCodeInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EmailAddressAuthenticationCodeInfo)tlobj;
            if (name.SequenceEqual(propName_email_address_pattern))
            {
                obj.EmailAddressPattern = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_length))
            {
                obj.Length = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("textEntity")]
    partial class TextEntityConverter : TLObjectConverter<TextEntity>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityConverter();
        public override TLObject CreateObjectInstance() => new TextEntity();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TextEntity)tlobj;
            if (name.SequenceEqual(propName_offset))
            {
                obj.Offset = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_length))
            {
                obj.Length = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<TextEntityType>();
                return true;
            }
            return false;
        }
    }

    [TLType("textEntities")]
    partial class TextEntitiesConverter : TLObjectConverter<TextEntities>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntitiesConverter();
        public override TLObject CreateObjectInstance() => new TextEntities();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TextEntities)tlobj;
            if (name.SequenceEqual(propName_entities))
            {
                obj.Entities = reader.ReadObjectArray<TextEntity>();
                return true;
            }
            return false;
        }
    }

    [TLType("formattedText")]
    partial class FormattedTextConverter : TLObjectConverter<FormattedText>
    {
        public static BaseConverter CreateConverterInstance() => new FormattedTextConverter();
        public override TLObject CreateObjectInstance() => new FormattedText();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (FormattedText)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_entities))
            {
                obj.Entities = reader.ReadObjectArray<TextEntity>();
                return true;
            }
            return false;
        }
    }

    [TLType("termsOfService")]
    partial class TermsOfServiceConverter : TLObjectConverter<TermsOfService>
    {
        public static BaseConverter CreateConverterInstance() => new TermsOfServiceConverter();
        public override TLObject CreateObjectInstance() => new TermsOfService();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TermsOfService)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<FormattedText>();
                return true;
            }
            if (name.SequenceEqual(propName_min_user_age))
            {
                obj.MinUserAge = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_show_popup))
            {
                obj.ShowPopup = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("authorizationStateWaitTdlibParameters")]
    partial class AuthorizationStateWaitTdlibParametersConverter : TLObjectConverter<AuthorizationStateWaitTdlibParameters>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateWaitTdlibParametersConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateWaitTdlibParameters();
    }

    [TLType("authorizationStateWaitEncryptionKey")]
    partial class AuthorizationStateWaitEncryptionKeyConverter : TLObjectConverter<AuthorizationStateWaitEncryptionKey>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateWaitEncryptionKeyConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateWaitEncryptionKey();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AuthorizationStateWaitEncryptionKey)tlobj;
            if (name.SequenceEqual(propName_is_encrypted))
            {
                obj.IsEncrypted = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("authorizationStateWaitPhoneNumber")]
    partial class AuthorizationStateWaitPhoneNumberConverter : TLObjectConverter<AuthorizationStateWaitPhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateWaitPhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateWaitPhoneNumber();
    }

    [TLType("authorizationStateWaitCode")]
    partial class AuthorizationStateWaitCodeConverter : TLObjectConverter<AuthorizationStateWaitCode>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateWaitCodeConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateWaitCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AuthorizationStateWaitCode)tlobj;
            if (name.SequenceEqual(propName_code_info))
            {
                obj.CodeInfo = reader.ReadTLObject<AuthenticationCodeInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("authorizationStateWaitOtherDeviceConfirmation")]
    partial class AuthorizationStateWaitOtherDeviceConfirmationConverter : TLObjectConverter<AuthorizationStateWaitOtherDeviceConfirmation>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateWaitOtherDeviceConfirmationConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateWaitOtherDeviceConfirmation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AuthorizationStateWaitOtherDeviceConfirmation)tlobj;
            if (name.SequenceEqual(propName_link))
            {
                obj.Link = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("authorizationStateWaitRegistration")]
    partial class AuthorizationStateWaitRegistrationConverter : TLObjectConverter<AuthorizationStateWaitRegistration>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateWaitRegistrationConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateWaitRegistration();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AuthorizationStateWaitRegistration)tlobj;
            if (name.SequenceEqual(propName_terms_of_service))
            {
                obj.TermsOfService = reader.ReadTLObject<TermsOfService>();
                return true;
            }
            return false;
        }
    }

    [TLType("authorizationStateWaitPassword")]
    partial class AuthorizationStateWaitPasswordConverter : TLObjectConverter<AuthorizationStateWaitPassword>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateWaitPasswordConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateWaitPassword();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AuthorizationStateWaitPassword)tlobj;
            if (name.SequenceEqual(propName_password_hint))
            {
                obj.PasswordHint = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_has_recovery_email_address))
            {
                obj.HasRecoveryEmailAddress = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_recovery_email_address_pattern))
            {
                obj.RecoveryEmailAddressPattern = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("authorizationStateReady")]
    partial class AuthorizationStateReadyConverter : TLObjectConverter<AuthorizationStateReady>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateReadyConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateReady();
    }

    [TLType("authorizationStateLoggingOut")]
    partial class AuthorizationStateLoggingOutConverter : TLObjectConverter<AuthorizationStateLoggingOut>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateLoggingOutConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateLoggingOut();
    }

    [TLType("authorizationStateClosing")]
    partial class AuthorizationStateClosingConverter : TLObjectConverter<AuthorizationStateClosing>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateClosingConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateClosing();
    }

    [TLType("authorizationStateClosed")]
    partial class AuthorizationStateClosedConverter : TLObjectConverter<AuthorizationStateClosed>
    {
        public static BaseConverter CreateConverterInstance() => new AuthorizationStateClosedConverter();
        public override TLObject CreateObjectInstance() => new AuthorizationStateClosed();
    }

    [TLType("passwordState")]
    partial class PasswordStateConverter : TLObjectConverter<PasswordState>
    {
        public static BaseConverter CreateConverterInstance() => new PasswordStateConverter();
        public override TLObject CreateObjectInstance() => new PasswordState();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PasswordState)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xBE117515u when name.SequenceEqual(propName_has_password):
                    obj.HasPassword = reader.ReadBool();
                    return true;
                case 0xD45958B8u when name.SequenceEqual(propName_password_hint):
                    obj.PasswordHint = reader.ReadString();
                    return true;
                case 0xA232F84Fu when name.SequenceEqual(propName_has_recovery_email_address):
                    obj.HasRecoveryEmailAddress = reader.ReadBool();
                    return true;
                case 0x6C6D23BBu when name.SequenceEqual(propName_has_passport_data):
                    obj.HasPassportData = reader.ReadBool();
                    return true;
                case 0x4F531997u when name.SequenceEqual(propName_recovery_email_address_code_info):
                    obj.RecoveryEmailAddressCodeInfo = reader.ReadTLObject<EmailAddressAuthenticationCodeInfo>();
                    return true;
            }
            return false;
        }
    }

    [TLType("recoveryEmailAddress")]
    partial class RecoveryEmailAddressConverter : TLObjectConverter<RecoveryEmailAddress>
    {
        public static BaseConverter CreateConverterInstance() => new RecoveryEmailAddressConverter();
        public override TLObject CreateObjectInstance() => new RecoveryEmailAddress();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RecoveryEmailAddress)tlobj;
            if (name.SequenceEqual(propName_recovery_email_address))
            {
                obj.RecoveryEmailAddress_ = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("temporaryPasswordState")]
    partial class TemporaryPasswordStateConverter : TLObjectConverter<TemporaryPasswordState>
    {
        public static BaseConverter CreateConverterInstance() => new TemporaryPasswordStateConverter();
        public override TLObject CreateObjectInstance() => new TemporaryPasswordState();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TemporaryPasswordState)tlobj;
            if (name.SequenceEqual(propName_has_password))
            {
                obj.HasPassword = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_valid_for))
            {
                obj.ValidFor = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("localFile")]
    partial class LocalFileConverter : TLObjectConverter<LocalFile>
    {
        public static BaseConverter CreateConverterInstance() => new LocalFileConverter();
        public override TLObject CreateObjectInstance() => new LocalFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LocalFile)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x84874D36u when name.SequenceEqual(propName_path):
                    obj.Path = reader.ReadString();
                    return true;
                case 0xC20C933Du when name.SequenceEqual(propName_can_be_downloaded):
                    obj.CanBeDownloaded = reader.ReadBool();
                    return true;
                case 0x2F078491u when name.SequenceEqual(propName_can_be_deleted):
                    obj.CanBeDeleted = reader.ReadBool();
                    return true;
                case 0x931F32D1u when name.SequenceEqual(propName_is_downloading_active):
                    obj.IsDownloadingActive = reader.ReadBool();
                    return true;
                case 0xFDCBDFE8u when name.SequenceEqual(propName_is_downloading_completed):
                    obj.IsDownloadingCompleted = reader.ReadBool();
                    return true;
                case 0xF1C35715u when name.SequenceEqual(propName_download_offset):
                    obj.DownloadOffset = reader.ReadInt();
                    return true;
                case 0xA18876E3u when name.SequenceEqual(propName_downloaded_prefix_size):
                    obj.DownloadedPrefixSize = reader.ReadInt();
                    return true;
                case 0x65AF5054u when name.SequenceEqual(propName_downloaded_size):
                    obj.DownloadedSize = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("remoteFile")]
    partial class RemoteFileConverter : TLObjectConverter<RemoteFile>
    {
        public static BaseConverter CreateConverterInstance() => new RemoteFileConverter();
        public override TLObject CreateObjectInstance() => new RemoteFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoteFile)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x1C0299B6u when name.SequenceEqual(propName_unique_id):
                    obj.UniqueId = reader.ReadString();
                    return true;
                case 0x88CAB4E8u when name.SequenceEqual(propName_is_uploading_active):
                    obj.IsUploadingActive = reader.ReadBool();
                    return true;
                case 0x4B3B0283u when name.SequenceEqual(propName_is_uploading_completed):
                    obj.IsUploadingCompleted = reader.ReadBool();
                    return true;
                case 0x71C22F17u when name.SequenceEqual(propName_uploaded_size):
                    obj.UploadedSize = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("file")]
    partial class FileConverter : TLObjectConverter<File>
    {
        public static BaseConverter CreateConverterInstance() => new FileConverter();
        public override TLObject CreateObjectInstance() => new File();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (File)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt();
                    return true;
                case 0x23A0D95Cu when name.SequenceEqual(propName_size):
                    obj.Size = reader.ReadInt();
                    return true;
                case 0x99E28EFBu when name.SequenceEqual(propName_expected_size):
                    obj.ExpectedSize = reader.ReadInt();
                    return true;
                case 0x9C436708u when name.SequenceEqual(propName_local):
                    obj.Local = reader.ReadTLObject<LocalFile>();
                    return true;
                case 0xC78D7953u when name.SequenceEqual(propName_remote):
                    obj.Remote = reader.ReadTLObject<RemoteFile>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputFileId")]
    partial class InputFileIdConverter : TLObjectConverter<InputFileId>
    {
        public static BaseConverter CreateConverterInstance() => new InputFileIdConverter();
        public override TLObject CreateObjectInstance() => new InputFileId();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputFileId)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("inputFileRemote")]
    partial class InputFileRemoteConverter : TLObjectConverter<InputFileRemote>
    {
        public static BaseConverter CreateConverterInstance() => new InputFileRemoteConverter();
        public override TLObject CreateObjectInstance() => new InputFileRemote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputFileRemote)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inputFileLocal")]
    partial class InputFileLocalConverter : TLObjectConverter<InputFileLocal>
    {
        public static BaseConverter CreateConverterInstance() => new InputFileLocalConverter();
        public override TLObject CreateObjectInstance() => new InputFileLocal();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputFileLocal)tlobj;
            if (name.SequenceEqual(propName_path))
            {
                obj.Path = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inputFileGenerated")]
    partial class InputFileGeneratedConverter : TLObjectConverter<InputFileGenerated>
    {
        public static BaseConverter CreateConverterInstance() => new InputFileGeneratedConverter();
        public override TLObject CreateObjectInstance() => new InputFileGenerated();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputFileGenerated)tlobj;
            if (name.SequenceEqual(propName_original_path))
            {
                obj.OriginalPath = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_conversion))
            {
                obj.Conversion = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_expected_size))
            {
                obj.ExpectedSize = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("photoSize")]
    partial class PhotoSizeConverter : TLObjectConverter<PhotoSize>
    {
        public static BaseConverter CreateConverterInstance() => new PhotoSizeConverter();
        public override TLObject CreateObjectInstance() => new PhotoSize();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PhotoSize)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadString();
                    return true;
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<File>();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0x4A3394C1u when name.SequenceEqual(propName_progressive_sizes):
                    obj.ProgressiveSizes = reader.ReadInt32Array();
                    return true;
            }
            return false;
        }
    }

    [TLType("minithumbnail")]
    partial class MinithumbnailConverter : TLObjectConverter<Minithumbnail>
    {
        public static BaseConverter CreateConverterInstance() => new MinithumbnailConverter();
        public override TLObject CreateObjectInstance() => new Minithumbnail();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Minithumbnail)tlobj;
            if (name.SequenceEqual(propName_width))
            {
                obj.Width = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_height))
            {
                obj.Height = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("thumbnailFormatJpeg")]
    partial class ThumbnailFormatJpegConverter : TLObjectConverter<ThumbnailFormatJpeg>
    {
        public static BaseConverter CreateConverterInstance() => new ThumbnailFormatJpegConverter();
        public override TLObject CreateObjectInstance() => new ThumbnailFormatJpeg();
    }

    [TLType("thumbnailFormatPng")]
    partial class ThumbnailFormatPngConverter : TLObjectConverter<ThumbnailFormatPng>
    {
        public static BaseConverter CreateConverterInstance() => new ThumbnailFormatPngConverter();
        public override TLObject CreateObjectInstance() => new ThumbnailFormatPng();
    }

    [TLType("thumbnailFormatWebp")]
    partial class ThumbnailFormatWebpConverter : TLObjectConverter<ThumbnailFormatWebp>
    {
        public static BaseConverter CreateConverterInstance() => new ThumbnailFormatWebpConverter();
        public override TLObject CreateObjectInstance() => new ThumbnailFormatWebp();
    }

    [TLType("thumbnailFormatGif")]
    partial class ThumbnailFormatGifConverter : TLObjectConverter<ThumbnailFormatGif>
    {
        public static BaseConverter CreateConverterInstance() => new ThumbnailFormatGifConverter();
        public override TLObject CreateObjectInstance() => new ThumbnailFormatGif();
    }

    [TLType("thumbnailFormatTgs")]
    partial class ThumbnailFormatTgsConverter : TLObjectConverter<ThumbnailFormatTgs>
    {
        public static BaseConverter CreateConverterInstance() => new ThumbnailFormatTgsConverter();
        public override TLObject CreateObjectInstance() => new ThumbnailFormatTgs();
    }

    [TLType("thumbnailFormatMpeg4")]
    partial class ThumbnailFormatMpeg4Converter : TLObjectConverter<ThumbnailFormatMpeg4>
    {
        public static BaseConverter CreateConverterInstance() => new ThumbnailFormatMpeg4Converter();
        public override TLObject CreateObjectInstance() => new ThumbnailFormatMpeg4();
    }

    [TLType("thumbnail")]
    partial class ThumbnailConverter : TLObjectConverter<Thumbnail>
    {
        public static BaseConverter CreateConverterInstance() => new ThumbnailConverter();
        public override TLObject CreateObjectInstance() => new Thumbnail();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Thumbnail)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xB99D8552u when name.SequenceEqual(propName_format):
                    obj.Format = reader.ReadTLObject<ThumbnailFormat>();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0xAAEA5743u when name.SequenceEqual(propName_file):
                    obj.File = reader.ReadTLObject<File>();
                    return true;
            }
            return false;
        }
    }

    [TLType("maskPointForehead")]
    partial class MaskPointForeheadConverter : TLObjectConverter<MaskPointForehead>
    {
        public static BaseConverter CreateConverterInstance() => new MaskPointForeheadConverter();
        public override TLObject CreateObjectInstance() => new MaskPointForehead();
    }

    [TLType("maskPointEyes")]
    partial class MaskPointEyesConverter : TLObjectConverter<MaskPointEyes>
    {
        public static BaseConverter CreateConverterInstance() => new MaskPointEyesConverter();
        public override TLObject CreateObjectInstance() => new MaskPointEyes();
    }

    [TLType("maskPointMouth")]
    partial class MaskPointMouthConverter : TLObjectConverter<MaskPointMouth>
    {
        public static BaseConverter CreateConverterInstance() => new MaskPointMouthConverter();
        public override TLObject CreateObjectInstance() => new MaskPointMouth();
    }

    [TLType("maskPointChin")]
    partial class MaskPointChinConverter : TLObjectConverter<MaskPointChin>
    {
        public static BaseConverter CreateConverterInstance() => new MaskPointChinConverter();
        public override TLObject CreateObjectInstance() => new MaskPointChin();
    }

    [TLType("maskPosition")]
    partial class MaskPositionConverter : TLObjectConverter<MaskPosition>
    {
        public static BaseConverter CreateConverterInstance() => new MaskPositionConverter();
        public override TLObject CreateObjectInstance() => new MaskPosition();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MaskPosition)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x18AE6C91u when name.SequenceEqual(propName_point):
                    obj.Point = reader.ReadTLObject<MaskPoint>();
                    return true;
                case 0xC262F35Cu when name.SequenceEqual(propName_x_shift):
                    obj.XShift = reader.ReadDouble();
                    return true;
                case 0xCA80C31Bu when name.SequenceEqual(propName_y_shift):
                    obj.YShift = reader.ReadDouble();
                    return true;
                case 0x82971C71u when name.SequenceEqual(propName_scale):
                    obj.Scale = reader.ReadDouble();
                    return true;
            }
            return false;
        }
    }

    [TLType("pollOption")]
    partial class PollOptionConverter : TLObjectConverter<PollOption>
    {
        public static BaseConverter CreateConverterInstance() => new PollOptionConverter();
        public override TLObject CreateObjectInstance() => new PollOption();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PollOption)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xBDE64E3Eu when name.SequenceEqual(propName_text):
                    obj.Text = reader.ReadString();
                    return true;
                case 0x36C582CDu when name.SequenceEqual(propName_voter_count):
                    obj.VoterCount = reader.ReadInt();
                    return true;
                case 0x2CC0B6CEu when name.SequenceEqual(propName_vote_percentage):
                    obj.VotePercentage = reader.ReadInt();
                    return true;
                case 0x1B0D44A0u when name.SequenceEqual(propName_is_chosen):
                    obj.IsChosen = reader.ReadBool();
                    return true;
                case 0xF75F0A80u when name.SequenceEqual(propName_is_being_chosen):
                    obj.IsBeingChosen = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("pollTypeRegular")]
    partial class PollTypeRegularConverter : TLObjectConverter<PollTypeRegular>
    {
        public static BaseConverter CreateConverterInstance() => new PollTypeRegularConverter();
        public override TLObject CreateObjectInstance() => new PollTypeRegular();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PollTypeRegular)tlobj;
            if (name.SequenceEqual(propName_allow_multiple_answers))
            {
                obj.AllowMultipleAnswers = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pollTypeQuiz")]
    partial class PollTypeQuizConverter : TLObjectConverter<PollTypeQuiz>
    {
        public static BaseConverter CreateConverterInstance() => new PollTypeQuizConverter();
        public override TLObject CreateObjectInstance() => new PollTypeQuiz();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PollTypeQuiz)tlobj;
            if (name.SequenceEqual(propName_correct_option_id))
            {
                obj.CorrectOptionId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_explanation))
            {
                obj.Explanation = reader.ReadTLObject<FormattedText>();
                return true;
            }
            return false;
        }
    }

    [TLType("animation")]
    partial class AnimationConverter : TLObjectConverter<Animation>
    {
        public static BaseConverter CreateConverterInstance() => new AnimationConverter();
        public override TLObject CreateObjectInstance() => new Animation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Animation)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0xE826B50Fu when name.SequenceEqual(propName_file_name):
                    obj.FileName = reader.ReadString();
                    return true;
                case 0xC057CA56u when name.SequenceEqual(propName_mime_type):
                    obj.MimeType = reader.ReadString();
                    return true;
                case 0x95C4C2C0u when name.SequenceEqual(propName_has_stickers):
                    obj.HasStickers = reader.ReadBool();
                    return true;
                case 0xFCC1AF42u when name.SequenceEqual(propName_minithumbnail):
                    obj.Minithumbnail = reader.ReadTLObject<Minithumbnail>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                    return true;
                case 0xE145EE5Du when name.SequenceEqual(propName_animation):
                    obj.Animation_ = reader.ReadTLObject<File>();
                    return true;
            }
            return false;
        }
    }

    [TLType("audio")]
    partial class AudioConverter : TLObjectConverter<Audio>
    {
        public static BaseConverter CreateConverterInstance() => new AudioConverter();
        public override TLObject CreateObjectInstance() => new Audio();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Audio)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x1499AAB5u when name.SequenceEqual(propName_performer):
                    obj.Performer = reader.ReadString();
                    return true;
                case 0xE826B50Fu when name.SequenceEqual(propName_file_name):
                    obj.FileName = reader.ReadString();
                    return true;
                case 0xC057CA56u when name.SequenceEqual(propName_mime_type):
                    obj.MimeType = reader.ReadString();
                    return true;
                case 0xD782074Eu when name.SequenceEqual(propName_album_cover_minithumbnail):
                    obj.AlbumCoverMinithumbnail = reader.ReadTLObject<Minithumbnail>();
                    return true;
                case 0xF101F0C3u when name.SequenceEqual(propName_album_cover_thumbnail):
                    obj.AlbumCoverThumbnail = reader.ReadTLObject<Thumbnail>();
                    return true;
                case 0xE0613999u when name.SequenceEqual(propName_audio):
                    obj.Audio_ = reader.ReadTLObject<File>();
                    return true;
            }
            return false;
        }
    }

    [TLType("document")]
    partial class DocumentConverter : TLObjectConverter<Document>
    {
        public static BaseConverter CreateConverterInstance() => new DocumentConverter();
        public override TLObject CreateObjectInstance() => new Document();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Document)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xE826B50Fu when name.SequenceEqual(propName_file_name):
                    obj.FileName = reader.ReadString();
                    return true;
                case 0xC057CA56u when name.SequenceEqual(propName_mime_type):
                    obj.MimeType = reader.ReadString();
                    return true;
                case 0xFCC1AF42u when name.SequenceEqual(propName_minithumbnail):
                    obj.Minithumbnail = reader.ReadTLObject<Minithumbnail>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                    return true;
                case 0x96234BD4u when name.SequenceEqual(propName_document):
                    obj.Document_ = reader.ReadTLObject<File>();
                    return true;
            }
            return false;
        }
    }

    [TLType("photo")]
    partial class PhotoConverter : TLObjectConverter<Photo>
    {
        public static BaseConverter CreateConverterInstance() => new PhotoConverter();
        public override TLObject CreateObjectInstance() => new Photo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Photo)tlobj;
            if (name.SequenceEqual(propName_has_stickers))
            {
                obj.HasStickers = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_minithumbnail))
            {
                obj.Minithumbnail = reader.ReadTLObject<Minithumbnail>();
                return true;
            }
            if (name.SequenceEqual(propName_sizes))
            {
                obj.Sizes = reader.ReadObjectArray<PhotoSize>();
                return true;
            }
            return false;
        }
    }

    [TLType("sticker")]
    partial class StickerConverter : TLObjectConverter<Sticker>
    {
        public static BaseConverter CreateConverterInstance() => new StickerConverter();
        public override TLObject CreateObjectInstance() => new Sticker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Sticker)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x2E040D59u when name.SequenceEqual(propName_set_id):
                    obj.SetId = reader.ReadInt64String();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0x4A90EF3Du when name.SequenceEqual(propName_emoji):
                    obj.Emoji = reader.ReadString();
                    return true;
                case 0x06B935A3u when name.SequenceEqual(propName_is_animated):
                    obj.IsAnimated = reader.ReadBool();
                    return true;
                case 0x9DFD86EEu when name.SequenceEqual(propName_is_mask):
                    obj.IsMask = reader.ReadBool();
                    return true;
                case 0x01977B7Du when name.SequenceEqual(propName_mask_position):
                    obj.MaskPosition = reader.ReadTLObject<MaskPosition>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                    return true;
                case 0xC742341Cu when name.SequenceEqual(propName_sticker):
                    obj.Sticker_ = reader.ReadTLObject<File>();
                    return true;
            }
            return false;
        }
    }

    [TLType("video")]
    partial class VideoConverter : TLObjectConverter<Video>
    {
        public static BaseConverter CreateConverterInstance() => new VideoConverter();
        public override TLObject CreateObjectInstance() => new Video();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Video)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0xE826B50Fu when name.SequenceEqual(propName_file_name):
                    obj.FileName = reader.ReadString();
                    return true;
                case 0xC057CA56u when name.SequenceEqual(propName_mime_type):
                    obj.MimeType = reader.ReadString();
                    return true;
                case 0x95C4C2C0u when name.SequenceEqual(propName_has_stickers):
                    obj.HasStickers = reader.ReadBool();
                    return true;
                case 0x8D374FBEu when name.SequenceEqual(propName_supports_streaming):
                    obj.SupportsStreaming = reader.ReadBool();
                    return true;
                case 0xFCC1AF42u when name.SequenceEqual(propName_minithumbnail):
                    obj.Minithumbnail = reader.ReadTLObject<Minithumbnail>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                    return true;
                case 0xCEF90B6Cu when name.SequenceEqual(propName_video):
                    obj.Video_ = reader.ReadTLObject<File>();
                    return true;
            }
            return false;
        }
    }

    [TLType("videoNote")]
    partial class VideoNoteConverter : TLObjectConverter<VideoNote>
    {
        public static BaseConverter CreateConverterInstance() => new VideoNoteConverter();
        public override TLObject CreateObjectInstance() => new VideoNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (VideoNote)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x83D03615u when name.SequenceEqual(propName_length):
                    obj.Length = reader.ReadInt();
                    return true;
                case 0xFCC1AF42u when name.SequenceEqual(propName_minithumbnail):
                    obj.Minithumbnail = reader.ReadTLObject<Minithumbnail>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                    return true;
                case 0xCEF90B6Cu when name.SequenceEqual(propName_video):
                    obj.Video = reader.ReadTLObject<File>();
                    return true;
            }
            return false;
        }
    }

    [TLType("voiceNote")]
    partial class VoiceNoteConverter : TLObjectConverter<VoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new VoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new VoiceNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (VoiceNote)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x1AA9F5D2u when name.SequenceEqual(propName_waveform):
                    obj.Waveform = reader.ReadBase64String();
                    return true;
                case 0xC057CA56u when name.SequenceEqual(propName_mime_type):
                    obj.MimeType = reader.ReadString();
                    return true;
                case 0x7F9BC9F9u when name.SequenceEqual(propName_voice):
                    obj.Voice = reader.ReadTLObject<File>();
                    return true;
            }
            return false;
        }
    }

    [TLType("contact")]
    partial class ContactConverter : TLObjectConverter<Contact>
    {
        public static BaseConverter CreateConverterInstance() => new ContactConverter();
        public override TLObject CreateObjectInstance() => new Contact();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Contact)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x56E140E1u when name.SequenceEqual(propName_phone_number):
                    obj.PhoneNumber = reader.ReadString();
                    return true;
                case 0xFBBF2AC1u when name.SequenceEqual(propName_first_name):
                    obj.FirstName = reader.ReadString();
                    return true;
                case 0x68F1D8F9u when name.SequenceEqual(propName_last_name):
                    obj.LastName = reader.ReadString();
                    return true;
                case 0x819A8C0Bu when name.SequenceEqual(propName_vcard):
                    obj.Vcard = reader.ReadString();
                    return true;
                case 0x10A75CDAu when name.SequenceEqual(propName_user_id):
                    obj.UserId = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("location")]
    partial class LocationConverter : TLObjectConverter<Location>
    {
        public static BaseConverter CreateConverterInstance() => new LocationConverter();
        public override TLObject CreateObjectInstance() => new Location();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Location)tlobj;
            if (name.SequenceEqual(propName_latitude))
            {
                obj.Latitude = reader.ReadDouble();
                return true;
            }
            if (name.SequenceEqual(propName_longitude))
            {
                obj.Longitude = reader.ReadDouble();
                return true;
            }
            return false;
        }
    }

    [TLType("venue")]
    partial class VenueConverter : TLObjectConverter<Venue>
    {
        public static BaseConverter CreateConverterInstance() => new VenueConverter();
        public override TLObject CreateObjectInstance() => new Venue();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Venue)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x0BF5A9A6u when name.SequenceEqual(propName_location):
                    obj.Location = reader.ReadTLObject<Location>();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x2C6A2953u when name.SequenceEqual(propName_address):
                    obj.Address = reader.ReadString();
                    return true;
                case 0xB7C0BBBCu when name.SequenceEqual(propName_provider):
                    obj.Provider = reader.ReadString();
                    return true;
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("game")]
    partial class GameConverter : TLObjectConverter<Game>
    {
        public static BaseConverter CreateConverterInstance() => new GameConverter();
        public override TLObject CreateObjectInstance() => new Game();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Game)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x095C7C9Du when name.SequenceEqual(propName_short_name):
                    obj.ShortName = reader.ReadString();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0xBDE64E3Eu when name.SequenceEqual(propName_text):
                    obj.Text = reader.ReadTLObject<FormattedText>();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<Photo>();
                    return true;
                case 0xE145EE5Du when name.SequenceEqual(propName_animation):
                    obj.Animation = reader.ReadTLObject<Animation>();
                    return true;
            }
            return false;
        }
    }

    [TLType("poll")]
    partial class PollConverter : TLObjectConverter<Poll>
    {
        public static BaseConverter CreateConverterInstance() => new PollConverter();
        public override TLObject CreateObjectInstance() => new Poll();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Poll)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x06D5A845u when name.SequenceEqual(propName_question):
                    obj.Question = reader.ReadString();
                    return true;
                case 0xEF286CA5u when name.SequenceEqual(propName_options):
                    obj.Options = reader.ReadObjectArray<PollOption>();
                    return true;
                case 0x47229F94u when name.SequenceEqual(propName_total_voter_count):
                    obj.TotalVoterCount = reader.ReadInt();
                    return true;
                case 0x1D0AC33Au when name.SequenceEqual(propName_recent_voter_user_ids):
                    obj.RecentVoterUserIds = reader.ReadInt32Array();
                    return true;
                case 0xC3C3A943u when name.SequenceEqual(propName_is_anonymous):
                    obj.IsAnonymous = reader.ReadBool();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<PollType>();
                    return true;
                case 0xC3CA66E3u when name.SequenceEqual(propName_open_period):
                    obj.OpenPeriod = reader.ReadInt();
                    return true;
                case 0x634EE2D0u when name.SequenceEqual(propName_close_date):
                    obj.CloseDate = reader.ReadInt();
                    return true;
                case 0xE31C4FCAu when name.SequenceEqual(propName_is_closed):
                    obj.IsClosed = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("profilePhoto")]
    partial class ProfilePhotoConverter : TLObjectConverter<ProfilePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new ProfilePhotoConverter();
        public override TLObject CreateObjectInstance() => new ProfilePhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ProfilePhoto)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0xA2C4F48Cu when name.SequenceEqual(propName_small):
                    obj.Small = reader.ReadTLObject<File>();
                    return true;
                case 0x53CACDB9u when name.SequenceEqual(propName_big):
                    obj.Big = reader.ReadTLObject<File>();
                    return true;
                case 0x0CC5D182u when name.SequenceEqual(propName_has_animation):
                    obj.HasAnimation = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("chatPhotoInfo")]
    partial class ChatPhotoInfoConverter : TLObjectConverter<ChatPhotoInfo>
    {
        public static BaseConverter CreateConverterInstance() => new ChatPhotoInfoConverter();
        public override TLObject CreateObjectInstance() => new ChatPhotoInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatPhotoInfo)tlobj;
            if (name.SequenceEqual(propName_small))
            {
                obj.Small = reader.ReadTLObject<File>();
                return true;
            }
            if (name.SequenceEqual(propName_big))
            {
                obj.Big = reader.ReadTLObject<File>();
                return true;
            }
            if (name.SequenceEqual(propName_has_animation))
            {
                obj.HasAnimation = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("userTypeRegular")]
    partial class UserTypeRegularConverter : TLObjectConverter<UserTypeRegular>
    {
        public static BaseConverter CreateConverterInstance() => new UserTypeRegularConverter();
        public override TLObject CreateObjectInstance() => new UserTypeRegular();
    }

    [TLType("userTypeDeleted")]
    partial class UserTypeDeletedConverter : TLObjectConverter<UserTypeDeleted>
    {
        public static BaseConverter CreateConverterInstance() => new UserTypeDeletedConverter();
        public override TLObject CreateObjectInstance() => new UserTypeDeleted();
    }

    [TLType("userTypeBot")]
    partial class UserTypeBotConverter : TLObjectConverter<UserTypeBot>
    {
        public static BaseConverter CreateConverterInstance() => new UserTypeBotConverter();
        public override TLObject CreateObjectInstance() => new UserTypeBot();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UserTypeBot)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA7FCF58Fu when name.SequenceEqual(propName_can_join_groups):
                    obj.CanJoinGroups = reader.ReadBool();
                    return true;
                case 0x9D4EA007u when name.SequenceEqual(propName_can_read_all_group_messages):
                    obj.CanReadAllGroupMessages = reader.ReadBool();
                    return true;
                case 0xE8A622FBu when name.SequenceEqual(propName_is_inline):
                    obj.IsInline = reader.ReadBool();
                    return true;
                case 0xB55854CDu when name.SequenceEqual(propName_inline_query_placeholder):
                    obj.InlineQueryPlaceholder = reader.ReadString();
                    return true;
                case 0x42E4CD1Du when name.SequenceEqual(propName_need_location):
                    obj.NeedLocation = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("userTypeUnknown")]
    partial class UserTypeUnknownConverter : TLObjectConverter<UserTypeUnknown>
    {
        public static BaseConverter CreateConverterInstance() => new UserTypeUnknownConverter();
        public override TLObject CreateObjectInstance() => new UserTypeUnknown();
    }

    [TLType("botCommand")]
    partial class BotCommandConverter : TLObjectConverter<BotCommand>
    {
        public static BaseConverter CreateConverterInstance() => new BotCommandConverter();
        public override TLObject CreateObjectInstance() => new BotCommand();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BotCommand)tlobj;
            if (name.SequenceEqual(propName_command))
            {
                obj.Command = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_description))
            {
                obj.Description = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("botInfo")]
    partial class BotInfoConverter : TLObjectConverter<BotInfo>
    {
        public static BaseConverter CreateConverterInstance() => new BotInfoConverter();
        public override TLObject CreateObjectInstance() => new BotInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BotInfo)tlobj;
            if (name.SequenceEqual(propName_description))
            {
                obj.Description = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_commands))
            {
                obj.Commands = reader.ReadObjectArray<BotCommand>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatLocation")]
    partial class ChatLocationConverter : TLObjectConverter<ChatLocation>
    {
        public static BaseConverter CreateConverterInstance() => new ChatLocationConverter();
        public override TLObject CreateObjectInstance() => new ChatLocation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatLocation)tlobj;
            if (name.SequenceEqual(propName_location))
            {
                obj.Location = reader.ReadTLObject<Location>();
                return true;
            }
            if (name.SequenceEqual(propName_address))
            {
                obj.Address = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("animatedChatPhoto")]
    partial class AnimatedChatPhotoConverter : TLObjectConverter<AnimatedChatPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new AnimatedChatPhotoConverter();
        public override TLObject CreateObjectInstance() => new AnimatedChatPhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AnimatedChatPhoto)tlobj;
            if (name.SequenceEqual(propName_length))
            {
                obj.Length = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_file))
            {
                obj.File = reader.ReadTLObject<File>();
                return true;
            }
            if (name.SequenceEqual(propName_main_frame_timestamp))
            {
                obj.MainFrameTimestamp = reader.ReadDouble();
                return true;
            }
            return false;
        }
    }

    [TLType("chatPhoto")]
    partial class ChatPhotoConverter : TLObjectConverter<ChatPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new ChatPhotoConverter();
        public override TLObject CreateObjectInstance() => new ChatPhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatPhoto)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x88F85E9Au when name.SequenceEqual(propName_added_date):
                    obj.AddedDate = reader.ReadInt();
                    return true;
                case 0xFCC1AF42u when name.SequenceEqual(propName_minithumbnail):
                    obj.Minithumbnail = reader.ReadTLObject<Minithumbnail>();
                    return true;
                case 0x4535E4FDu when name.SequenceEqual(propName_sizes):
                    obj.Sizes = reader.ReadObjectArray<PhotoSize>();
                    return true;
                case 0xE145EE5Du when name.SequenceEqual(propName_animation):
                    obj.Animation = reader.ReadTLObject<AnimatedChatPhoto>();
                    return true;
            }
            return false;
        }
    }

    [TLType("chatPhotos")]
    partial class ChatPhotosConverter : TLObjectConverter<ChatPhotos>
    {
        public static BaseConverter CreateConverterInstance() => new ChatPhotosConverter();
        public override TLObject CreateObjectInstance() => new ChatPhotos();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatPhotos)tlobj;
            if (name.SequenceEqual(propName_total_count))
            {
                obj.TotalCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_photos))
            {
                obj.Photos = reader.ReadObjectArray<ChatPhoto>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputChatPhotoPrevious")]
    partial class InputChatPhotoPreviousConverter : TLObjectConverter<InputChatPhotoPrevious>
    {
        public static BaseConverter CreateConverterInstance() => new InputChatPhotoPreviousConverter();
        public override TLObject CreateObjectInstance() => new InputChatPhotoPrevious();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputChatPhotoPrevious)tlobj;
            if (name.SequenceEqual(propName_chat_photo_id))
            {
                obj.ChatPhotoId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("inputChatPhotoStatic")]
    partial class InputChatPhotoStaticConverter : TLObjectConverter<InputChatPhotoStatic>
    {
        public static BaseConverter CreateConverterInstance() => new InputChatPhotoStaticConverter();
        public override TLObject CreateObjectInstance() => new InputChatPhotoStatic();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputChatPhotoStatic)tlobj;
            if (name.SequenceEqual(propName_photo))
            {
                obj.Photo = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputChatPhotoAnimation")]
    partial class InputChatPhotoAnimationConverter : TLObjectConverter<InputChatPhotoAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new InputChatPhotoAnimationConverter();
        public override TLObject CreateObjectInstance() => new InputChatPhotoAnimation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputChatPhotoAnimation)tlobj;
            if (name.SequenceEqual(propName_animation))
            {
                obj.Animation = reader.ReadTLObject<InputFile>();
                return true;
            }
            if (name.SequenceEqual(propName_main_frame_timestamp))
            {
                obj.MainFrameTimestamp = reader.ReadDouble();
                return true;
            }
            return false;
        }
    }

    [TLType("user")]
    partial class UserConverter : TLObjectConverter<User>
    {
        public static BaseConverter CreateConverterInstance() => new UserConverter();
        public override TLObject CreateObjectInstance() => new User();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (User)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt();
                    return true;
                case 0xFBBF2AC1u when name.SequenceEqual(propName_first_name):
                    obj.FirstName = reader.ReadString();
                    return true;
                case 0x68F1D8F9u when name.SequenceEqual(propName_last_name):
                    obj.LastName = reader.ReadString();
                    return true;
                case 0x4EAF15B9u when name.SequenceEqual(propName_username):
                    obj.Username = reader.ReadString();
                    return true;
                case 0x56E140E1u when name.SequenceEqual(propName_phone_number):
                    obj.PhoneNumber = reader.ReadString();
                    return true;
                case 0xBA4B77EFu when name.SequenceEqual(propName_status):
                    obj.Status = reader.ReadTLObject<UserStatus>();
                    return true;
                case 0x129966BDu when name.SequenceEqual(propName_profile_photo):
                    obj.ProfilePhoto = reader.ReadTLObject<ProfilePhoto>();
                    return true;
                case 0x19140C0Eu when name.SequenceEqual(propName_is_contact):
                    obj.IsContact = reader.ReadBool();
                    return true;
                case 0x0FB498D1u when name.SequenceEqual(propName_is_mutual_contact):
                    obj.IsMutualContact = reader.ReadBool();
                    return true;
                case 0x03EB79CEu when name.SequenceEqual(propName_is_verified):
                    obj.IsVerified = reader.ReadBool();
                    return true;
                case 0xAC1238CDu when name.SequenceEqual(propName_is_support):
                    obj.IsSupport = reader.ReadBool();
                    return true;
                case 0x32B3FDB2u when name.SequenceEqual(propName_restriction_reason):
                    obj.RestrictionReason = reader.ReadString();
                    return true;
                case 0x4B6E48FEu when name.SequenceEqual(propName_is_scam):
                    obj.IsScam = reader.ReadBool();
                    return true;
                case 0x8D068A46u when name.SequenceEqual(propName_have_access):
                    obj.HaveAccess = reader.ReadBool();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<UserType>();
                    return true;
                case 0x5BD83709u when name.SequenceEqual(propName_language_code):
                    obj.LanguageCode = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("userFullInfo")]
    partial class UserFullInfoConverter : TLObjectConverter<UserFullInfo>
    {
        public static BaseConverter CreateConverterInstance() => new UserFullInfoConverter();
        public override TLObject CreateObjectInstance() => new UserFullInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UserFullInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<ChatPhoto>();
                    return true;
                case 0x453993D5u when name.SequenceEqual(propName_can_be_called):
                    obj.CanBeCalled = reader.ReadBool();
                    return true;
                case 0x6EC14627u when name.SequenceEqual(propName_supports_video_calls):
                    obj.SupportsVideoCalls = reader.ReadBool();
                    return true;
                case 0xEF4D52D9u when name.SequenceEqual(propName_has_private_calls):
                    obj.HasPrivateCalls = reader.ReadBool();
                    return true;
                case 0xBCBC138Bu when name.SequenceEqual(propName_need_phone_number_privacy_exception):
                    obj.NeedPhoneNumberPrivacyException = reader.ReadBool();
                    return true;
                case 0x5BCADA51u when name.SequenceEqual(propName_bio):
                    obj.Bio = reader.ReadString();
                    return true;
                case 0x22B8C29Eu when name.SequenceEqual(propName_share_text):
                    obj.ShareText = reader.ReadString();
                    return true;
                case 0xD5F6C73Au when name.SequenceEqual(propName_group_in_common_count):
                    obj.GroupInCommonCount = reader.ReadInt();
                    return true;
                case 0xE2DD4347u when name.SequenceEqual(propName_bot_info):
                    obj.BotInfo = reader.ReadTLObject<BotInfo>();
                    return true;
            }
            return false;
        }
    }

    [TLType("users")]
    partial class UsersConverter : TLObjectConverter<Users>
    {
        public static BaseConverter CreateConverterInstance() => new UsersConverter();
        public override TLObject CreateObjectInstance() => new Users();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Users)tlobj;
            if (name.SequenceEqual(propName_total_count))
            {
                obj.TotalCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_user_ids))
            {
                obj.UserIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("chatAdministrator")]
    partial class ChatAdministratorConverter : TLObjectConverter<ChatAdministrator>
    {
        public static BaseConverter CreateConverterInstance() => new ChatAdministratorConverter();
        public override TLObject CreateObjectInstance() => new ChatAdministrator();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatAdministrator)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_custom_title))
            {
                obj.CustomTitle = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_owner))
            {
                obj.IsOwner = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("chatAdministrators")]
    partial class ChatAdministratorsConverter : TLObjectConverter<ChatAdministrators>
    {
        public static BaseConverter CreateConverterInstance() => new ChatAdministratorsConverter();
        public override TLObject CreateObjectInstance() => new ChatAdministrators();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatAdministrators)tlobj;
            if (name.SequenceEqual(propName_administrators))
            {
                obj.Administrators = reader.ReadObjectArray<ChatAdministrator>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatPermissions")]
    partial class ChatPermissionsConverter : TLObjectConverter<ChatPermissions>
    {
        public static BaseConverter CreateConverterInstance() => new ChatPermissionsConverter();
        public override TLObject CreateObjectInstance() => new ChatPermissions();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatPermissions)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xB7BE5D01u when name.SequenceEqual(propName_can_send_messages):
                    obj.CanSendMessages = reader.ReadBool();
                    return true;
                case 0xE2ACE32Cu when name.SequenceEqual(propName_can_send_media_messages):
                    obj.CanSendMediaMessages = reader.ReadBool();
                    return true;
                case 0x8B037C6Du when name.SequenceEqual(propName_can_send_polls):
                    obj.CanSendPolls = reader.ReadBool();
                    return true;
                case 0xFED5FC86u when name.SequenceEqual(propName_can_send_other_messages):
                    obj.CanSendOtherMessages = reader.ReadBool();
                    return true;
                case 0x15B69AC2u when name.SequenceEqual(propName_can_add_web_page_previews):
                    obj.CanAddWebPagePreviews = reader.ReadBool();
                    return true;
                case 0xA44B744Bu when name.SequenceEqual(propName_can_change_info):
                    obj.CanChangeInfo = reader.ReadBool();
                    return true;
                case 0x1F8E9260u when name.SequenceEqual(propName_can_invite_users):
                    obj.CanInviteUsers = reader.ReadBool();
                    return true;
                case 0xBC8D107Au when name.SequenceEqual(propName_can_pin_messages):
                    obj.CanPinMessages = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("chatMemberStatusCreator")]
    partial class ChatMemberStatusCreatorConverter : TLObjectConverter<ChatMemberStatusCreator>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMemberStatusCreatorConverter();
        public override TLObject CreateObjectInstance() => new ChatMemberStatusCreator();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatMemberStatusCreator)tlobj;
            if (name.SequenceEqual(propName_custom_title))
            {
                obj.CustomTitle = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_anonymous))
            {
                obj.IsAnonymous = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_is_member))
            {
                obj.IsMember = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("chatMemberStatusAdministrator")]
    partial class ChatMemberStatusAdministratorConverter : TLObjectConverter<ChatMemberStatusAdministrator>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMemberStatusAdministratorConverter();
        public override TLObject CreateObjectInstance() => new ChatMemberStatusAdministrator();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatMemberStatusAdministrator)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x9D153F53u when name.SequenceEqual(propName_custom_title):
                    obj.CustomTitle = reader.ReadString();
                    return true;
                case 0x3FBC03E1u when name.SequenceEqual(propName_can_be_edited):
                    obj.CanBeEdited = reader.ReadBool();
                    return true;
                case 0xA44B744Bu when name.SequenceEqual(propName_can_change_info):
                    obj.CanChangeInfo = reader.ReadBool();
                    return true;
                case 0x52E506CDu when name.SequenceEqual(propName_can_post_messages):
                    obj.CanPostMessages = reader.ReadBool();
                    return true;
                case 0x2E4C851Fu when name.SequenceEqual(propName_can_edit_messages):
                    obj.CanEditMessages = reader.ReadBool();
                    return true;
                case 0x9997063Eu when name.SequenceEqual(propName_can_delete_messages):
                    obj.CanDeleteMessages = reader.ReadBool();
                    return true;
                case 0x1F8E9260u when name.SequenceEqual(propName_can_invite_users):
                    obj.CanInviteUsers = reader.ReadBool();
                    return true;
                case 0x14117806u when name.SequenceEqual(propName_can_restrict_members):
                    obj.CanRestrictMembers = reader.ReadBool();
                    return true;
                case 0xBC8D107Au when name.SequenceEqual(propName_can_pin_messages):
                    obj.CanPinMessages = reader.ReadBool();
                    return true;
                case 0x5324AB92u when name.SequenceEqual(propName_can_promote_members):
                    obj.CanPromoteMembers = reader.ReadBool();
                    return true;
                case 0xC3C3A943u when name.SequenceEqual(propName_is_anonymous):
                    obj.IsAnonymous = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("chatMemberStatusMember")]
    partial class ChatMemberStatusMemberConverter : TLObjectConverter<ChatMemberStatusMember>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMemberStatusMemberConverter();
        public override TLObject CreateObjectInstance() => new ChatMemberStatusMember();
    }

    [TLType("chatMemberStatusRestricted")]
    partial class ChatMemberStatusRestrictedConverter : TLObjectConverter<ChatMemberStatusRestricted>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMemberStatusRestrictedConverter();
        public override TLObject CreateObjectInstance() => new ChatMemberStatusRestricted();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatMemberStatusRestricted)tlobj;
            if (name.SequenceEqual(propName_is_member))
            {
                obj.IsMember = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_restricted_until_date))
            {
                obj.RestrictedUntilDate = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_permissions))
            {
                obj.Permissions = reader.ReadTLObject<ChatPermissions>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatMemberStatusLeft")]
    partial class ChatMemberStatusLeftConverter : TLObjectConverter<ChatMemberStatusLeft>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMemberStatusLeftConverter();
        public override TLObject CreateObjectInstance() => new ChatMemberStatusLeft();
    }

    [TLType("chatMemberStatusBanned")]
    partial class ChatMemberStatusBannedConverter : TLObjectConverter<ChatMemberStatusBanned>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMemberStatusBannedConverter();
        public override TLObject CreateObjectInstance() => new ChatMemberStatusBanned();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatMemberStatusBanned)tlobj;
            if (name.SequenceEqual(propName_banned_until_date))
            {
                obj.BannedUntilDate = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatMember")]
    partial class ChatMemberConverter : TLObjectConverter<ChatMember>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMemberConverter();
        public override TLObject CreateObjectInstance() => new ChatMember();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatMember)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x10A75CDAu when name.SequenceEqual(propName_user_id):
                    obj.UserId = reader.ReadInt();
                    return true;
                case 0x79BE1C40u when name.SequenceEqual(propName_inviter_user_id):
                    obj.InviterUserId = reader.ReadInt();
                    return true;
                case 0xB3E3ADA0u when name.SequenceEqual(propName_joined_chat_date):
                    obj.JoinedChatDate = reader.ReadInt();
                    return true;
                case 0xBA4B77EFu when name.SequenceEqual(propName_status):
                    obj.Status = reader.ReadTLObject<ChatMemberStatus>();
                    return true;
                case 0xE2DD4347u when name.SequenceEqual(propName_bot_info):
                    obj.BotInfo = reader.ReadTLObject<BotInfo>();
                    return true;
            }
            return false;
        }
    }

    [TLType("chatMembers")]
    partial class ChatMembersConverter : TLObjectConverter<ChatMembers>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMembersConverter();
        public override TLObject CreateObjectInstance() => new ChatMembers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatMembers)tlobj;
            if (name.SequenceEqual(propName_total_count))
            {
                obj.TotalCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_members))
            {
                obj.Members = reader.ReadObjectArray<ChatMember>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatMembersFilterContacts")]
    partial class ChatMembersFilterContactsConverter : TLObjectConverter<ChatMembersFilterContacts>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMembersFilterContactsConverter();
        public override TLObject CreateObjectInstance() => new ChatMembersFilterContacts();
    }

    [TLType("chatMembersFilterAdministrators")]
    partial class ChatMembersFilterAdministratorsConverter : TLObjectConverter<ChatMembersFilterAdministrators>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMembersFilterAdministratorsConverter();
        public override TLObject CreateObjectInstance() => new ChatMembersFilterAdministrators();
    }

    [TLType("chatMembersFilterMembers")]
    partial class ChatMembersFilterMembersConverter : TLObjectConverter<ChatMembersFilterMembers>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMembersFilterMembersConverter();
        public override TLObject CreateObjectInstance() => new ChatMembersFilterMembers();
    }

    [TLType("chatMembersFilterRestricted")]
    partial class ChatMembersFilterRestrictedConverter : TLObjectConverter<ChatMembersFilterRestricted>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMembersFilterRestrictedConverter();
        public override TLObject CreateObjectInstance() => new ChatMembersFilterRestricted();
    }

    [TLType("chatMembersFilterBanned")]
    partial class ChatMembersFilterBannedConverter : TLObjectConverter<ChatMembersFilterBanned>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMembersFilterBannedConverter();
        public override TLObject CreateObjectInstance() => new ChatMembersFilterBanned();
    }

    [TLType("chatMembersFilterBots")]
    partial class ChatMembersFilterBotsConverter : TLObjectConverter<ChatMembersFilterBots>
    {
        public static BaseConverter CreateConverterInstance() => new ChatMembersFilterBotsConverter();
        public override TLObject CreateObjectInstance() => new ChatMembersFilterBots();
    }

    [TLType("supergroupMembersFilterRecent")]
    partial class SupergroupMembersFilterRecentConverter : TLObjectConverter<SupergroupMembersFilterRecent>
    {
        public static BaseConverter CreateConverterInstance() => new SupergroupMembersFilterRecentConverter();
        public override TLObject CreateObjectInstance() => new SupergroupMembersFilterRecent();
    }

    [TLType("supergroupMembersFilterContacts")]
    partial class SupergroupMembersFilterContactsConverter : TLObjectConverter<SupergroupMembersFilterContacts>
    {
        public static BaseConverter CreateConverterInstance() => new SupergroupMembersFilterContactsConverter();
        public override TLObject CreateObjectInstance() => new SupergroupMembersFilterContacts();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SupergroupMembersFilterContacts)tlobj;
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("supergroupMembersFilterAdministrators")]
    partial class SupergroupMembersFilterAdministratorsConverter : TLObjectConverter<SupergroupMembersFilterAdministrators>
    {
        public static BaseConverter CreateConverterInstance() => new SupergroupMembersFilterAdministratorsConverter();
        public override TLObject CreateObjectInstance() => new SupergroupMembersFilterAdministrators();
    }

    [TLType("supergroupMembersFilterSearch")]
    partial class SupergroupMembersFilterSearchConverter : TLObjectConverter<SupergroupMembersFilterSearch>
    {
        public static BaseConverter CreateConverterInstance() => new SupergroupMembersFilterSearchConverter();
        public override TLObject CreateObjectInstance() => new SupergroupMembersFilterSearch();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SupergroupMembersFilterSearch)tlobj;
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("supergroupMembersFilterRestricted")]
    partial class SupergroupMembersFilterRestrictedConverter : TLObjectConverter<SupergroupMembersFilterRestricted>
    {
        public static BaseConverter CreateConverterInstance() => new SupergroupMembersFilterRestrictedConverter();
        public override TLObject CreateObjectInstance() => new SupergroupMembersFilterRestricted();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SupergroupMembersFilterRestricted)tlobj;
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("supergroupMembersFilterBanned")]
    partial class SupergroupMembersFilterBannedConverter : TLObjectConverter<SupergroupMembersFilterBanned>
    {
        public static BaseConverter CreateConverterInstance() => new SupergroupMembersFilterBannedConverter();
        public override TLObject CreateObjectInstance() => new SupergroupMembersFilterBanned();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SupergroupMembersFilterBanned)tlobj;
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("supergroupMembersFilterBots")]
    partial class SupergroupMembersFilterBotsConverter : TLObjectConverter<SupergroupMembersFilterBots>
    {
        public static BaseConverter CreateConverterInstance() => new SupergroupMembersFilterBotsConverter();
        public override TLObject CreateObjectInstance() => new SupergroupMembersFilterBots();
    }

    [TLType("basicGroup")]
    partial class BasicGroupConverter : TLObjectConverter<BasicGroup>
    {
        public static BaseConverter CreateConverterInstance() => new BasicGroupConverter();
        public override TLObject CreateObjectInstance() => new BasicGroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BasicGroup)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt();
                    return true;
                case 0x512E01CBu when name.SequenceEqual(propName_member_count):
                    obj.MemberCount = reader.ReadInt();
                    return true;
                case 0xBA4B77EFu when name.SequenceEqual(propName_status):
                    obj.Status = reader.ReadTLObject<ChatMemberStatus>();
                    return true;
                case 0x25478A38u when name.SequenceEqual(propName_is_active):
                    obj.IsActive = reader.ReadBool();
                    return true;
                case 0x96925432u when name.SequenceEqual(propName_upgraded_to_supergroup_id):
                    obj.UpgradedToSupergroupId = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("basicGroupFullInfo")]
    partial class BasicGroupFullInfoConverter : TLObjectConverter<BasicGroupFullInfo>
    {
        public static BaseConverter CreateConverterInstance() => new BasicGroupFullInfoConverter();
        public override TLObject CreateObjectInstance() => new BasicGroupFullInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BasicGroupFullInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<ChatPhoto>();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0x290CA1C1u when name.SequenceEqual(propName_creator_user_id):
                    obj.CreatorUserId = reader.ReadInt();
                    return true;
                case 0x37E24810u when name.SequenceEqual(propName_members):
                    obj.Members = reader.ReadObjectArray<ChatMember>();
                    return true;
                case 0x21730C41u when name.SequenceEqual(propName_invite_link):
                    obj.InviteLink = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("supergroup")]
    partial class SupergroupConverter : TLObjectConverter<Supergroup>
    {
        public static BaseConverter CreateConverterInstance() => new SupergroupConverter();
        public override TLObject CreateObjectInstance() => new Supergroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Supergroup)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt();
                    return true;
                case 0x4EAF15B9u when name.SequenceEqual(propName_username):
                    obj.Username = reader.ReadString();
                    return true;
                case 0xD472DC59u when name.SequenceEqual(propName_date):
                    obj.Date = reader.ReadInt();
                    return true;
                case 0xBA4B77EFu when name.SequenceEqual(propName_status):
                    obj.Status = reader.ReadTLObject<ChatMemberStatus>();
                    return true;
                case 0x512E01CBu when name.SequenceEqual(propName_member_count):
                    obj.MemberCount = reader.ReadInt();
                    return true;
                case 0xA17D3580u when name.SequenceEqual(propName_has_linked_chat):
                    obj.HasLinkedChat = reader.ReadBool();
                    return true;
                case 0xD2B61F03u when name.SequenceEqual(propName_has_location):
                    obj.HasLocation = reader.ReadBool();
                    return true;
                case 0x93371AF1u when name.SequenceEqual(propName_sign_messages):
                    obj.SignMessages = reader.ReadBool();
                    return true;
                case 0x4E93817Du when name.SequenceEqual(propName_is_slow_mode_enabled):
                    obj.IsSlowModeEnabled = reader.ReadBool();
                    return true;
                case 0x19519D69u when name.SequenceEqual(propName_is_channel):
                    obj.IsChannel = reader.ReadBool();
                    return true;
                case 0x03EB79CEu when name.SequenceEqual(propName_is_verified):
                    obj.IsVerified = reader.ReadBool();
                    return true;
                case 0x32B3FDB2u when name.SequenceEqual(propName_restriction_reason):
                    obj.RestrictionReason = reader.ReadString();
                    return true;
                case 0x4B6E48FEu when name.SequenceEqual(propName_is_scam):
                    obj.IsScam = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("supergroupFullInfo")]
    partial class SupergroupFullInfoConverter : TLObjectConverter<SupergroupFullInfo>
    {
        public static BaseConverter CreateConverterInstance() => new SupergroupFullInfoConverter();
        public override TLObject CreateObjectInstance() => new SupergroupFullInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SupergroupFullInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<ChatPhoto>();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0x512E01CBu when name.SequenceEqual(propName_member_count):
                    obj.MemberCount = reader.ReadInt();
                    return true;
                case 0x9FE8A536u when name.SequenceEqual(propName_administrator_count):
                    obj.AdministratorCount = reader.ReadInt();
                    return true;
                case 0x0AC994F0u when name.SequenceEqual(propName_restricted_count):
                    obj.RestrictedCount = reader.ReadInt();
                    return true;
                case 0x6B2E8499u when name.SequenceEqual(propName_banned_count):
                    obj.BannedCount = reader.ReadInt();
                    return true;
                case 0xA2BFC8F9u when name.SequenceEqual(propName_linked_chat_id):
                    obj.LinkedChatId = reader.ReadLong();
                    return true;
                case 0x5ECC4806u when name.SequenceEqual(propName_slow_mode_delay):
                    obj.SlowModeDelay = reader.ReadInt();
                    return true;
                case 0xC257FC91u when name.SequenceEqual(propName_slow_mode_delay_expires_in):
                    obj.SlowModeDelayExpiresIn = reader.ReadDouble();
                    return true;
                case 0x285814EAu when name.SequenceEqual(propName_can_get_members):
                    obj.CanGetMembers = reader.ReadBool();
                    return true;
                case 0x4CE2966Bu when name.SequenceEqual(propName_can_set_username):
                    obj.CanSetUsername = reader.ReadBool();
                    return true;
                case 0xBCB6F699u when name.SequenceEqual(propName_can_set_sticker_set):
                    obj.CanSetStickerSet = reader.ReadBool();
                    return true;
                case 0xE3F48D8Cu when name.SequenceEqual(propName_can_set_location):
                    obj.CanSetLocation = reader.ReadBool();
                    return true;
                case 0x665A173Cu when name.SequenceEqual(propName_can_get_statistics):
                    obj.CanGetStatistics = reader.ReadBool();
                    return true;
                case 0xA7C1E9CAu when name.SequenceEqual(propName_is_all_history_available):
                    obj.IsAllHistoryAvailable = reader.ReadBool();
                    return true;
                case 0xB4C77DCDu when name.SequenceEqual(propName_sticker_set_id):
                    obj.StickerSetId = reader.ReadInt64String();
                    return true;
                case 0x0BF5A9A6u when name.SequenceEqual(propName_location):
                    obj.Location = reader.ReadTLObject<ChatLocation>();
                    return true;
                case 0x21730C41u when name.SequenceEqual(propName_invite_link):
                    obj.InviteLink = reader.ReadString();
                    return true;
                case 0x1AB014ADu when name.SequenceEqual(propName_upgraded_from_basic_group_id):
                    obj.UpgradedFromBasicGroupId = reader.ReadInt();
                    return true;
                case 0x39B2D119u when name.SequenceEqual(propName_upgraded_from_max_message_id):
                    obj.UpgradedFromMaxMessageId = reader.ReadLong();
                    return true;
            }
            return false;
        }
    }

    [TLType("secretChatStatePending")]
    partial class SecretChatStatePendingConverter : TLObjectConverter<SecretChatStatePending>
    {
        public static BaseConverter CreateConverterInstance() => new SecretChatStatePendingConverter();
        public override TLObject CreateObjectInstance() => new SecretChatStatePending();
    }

    [TLType("secretChatStateReady")]
    partial class SecretChatStateReadyConverter : TLObjectConverter<SecretChatStateReady>
    {
        public static BaseConverter CreateConverterInstance() => new SecretChatStateReadyConverter();
        public override TLObject CreateObjectInstance() => new SecretChatStateReady();
    }

    [TLType("secretChatStateClosed")]
    partial class SecretChatStateClosedConverter : TLObjectConverter<SecretChatStateClosed>
    {
        public static BaseConverter CreateConverterInstance() => new SecretChatStateClosedConverter();
        public override TLObject CreateObjectInstance() => new SecretChatStateClosed();
    }

    [TLType("secretChat")]
    partial class SecretChatConverter : TLObjectConverter<SecretChat>
    {
        public static BaseConverter CreateConverterInstance() => new SecretChatConverter();
        public override TLObject CreateObjectInstance() => new SecretChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SecretChat)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt();
                    return true;
                case 0x10A75CDAu when name.SequenceEqual(propName_user_id):
                    obj.UserId = reader.ReadInt();
                    return true;
                case 0x783132F6u when name.SequenceEqual(propName_state):
                    obj.State = reader.ReadTLObject<SecretChatState>();
                    return true;
                case 0x33C97872u when name.SequenceEqual(propName_is_outbound):
                    obj.IsOutbound = reader.ReadBool();
                    return true;
                case 0xBD2B425Bu when name.SequenceEqual(propName_ttl):
                    obj.Ttl = reader.ReadInt();
                    return true;
                case 0x53959175u when name.SequenceEqual(propName_key_hash):
                    obj.KeyHash = reader.ReadBase64String();
                    return true;
                case 0x07A640F6u when name.SequenceEqual(propName_layer):
                    obj.Layer = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("messageForwardOriginUser")]
    partial class MessageForwardOriginUserConverter : TLObjectConverter<MessageForwardOriginUser>
    {
        public static BaseConverter CreateConverterInstance() => new MessageForwardOriginUserConverter();
        public override TLObject CreateObjectInstance() => new MessageForwardOriginUser();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageForwardOriginUser)tlobj;
            if (name.SequenceEqual(propName_sender_user_id))
            {
                obj.SenderUserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("messageForwardOriginChat")]
    partial class MessageForwardOriginChatConverter : TLObjectConverter<MessageForwardOriginChat>
    {
        public static BaseConverter CreateConverterInstance() => new MessageForwardOriginChatConverter();
        public override TLObject CreateObjectInstance() => new MessageForwardOriginChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageForwardOriginChat)tlobj;
            if (name.SequenceEqual(propName_sender_chat_id))
            {
                obj.SenderChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("messageForwardOriginHiddenUser")]
    partial class MessageForwardOriginHiddenUserConverter : TLObjectConverter<MessageForwardOriginHiddenUser>
    {
        public static BaseConverter CreateConverterInstance() => new MessageForwardOriginHiddenUserConverter();
        public override TLObject CreateObjectInstance() => new MessageForwardOriginHiddenUser();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageForwardOriginHiddenUser)tlobj;
            if (name.SequenceEqual(propName_sender_name))
            {
                obj.SenderName = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("messageForwardOriginChannel")]
    partial class MessageForwardOriginChannelConverter : TLObjectConverter<MessageForwardOriginChannel>
    {
        public static BaseConverter CreateConverterInstance() => new MessageForwardOriginChannelConverter();
        public override TLObject CreateObjectInstance() => new MessageForwardOriginChannel();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageForwardOriginChannel)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_author_signature))
            {
                obj.AuthorSignature = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("messageForwardInfo")]
    partial class MessageForwardInfoConverter : TLObjectConverter<MessageForwardInfo>
    {
        public static BaseConverter CreateConverterInstance() => new MessageForwardInfoConverter();
        public override TLObject CreateObjectInstance() => new MessageForwardInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageForwardInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xD97F9A4Fu when name.SequenceEqual(propName_origin):
                    obj.Origin = reader.ReadTLObject<MessageForwardOrigin>();
                    return true;
                case 0xD472DC59u when name.SequenceEqual(propName_date):
                    obj.Date = reader.ReadInt();
                    return true;
                case 0xCEE9E6BBu when name.SequenceEqual(propName_public_service_announcement_type):
                    obj.PublicServiceAnnouncementType = reader.ReadString();
                    return true;
                case 0xCBEE0078u when name.SequenceEqual(propName_from_chat_id):
                    obj.FromChatId = reader.ReadLong();
                    return true;
                case 0x00CB8E7Bu when name.SequenceEqual(propName_from_message_id):
                    obj.FromMessageId = reader.ReadLong();
                    return true;
            }
            return false;
        }
    }

    [TLType("messageReplyInfo")]
    partial class MessageReplyInfoConverter : TLObjectConverter<MessageReplyInfo>
    {
        public static BaseConverter CreateConverterInstance() => new MessageReplyInfoConverter();
        public override TLObject CreateObjectInstance() => new MessageReplyInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageReplyInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xAD594167u when name.SequenceEqual(propName_reply_count):
                    obj.ReplyCount = reader.ReadInt();
                    return true;
                case 0xD5465999u when name.SequenceEqual(propName_recent_replier_user_ids):
                    obj.RecentReplierUserIds = reader.ReadInt32Array();
                    return true;
                case 0xD1B518C3u when name.SequenceEqual(propName_last_read_inbox_message_id):
                    obj.LastReadInboxMessageId = reader.ReadLong();
                    return true;
                case 0x3E6F9B32u when name.SequenceEqual(propName_last_read_outbox_message_id):
                    obj.LastReadOutboxMessageId = reader.ReadLong();
                    return true;
                case 0xD36E97DFu when name.SequenceEqual(propName_last_message_id):
                    obj.LastMessageId = reader.ReadLong();
                    return true;
            }
            return false;
        }
    }

    [TLType("messageInteractionInfo")]
    partial class MessageInteractionInfoConverter : TLObjectConverter<MessageInteractionInfo>
    {
        public static BaseConverter CreateConverterInstance() => new MessageInteractionInfoConverter();
        public override TLObject CreateObjectInstance() => new MessageInteractionInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageInteractionInfo)tlobj;
            if (name.SequenceEqual(propName_view_count))
            {
                obj.ViewCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_forward_count))
            {
                obj.ForwardCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_reply_info))
            {
                obj.ReplyInfo = reader.ReadTLObject<MessageReplyInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageSendingStatePending")]
    partial class MessageSendingStatePendingConverter : TLObjectConverter<MessageSendingStatePending>
    {
        public static BaseConverter CreateConverterInstance() => new MessageSendingStatePendingConverter();
        public override TLObject CreateObjectInstance() => new MessageSendingStatePending();
    }

    [TLType("messageSendingStateFailed")]
    partial class MessageSendingStateFailedConverter : TLObjectConverter<MessageSendingStateFailed>
    {
        public static BaseConverter CreateConverterInstance() => new MessageSendingStateFailedConverter();
        public override TLObject CreateObjectInstance() => new MessageSendingStateFailed();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageSendingStateFailed)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x14FC1187u when name.SequenceEqual(propName_error_code):
                    obj.ErrorCode = reader.ReadInt();
                    return true;
                case 0x3A4689D1u when name.SequenceEqual(propName_error_message):
                    obj.ErrorMessage = reader.ReadString();
                    return true;
                case 0x94A054D4u when name.SequenceEqual(propName_can_retry):
                    obj.CanRetry = reader.ReadBool();
                    return true;
                case 0x538711E8u when name.SequenceEqual(propName_retry_after):
                    obj.RetryAfter = reader.ReadDouble();
                    return true;
            }
            return false;
        }
    }

    [TLType("message")]
    partial class MessageConverter : TLObjectConverter<Message>
    {
        public static BaseConverter CreateConverterInstance() => new MessageConverter();
        public override TLObject CreateObjectInstance() => new Message();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Message)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadLong();
                    return true;
                case 0x3FFD45EEu when name.SequenceEqual(propName_sender_user_id):
                    obj.SenderUserId = reader.ReadInt();
                    return true;
                case 0x215B6CBDu when name.SequenceEqual(propName_sender_chat_id):
                    obj.SenderChatId = reader.ReadLong();
                    return true;
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x527283A7u when name.SequenceEqual(propName_sending_state):
                    obj.SendingState = reader.ReadTLObject<MessageSendingState>();
                    return true;
                case 0xB990D635u when name.SequenceEqual(propName_scheduling_state):
                    obj.SchedulingState = reader.ReadTLObject<MessageSchedulingState>();
                    return true;
                case 0x5457F918u when name.SequenceEqual(propName_is_outgoing):
                    obj.IsOutgoing = reader.ReadBool();
                    return true;
                case 0x3FBC03E1u when name.SequenceEqual(propName_can_be_edited):
                    obj.CanBeEdited = reader.ReadBool();
                    return true;
                case 0xDCA38120u when name.SequenceEqual(propName_can_be_forwarded):
                    obj.CanBeForwarded = reader.ReadBool();
                    return true;
                case 0x89543873u when name.SequenceEqual(propName_can_be_deleted_only_for_self):
                    obj.CanBeDeletedOnlyForSelf = reader.ReadBool();
                    return true;
                case 0x0FBEB0A2u when name.SequenceEqual(propName_can_be_deleted_for_all_users):
                    obj.CanBeDeletedForAllUsers = reader.ReadBool();
                    return true;
                case 0x665A173Cu when name.SequenceEqual(propName_can_get_statistics):
                    obj.CanGetStatistics = reader.ReadBool();
                    return true;
                case 0x6E190C3Bu when name.SequenceEqual(propName_can_get_message_thread):
                    obj.CanGetMessageThread = reader.ReadBool();
                    return true;
                case 0x790C2264u when name.SequenceEqual(propName_is_channel_post):
                    obj.IsChannelPost = reader.ReadBool();
                    return true;
                case 0xFB07B6DFu when name.SequenceEqual(propName_contains_unread_mention):
                    obj.ContainsUnreadMention = reader.ReadBool();
                    return true;
                case 0xD472DC59u when name.SequenceEqual(propName_date):
                    obj.Date = reader.ReadInt();
                    return true;
                case 0x9165AFAEu when name.SequenceEqual(propName_edit_date):
                    obj.EditDate = reader.ReadInt();
                    return true;
                case 0xBD6DAFCBu when name.SequenceEqual(propName_forward_info):
                    obj.ForwardInfo = reader.ReadTLObject<MessageForwardInfo>();
                    return true;
                case 0x492E3C60u when name.SequenceEqual(propName_interaction_info):
                    obj.InteractionInfo = reader.ReadTLObject<MessageInteractionInfo>();
                    return true;
                case 0xAC6A25CEu when name.SequenceEqual(propName_reply_in_chat_id):
                    obj.ReplyInChatId = reader.ReadLong();
                    return true;
                case 0x7E9ECDF7u when name.SequenceEqual(propName_reply_to_message_id):
                    obj.ReplyToMessageId = reader.ReadLong();
                    return true;
                case 0xCF8E5A53u when name.SequenceEqual(propName_message_thread_id):
                    obj.MessageThreadId = reader.ReadLong();
                    return true;
                case 0xBD2B425Bu when name.SequenceEqual(propName_ttl):
                    obj.Ttl = reader.ReadInt();
                    return true;
                case 0x3E6919CEu when name.SequenceEqual(propName_ttl_expires_in):
                    obj.TtlExpiresIn = reader.ReadDouble();
                    return true;
                case 0xF0AC6D53u when name.SequenceEqual(propName_via_bot_user_id):
                    obj.ViaBotUserId = reader.ReadInt();
                    return true;
                case 0xBC98AC7Fu when name.SequenceEqual(propName_author_signature):
                    obj.AuthorSignature = reader.ReadString();
                    return true;
                case 0x3FB04A39u when name.SequenceEqual(propName_media_album_id):
                    obj.MediaAlbumId = reader.ReadInt64String();
                    return true;
                case 0x32B3FDB2u when name.SequenceEqual(propName_restriction_reason):
                    obj.RestrictionReason = reader.ReadString();
                    return true;
                case 0x90BEC3C2u when name.SequenceEqual(propName_content):
                    obj.Content = reader.ReadTLObject<MessageContent>();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
            }
            return false;
        }
    }

    [TLType("messages")]
    partial class MessagesConverter : TLObjectConverter<Messages>
    {
        public static BaseConverter CreateConverterInstance() => new MessagesConverter();
        public override TLObject CreateObjectInstance() => new Messages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Messages)tlobj;
            if (name.SequenceEqual(propName_total_count))
            {
                obj.TotalCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_messages))
            {
                obj.Messages_ = reader.ReadObjectArray<Message>();
                return true;
            }
            return false;
        }
    }

    [TLType("foundMessages")]
    partial class FoundMessagesConverter : TLObjectConverter<FoundMessages>
    {
        public static BaseConverter CreateConverterInstance() => new FoundMessagesConverter();
        public override TLObject CreateObjectInstance() => new FoundMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (FoundMessages)tlobj;
            if (name.SequenceEqual(propName_total_count))
            {
                obj.TotalCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_messages))
            {
                obj.Messages = reader.ReadObjectArray<Message>();
                return true;
            }
            if (name.SequenceEqual(propName_next_offset))
            {
                obj.NextOffset = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("notificationSettingsScopePrivateChats")]
    partial class NotificationSettingsScopePrivateChatsConverter : TLObjectConverter<NotificationSettingsScopePrivateChats>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationSettingsScopePrivateChatsConverter();
        public override TLObject CreateObjectInstance() => new NotificationSettingsScopePrivateChats();
    }

    [TLType("notificationSettingsScopeGroupChats")]
    partial class NotificationSettingsScopeGroupChatsConverter : TLObjectConverter<NotificationSettingsScopeGroupChats>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationSettingsScopeGroupChatsConverter();
        public override TLObject CreateObjectInstance() => new NotificationSettingsScopeGroupChats();
    }

    [TLType("notificationSettingsScopeChannelChats")]
    partial class NotificationSettingsScopeChannelChatsConverter : TLObjectConverter<NotificationSettingsScopeChannelChats>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationSettingsScopeChannelChatsConverter();
        public override TLObject CreateObjectInstance() => new NotificationSettingsScopeChannelChats();
    }

    [TLType("chatNotificationSettings")]
    partial class ChatNotificationSettingsConverter : TLObjectConverter<ChatNotificationSettings>
    {
        public static BaseConverter CreateConverterInstance() => new ChatNotificationSettingsConverter();
        public override TLObject CreateObjectInstance() => new ChatNotificationSettings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatNotificationSettings)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xE8772166u when name.SequenceEqual(propName_use_default_mute_for):
                    obj.UseDefaultMuteFor = reader.ReadBool();
                    return true;
                case 0xA70507B4u when name.SequenceEqual(propName_mute_for):
                    obj.MuteFor = reader.ReadInt();
                    return true;
                case 0xC656547Eu when name.SequenceEqual(propName_use_default_sound):
                    obj.UseDefaultSound = reader.ReadBool();
                    return true;
                case 0x0E0D9594u when name.SequenceEqual(propName_sound):
                    obj.Sound = reader.ReadString();
                    return true;
                case 0xA1C19BA9u when name.SequenceEqual(propName_use_default_show_preview):
                    obj.UseDefaultShowPreview = reader.ReadBool();
                    return true;
                case 0x33467D33u when name.SequenceEqual(propName_show_preview):
                    obj.ShowPreview = reader.ReadBool();
                    return true;
                case 0xE6B6CB07u when name.SequenceEqual(propName_use_default_disable_pinned_message_notifications):
                    obj.UseDefaultDisablePinnedMessageNotifications = reader.ReadBool();
                    return true;
                case 0x1309A3A1u when name.SequenceEqual(propName_disable_pinned_message_notifications):
                    obj.DisablePinnedMessageNotifications = reader.ReadBool();
                    return true;
                case 0xAB2F2823u when name.SequenceEqual(propName_use_default_disable_mention_notifications):
                    obj.UseDefaultDisableMentionNotifications = reader.ReadBool();
                    return true;
                case 0x75C24BCDu when name.SequenceEqual(propName_disable_mention_notifications):
                    obj.DisableMentionNotifications = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("scopeNotificationSettings")]
    partial class ScopeNotificationSettingsConverter : TLObjectConverter<ScopeNotificationSettings>
    {
        public static BaseConverter CreateConverterInstance() => new ScopeNotificationSettingsConverter();
        public override TLObject CreateObjectInstance() => new ScopeNotificationSettings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ScopeNotificationSettings)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA70507B4u when name.SequenceEqual(propName_mute_for):
                    obj.MuteFor = reader.ReadInt();
                    return true;
                case 0x0E0D9594u when name.SequenceEqual(propName_sound):
                    obj.Sound = reader.ReadString();
                    return true;
                case 0x33467D33u when name.SequenceEqual(propName_show_preview):
                    obj.ShowPreview = reader.ReadBool();
                    return true;
                case 0x1309A3A1u when name.SequenceEqual(propName_disable_pinned_message_notifications):
                    obj.DisablePinnedMessageNotifications = reader.ReadBool();
                    return true;
                case 0x75C24BCDu when name.SequenceEqual(propName_disable_mention_notifications):
                    obj.DisableMentionNotifications = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("draftMessage")]
    partial class DraftMessageConverter : TLObjectConverter<DraftMessage>
    {
        public static BaseConverter CreateConverterInstance() => new DraftMessageConverter();
        public override TLObject CreateObjectInstance() => new DraftMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DraftMessage)tlobj;
            if (name.SequenceEqual(propName_reply_to_message_id))
            {
                obj.ReplyToMessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_date))
            {
                obj.Date = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_input_message_text))
            {
                obj.InputMessageText = reader.ReadTLObject<InputMessageContent>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatTypePrivate")]
    partial class ChatTypePrivateConverter : TLObjectConverter<ChatTypePrivate>
    {
        public static BaseConverter CreateConverterInstance() => new ChatTypePrivateConverter();
        public override TLObject CreateObjectInstance() => new ChatTypePrivate();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatTypePrivate)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatTypeBasicGroup")]
    partial class ChatTypeBasicGroupConverter : TLObjectConverter<ChatTypeBasicGroup>
    {
        public static BaseConverter CreateConverterInstance() => new ChatTypeBasicGroupConverter();
        public override TLObject CreateObjectInstance() => new ChatTypeBasicGroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatTypeBasicGroup)tlobj;
            if (name.SequenceEqual(propName_basic_group_id))
            {
                obj.BasicGroupId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatTypeSupergroup")]
    partial class ChatTypeSupergroupConverter : TLObjectConverter<ChatTypeSupergroup>
    {
        public static BaseConverter CreateConverterInstance() => new ChatTypeSupergroupConverter();
        public override TLObject CreateObjectInstance() => new ChatTypeSupergroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatTypeSupergroup)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_is_channel))
            {
                obj.IsChannel = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("chatTypeSecret")]
    partial class ChatTypeSecretConverter : TLObjectConverter<ChatTypeSecret>
    {
        public static BaseConverter CreateConverterInstance() => new ChatTypeSecretConverter();
        public override TLObject CreateObjectInstance() => new ChatTypeSecret();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatTypeSecret)tlobj;
            if (name.SequenceEqual(propName_secret_chat_id))
            {
                obj.SecretChatId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatFilter")]
    partial class ChatFilterConverter : TLObjectConverter<ChatFilter>
    {
        public static BaseConverter CreateConverterInstance() => new ChatFilterConverter();
        public override TLObject CreateObjectInstance() => new ChatFilter();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatFilter)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x0A27A37Eu when name.SequenceEqual(propName_icon_name):
                    obj.IconName = reader.ReadString();
                    return true;
                case 0x679CFB1Fu when name.SequenceEqual(propName_pinned_chat_ids):
                    obj.PinnedChatIds = reader.ReadInt53Array();
                    return true;
                case 0x1DB7882Du when name.SequenceEqual(propName_included_chat_ids):
                    obj.IncludedChatIds = reader.ReadInt53Array();
                    return true;
                case 0xF594A297u when name.SequenceEqual(propName_excluded_chat_ids):
                    obj.ExcludedChatIds = reader.ReadInt53Array();
                    return true;
                case 0xD2828A75u when name.SequenceEqual(propName_exclude_muted):
                    obj.ExcludeMuted = reader.ReadBool();
                    return true;
                case 0x4339BF6Au when name.SequenceEqual(propName_exclude_read):
                    obj.ExcludeRead = reader.ReadBool();
                    return true;
                case 0x3DED06B4u when name.SequenceEqual(propName_exclude_archived):
                    obj.ExcludeArchived = reader.ReadBool();
                    return true;
                case 0x86CEE4E5u when name.SequenceEqual(propName_include_contacts):
                    obj.IncludeContacts = reader.ReadBool();
                    return true;
                case 0x068EB669u when name.SequenceEqual(propName_include_non_contacts):
                    obj.IncludeNonContacts = reader.ReadBool();
                    return true;
                case 0xA51E6C92u when name.SequenceEqual(propName_include_bots):
                    obj.IncludeBots = reader.ReadBool();
                    return true;
                case 0xAD9AE5A8u when name.SequenceEqual(propName_include_groups):
                    obj.IncludeGroups = reader.ReadBool();
                    return true;
                case 0x54D13F70u when name.SequenceEqual(propName_include_channels):
                    obj.IncludeChannels = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("chatFilterInfo")]
    partial class ChatFilterInfoConverter : TLObjectConverter<ChatFilterInfo>
    {
        public static BaseConverter CreateConverterInstance() => new ChatFilterInfoConverter();
        public override TLObject CreateObjectInstance() => new ChatFilterInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatFilterInfo)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_icon_name))
            {
                obj.IconName = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("recommendedChatFilter")]
    partial class RecommendedChatFilterConverter : TLObjectConverter<RecommendedChatFilter>
    {
        public static BaseConverter CreateConverterInstance() => new RecommendedChatFilterConverter();
        public override TLObject CreateObjectInstance() => new RecommendedChatFilter();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RecommendedChatFilter)tlobj;
            if (name.SequenceEqual(propName_filter))
            {
                obj.Filter = reader.ReadTLObject<ChatFilter>();
                return true;
            }
            if (name.SequenceEqual(propName_description))
            {
                obj.Description = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("recommendedChatFilters")]
    partial class RecommendedChatFiltersConverter : TLObjectConverter<RecommendedChatFilters>
    {
        public static BaseConverter CreateConverterInstance() => new RecommendedChatFiltersConverter();
        public override TLObject CreateObjectInstance() => new RecommendedChatFilters();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RecommendedChatFilters)tlobj;
            if (name.SequenceEqual(propName_chat_filters))
            {
                obj.ChatFilters = reader.ReadObjectArray<RecommendedChatFilter>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatListMain")]
    partial class ChatListMainConverter : TLObjectConverter<ChatListMain>
    {
        public static BaseConverter CreateConverterInstance() => new ChatListMainConverter();
        public override TLObject CreateObjectInstance() => new ChatListMain();
    }

    [TLType("chatListArchive")]
    partial class ChatListArchiveConverter : TLObjectConverter<ChatListArchive>
    {
        public static BaseConverter CreateConverterInstance() => new ChatListArchiveConverter();
        public override TLObject CreateObjectInstance() => new ChatListArchive();
    }

    [TLType("chatListFilter")]
    partial class ChatListFilterConverter : TLObjectConverter<ChatListFilter>
    {
        public static BaseConverter CreateConverterInstance() => new ChatListFilterConverter();
        public override TLObject CreateObjectInstance() => new ChatListFilter();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatListFilter)tlobj;
            if (name.SequenceEqual(propName_chat_filter_id))
            {
                obj.ChatFilterId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatLists")]
    partial class ChatListsConverter : TLObjectConverter<ChatLists>
    {
        public static BaseConverter CreateConverterInstance() => new ChatListsConverter();
        public override TLObject CreateObjectInstance() => new ChatLists();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatLists)tlobj;
            if (name.SequenceEqual(propName_chat_lists))
            {
                obj.ChatLists_ = reader.ReadObjectArray<ChatList>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatSourceMtprotoProxy")]
    partial class ChatSourceMtprotoProxyConverter : TLObjectConverter<ChatSourceMtprotoProxy>
    {
        public static BaseConverter CreateConverterInstance() => new ChatSourceMtprotoProxyConverter();
        public override TLObject CreateObjectInstance() => new ChatSourceMtprotoProxy();
    }

    [TLType("chatSourcePublicServiceAnnouncement")]
    partial class ChatSourcePublicServiceAnnouncementConverter : TLObjectConverter<ChatSourcePublicServiceAnnouncement>
    {
        public static BaseConverter CreateConverterInstance() => new ChatSourcePublicServiceAnnouncementConverter();
        public override TLObject CreateObjectInstance() => new ChatSourcePublicServiceAnnouncement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatSourcePublicServiceAnnouncement)tlobj;
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("chatPosition")]
    partial class ChatPositionConverter : TLObjectConverter<ChatPosition>
    {
        public static BaseConverter CreateConverterInstance() => new ChatPositionConverter();
        public override TLObject CreateObjectInstance() => new ChatPosition();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatPosition)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x0CFB5881u when name.SequenceEqual(propName_list):
                    obj.List = reader.ReadTLObject<ChatList>();
                    return true;
                case 0x732C1097u when name.SequenceEqual(propName_order):
                    obj.Order = reader.ReadInt64String();
                    return true;
                case 0xC372E838u when name.SequenceEqual(propName_is_pinned):
                    obj.IsPinned = reader.ReadBool();
                    return true;
                case 0x1BCF29D8u when name.SequenceEqual(propName_source):
                    obj.Source = reader.ReadTLObject<ChatSource>();
                    return true;
            }
            return false;
        }
    }

    [TLType("chat")]
    partial class ChatConverter : TLObjectConverter<Chat>
    {
        public static BaseConverter CreateConverterInstance() => new ChatConverter();
        public override TLObject CreateObjectInstance() => new Chat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Chat)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadLong();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<ChatType>();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<ChatPhotoInfo>();
                    return true;
                case 0x7A3F08E3u when name.SequenceEqual(propName_permissions):
                    obj.Permissions = reader.ReadTLObject<ChatPermissions>();
                    return true;
                case 0x5DFAC179u when name.SequenceEqual(propName_last_message):
                    obj.LastMessage = reader.ReadTLObject<Message>();
                    return true;
                case 0x5ED8887Bu when name.SequenceEqual(propName_positions):
                    obj.Positions = reader.ReadObjectArray<ChatPosition>();
                    return true;
                case 0x91C52657u when name.SequenceEqual(propName_is_marked_as_unread):
                    obj.IsMarkedAsUnread = reader.ReadBool();
                    return true;
                case 0x07B5CBFAu when name.SequenceEqual(propName_is_blocked):
                    obj.IsBlocked = reader.ReadBool();
                    return true;
                case 0x27893424u when name.SequenceEqual(propName_has_scheduled_messages):
                    obj.HasScheduledMessages = reader.ReadBool();
                    return true;
                case 0x89543873u when name.SequenceEqual(propName_can_be_deleted_only_for_self):
                    obj.CanBeDeletedOnlyForSelf = reader.ReadBool();
                    return true;
                case 0x0FBEB0A2u when name.SequenceEqual(propName_can_be_deleted_for_all_users):
                    obj.CanBeDeletedForAllUsers = reader.ReadBool();
                    return true;
                case 0x60152207u when name.SequenceEqual(propName_can_be_reported):
                    obj.CanBeReported = reader.ReadBool();
                    return true;
                case 0x628B4D95u when name.SequenceEqual(propName_default_disable_notification):
                    obj.DefaultDisableNotification = reader.ReadBool();
                    return true;
                case 0x5ED9F1BEu when name.SequenceEqual(propName_unread_count):
                    obj.UnreadCount = reader.ReadInt();
                    return true;
                case 0xD1B518C3u when name.SequenceEqual(propName_last_read_inbox_message_id):
                    obj.LastReadInboxMessageId = reader.ReadLong();
                    return true;
                case 0x3E6F9B32u when name.SequenceEqual(propName_last_read_outbox_message_id):
                    obj.LastReadOutboxMessageId = reader.ReadLong();
                    return true;
                case 0x610DAAAFu when name.SequenceEqual(propName_unread_mention_count):
                    obj.UnreadMentionCount = reader.ReadInt();
                    return true;
                case 0x27FB0906u when name.SequenceEqual(propName_notification_settings):
                    obj.NotificationSettings = reader.ReadTLObject<ChatNotificationSettings>();
                    return true;
                case 0x753C5495u when name.SequenceEqual(propName_action_bar):
                    obj.ActionBar = reader.ReadTLObject<ChatActionBar>();
                    return true;
                case 0x2E3B60D5u when name.SequenceEqual(propName_pinned_message_id):
                    obj.PinnedMessageId = reader.ReadLong();
                    return true;
                case 0xD8F5BB18u when name.SequenceEqual(propName_reply_markup_message_id):
                    obj.ReplyMarkupMessageId = reader.ReadLong();
                    return true;
                case 0xAEEC9220u when name.SequenceEqual(propName_draft_message):
                    obj.DraftMessage = reader.ReadTLObject<DraftMessage>();
                    return true;
                case 0xB6EC3A9Bu when name.SequenceEqual(propName_client_data):
                    obj.ClientData = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("chats")]
    partial class ChatsConverter : TLObjectConverter<Chats>
    {
        public static BaseConverter CreateConverterInstance() => new ChatsConverter();
        public override TLObject CreateObjectInstance() => new Chats();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Chats)tlobj;
            if (name.SequenceEqual(propName_total_count))
            {
                obj.TotalCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_chat_ids))
            {
                obj.ChatIds = reader.ReadInt53Array();
                return true;
            }
            return false;
        }
    }

    [TLType("chatNearby")]
    partial class ChatNearbyConverter : TLObjectConverter<ChatNearby>
    {
        public static BaseConverter CreateConverterInstance() => new ChatNearbyConverter();
        public override TLObject CreateObjectInstance() => new ChatNearby();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatNearby)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_distance))
            {
                obj.Distance = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatsNearby")]
    partial class ChatsNearbyConverter : TLObjectConverter<ChatsNearby>
    {
        public static BaseConverter CreateConverterInstance() => new ChatsNearbyConverter();
        public override TLObject CreateObjectInstance() => new ChatsNearby();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatsNearby)tlobj;
            if (name.SequenceEqual(propName_users_nearby))
            {
                obj.UsersNearby = reader.ReadObjectArray<ChatNearby>();
                return true;
            }
            if (name.SequenceEqual(propName_supergroups_nearby))
            {
                obj.SupergroupsNearby = reader.ReadObjectArray<ChatNearby>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatInviteLink")]
    partial class ChatInviteLinkConverter : TLObjectConverter<ChatInviteLink>
    {
        public static BaseConverter CreateConverterInstance() => new ChatInviteLinkConverter();
        public override TLObject CreateObjectInstance() => new ChatInviteLink();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatInviteLink)tlobj;
            if (name.SequenceEqual(propName_invite_link))
            {
                obj.InviteLink = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("chatInviteLinkInfo")]
    partial class ChatInviteLinkInfoConverter : TLObjectConverter<ChatInviteLinkInfo>
    {
        public static BaseConverter CreateConverterInstance() => new ChatInviteLinkInfoConverter();
        public override TLObject CreateObjectInstance() => new ChatInviteLinkInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatInviteLinkInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xF6DE892Fu when name.SequenceEqual(propName_accessible_for):
                    obj.AccessibleFor = reader.ReadInt();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<ChatType>();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<ChatPhotoInfo>();
                    return true;
                case 0x512E01CBu when name.SequenceEqual(propName_member_count):
                    obj.MemberCount = reader.ReadInt();
                    return true;
                case 0x36F5F4E2u when name.SequenceEqual(propName_member_user_ids):
                    obj.MemberUserIds = reader.ReadInt32Array();
                    return true;
                case 0xA0F3B367u when name.SequenceEqual(propName_is_public):
                    obj.IsPublic = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("publicChatTypeHasUsername")]
    partial class PublicChatTypeHasUsernameConverter : TLObjectConverter<PublicChatTypeHasUsername>
    {
        public static BaseConverter CreateConverterInstance() => new PublicChatTypeHasUsernameConverter();
        public override TLObject CreateObjectInstance() => new PublicChatTypeHasUsername();
    }

    [TLType("publicChatTypeIsLocationBased")]
    partial class PublicChatTypeIsLocationBasedConverter : TLObjectConverter<PublicChatTypeIsLocationBased>
    {
        public static BaseConverter CreateConverterInstance() => new PublicChatTypeIsLocationBasedConverter();
        public override TLObject CreateObjectInstance() => new PublicChatTypeIsLocationBased();
    }

    [TLType("chatActionBarReportSpam")]
    partial class ChatActionBarReportSpamConverter : TLObjectConverter<ChatActionBarReportSpam>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionBarReportSpamConverter();
        public override TLObject CreateObjectInstance() => new ChatActionBarReportSpam();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatActionBarReportSpam)tlobj;
            if (name.SequenceEqual(propName_can_unarchive))
            {
                obj.CanUnarchive = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("chatActionBarReportUnrelatedLocation")]
    partial class ChatActionBarReportUnrelatedLocationConverter : TLObjectConverter<ChatActionBarReportUnrelatedLocation>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionBarReportUnrelatedLocationConverter();
        public override TLObject CreateObjectInstance() => new ChatActionBarReportUnrelatedLocation();
    }

    [TLType("chatActionBarReportAddBlock")]
    partial class ChatActionBarReportAddBlockConverter : TLObjectConverter<ChatActionBarReportAddBlock>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionBarReportAddBlockConverter();
        public override TLObject CreateObjectInstance() => new ChatActionBarReportAddBlock();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatActionBarReportAddBlock)tlobj;
            if (name.SequenceEqual(propName_can_unarchive))
            {
                obj.CanUnarchive = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_distance))
            {
                obj.Distance = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatActionBarAddContact")]
    partial class ChatActionBarAddContactConverter : TLObjectConverter<ChatActionBarAddContact>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionBarAddContactConverter();
        public override TLObject CreateObjectInstance() => new ChatActionBarAddContact();
    }

    [TLType("chatActionBarSharePhoneNumber")]
    partial class ChatActionBarSharePhoneNumberConverter : TLObjectConverter<ChatActionBarSharePhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionBarSharePhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new ChatActionBarSharePhoneNumber();
    }

    [TLType("keyboardButtonTypeText")]
    partial class KeyboardButtonTypeTextConverter : TLObjectConverter<KeyboardButtonTypeText>
    {
        public static BaseConverter CreateConverterInstance() => new KeyboardButtonTypeTextConverter();
        public override TLObject CreateObjectInstance() => new KeyboardButtonTypeText();
    }

    [TLType("keyboardButtonTypeRequestPhoneNumber")]
    partial class KeyboardButtonTypeRequestPhoneNumberConverter : TLObjectConverter<KeyboardButtonTypeRequestPhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new KeyboardButtonTypeRequestPhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new KeyboardButtonTypeRequestPhoneNumber();
    }

    [TLType("keyboardButtonTypeRequestLocation")]
    partial class KeyboardButtonTypeRequestLocationConverter : TLObjectConverter<KeyboardButtonTypeRequestLocation>
    {
        public static BaseConverter CreateConverterInstance() => new KeyboardButtonTypeRequestLocationConverter();
        public override TLObject CreateObjectInstance() => new KeyboardButtonTypeRequestLocation();
    }

    [TLType("keyboardButtonTypeRequestPoll")]
    partial class KeyboardButtonTypeRequestPollConverter : TLObjectConverter<KeyboardButtonTypeRequestPoll>
    {
        public static BaseConverter CreateConverterInstance() => new KeyboardButtonTypeRequestPollConverter();
        public override TLObject CreateObjectInstance() => new KeyboardButtonTypeRequestPoll();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (KeyboardButtonTypeRequestPoll)tlobj;
            if (name.SequenceEqual(propName_force_regular))
            {
                obj.ForceRegular = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_force_quiz))
            {
                obj.ForceQuiz = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("keyboardButton")]
    partial class KeyboardButtonConverter : TLObjectConverter<KeyboardButton>
    {
        public static BaseConverter CreateConverterInstance() => new KeyboardButtonConverter();
        public override TLObject CreateObjectInstance() => new KeyboardButton();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (KeyboardButton)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<KeyboardButtonType>();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineKeyboardButtonTypeUrl")]
    partial class InlineKeyboardButtonTypeUrlConverter : TLObjectConverter<InlineKeyboardButtonTypeUrl>
    {
        public static BaseConverter CreateConverterInstance() => new InlineKeyboardButtonTypeUrlConverter();
        public override TLObject CreateObjectInstance() => new InlineKeyboardButtonTypeUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineKeyboardButtonTypeUrl)tlobj;
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineKeyboardButtonTypeLoginUrl")]
    partial class InlineKeyboardButtonTypeLoginUrlConverter : TLObjectConverter<InlineKeyboardButtonTypeLoginUrl>
    {
        public static BaseConverter CreateConverterInstance() => new InlineKeyboardButtonTypeLoginUrlConverter();
        public override TLObject CreateObjectInstance() => new InlineKeyboardButtonTypeLoginUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineKeyboardButtonTypeLoginUrl)tlobj;
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_forward_text))
            {
                obj.ForwardText = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineKeyboardButtonTypeCallback")]
    partial class InlineKeyboardButtonTypeCallbackConverter : TLObjectConverter<InlineKeyboardButtonTypeCallback>
    {
        public static BaseConverter CreateConverterInstance() => new InlineKeyboardButtonTypeCallbackConverter();
        public override TLObject CreateObjectInstance() => new InlineKeyboardButtonTypeCallback();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineKeyboardButtonTypeCallback)tlobj;
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineKeyboardButtonTypeCallbackWithPassword")]
    partial class InlineKeyboardButtonTypeCallbackWithPasswordConverter : TLObjectConverter<InlineKeyboardButtonTypeCallbackWithPassword>
    {
        public static BaseConverter CreateConverterInstance() => new InlineKeyboardButtonTypeCallbackWithPasswordConverter();
        public override TLObject CreateObjectInstance() => new InlineKeyboardButtonTypeCallbackWithPassword();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineKeyboardButtonTypeCallbackWithPassword)tlobj;
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineKeyboardButtonTypeCallbackGame")]
    partial class InlineKeyboardButtonTypeCallbackGameConverter : TLObjectConverter<InlineKeyboardButtonTypeCallbackGame>
    {
        public static BaseConverter CreateConverterInstance() => new InlineKeyboardButtonTypeCallbackGameConverter();
        public override TLObject CreateObjectInstance() => new InlineKeyboardButtonTypeCallbackGame();
    }

    [TLType("inlineKeyboardButtonTypeSwitchInline")]
    partial class InlineKeyboardButtonTypeSwitchInlineConverter : TLObjectConverter<InlineKeyboardButtonTypeSwitchInline>
    {
        public static BaseConverter CreateConverterInstance() => new InlineKeyboardButtonTypeSwitchInlineConverter();
        public override TLObject CreateObjectInstance() => new InlineKeyboardButtonTypeSwitchInline();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineKeyboardButtonTypeSwitchInline)tlobj;
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_in_current_chat))
            {
                obj.InCurrentChat = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineKeyboardButtonTypeBuy")]
    partial class InlineKeyboardButtonTypeBuyConverter : TLObjectConverter<InlineKeyboardButtonTypeBuy>
    {
        public static BaseConverter CreateConverterInstance() => new InlineKeyboardButtonTypeBuyConverter();
        public override TLObject CreateObjectInstance() => new InlineKeyboardButtonTypeBuy();
    }

    [TLType("inlineKeyboardButton")]
    partial class InlineKeyboardButtonConverter : TLObjectConverter<InlineKeyboardButton>
    {
        public static BaseConverter CreateConverterInstance() => new InlineKeyboardButtonConverter();
        public override TLObject CreateObjectInstance() => new InlineKeyboardButton();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineKeyboardButton)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<InlineKeyboardButtonType>();
                return true;
            }
            return false;
        }
    }

    [TLType("replyMarkupRemoveKeyboard")]
    partial class ReplyMarkupRemoveKeyboardConverter : TLObjectConverter<ReplyMarkupRemoveKeyboard>
    {
        public static BaseConverter CreateConverterInstance() => new ReplyMarkupRemoveKeyboardConverter();
        public override TLObject CreateObjectInstance() => new ReplyMarkupRemoveKeyboard();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ReplyMarkupRemoveKeyboard)tlobj;
            if (name.SequenceEqual(propName_is_personal))
            {
                obj.IsPersonal = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("replyMarkupForceReply")]
    partial class ReplyMarkupForceReplyConverter : TLObjectConverter<ReplyMarkupForceReply>
    {
        public static BaseConverter CreateConverterInstance() => new ReplyMarkupForceReplyConverter();
        public override TLObject CreateObjectInstance() => new ReplyMarkupForceReply();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ReplyMarkupForceReply)tlobj;
            if (name.SequenceEqual(propName_is_personal))
            {
                obj.IsPersonal = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("replyMarkupShowKeyboard")]
    partial class ReplyMarkupShowKeyboardConverter : TLObjectConverter<ReplyMarkupShowKeyboard>
    {
        public static BaseConverter CreateConverterInstance() => new ReplyMarkupShowKeyboardConverter();
        public override TLObject CreateObjectInstance() => new ReplyMarkupShowKeyboard();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ReplyMarkupShowKeyboard)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x2A37B398u when name.SequenceEqual(propName_rows):
                    obj.Rows = reader.ReadNestedObjectArray<KeyboardButton>();
                    return true;
                case 0x5C6CCA1Fu when name.SequenceEqual(propName_resize_keyboard):
                    obj.ResizeKeyboard = reader.ReadBool();
                    return true;
                case 0xF3FB98A9u when name.SequenceEqual(propName_one_time):
                    obj.OneTime = reader.ReadBool();
                    return true;
                case 0x61C3FF3Eu when name.SequenceEqual(propName_is_personal):
                    obj.IsPersonal = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("replyMarkupInlineKeyboard")]
    partial class ReplyMarkupInlineKeyboardConverter : TLObjectConverter<ReplyMarkupInlineKeyboard>
    {
        public static BaseConverter CreateConverterInstance() => new ReplyMarkupInlineKeyboardConverter();
        public override TLObject CreateObjectInstance() => new ReplyMarkupInlineKeyboard();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ReplyMarkupInlineKeyboard)tlobj;
            if (name.SequenceEqual(propName_rows))
            {
                obj.Rows = reader.ReadNestedObjectArray<InlineKeyboardButton>();
                return true;
            }
            return false;
        }
    }

    [TLType("loginUrlInfoOpen")]
    partial class LoginUrlInfoOpenConverter : TLObjectConverter<LoginUrlInfoOpen>
    {
        public static BaseConverter CreateConverterInstance() => new LoginUrlInfoOpenConverter();
        public override TLObject CreateObjectInstance() => new LoginUrlInfoOpen();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LoginUrlInfoOpen)tlobj;
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_skip_confirm))
            {
                obj.SkipConfirm = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("loginUrlInfoRequestConfirmation")]
    partial class LoginUrlInfoRequestConfirmationConverter : TLObjectConverter<LoginUrlInfoRequestConfirmation>
    {
        public static BaseConverter CreateConverterInstance() => new LoginUrlInfoRequestConfirmationConverter();
        public override TLObject CreateObjectInstance() => new LoginUrlInfoRequestConfirmation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LoginUrlInfoRequestConfirmation)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x328F4C1Eu when name.SequenceEqual(propName_url):
                    obj.Url = reader.ReadString();
                    return true;
                case 0xE79397F1u when name.SequenceEqual(propName_domain):
                    obj.Domain = reader.ReadString();
                    return true;
                case 0x0BC9D8A8u when name.SequenceEqual(propName_bot_user_id):
                    obj.BotUserId = reader.ReadInt();
                    return true;
                case 0x16AE92CDu when name.SequenceEqual(propName_request_write_access):
                    obj.RequestWriteAccess = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("messageThreadInfo")]
    partial class MessageThreadInfoConverter : TLObjectConverter<MessageThreadInfo>
    {
        public static BaseConverter CreateConverterInstance() => new MessageThreadInfoConverter();
        public override TLObject CreateObjectInstance() => new MessageThreadInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageThreadInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xCF8E5A53u when name.SequenceEqual(propName_message_thread_id):
                    obj.MessageThreadId = reader.ReadLong();
                    return true;
                case 0xBCE78E14u when name.SequenceEqual(propName_reply_info):
                    obj.ReplyInfo = reader.ReadTLObject<MessageReplyInfo>();
                    return true;
                case 0xC00385B5u when name.SequenceEqual(propName_messages):
                    obj.Messages = reader.ReadObjectArray<Message>();
                    return true;
                case 0xAEEC9220u when name.SequenceEqual(propName_draft_message):
                    obj.DraftMessage = reader.ReadTLObject<DraftMessage>();
                    return true;
            }
            return false;
        }
    }

    [TLType("richTextPlain")]
    partial class RichTextPlainConverter : TLObjectConverter<RichTextPlain>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextPlainConverter();
        public override TLObject CreateObjectInstance() => new RichTextPlain();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextPlain)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextBold")]
    partial class RichTextBoldConverter : TLObjectConverter<RichTextBold>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextBoldConverter();
        public override TLObject CreateObjectInstance() => new RichTextBold();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextBold)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextItalic")]
    partial class RichTextItalicConverter : TLObjectConverter<RichTextItalic>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextItalicConverter();
        public override TLObject CreateObjectInstance() => new RichTextItalic();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextItalic)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextUnderline")]
    partial class RichTextUnderlineConverter : TLObjectConverter<RichTextUnderline>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextUnderlineConverter();
        public override TLObject CreateObjectInstance() => new RichTextUnderline();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextUnderline)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextStrikethrough")]
    partial class RichTextStrikethroughConverter : TLObjectConverter<RichTextStrikethrough>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextStrikethroughConverter();
        public override TLObject CreateObjectInstance() => new RichTextStrikethrough();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextStrikethrough)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextFixed")]
    partial class RichTextFixedConverter : TLObjectConverter<RichTextFixed>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextFixedConverter();
        public override TLObject CreateObjectInstance() => new RichTextFixed();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextFixed)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextUrl")]
    partial class RichTextUrlConverter : TLObjectConverter<RichTextUrl>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextUrlConverter();
        public override TLObject CreateObjectInstance() => new RichTextUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextUrl)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_cached))
            {
                obj.IsCached = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextEmailAddress")]
    partial class RichTextEmailAddressConverter : TLObjectConverter<RichTextEmailAddress>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextEmailAddressConverter();
        public override TLObject CreateObjectInstance() => new RichTextEmailAddress();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextEmailAddress)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_email_address))
            {
                obj.EmailAddress = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextSubscript")]
    partial class RichTextSubscriptConverter : TLObjectConverter<RichTextSubscript>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextSubscriptConverter();
        public override TLObject CreateObjectInstance() => new RichTextSubscript();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextSubscript)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextSuperscript")]
    partial class RichTextSuperscriptConverter : TLObjectConverter<RichTextSuperscript>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextSuperscriptConverter();
        public override TLObject CreateObjectInstance() => new RichTextSuperscript();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextSuperscript)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextMarked")]
    partial class RichTextMarkedConverter : TLObjectConverter<RichTextMarked>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextMarkedConverter();
        public override TLObject CreateObjectInstance() => new RichTextMarked();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextMarked)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextPhoneNumber")]
    partial class RichTextPhoneNumberConverter : TLObjectConverter<RichTextPhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextPhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new RichTextPhoneNumber();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextPhoneNumber)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_phone_number))
            {
                obj.PhoneNumber = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextIcon")]
    partial class RichTextIconConverter : TLObjectConverter<RichTextIcon>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextIconConverter();
        public override TLObject CreateObjectInstance() => new RichTextIcon();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextIcon)tlobj;
            if (name.SequenceEqual(propName_document))
            {
                obj.Document = reader.ReadTLObject<Document>();
                return true;
            }
            if (name.SequenceEqual(propName_width))
            {
                obj.Width = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_height))
            {
                obj.Height = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextReference")]
    partial class RichTextReferenceConverter : TLObjectConverter<RichTextReference>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextReferenceConverter();
        public override TLObject CreateObjectInstance() => new RichTextReference();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextReference)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_reference_text))
            {
                obj.ReferenceText = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextAnchor")]
    partial class RichTextAnchorConverter : TLObjectConverter<RichTextAnchor>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextAnchorConverter();
        public override TLObject CreateObjectInstance() => new RichTextAnchor();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextAnchor)tlobj;
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("richTextAnchorLink")]
    partial class RichTextAnchorLinkConverter : TLObjectConverter<RichTextAnchorLink>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextAnchorLinkConverter();
        public override TLObject CreateObjectInstance() => new RichTextAnchorLink();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTextAnchorLink)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("richTexts")]
    partial class RichTextsConverter : TLObjectConverter<RichTexts>
    {
        public static BaseConverter CreateConverterInstance() => new RichTextsConverter();
        public override TLObject CreateObjectInstance() => new RichTexts();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RichTexts)tlobj;
            if (name.SequenceEqual(propName_texts))
            {
                obj.Texts = reader.ReadObjectArray<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockCaption")]
    partial class PageBlockCaptionConverter : TLObjectConverter<PageBlockCaption>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockCaptionConverter();
        public override TLObject CreateObjectInstance() => new PageBlockCaption();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockCaption)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_credit))
            {
                obj.Credit = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockListItem")]
    partial class PageBlockListItemConverter : TLObjectConverter<PageBlockListItem>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockListItemConverter();
        public override TLObject CreateObjectInstance() => new PageBlockListItem();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockListItem)tlobj;
            if (name.SequenceEqual(propName_label))
            {
                obj.Label = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_page_blocks))
            {
                obj.PageBlocks = reader.ReadObjectArray<PageBlock>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockHorizontalAlignmentLeft")]
    partial class PageBlockHorizontalAlignmentLeftConverter : TLObjectConverter<PageBlockHorizontalAlignmentLeft>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockHorizontalAlignmentLeftConverter();
        public override TLObject CreateObjectInstance() => new PageBlockHorizontalAlignmentLeft();
    }

    [TLType("pageBlockHorizontalAlignmentCenter")]
    partial class PageBlockHorizontalAlignmentCenterConverter : TLObjectConverter<PageBlockHorizontalAlignmentCenter>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockHorizontalAlignmentCenterConverter();
        public override TLObject CreateObjectInstance() => new PageBlockHorizontalAlignmentCenter();
    }

    [TLType("pageBlockHorizontalAlignmentRight")]
    partial class PageBlockHorizontalAlignmentRightConverter : TLObjectConverter<PageBlockHorizontalAlignmentRight>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockHorizontalAlignmentRightConverter();
        public override TLObject CreateObjectInstance() => new PageBlockHorizontalAlignmentRight();
    }

    [TLType("pageBlockVerticalAlignmentTop")]
    partial class PageBlockVerticalAlignmentTopConverter : TLObjectConverter<PageBlockVerticalAlignmentTop>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockVerticalAlignmentTopConverter();
        public override TLObject CreateObjectInstance() => new PageBlockVerticalAlignmentTop();
    }

    [TLType("pageBlockVerticalAlignmentMiddle")]
    partial class PageBlockVerticalAlignmentMiddleConverter : TLObjectConverter<PageBlockVerticalAlignmentMiddle>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockVerticalAlignmentMiddleConverter();
        public override TLObject CreateObjectInstance() => new PageBlockVerticalAlignmentMiddle();
    }

    [TLType("pageBlockVerticalAlignmentBottom")]
    partial class PageBlockVerticalAlignmentBottomConverter : TLObjectConverter<PageBlockVerticalAlignmentBottom>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockVerticalAlignmentBottomConverter();
        public override TLObject CreateObjectInstance() => new PageBlockVerticalAlignmentBottom();
    }

    [TLType("pageBlockTableCell")]
    partial class PageBlockTableCellConverter : TLObjectConverter<PageBlockTableCell>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockTableCellConverter();
        public override TLObject CreateObjectInstance() => new PageBlockTableCell();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockTableCell)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xBDE64E3Eu when name.SequenceEqual(propName_text):
                    obj.Text = reader.ReadTLObject<RichText>();
                    return true;
                case 0x4B0AF6AFu when name.SequenceEqual(propName_is_header):
                    obj.IsHeader = reader.ReadBool();
                    return true;
                case 0xE145F275u when name.SequenceEqual(propName_colspan):
                    obj.Colspan = reader.ReadInt();
                    return true;
                case 0x63DF422Fu when name.SequenceEqual(propName_rowspan):
                    obj.Rowspan = reader.ReadInt();
                    return true;
                case 0x602C63DEu when name.SequenceEqual(propName_align):
                    obj.Align = reader.ReadTLObject<PageBlockHorizontalAlignment>();
                    return true;
                case 0x5A9DCFE2u when name.SequenceEqual(propName_valign):
                    obj.Valign = reader.ReadTLObject<PageBlockVerticalAlignment>();
                    return true;
            }
            return false;
        }
    }

    [TLType("pageBlockRelatedArticle")]
    partial class PageBlockRelatedArticleConverter : TLObjectConverter<PageBlockRelatedArticle>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockRelatedArticleConverter();
        public override TLObject CreateObjectInstance() => new PageBlockRelatedArticle();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockRelatedArticle)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x328F4C1Eu when name.SequenceEqual(propName_url):
                    obj.Url = reader.ReadString();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<Photo>();
                    return true;
                case 0x4F7ABA56u when name.SequenceEqual(propName_author):
                    obj.Author = reader.ReadString();
                    return true;
                case 0x29D8F469u when name.SequenceEqual(propName_publish_date):
                    obj.PublishDate = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("pageBlockTitle")]
    partial class PageBlockTitleConverter : TLObjectConverter<PageBlockTitle>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockTitleConverter();
        public override TLObject CreateObjectInstance() => new PageBlockTitle();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockTitle)tlobj;
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockSubtitle")]
    partial class PageBlockSubtitleConverter : TLObjectConverter<PageBlockSubtitle>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockSubtitleConverter();
        public override TLObject CreateObjectInstance() => new PageBlockSubtitle();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockSubtitle)tlobj;
            if (name.SequenceEqual(propName_subtitle))
            {
                obj.Subtitle = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockAuthorDate")]
    partial class PageBlockAuthorDateConverter : TLObjectConverter<PageBlockAuthorDate>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockAuthorDateConverter();
        public override TLObject CreateObjectInstance() => new PageBlockAuthorDate();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockAuthorDate)tlobj;
            if (name.SequenceEqual(propName_author))
            {
                obj.Author = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_publish_date))
            {
                obj.PublishDate = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockHeader")]
    partial class PageBlockHeaderConverter : TLObjectConverter<PageBlockHeader>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockHeaderConverter();
        public override TLObject CreateObjectInstance() => new PageBlockHeader();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockHeader)tlobj;
            if (name.SequenceEqual(propName_header))
            {
                obj.Header = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockSubheader")]
    partial class PageBlockSubheaderConverter : TLObjectConverter<PageBlockSubheader>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockSubheaderConverter();
        public override TLObject CreateObjectInstance() => new PageBlockSubheader();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockSubheader)tlobj;
            if (name.SequenceEqual(propName_subheader))
            {
                obj.Subheader = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockKicker")]
    partial class PageBlockKickerConverter : TLObjectConverter<PageBlockKicker>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockKickerConverter();
        public override TLObject CreateObjectInstance() => new PageBlockKicker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockKicker)tlobj;
            if (name.SequenceEqual(propName_kicker))
            {
                obj.Kicker = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockParagraph")]
    partial class PageBlockParagraphConverter : TLObjectConverter<PageBlockParagraph>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockParagraphConverter();
        public override TLObject CreateObjectInstance() => new PageBlockParagraph();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockParagraph)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockPreformatted")]
    partial class PageBlockPreformattedConverter : TLObjectConverter<PageBlockPreformatted>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockPreformattedConverter();
        public override TLObject CreateObjectInstance() => new PageBlockPreformatted();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockPreformatted)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_language))
            {
                obj.Language = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockFooter")]
    partial class PageBlockFooterConverter : TLObjectConverter<PageBlockFooter>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockFooterConverter();
        public override TLObject CreateObjectInstance() => new PageBlockFooter();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockFooter)tlobj;
            if (name.SequenceEqual(propName_footer))
            {
                obj.Footer = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockDivider")]
    partial class PageBlockDividerConverter : TLObjectConverter<PageBlockDivider>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockDividerConverter();
        public override TLObject CreateObjectInstance() => new PageBlockDivider();
    }

    [TLType("pageBlockAnchor")]
    partial class PageBlockAnchorConverter : TLObjectConverter<PageBlockAnchor>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockAnchorConverter();
        public override TLObject CreateObjectInstance() => new PageBlockAnchor();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockAnchor)tlobj;
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockList")]
    partial class PageBlockListConverter : TLObjectConverter<PageBlockList>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockListConverter();
        public override TLObject CreateObjectInstance() => new PageBlockList();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockList)tlobj;
            if (name.SequenceEqual(propName_items))
            {
                obj.Items = reader.ReadObjectArray<PageBlockListItem>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockBlockQuote")]
    partial class PageBlockBlockQuoteConverter : TLObjectConverter<PageBlockBlockQuote>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockBlockQuoteConverter();
        public override TLObject CreateObjectInstance() => new PageBlockBlockQuote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockBlockQuote)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_credit))
            {
                obj.Credit = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockPullQuote")]
    partial class PageBlockPullQuoteConverter : TLObjectConverter<PageBlockPullQuote>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockPullQuoteConverter();
        public override TLObject CreateObjectInstance() => new PageBlockPullQuote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockPullQuote)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_credit))
            {
                obj.Credit = reader.ReadTLObject<RichText>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockAnimation")]
    partial class PageBlockAnimationConverter : TLObjectConverter<PageBlockAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockAnimationConverter();
        public override TLObject CreateObjectInstance() => new PageBlockAnimation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockAnimation)tlobj;
            if (name.SequenceEqual(propName_animation))
            {
                obj.Animation = reader.ReadTLObject<Animation>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<PageBlockCaption>();
                return true;
            }
            if (name.SequenceEqual(propName_need_autoplay))
            {
                obj.NeedAutoplay = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockAudio")]
    partial class PageBlockAudioConverter : TLObjectConverter<PageBlockAudio>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockAudioConverter();
        public override TLObject CreateObjectInstance() => new PageBlockAudio();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockAudio)tlobj;
            if (name.SequenceEqual(propName_audio))
            {
                obj.Audio = reader.ReadTLObject<Audio>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<PageBlockCaption>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockPhoto")]
    partial class PageBlockPhotoConverter : TLObjectConverter<PageBlockPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockPhotoConverter();
        public override TLObject CreateObjectInstance() => new PageBlockPhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockPhoto)tlobj;
            if (name.SequenceEqual(propName_photo))
            {
                obj.Photo = reader.ReadTLObject<Photo>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<PageBlockCaption>();
                return true;
            }
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockVideo")]
    partial class PageBlockVideoConverter : TLObjectConverter<PageBlockVideo>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockVideoConverter();
        public override TLObject CreateObjectInstance() => new PageBlockVideo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockVideo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xCEF90B6Cu when name.SequenceEqual(propName_video):
                    obj.Video = reader.ReadTLObject<Video>();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<PageBlockCaption>();
                    return true;
                case 0xD65A0D9Fu when name.SequenceEqual(propName_need_autoplay):
                    obj.NeedAutoplay = reader.ReadBool();
                    return true;
                case 0x20526695u when name.SequenceEqual(propName_is_looped):
                    obj.IsLooped = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("pageBlockVoiceNote")]
    partial class PageBlockVoiceNoteConverter : TLObjectConverter<PageBlockVoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockVoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new PageBlockVoiceNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockVoiceNote)tlobj;
            if (name.SequenceEqual(propName_voice_note))
            {
                obj.VoiceNote = reader.ReadTLObject<VoiceNote>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<PageBlockCaption>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockCover")]
    partial class PageBlockCoverConverter : TLObjectConverter<PageBlockCover>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockCoverConverter();
        public override TLObject CreateObjectInstance() => new PageBlockCover();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockCover)tlobj;
            if (name.SequenceEqual(propName_cover))
            {
                obj.Cover = reader.ReadTLObject<PageBlock>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockEmbedded")]
    partial class PageBlockEmbeddedConverter : TLObjectConverter<PageBlockEmbedded>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockEmbeddedConverter();
        public override TLObject CreateObjectInstance() => new PageBlockEmbedded();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockEmbedded)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x328F4C1Eu when name.SequenceEqual(propName_url):
                    obj.Url = reader.ReadString();
                    return true;
                case 0xD775A7D0u when name.SequenceEqual(propName_html):
                    obj.Html = reader.ReadString();
                    return true;
                case 0x96A21CF7u when name.SequenceEqual(propName_poster_photo):
                    obj.PosterPhoto = reader.ReadTLObject<Photo>();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<PageBlockCaption>();
                    return true;
                case 0x329523C4u when name.SequenceEqual(propName_is_full_width):
                    obj.IsFullWidth = reader.ReadBool();
                    return true;
                case 0x5792018Au when name.SequenceEqual(propName_allow_scrolling):
                    obj.AllowScrolling = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("pageBlockEmbeddedPost")]
    partial class PageBlockEmbeddedPostConverter : TLObjectConverter<PageBlockEmbeddedPost>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockEmbeddedPostConverter();
        public override TLObject CreateObjectInstance() => new PageBlockEmbeddedPost();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockEmbeddedPost)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x328F4C1Eu when name.SequenceEqual(propName_url):
                    obj.Url = reader.ReadString();
                    return true;
                case 0x4F7ABA56u when name.SequenceEqual(propName_author):
                    obj.Author = reader.ReadString();
                    return true;
                case 0x58762365u when name.SequenceEqual(propName_author_photo):
                    obj.AuthorPhoto = reader.ReadTLObject<Photo>();
                    return true;
                case 0xD472DC59u when name.SequenceEqual(propName_date):
                    obj.Date = reader.ReadInt();
                    return true;
                case 0x070646B5u when name.SequenceEqual(propName_page_blocks):
                    obj.PageBlocks = reader.ReadObjectArray<PageBlock>();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<PageBlockCaption>();
                    return true;
            }
            return false;
        }
    }

    [TLType("pageBlockCollage")]
    partial class PageBlockCollageConverter : TLObjectConverter<PageBlockCollage>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockCollageConverter();
        public override TLObject CreateObjectInstance() => new PageBlockCollage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockCollage)tlobj;
            if (name.SequenceEqual(propName_page_blocks))
            {
                obj.PageBlocks = reader.ReadObjectArray<PageBlock>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<PageBlockCaption>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockSlideshow")]
    partial class PageBlockSlideshowConverter : TLObjectConverter<PageBlockSlideshow>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockSlideshowConverter();
        public override TLObject CreateObjectInstance() => new PageBlockSlideshow();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockSlideshow)tlobj;
            if (name.SequenceEqual(propName_page_blocks))
            {
                obj.PageBlocks = reader.ReadObjectArray<PageBlock>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<PageBlockCaption>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockChatLink")]
    partial class PageBlockChatLinkConverter : TLObjectConverter<PageBlockChatLink>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockChatLinkConverter();
        public override TLObject CreateObjectInstance() => new PageBlockChatLink();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockChatLink)tlobj;
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_photo))
            {
                obj.Photo = reader.ReadTLObject<ChatPhotoInfo>();
                return true;
            }
            if (name.SequenceEqual(propName_username))
            {
                obj.Username = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockTable")]
    partial class PageBlockTableConverter : TLObjectConverter<PageBlockTable>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockTableConverter();
        public override TLObject CreateObjectInstance() => new PageBlockTable();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockTable)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<RichText>();
                    return true;
                case 0xD94ACBB2u when name.SequenceEqual(propName_cells):
                    obj.Cells = reader.ReadNestedObjectArray<PageBlockTableCell>();
                    return true;
                case 0x195A315Du when name.SequenceEqual(propName_is_bordered):
                    obj.IsBordered = reader.ReadBool();
                    return true;
                case 0x3A13C949u when name.SequenceEqual(propName_is_striped):
                    obj.IsStriped = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("pageBlockDetails")]
    partial class PageBlockDetailsConverter : TLObjectConverter<PageBlockDetails>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockDetailsConverter();
        public override TLObject CreateObjectInstance() => new PageBlockDetails();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockDetails)tlobj;
            if (name.SequenceEqual(propName_header))
            {
                obj.Header = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_page_blocks))
            {
                obj.PageBlocks = reader.ReadObjectArray<PageBlock>();
                return true;
            }
            if (name.SequenceEqual(propName_is_open))
            {
                obj.IsOpen = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockRelatedArticles")]
    partial class PageBlockRelatedArticlesConverter : TLObjectConverter<PageBlockRelatedArticles>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockRelatedArticlesConverter();
        public override TLObject CreateObjectInstance() => new PageBlockRelatedArticles();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockRelatedArticles)tlobj;
            if (name.SequenceEqual(propName_header))
            {
                obj.Header = reader.ReadTLObject<RichText>();
                return true;
            }
            if (name.SequenceEqual(propName_articles))
            {
                obj.Articles = reader.ReadObjectArray<PageBlockRelatedArticle>();
                return true;
            }
            return false;
        }
    }

    [TLType("pageBlockMap")]
    partial class PageBlockMapConverter : TLObjectConverter<PageBlockMap>
    {
        public static BaseConverter CreateConverterInstance() => new PageBlockMapConverter();
        public override TLObject CreateObjectInstance() => new PageBlockMap();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PageBlockMap)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x0BF5A9A6u when name.SequenceEqual(propName_location):
                    obj.Location = reader.ReadTLObject<Location>();
                    return true;
                case 0xDF92E232u when name.SequenceEqual(propName_zoom):
                    obj.Zoom = reader.ReadInt();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<PageBlockCaption>();
                    return true;
            }
            return false;
        }
    }

    [TLType("webPageInstantView")]
    partial class WebPageInstantViewConverter : TLObjectConverter<WebPageInstantView>
    {
        public static BaseConverter CreateConverterInstance() => new WebPageInstantViewConverter();
        public override TLObject CreateObjectInstance() => new WebPageInstantView();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (WebPageInstantView)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x070646B5u when name.SequenceEqual(propName_page_blocks):
                    obj.PageBlocks = reader.ReadObjectArray<PageBlock>();
                    return true;
                case 0x65E00794u when name.SequenceEqual(propName_view_count):
                    obj.ViewCount = reader.ReadInt();
                    return true;
                case 0x4671AE97u when name.SequenceEqual(propName_version):
                    obj.Version = reader.ReadInt();
                    return true;
                case 0x8E30FD54u when name.SequenceEqual(propName_is_rtl):
                    obj.IsRtl = reader.ReadBool();
                    return true;
                case 0xD9852327u when name.SequenceEqual(propName_is_full):
                    obj.IsFull = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("webPage")]
    partial class WebPageConverter : TLObjectConverter<WebPage>
    {
        public static BaseConverter CreateConverterInstance() => new WebPageConverter();
        public override TLObject CreateObjectInstance() => new WebPage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (WebPage)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x328F4C1Eu when name.SequenceEqual(propName_url):
                    obj.Url = reader.ReadString();
                    return true;
                case 0x9688A92Fu when name.SequenceEqual(propName_display_url):
                    obj.DisplayUrl = reader.ReadString();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadString();
                    return true;
                case 0x0AC9CF08u when name.SequenceEqual(propName_site_name):
                    obj.SiteName = reader.ReadString();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadTLObject<FormattedText>();
                    return true;
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<Photo>();
                    return true;
                case 0x61F994F4u when name.SequenceEqual(propName_embed_url):
                    obj.EmbedUrl = reader.ReadString();
                    return true;
                case 0xCF9F4FFBu when name.SequenceEqual(propName_embed_type):
                    obj.EmbedType = reader.ReadString();
                    return true;
                case 0x32AE2FF5u when name.SequenceEqual(propName_embed_width):
                    obj.EmbedWidth = reader.ReadInt();
                    return true;
                case 0xBD69BC0Cu when name.SequenceEqual(propName_embed_height):
                    obj.EmbedHeight = reader.ReadInt();
                    return true;
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x4F7ABA56u when name.SequenceEqual(propName_author):
                    obj.Author = reader.ReadString();
                    return true;
                case 0xE145EE5Du when name.SequenceEqual(propName_animation):
                    obj.Animation = reader.ReadTLObject<Animation>();
                    return true;
                case 0xE0613999u when name.SequenceEqual(propName_audio):
                    obj.Audio = reader.ReadTLObject<Audio>();
                    return true;
                case 0x96234BD4u when name.SequenceEqual(propName_document):
                    obj.Document = reader.ReadTLObject<Document>();
                    return true;
                case 0xC742341Cu when name.SequenceEqual(propName_sticker):
                    obj.Sticker = reader.ReadTLObject<Sticker>();
                    return true;
                case 0xCEF90B6Cu when name.SequenceEqual(propName_video):
                    obj.Video = reader.ReadTLObject<Video>();
                    return true;
                case 0x5D4EB201u when name.SequenceEqual(propName_video_note):
                    obj.VideoNote = reader.ReadTLObject<VideoNote>();
                    return true;
                case 0xE9FF84FEu when name.SequenceEqual(propName_voice_note):
                    obj.VoiceNote = reader.ReadTLObject<VoiceNote>();
                    return true;
                case 0x2D1FF8F9u when name.SequenceEqual(propName_instant_view_version):
                    obj.InstantViewVersion = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("countryInfo")]
    partial class CountryInfoConverter : TLObjectConverter<CountryInfo>
    {
        public static BaseConverter CreateConverterInstance() => new CountryInfoConverter();
        public override TLObject CreateObjectInstance() => new CountryInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CountryInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x76AB1D07u when name.SequenceEqual(propName_country_code):
                    obj.CountryCode = reader.ReadString();
                    return true;
                case 0x8D39BDE6u when name.SequenceEqual(propName_name):
                    obj.Name = reader.ReadString();
                    return true;
                case 0x5341D447u when name.SequenceEqual(propName_english_name):
                    obj.EnglishName = reader.ReadString();
                    return true;
                case 0xA9DCF376u when name.SequenceEqual(propName_is_hidden):
                    obj.IsHidden = reader.ReadBool();
                    return true;
                case 0x74AD6C0Au when name.SequenceEqual(propName_calling_codes):
                    obj.CallingCodes = reader.ReadStringArray();
                    return true;
            }
            return false;
        }
    }

    [TLType("countries")]
    partial class CountriesConverter : TLObjectConverter<Countries>
    {
        public static BaseConverter CreateConverterInstance() => new CountriesConverter();
        public override TLObject CreateObjectInstance() => new Countries();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Countries)tlobj;
            if (name.SequenceEqual(propName_countries))
            {
                obj.Countries_ = reader.ReadObjectArray<CountryInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("phoneNumberInfo")]
    partial class PhoneNumberInfoConverter : TLObjectConverter<PhoneNumberInfo>
    {
        public static BaseConverter CreateConverterInstance() => new PhoneNumberInfoConverter();
        public override TLObject CreateObjectInstance() => new PhoneNumberInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PhoneNumberInfo)tlobj;
            if (name.SequenceEqual(propName_country))
            {
                obj.Country = reader.ReadTLObject<CountryInfo>();
                return true;
            }
            if (name.SequenceEqual(propName_country_calling_code))
            {
                obj.CountryCallingCode = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_formatted_phone_number))
            {
                obj.FormattedPhoneNumber = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("bankCardActionOpenUrl")]
    partial class BankCardActionOpenUrlConverter : TLObjectConverter<BankCardActionOpenUrl>
    {
        public static BaseConverter CreateConverterInstance() => new BankCardActionOpenUrlConverter();
        public override TLObject CreateObjectInstance() => new BankCardActionOpenUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BankCardActionOpenUrl)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("bankCardInfo")]
    partial class BankCardInfoConverter : TLObjectConverter<BankCardInfo>
    {
        public static BaseConverter CreateConverterInstance() => new BankCardInfoConverter();
        public override TLObject CreateObjectInstance() => new BankCardInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BankCardInfo)tlobj;
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_actions))
            {
                obj.Actions = reader.ReadObjectArray<BankCardActionOpenUrl>();
                return true;
            }
            return false;
        }
    }

    [TLType("address")]
    partial class AddressConverter : TLObjectConverter<Address>
    {
        public static BaseConverter CreateConverterInstance() => new AddressConverter();
        public override TLObject CreateObjectInstance() => new Address();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Address)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x76AB1D07u when name.SequenceEqual(propName_country_code):
                    obj.CountryCode = reader.ReadString();
                    return true;
                case 0x783132F6u when name.SequenceEqual(propName_state):
                    obj.State = reader.ReadString();
                    return true;
                case 0x0DC48142u when name.SequenceEqual(propName_city):
                    obj.City = reader.ReadString();
                    return true;
                case 0x053AF158u when name.SequenceEqual(propName_street_line1):
                    obj.StreetLine1 = reader.ReadString();
                    return true;
                case 0x083AF611u when name.SequenceEqual(propName_street_line2):
                    obj.StreetLine2 = reader.ReadString();
                    return true;
                case 0x2A4A9A2Eu when name.SequenceEqual(propName_postal_code):
                    obj.PostalCode = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("labeledPricePart")]
    partial class LabeledPricePartConverter : TLObjectConverter<LabeledPricePart>
    {
        public static BaseConverter CreateConverterInstance() => new LabeledPricePartConverter();
        public override TLObject CreateObjectInstance() => new LabeledPricePart();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LabeledPricePart)tlobj;
            if (name.SequenceEqual(propName_label))
            {
                obj.Label = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_amount))
            {
                obj.Amount = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("invoice")]
    partial class InvoiceConverter : TLObjectConverter<Invoice>
    {
        public static BaseConverter CreateConverterInstance() => new InvoiceConverter();
        public override TLObject CreateObjectInstance() => new Invoice();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Invoice)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xDDF28636u when name.SequenceEqual(propName_currency):
                    obj.Currency = reader.ReadString();
                    return true;
                case 0xB9AC16E3u when name.SequenceEqual(propName_price_parts):
                    obj.PriceParts = reader.ReadObjectArray<LabeledPricePart>();
                    return true;
                case 0x98094DE6u when name.SequenceEqual(propName_is_test):
                    obj.IsTest = reader.ReadBool();
                    return true;
                case 0x44733A95u when name.SequenceEqual(propName_need_name):
                    obj.NeedName = reader.ReadBool();
                    return true;
                case 0x801052FAu when name.SequenceEqual(propName_need_phone_number):
                    obj.NeedPhoneNumber = reader.ReadBool();
                    return true;
                case 0xAED95C75u when name.SequenceEqual(propName_need_email_address):
                    obj.NeedEmailAddress = reader.ReadBool();
                    return true;
                case 0xEAB3563Fu when name.SequenceEqual(propName_need_shipping_address):
                    obj.NeedShippingAddress = reader.ReadBool();
                    return true;
                case 0xDDCD0B74u when name.SequenceEqual(propName_send_phone_number_to_provider):
                    obj.SendPhoneNumberToProvider = reader.ReadBool();
                    return true;
                case 0x9369A173u when name.SequenceEqual(propName_send_email_address_to_provider):
                    obj.SendEmailAddressToProvider = reader.ReadBool();
                    return true;
                case 0xA44CE8A1u when name.SequenceEqual(propName_is_flexible):
                    obj.IsFlexible = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("orderInfo")]
    partial class OrderInfoConverter : TLObjectConverter<OrderInfo>
    {
        public static BaseConverter CreateConverterInstance() => new OrderInfoConverter();
        public override TLObject CreateObjectInstance() => new OrderInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (OrderInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x8D39BDE6u when name.SequenceEqual(propName_name):
                    obj.Name = reader.ReadString();
                    return true;
                case 0x56E140E1u when name.SequenceEqual(propName_phone_number):
                    obj.PhoneNumber = reader.ReadString();
                    return true;
                case 0x01297EF8u when name.SequenceEqual(propName_email_address):
                    obj.EmailAddress = reader.ReadString();
                    return true;
                case 0x84FB8F74u when name.SequenceEqual(propName_shipping_address):
                    obj.ShippingAddress = reader.ReadTLObject<Address>();
                    return true;
            }
            return false;
        }
    }

    [TLType("shippingOption")]
    partial class ShippingOptionConverter : TLObjectConverter<ShippingOption>
    {
        public static BaseConverter CreateConverterInstance() => new ShippingOptionConverter();
        public override TLObject CreateObjectInstance() => new ShippingOption();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ShippingOption)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_price_parts))
            {
                obj.PriceParts = reader.ReadObjectArray<LabeledPricePart>();
                return true;
            }
            return false;
        }
    }

    [TLType("savedCredentials")]
    partial class SavedCredentialsConverter : TLObjectConverter<SavedCredentials>
    {
        public static BaseConverter CreateConverterInstance() => new SavedCredentialsConverter();
        public override TLObject CreateObjectInstance() => new SavedCredentials();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SavedCredentials)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inputCredentialsSaved")]
    partial class InputCredentialsSavedConverter : TLObjectConverter<InputCredentialsSaved>
    {
        public static BaseConverter CreateConverterInstance() => new InputCredentialsSavedConverter();
        public override TLObject CreateObjectInstance() => new InputCredentialsSaved();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputCredentialsSaved)tlobj;
            if (name.SequenceEqual(propName_saved_credentials_id))
            {
                obj.SavedCredentialsId = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inputCredentialsNew")]
    partial class InputCredentialsNewConverter : TLObjectConverter<InputCredentialsNew>
    {
        public static BaseConverter CreateConverterInstance() => new InputCredentialsNewConverter();
        public override TLObject CreateObjectInstance() => new InputCredentialsNew();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputCredentialsNew)tlobj;
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_allow_save))
            {
                obj.AllowSave = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("inputCredentialsAndroidPay")]
    partial class InputCredentialsAndroidPayConverter : TLObjectConverter<InputCredentialsAndroidPay>
    {
        public static BaseConverter CreateConverterInstance() => new InputCredentialsAndroidPayConverter();
        public override TLObject CreateObjectInstance() => new InputCredentialsAndroidPay();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputCredentialsAndroidPay)tlobj;
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inputCredentialsApplePay")]
    partial class InputCredentialsApplePayConverter : TLObjectConverter<InputCredentialsApplePay>
    {
        public static BaseConverter CreateConverterInstance() => new InputCredentialsApplePayConverter();
        public override TLObject CreateObjectInstance() => new InputCredentialsApplePay();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputCredentialsApplePay)tlobj;
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("paymentsProviderStripe")]
    partial class PaymentsProviderStripeConverter : TLObjectConverter<PaymentsProviderStripe>
    {
        public static BaseConverter CreateConverterInstance() => new PaymentsProviderStripeConverter();
        public override TLObject CreateObjectInstance() => new PaymentsProviderStripe();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PaymentsProviderStripe)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x4EB2A084u when name.SequenceEqual(propName_publishable_key):
                    obj.PublishableKey = reader.ReadString();
                    return true;
                case 0x9D20D204u when name.SequenceEqual(propName_need_country):
                    obj.NeedCountry = reader.ReadBool();
                    return true;
                case 0x7EF51623u when name.SequenceEqual(propName_need_postal_code):
                    obj.NeedPostalCode = reader.ReadBool();
                    return true;
                case 0x99517F34u when name.SequenceEqual(propName_need_cardholder_name):
                    obj.NeedCardholderName = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("paymentForm")]
    partial class PaymentFormConverter : TLObjectConverter<PaymentForm>
    {
        public static BaseConverter CreateConverterInstance() => new PaymentFormConverter();
        public override TLObject CreateObjectInstance() => new PaymentForm();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PaymentForm)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5A906110u when name.SequenceEqual(propName_invoice):
                    obj.Invoice = reader.ReadTLObject<Invoice>();
                    return true;
                case 0x328F4C1Eu when name.SequenceEqual(propName_url):
                    obj.Url = reader.ReadString();
                    return true;
                case 0x9FE8BEEAu when name.SequenceEqual(propName_payments_provider):
                    obj.PaymentsProvider = reader.ReadTLObject<PaymentsProviderStripe>();
                    return true;
                case 0x490412B8u when name.SequenceEqual(propName_saved_order_info):
                    obj.SavedOrderInfo = reader.ReadTLObject<OrderInfo>();
                    return true;
                case 0xE5C2A505u when name.SequenceEqual(propName_saved_credentials):
                    obj.SavedCredentials = reader.ReadTLObject<SavedCredentials>();
                    return true;
                case 0xCEDB8A0Au when name.SequenceEqual(propName_can_save_credentials):
                    obj.CanSaveCredentials = reader.ReadBool();
                    return true;
                case 0xEA250D2Bu when name.SequenceEqual(propName_need_password):
                    obj.NeedPassword = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("validatedOrderInfo")]
    partial class ValidatedOrderInfoConverter : TLObjectConverter<ValidatedOrderInfo>
    {
        public static BaseConverter CreateConverterInstance() => new ValidatedOrderInfoConverter();
        public override TLObject CreateObjectInstance() => new ValidatedOrderInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ValidatedOrderInfo)tlobj;
            if (name.SequenceEqual(propName_order_info_id))
            {
                obj.OrderInfoId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_shipping_options))
            {
                obj.ShippingOptions = reader.ReadObjectArray<ShippingOption>();
                return true;
            }
            return false;
        }
    }

    [TLType("paymentResult")]
    partial class PaymentResultConverter : TLObjectConverter<PaymentResult>
    {
        public static BaseConverter CreateConverterInstance() => new PaymentResultConverter();
        public override TLObject CreateObjectInstance() => new PaymentResult();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PaymentResult)tlobj;
            if (name.SequenceEqual(propName_success))
            {
                obj.Success = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_verification_url))
            {
                obj.VerificationUrl = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("paymentReceipt")]
    partial class PaymentReceiptConverter : TLObjectConverter<PaymentReceipt>
    {
        public static BaseConverter CreateConverterInstance() => new PaymentReceiptConverter();
        public override TLObject CreateObjectInstance() => new PaymentReceipt();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PaymentReceipt)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xD472DC59u when name.SequenceEqual(propName_date):
                    obj.Date = reader.ReadInt();
                    return true;
                case 0x7DEAE1DCu when name.SequenceEqual(propName_payments_provider_user_id):
                    obj.PaymentsProviderUserId = reader.ReadInt();
                    return true;
                case 0x5A906110u when name.SequenceEqual(propName_invoice):
                    obj.Invoice = reader.ReadTLObject<Invoice>();
                    return true;
                case 0xF60D2304u when name.SequenceEqual(propName_order_info):
                    obj.OrderInfo = reader.ReadTLObject<OrderInfo>();
                    return true;
                case 0xCC166DBDu when name.SequenceEqual(propName_shipping_option):
                    obj.ShippingOption = reader.ReadTLObject<ShippingOption>();
                    return true;
                case 0x141E0EFCu when name.SequenceEqual(propName_credentials_title):
                    obj.CredentialsTitle = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("datedFile")]
    partial class DatedFileConverter : TLObjectConverter<DatedFile>
    {
        public static BaseConverter CreateConverterInstance() => new DatedFileConverter();
        public override TLObject CreateObjectInstance() => new DatedFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DatedFile)tlobj;
            if (name.SequenceEqual(propName_file))
            {
                obj.File = reader.ReadTLObject<File>();
                return true;
            }
            if (name.SequenceEqual(propName_date))
            {
                obj.Date = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementTypePersonalDetails")]
    partial class PassportElementTypePersonalDetailsConverter : TLObjectConverter<PassportElementTypePersonalDetails>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypePersonalDetailsConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypePersonalDetails();
    }

    [TLType("passportElementTypePassport")]
    partial class PassportElementTypePassportConverter : TLObjectConverter<PassportElementTypePassport>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypePassportConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypePassport();
    }

    [TLType("passportElementTypeDriverLicense")]
    partial class PassportElementTypeDriverLicenseConverter : TLObjectConverter<PassportElementTypeDriverLicense>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypeDriverLicenseConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypeDriverLicense();
    }

    [TLType("passportElementTypeIdentityCard")]
    partial class PassportElementTypeIdentityCardConverter : TLObjectConverter<PassportElementTypeIdentityCard>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypeIdentityCardConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypeIdentityCard();
    }

    [TLType("passportElementTypeInternalPassport")]
    partial class PassportElementTypeInternalPassportConverter : TLObjectConverter<PassportElementTypeInternalPassport>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypeInternalPassportConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypeInternalPassport();
    }

    [TLType("passportElementTypeAddress")]
    partial class PassportElementTypeAddressConverter : TLObjectConverter<PassportElementTypeAddress>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypeAddressConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypeAddress();
    }

    [TLType("passportElementTypeUtilityBill")]
    partial class PassportElementTypeUtilityBillConverter : TLObjectConverter<PassportElementTypeUtilityBill>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypeUtilityBillConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypeUtilityBill();
    }

    [TLType("passportElementTypeBankStatement")]
    partial class PassportElementTypeBankStatementConverter : TLObjectConverter<PassportElementTypeBankStatement>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypeBankStatementConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypeBankStatement();
    }

    [TLType("passportElementTypeRentalAgreement")]
    partial class PassportElementTypeRentalAgreementConverter : TLObjectConverter<PassportElementTypeRentalAgreement>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypeRentalAgreementConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypeRentalAgreement();
    }

    [TLType("passportElementTypePassportRegistration")]
    partial class PassportElementTypePassportRegistrationConverter : TLObjectConverter<PassportElementTypePassportRegistration>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypePassportRegistrationConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypePassportRegistration();
    }

    [TLType("passportElementTypeTemporaryRegistration")]
    partial class PassportElementTypeTemporaryRegistrationConverter : TLObjectConverter<PassportElementTypeTemporaryRegistration>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypeTemporaryRegistrationConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypeTemporaryRegistration();
    }

    [TLType("passportElementTypePhoneNumber")]
    partial class PassportElementTypePhoneNumberConverter : TLObjectConverter<PassportElementTypePhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypePhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypePhoneNumber();
    }

    [TLType("passportElementTypeEmailAddress")]
    partial class PassportElementTypeEmailAddressConverter : TLObjectConverter<PassportElementTypeEmailAddress>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTypeEmailAddressConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTypeEmailAddress();
    }

    [TLType("date")]
    partial class DateConverter : TLObjectConverter<Date>
    {
        public static BaseConverter CreateConverterInstance() => new DateConverter();
        public override TLObject CreateObjectInstance() => new Date();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Date)tlobj;
            if (name.SequenceEqual(propName_day))
            {
                obj.Day = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_month))
            {
                obj.Month = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_year))
            {
                obj.Year = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("personalDetails")]
    partial class PersonalDetailsConverter : TLObjectConverter<PersonalDetails>
    {
        public static BaseConverter CreateConverterInstance() => new PersonalDetailsConverter();
        public override TLObject CreateObjectInstance() => new PersonalDetails();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PersonalDetails)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xFBBF2AC1u when name.SequenceEqual(propName_first_name):
                    obj.FirstName = reader.ReadString();
                    return true;
                case 0x85DEE4E6u when name.SequenceEqual(propName_middle_name):
                    obj.MiddleName = reader.ReadString();
                    return true;
                case 0x68F1D8F9u when name.SequenceEqual(propName_last_name):
                    obj.LastName = reader.ReadString();
                    return true;
                case 0x7CED0C97u when name.SequenceEqual(propName_native_first_name):
                    obj.NativeFirstName = reader.ReadString();
                    return true;
                case 0x94B110A4u when name.SequenceEqual(propName_native_middle_name):
                    obj.NativeMiddleName = reader.ReadString();
                    return true;
                case 0xEF68AD53u when name.SequenceEqual(propName_native_last_name):
                    obj.NativeLastName = reader.ReadString();
                    return true;
                case 0xFC8BF32Au when name.SequenceEqual(propName_birthdate):
                    obj.Birthdate = reader.ReadTLObject<Date>();
                    return true;
                case 0x5E9C9580u when name.SequenceEqual(propName_gender):
                    obj.Gender = reader.ReadString();
                    return true;
                case 0x76AB1D07u when name.SequenceEqual(propName_country_code):
                    obj.CountryCode = reader.ReadString();
                    return true;
                case 0x52A65E52u when name.SequenceEqual(propName_residence_country_code):
                    obj.ResidenceCountryCode = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("identityDocument")]
    partial class IdentityDocumentConverter : TLObjectConverter<IdentityDocument>
    {
        public static BaseConverter CreateConverterInstance() => new IdentityDocumentConverter();
        public override TLObject CreateObjectInstance() => new IdentityDocument();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (IdentityDocument)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x1BD670A0u when name.SequenceEqual(propName_number):
                    obj.Number = reader.ReadString();
                    return true;
                case 0xFDE99647u when name.SequenceEqual(propName_expiry_date):
                    obj.ExpiryDate = reader.ReadTLObject<Date>();
                    return true;
                case 0x9AEC601Eu when name.SequenceEqual(propName_front_side):
                    obj.FrontSide = reader.ReadTLObject<DatedFile>();
                    return true;
                case 0xD0E8C8DDu when name.SequenceEqual(propName_reverse_side):
                    obj.ReverseSide = reader.ReadTLObject<DatedFile>();
                    return true;
                case 0xB214048Du when name.SequenceEqual(propName_selfie):
                    obj.Selfie = reader.ReadTLObject<DatedFile>();
                    return true;
                case 0xCBD2D62Cu when name.SequenceEqual(propName_translation):
                    obj.Translation = reader.ReadObjectArray<DatedFile>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputIdentityDocument")]
    partial class InputIdentityDocumentConverter : TLObjectConverter<InputIdentityDocument>
    {
        public static BaseConverter CreateConverterInstance() => new InputIdentityDocumentConverter();
        public override TLObject CreateObjectInstance() => new InputIdentityDocument();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputIdentityDocument)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x1BD670A0u when name.SequenceEqual(propName_number):
                    obj.Number = reader.ReadString();
                    return true;
                case 0xFDE99647u when name.SequenceEqual(propName_expiry_date):
                    obj.ExpiryDate = reader.ReadTLObject<Date>();
                    return true;
                case 0x9AEC601Eu when name.SequenceEqual(propName_front_side):
                    obj.FrontSide = reader.ReadTLObject<InputFile>();
                    return true;
                case 0xD0E8C8DDu when name.SequenceEqual(propName_reverse_side):
                    obj.ReverseSide = reader.ReadTLObject<InputFile>();
                    return true;
                case 0xB214048Du when name.SequenceEqual(propName_selfie):
                    obj.Selfie = reader.ReadTLObject<InputFile>();
                    return true;
                case 0xCBD2D62Cu when name.SequenceEqual(propName_translation):
                    obj.Translation = reader.ReadObjectArray<InputFile>();
                    return true;
            }
            return false;
        }
    }

    [TLType("personalDocument")]
    partial class PersonalDocumentConverter : TLObjectConverter<PersonalDocument>
    {
        public static BaseConverter CreateConverterInstance() => new PersonalDocumentConverter();
        public override TLObject CreateObjectInstance() => new PersonalDocument();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PersonalDocument)tlobj;
            if (name.SequenceEqual(propName_files))
            {
                obj.Files = reader.ReadObjectArray<DatedFile>();
                return true;
            }
            if (name.SequenceEqual(propName_translation))
            {
                obj.Translation = reader.ReadObjectArray<DatedFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPersonalDocument")]
    partial class InputPersonalDocumentConverter : TLObjectConverter<InputPersonalDocument>
    {
        public static BaseConverter CreateConverterInstance() => new InputPersonalDocumentConverter();
        public override TLObject CreateObjectInstance() => new InputPersonalDocument();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPersonalDocument)tlobj;
            if (name.SequenceEqual(propName_files))
            {
                obj.Files = reader.ReadObjectArray<InputFile>();
                return true;
            }
            if (name.SequenceEqual(propName_translation))
            {
                obj.Translation = reader.ReadObjectArray<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementPersonalDetails")]
    partial class PassportElementPersonalDetailsConverter : TLObjectConverter<PassportElementPersonalDetails>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementPersonalDetailsConverter();
        public override TLObject CreateObjectInstance() => new PassportElementPersonalDetails();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementPersonalDetails)tlobj;
            if (name.SequenceEqual(propName_personal_details))
            {
                obj.PersonalDetails = reader.ReadTLObject<PersonalDetails>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementPassport")]
    partial class PassportElementPassportConverter : TLObjectConverter<PassportElementPassport>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementPassportConverter();
        public override TLObject CreateObjectInstance() => new PassportElementPassport();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementPassport)tlobj;
            if (name.SequenceEqual(propName_passport))
            {
                obj.Passport = reader.ReadTLObject<IdentityDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementDriverLicense")]
    partial class PassportElementDriverLicenseConverter : TLObjectConverter<PassportElementDriverLicense>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementDriverLicenseConverter();
        public override TLObject CreateObjectInstance() => new PassportElementDriverLicense();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementDriverLicense)tlobj;
            if (name.SequenceEqual(propName_driver_license))
            {
                obj.DriverLicense = reader.ReadTLObject<IdentityDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementIdentityCard")]
    partial class PassportElementIdentityCardConverter : TLObjectConverter<PassportElementIdentityCard>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementIdentityCardConverter();
        public override TLObject CreateObjectInstance() => new PassportElementIdentityCard();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementIdentityCard)tlobj;
            if (name.SequenceEqual(propName_identity_card))
            {
                obj.IdentityCard = reader.ReadTLObject<IdentityDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementInternalPassport")]
    partial class PassportElementInternalPassportConverter : TLObjectConverter<PassportElementInternalPassport>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementInternalPassportConverter();
        public override TLObject CreateObjectInstance() => new PassportElementInternalPassport();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementInternalPassport)tlobj;
            if (name.SequenceEqual(propName_internal_passport))
            {
                obj.InternalPassport = reader.ReadTLObject<IdentityDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementAddress")]
    partial class PassportElementAddressConverter : TLObjectConverter<PassportElementAddress>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementAddressConverter();
        public override TLObject CreateObjectInstance() => new PassportElementAddress();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementAddress)tlobj;
            if (name.SequenceEqual(propName_address))
            {
                obj.Address = reader.ReadTLObject<Address>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementUtilityBill")]
    partial class PassportElementUtilityBillConverter : TLObjectConverter<PassportElementUtilityBill>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementUtilityBillConverter();
        public override TLObject CreateObjectInstance() => new PassportElementUtilityBill();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementUtilityBill)tlobj;
            if (name.SequenceEqual(propName_utility_bill))
            {
                obj.UtilityBill = reader.ReadTLObject<PersonalDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementBankStatement")]
    partial class PassportElementBankStatementConverter : TLObjectConverter<PassportElementBankStatement>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementBankStatementConverter();
        public override TLObject CreateObjectInstance() => new PassportElementBankStatement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementBankStatement)tlobj;
            if (name.SequenceEqual(propName_bank_statement))
            {
                obj.BankStatement = reader.ReadTLObject<PersonalDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementRentalAgreement")]
    partial class PassportElementRentalAgreementConverter : TLObjectConverter<PassportElementRentalAgreement>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementRentalAgreementConverter();
        public override TLObject CreateObjectInstance() => new PassportElementRentalAgreement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementRentalAgreement)tlobj;
            if (name.SequenceEqual(propName_rental_agreement))
            {
                obj.RentalAgreement = reader.ReadTLObject<PersonalDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementPassportRegistration")]
    partial class PassportElementPassportRegistrationConverter : TLObjectConverter<PassportElementPassportRegistration>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementPassportRegistrationConverter();
        public override TLObject CreateObjectInstance() => new PassportElementPassportRegistration();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementPassportRegistration)tlobj;
            if (name.SequenceEqual(propName_passport_registration))
            {
                obj.PassportRegistration = reader.ReadTLObject<PersonalDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementTemporaryRegistration")]
    partial class PassportElementTemporaryRegistrationConverter : TLObjectConverter<PassportElementTemporaryRegistration>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementTemporaryRegistrationConverter();
        public override TLObject CreateObjectInstance() => new PassportElementTemporaryRegistration();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementTemporaryRegistration)tlobj;
            if (name.SequenceEqual(propName_temporary_registration))
            {
                obj.TemporaryRegistration = reader.ReadTLObject<PersonalDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementPhoneNumber")]
    partial class PassportElementPhoneNumberConverter : TLObjectConverter<PassportElementPhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementPhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new PassportElementPhoneNumber();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementPhoneNumber)tlobj;
            if (name.SequenceEqual(propName_phone_number))
            {
                obj.PhoneNumber = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementEmailAddress")]
    partial class PassportElementEmailAddressConverter : TLObjectConverter<PassportElementEmailAddress>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementEmailAddressConverter();
        public override TLObject CreateObjectInstance() => new PassportElementEmailAddress();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementEmailAddress)tlobj;
            if (name.SequenceEqual(propName_email_address))
            {
                obj.EmailAddress = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementPersonalDetails")]
    partial class InputPassportElementPersonalDetailsConverter : TLObjectConverter<InputPassportElementPersonalDetails>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementPersonalDetailsConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementPersonalDetails();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementPersonalDetails)tlobj;
            if (name.SequenceEqual(propName_personal_details))
            {
                obj.PersonalDetails = reader.ReadTLObject<PersonalDetails>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementPassport")]
    partial class InputPassportElementPassportConverter : TLObjectConverter<InputPassportElementPassport>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementPassportConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementPassport();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementPassport)tlobj;
            if (name.SequenceEqual(propName_passport))
            {
                obj.Passport = reader.ReadTLObject<InputIdentityDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementDriverLicense")]
    partial class InputPassportElementDriverLicenseConverter : TLObjectConverter<InputPassportElementDriverLicense>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementDriverLicenseConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementDriverLicense();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementDriverLicense)tlobj;
            if (name.SequenceEqual(propName_driver_license))
            {
                obj.DriverLicense = reader.ReadTLObject<InputIdentityDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementIdentityCard")]
    partial class InputPassportElementIdentityCardConverter : TLObjectConverter<InputPassportElementIdentityCard>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementIdentityCardConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementIdentityCard();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementIdentityCard)tlobj;
            if (name.SequenceEqual(propName_identity_card))
            {
                obj.IdentityCard = reader.ReadTLObject<InputIdentityDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementInternalPassport")]
    partial class InputPassportElementInternalPassportConverter : TLObjectConverter<InputPassportElementInternalPassport>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementInternalPassportConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementInternalPassport();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementInternalPassport)tlobj;
            if (name.SequenceEqual(propName_internal_passport))
            {
                obj.InternalPassport = reader.ReadTLObject<InputIdentityDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementAddress")]
    partial class InputPassportElementAddressConverter : TLObjectConverter<InputPassportElementAddress>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementAddressConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementAddress();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementAddress)tlobj;
            if (name.SequenceEqual(propName_address))
            {
                obj.Address = reader.ReadTLObject<Address>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementUtilityBill")]
    partial class InputPassportElementUtilityBillConverter : TLObjectConverter<InputPassportElementUtilityBill>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementUtilityBillConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementUtilityBill();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementUtilityBill)tlobj;
            if (name.SequenceEqual(propName_utility_bill))
            {
                obj.UtilityBill = reader.ReadTLObject<InputPersonalDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementBankStatement")]
    partial class InputPassportElementBankStatementConverter : TLObjectConverter<InputPassportElementBankStatement>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementBankStatementConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementBankStatement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementBankStatement)tlobj;
            if (name.SequenceEqual(propName_bank_statement))
            {
                obj.BankStatement = reader.ReadTLObject<InputPersonalDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementRentalAgreement")]
    partial class InputPassportElementRentalAgreementConverter : TLObjectConverter<InputPassportElementRentalAgreement>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementRentalAgreementConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementRentalAgreement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementRentalAgreement)tlobj;
            if (name.SequenceEqual(propName_rental_agreement))
            {
                obj.RentalAgreement = reader.ReadTLObject<InputPersonalDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementPassportRegistration")]
    partial class InputPassportElementPassportRegistrationConverter : TLObjectConverter<InputPassportElementPassportRegistration>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementPassportRegistrationConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementPassportRegistration();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementPassportRegistration)tlobj;
            if (name.SequenceEqual(propName_passport_registration))
            {
                obj.PassportRegistration = reader.ReadTLObject<InputPersonalDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementTemporaryRegistration")]
    partial class InputPassportElementTemporaryRegistrationConverter : TLObjectConverter<InputPassportElementTemporaryRegistration>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementTemporaryRegistrationConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementTemporaryRegistration();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementTemporaryRegistration)tlobj;
            if (name.SequenceEqual(propName_temporary_registration))
            {
                obj.TemporaryRegistration = reader.ReadTLObject<InputPersonalDocument>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementPhoneNumber")]
    partial class InputPassportElementPhoneNumberConverter : TLObjectConverter<InputPassportElementPhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementPhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementPhoneNumber();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementPhoneNumber)tlobj;
            if (name.SequenceEqual(propName_phone_number))
            {
                obj.PhoneNumber = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementEmailAddress")]
    partial class InputPassportElementEmailAddressConverter : TLObjectConverter<InputPassportElementEmailAddress>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementEmailAddressConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementEmailAddress();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementEmailAddress)tlobj;
            if (name.SequenceEqual(propName_email_address))
            {
                obj.EmailAddress = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElements")]
    partial class PassportElementsConverter : TLObjectConverter<PassportElements>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementsConverter();
        public override TLObject CreateObjectInstance() => new PassportElements();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElements)tlobj;
            if (name.SequenceEqual(propName_elements))
            {
                obj.Elements = reader.ReadObjectArray<PassportElement>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementErrorSourceUnspecified")]
    partial class PassportElementErrorSourceUnspecifiedConverter : TLObjectConverter<PassportElementErrorSourceUnspecified>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementErrorSourceUnspecifiedConverter();
        public override TLObject CreateObjectInstance() => new PassportElementErrorSourceUnspecified();
    }

    [TLType("passportElementErrorSourceDataField")]
    partial class PassportElementErrorSourceDataFieldConverter : TLObjectConverter<PassportElementErrorSourceDataField>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementErrorSourceDataFieldConverter();
        public override TLObject CreateObjectInstance() => new PassportElementErrorSourceDataField();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementErrorSourceDataField)tlobj;
            if (name.SequenceEqual(propName_field_name))
            {
                obj.FieldName = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementErrorSourceFrontSide")]
    partial class PassportElementErrorSourceFrontSideConverter : TLObjectConverter<PassportElementErrorSourceFrontSide>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementErrorSourceFrontSideConverter();
        public override TLObject CreateObjectInstance() => new PassportElementErrorSourceFrontSide();
    }

    [TLType("passportElementErrorSourceReverseSide")]
    partial class PassportElementErrorSourceReverseSideConverter : TLObjectConverter<PassportElementErrorSourceReverseSide>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementErrorSourceReverseSideConverter();
        public override TLObject CreateObjectInstance() => new PassportElementErrorSourceReverseSide();
    }

    [TLType("passportElementErrorSourceSelfie")]
    partial class PassportElementErrorSourceSelfieConverter : TLObjectConverter<PassportElementErrorSourceSelfie>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementErrorSourceSelfieConverter();
        public override TLObject CreateObjectInstance() => new PassportElementErrorSourceSelfie();
    }

    [TLType("passportElementErrorSourceTranslationFile")]
    partial class PassportElementErrorSourceTranslationFileConverter : TLObjectConverter<PassportElementErrorSourceTranslationFile>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementErrorSourceTranslationFileConverter();
        public override TLObject CreateObjectInstance() => new PassportElementErrorSourceTranslationFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementErrorSourceTranslationFile)tlobj;
            if (name.SequenceEqual(propName_file_index))
            {
                obj.FileIndex = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementErrorSourceTranslationFiles")]
    partial class PassportElementErrorSourceTranslationFilesConverter : TLObjectConverter<PassportElementErrorSourceTranslationFiles>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementErrorSourceTranslationFilesConverter();
        public override TLObject CreateObjectInstance() => new PassportElementErrorSourceTranslationFiles();
    }

    [TLType("passportElementErrorSourceFile")]
    partial class PassportElementErrorSourceFileConverter : TLObjectConverter<PassportElementErrorSourceFile>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementErrorSourceFileConverter();
        public override TLObject CreateObjectInstance() => new PassportElementErrorSourceFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementErrorSourceFile)tlobj;
            if (name.SequenceEqual(propName_file_index))
            {
                obj.FileIndex = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementErrorSourceFiles")]
    partial class PassportElementErrorSourceFilesConverter : TLObjectConverter<PassportElementErrorSourceFiles>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementErrorSourceFilesConverter();
        public override TLObject CreateObjectInstance() => new PassportElementErrorSourceFiles();
    }

    [TLType("passportElementError")]
    partial class PassportElementErrorConverter : TLObjectConverter<PassportElementError>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementErrorConverter();
        public override TLObject CreateObjectInstance() => new PassportElementError();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementError)tlobj;
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<PassportElementType>();
                return true;
            }
            if (name.SequenceEqual(propName_message))
            {
                obj.Message = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_source))
            {
                obj.Source = reader.ReadTLObject<PassportElementErrorSource>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportSuitableElement")]
    partial class PassportSuitableElementConverter : TLObjectConverter<PassportSuitableElement>
    {
        public static BaseConverter CreateConverterInstance() => new PassportSuitableElementConverter();
        public override TLObject CreateObjectInstance() => new PassportSuitableElement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportSuitableElement)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<PassportElementType>();
                    return true;
                case 0x825BA692u when name.SequenceEqual(propName_is_selfie_required):
                    obj.IsSelfieRequired = reader.ReadBool();
                    return true;
                case 0xB2C03983u when name.SequenceEqual(propName_is_translation_required):
                    obj.IsTranslationRequired = reader.ReadBool();
                    return true;
                case 0x599F99EBu when name.SequenceEqual(propName_is_native_name_required):
                    obj.IsNativeNameRequired = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("passportRequiredElement")]
    partial class PassportRequiredElementConverter : TLObjectConverter<PassportRequiredElement>
    {
        public static BaseConverter CreateConverterInstance() => new PassportRequiredElementConverter();
        public override TLObject CreateObjectInstance() => new PassportRequiredElement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportRequiredElement)tlobj;
            if (name.SequenceEqual(propName_suitable_elements))
            {
                obj.SuitableElements = reader.ReadObjectArray<PassportSuitableElement>();
                return true;
            }
            return false;
        }
    }

    [TLType("passportAuthorizationForm")]
    partial class PassportAuthorizationFormConverter : TLObjectConverter<PassportAuthorizationForm>
    {
        public static BaseConverter CreateConverterInstance() => new PassportAuthorizationFormConverter();
        public override TLObject CreateObjectInstance() => new PassportAuthorizationForm();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportAuthorizationForm)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_required_elements))
            {
                obj.RequiredElements = reader.ReadObjectArray<PassportRequiredElement>();
                return true;
            }
            if (name.SequenceEqual(propName_privacy_policy_url))
            {
                obj.PrivacyPolicyUrl = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("passportElementsWithErrors")]
    partial class PassportElementsWithErrorsConverter : TLObjectConverter<PassportElementsWithErrors>
    {
        public static BaseConverter CreateConverterInstance() => new PassportElementsWithErrorsConverter();
        public override TLObject CreateObjectInstance() => new PassportElementsWithErrors();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PassportElementsWithErrors)tlobj;
            if (name.SequenceEqual(propName_elements))
            {
                obj.Elements = reader.ReadObjectArray<PassportElement>();
                return true;
            }
            if (name.SequenceEqual(propName_errors))
            {
                obj.Errors = reader.ReadObjectArray<PassportElementError>();
                return true;
            }
            return false;
        }
    }

    [TLType("encryptedCredentials")]
    partial class EncryptedCredentialsConverter : TLObjectConverter<EncryptedCredentials>
    {
        public static BaseConverter CreateConverterInstance() => new EncryptedCredentialsConverter();
        public override TLObject CreateObjectInstance() => new EncryptedCredentials();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EncryptedCredentials)tlobj;
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadBase64String();
                return true;
            }
            if (name.SequenceEqual(propName_hash))
            {
                obj.Hash = reader.ReadBase64String();
                return true;
            }
            if (name.SequenceEqual(propName_secret))
            {
                obj.Secret = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("encryptedPassportElement")]
    partial class EncryptedPassportElementConverter : TLObjectConverter<EncryptedPassportElement>
    {
        public static BaseConverter CreateConverterInstance() => new EncryptedPassportElementConverter();
        public override TLObject CreateObjectInstance() => new EncryptedPassportElement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EncryptedPassportElement)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<PassportElementType>();
                    return true;
                case 0xD872E2A5u when name.SequenceEqual(propName_data):
                    obj.Data = reader.ReadBase64String();
                    return true;
                case 0x9AEC601Eu when name.SequenceEqual(propName_front_side):
                    obj.FrontSide = reader.ReadTLObject<DatedFile>();
                    return true;
                case 0xD0E8C8DDu when name.SequenceEqual(propName_reverse_side):
                    obj.ReverseSide = reader.ReadTLObject<DatedFile>();
                    return true;
                case 0xB214048Du when name.SequenceEqual(propName_selfie):
                    obj.Selfie = reader.ReadTLObject<DatedFile>();
                    return true;
                case 0xCBD2D62Cu when name.SequenceEqual(propName_translation):
                    obj.Translation = reader.ReadObjectArray<DatedFile>();
                    return true;
                case 0x3EE74090u when name.SequenceEqual(propName_files):
                    obj.Files = reader.ReadObjectArray<DatedFile>();
                    return true;
                case 0x425ED3CAu when name.SequenceEqual(propName_value):
                    obj.Value = reader.ReadString();
                    return true;
                case 0xCEC577D1u when name.SequenceEqual(propName_hash):
                    obj.Hash = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementErrorSourceUnspecified")]
    partial class InputPassportElementErrorSourceUnspecifiedConverter : TLObjectConverter<InputPassportElementErrorSourceUnspecified>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementErrorSourceUnspecifiedConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementErrorSourceUnspecified();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementErrorSourceUnspecified)tlobj;
            if (name.SequenceEqual(propName_element_hash))
            {
                obj.ElementHash = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementErrorSourceDataField")]
    partial class InputPassportElementErrorSourceDataFieldConverter : TLObjectConverter<InputPassportElementErrorSourceDataField>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementErrorSourceDataFieldConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementErrorSourceDataField();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementErrorSourceDataField)tlobj;
            if (name.SequenceEqual(propName_field_name))
            {
                obj.FieldName = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_data_hash))
            {
                obj.DataHash = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementErrorSourceFrontSide")]
    partial class InputPassportElementErrorSourceFrontSideConverter : TLObjectConverter<InputPassportElementErrorSourceFrontSide>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementErrorSourceFrontSideConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementErrorSourceFrontSide();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementErrorSourceFrontSide)tlobj;
            if (name.SequenceEqual(propName_file_hash))
            {
                obj.FileHash = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementErrorSourceReverseSide")]
    partial class InputPassportElementErrorSourceReverseSideConverter : TLObjectConverter<InputPassportElementErrorSourceReverseSide>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementErrorSourceReverseSideConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementErrorSourceReverseSide();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementErrorSourceReverseSide)tlobj;
            if (name.SequenceEqual(propName_file_hash))
            {
                obj.FileHash = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementErrorSourceSelfie")]
    partial class InputPassportElementErrorSourceSelfieConverter : TLObjectConverter<InputPassportElementErrorSourceSelfie>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementErrorSourceSelfieConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementErrorSourceSelfie();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementErrorSourceSelfie)tlobj;
            if (name.SequenceEqual(propName_file_hash))
            {
                obj.FileHash = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementErrorSourceTranslationFile")]
    partial class InputPassportElementErrorSourceTranslationFileConverter : TLObjectConverter<InputPassportElementErrorSourceTranslationFile>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementErrorSourceTranslationFileConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementErrorSourceTranslationFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementErrorSourceTranslationFile)tlobj;
            if (name.SequenceEqual(propName_file_hash))
            {
                obj.FileHash = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementErrorSourceTranslationFiles")]
    partial class InputPassportElementErrorSourceTranslationFilesConverter : TLObjectConverter<InputPassportElementErrorSourceTranslationFiles>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementErrorSourceTranslationFilesConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementErrorSourceTranslationFiles();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementErrorSourceTranslationFiles)tlobj;
            if (name.SequenceEqual(propName_file_hashes))
            {
                obj.FileHashes = reader.ReadBytesArray();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementErrorSourceFile")]
    partial class InputPassportElementErrorSourceFileConverter : TLObjectConverter<InputPassportElementErrorSourceFile>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementErrorSourceFileConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementErrorSourceFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementErrorSourceFile)tlobj;
            if (name.SequenceEqual(propName_file_hash))
            {
                obj.FileHash = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementErrorSourceFiles")]
    partial class InputPassportElementErrorSourceFilesConverter : TLObjectConverter<InputPassportElementErrorSourceFiles>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementErrorSourceFilesConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementErrorSourceFiles();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementErrorSourceFiles)tlobj;
            if (name.SequenceEqual(propName_file_hashes))
            {
                obj.FileHashes = reader.ReadBytesArray();
                return true;
            }
            return false;
        }
    }

    [TLType("inputPassportElementError")]
    partial class InputPassportElementErrorConverter : TLObjectConverter<InputPassportElementError>
    {
        public static BaseConverter CreateConverterInstance() => new InputPassportElementErrorConverter();
        public override TLObject CreateObjectInstance() => new InputPassportElementError();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputPassportElementError)tlobj;
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<PassportElementType>();
                return true;
            }
            if (name.SequenceEqual(propName_message))
            {
                obj.Message = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_source))
            {
                obj.Source = reader.ReadTLObject<InputPassportElementErrorSource>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageText")]
    partial class MessageTextConverter : TLObjectConverter<MessageText>
    {
        public static BaseConverter CreateConverterInstance() => new MessageTextConverter();
        public override TLObject CreateObjectInstance() => new MessageText();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageText)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<FormattedText>();
                return true;
            }
            if (name.SequenceEqual(propName_web_page))
            {
                obj.WebPage = reader.ReadTLObject<WebPage>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageAnimation")]
    partial class MessageAnimationConverter : TLObjectConverter<MessageAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new MessageAnimationConverter();
        public override TLObject CreateObjectInstance() => new MessageAnimation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageAnimation)tlobj;
            if (name.SequenceEqual(propName_animation))
            {
                obj.Animation = reader.ReadTLObject<Animation>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<FormattedText>();
                return true;
            }
            if (name.SequenceEqual(propName_is_secret))
            {
                obj.IsSecret = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("messageAudio")]
    partial class MessageAudioConverter : TLObjectConverter<MessageAudio>
    {
        public static BaseConverter CreateConverterInstance() => new MessageAudioConverter();
        public override TLObject CreateObjectInstance() => new MessageAudio();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageAudio)tlobj;
            if (name.SequenceEqual(propName_audio))
            {
                obj.Audio = reader.ReadTLObject<Audio>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<FormattedText>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageDocument")]
    partial class MessageDocumentConverter : TLObjectConverter<MessageDocument>
    {
        public static BaseConverter CreateConverterInstance() => new MessageDocumentConverter();
        public override TLObject CreateObjectInstance() => new MessageDocument();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageDocument)tlobj;
            if (name.SequenceEqual(propName_document))
            {
                obj.Document = reader.ReadTLObject<Document>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<FormattedText>();
                return true;
            }
            return false;
        }
    }

    [TLType("messagePhoto")]
    partial class MessagePhotoConverter : TLObjectConverter<MessagePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new MessagePhotoConverter();
        public override TLObject CreateObjectInstance() => new MessagePhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessagePhoto)tlobj;
            if (name.SequenceEqual(propName_photo))
            {
                obj.Photo = reader.ReadTLObject<Photo>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<FormattedText>();
                return true;
            }
            if (name.SequenceEqual(propName_is_secret))
            {
                obj.IsSecret = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("messageExpiredPhoto")]
    partial class MessageExpiredPhotoConverter : TLObjectConverter<MessageExpiredPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new MessageExpiredPhotoConverter();
        public override TLObject CreateObjectInstance() => new MessageExpiredPhoto();
    }

    [TLType("messageSticker")]
    partial class MessageStickerConverter : TLObjectConverter<MessageSticker>
    {
        public static BaseConverter CreateConverterInstance() => new MessageStickerConverter();
        public override TLObject CreateObjectInstance() => new MessageSticker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageSticker)tlobj;
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<Sticker>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageVideo")]
    partial class MessageVideoConverter : TLObjectConverter<MessageVideo>
    {
        public static BaseConverter CreateConverterInstance() => new MessageVideoConverter();
        public override TLObject CreateObjectInstance() => new MessageVideo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageVideo)tlobj;
            if (name.SequenceEqual(propName_video))
            {
                obj.Video = reader.ReadTLObject<Video>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<FormattedText>();
                return true;
            }
            if (name.SequenceEqual(propName_is_secret))
            {
                obj.IsSecret = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("messageExpiredVideo")]
    partial class MessageExpiredVideoConverter : TLObjectConverter<MessageExpiredVideo>
    {
        public static BaseConverter CreateConverterInstance() => new MessageExpiredVideoConverter();
        public override TLObject CreateObjectInstance() => new MessageExpiredVideo();
    }

    [TLType("messageVideoNote")]
    partial class MessageVideoNoteConverter : TLObjectConverter<MessageVideoNote>
    {
        public static BaseConverter CreateConverterInstance() => new MessageVideoNoteConverter();
        public override TLObject CreateObjectInstance() => new MessageVideoNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageVideoNote)tlobj;
            if (name.SequenceEqual(propName_video_note))
            {
                obj.VideoNote = reader.ReadTLObject<VideoNote>();
                return true;
            }
            if (name.SequenceEqual(propName_is_viewed))
            {
                obj.IsViewed = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_is_secret))
            {
                obj.IsSecret = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("messageVoiceNote")]
    partial class MessageVoiceNoteConverter : TLObjectConverter<MessageVoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new MessageVoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new MessageVoiceNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageVoiceNote)tlobj;
            if (name.SequenceEqual(propName_voice_note))
            {
                obj.VoiceNote = reader.ReadTLObject<VoiceNote>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<FormattedText>();
                return true;
            }
            if (name.SequenceEqual(propName_is_listened))
            {
                obj.IsListened = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("messageLocation")]
    partial class MessageLocationConverter : TLObjectConverter<MessageLocation>
    {
        public static BaseConverter CreateConverterInstance() => new MessageLocationConverter();
        public override TLObject CreateObjectInstance() => new MessageLocation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageLocation)tlobj;
            if (name.SequenceEqual(propName_location))
            {
                obj.Location = reader.ReadTLObject<Location>();
                return true;
            }
            if (name.SequenceEqual(propName_live_period))
            {
                obj.LivePeriod = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_expires_in))
            {
                obj.ExpiresIn = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("messageVenue")]
    partial class MessageVenueConverter : TLObjectConverter<MessageVenue>
    {
        public static BaseConverter CreateConverterInstance() => new MessageVenueConverter();
        public override TLObject CreateObjectInstance() => new MessageVenue();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageVenue)tlobj;
            if (name.SequenceEqual(propName_venue))
            {
                obj.Venue = reader.ReadTLObject<Venue>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageContact")]
    partial class MessageContactConverter : TLObjectConverter<MessageContact>
    {
        public static BaseConverter CreateConverterInstance() => new MessageContactConverter();
        public override TLObject CreateObjectInstance() => new MessageContact();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageContact)tlobj;
            if (name.SequenceEqual(propName_contact))
            {
                obj.Contact = reader.ReadTLObject<Contact>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageDice")]
    partial class MessageDiceConverter : TLObjectConverter<MessageDice>
    {
        public static BaseConverter CreateConverterInstance() => new MessageDiceConverter();
        public override TLObject CreateObjectInstance() => new MessageDice();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageDice)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x2ABE28EDu when name.SequenceEqual(propName_initial_state_sticker):
                    obj.InitialStateSticker = reader.ReadTLObject<Sticker>();
                    return true;
                case 0xE1722FE9u when name.SequenceEqual(propName_final_state_sticker):
                    obj.FinalStateSticker = reader.ReadTLObject<Sticker>();
                    return true;
                case 0x4A90EF3Du when name.SequenceEqual(propName_emoji):
                    obj.Emoji = reader.ReadString();
                    return true;
                case 0x425ED3CAu when name.SequenceEqual(propName_value):
                    obj.Value = reader.ReadInt();
                    return true;
                case 0x22894231u when name.SequenceEqual(propName_success_animation_frame_number):
                    obj.SuccessAnimationFrameNumber = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("messageGame")]
    partial class MessageGameConverter : TLObjectConverter<MessageGame>
    {
        public static BaseConverter CreateConverterInstance() => new MessageGameConverter();
        public override TLObject CreateObjectInstance() => new MessageGame();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageGame)tlobj;
            if (name.SequenceEqual(propName_game))
            {
                obj.Game = reader.ReadTLObject<Game>();
                return true;
            }
            return false;
        }
    }

    [TLType("messagePoll")]
    partial class MessagePollConverter : TLObjectConverter<MessagePoll>
    {
        public static BaseConverter CreateConverterInstance() => new MessagePollConverter();
        public override TLObject CreateObjectInstance() => new MessagePoll();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessagePoll)tlobj;
            if (name.SequenceEqual(propName_poll))
            {
                obj.Poll = reader.ReadTLObject<Poll>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageInvoice")]
    partial class MessageInvoiceConverter : TLObjectConverter<MessageInvoice>
    {
        public static BaseConverter CreateConverterInstance() => new MessageInvoiceConverter();
        public override TLObject CreateObjectInstance() => new MessageInvoice();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageInvoice)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<Photo>();
                    return true;
                case 0xDDF28636u when name.SequenceEqual(propName_currency):
                    obj.Currency = reader.ReadString();
                    return true;
                case 0x6AC2139Au when name.SequenceEqual(propName_total_amount):
                    obj.TotalAmount = reader.ReadLong();
                    return true;
                case 0x9E1A41AFu when name.SequenceEqual(propName_start_parameter):
                    obj.StartParameter = reader.ReadString();
                    return true;
                case 0x98094DE6u when name.SequenceEqual(propName_is_test):
                    obj.IsTest = reader.ReadBool();
                    return true;
                case 0xEAB3563Fu when name.SequenceEqual(propName_need_shipping_address):
                    obj.NeedShippingAddress = reader.ReadBool();
                    return true;
                case 0x539B9A89u when name.SequenceEqual(propName_receipt_message_id):
                    obj.ReceiptMessageId = reader.ReadLong();
                    return true;
            }
            return false;
        }
    }

    [TLType("messageCall")]
    partial class MessageCallConverter : TLObjectConverter<MessageCall>
    {
        public static BaseConverter CreateConverterInstance() => new MessageCallConverter();
        public override TLObject CreateObjectInstance() => new MessageCall();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageCall)tlobj;
            if (name.SequenceEqual(propName_is_video))
            {
                obj.IsVideo = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_discard_reason))
            {
                obj.DiscardReason = reader.ReadTLObject<CallDiscardReason>();
                return true;
            }
            if (name.SequenceEqual(propName_duration))
            {
                obj.Duration = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("messageBasicGroupChatCreate")]
    partial class MessageBasicGroupChatCreateConverter : TLObjectConverter<MessageBasicGroupChatCreate>
    {
        public static BaseConverter CreateConverterInstance() => new MessageBasicGroupChatCreateConverter();
        public override TLObject CreateObjectInstance() => new MessageBasicGroupChatCreate();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageBasicGroupChatCreate)tlobj;
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_member_user_ids))
            {
                obj.MemberUserIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("messageSupergroupChatCreate")]
    partial class MessageSupergroupChatCreateConverter : TLObjectConverter<MessageSupergroupChatCreate>
    {
        public static BaseConverter CreateConverterInstance() => new MessageSupergroupChatCreateConverter();
        public override TLObject CreateObjectInstance() => new MessageSupergroupChatCreate();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageSupergroupChatCreate)tlobj;
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("messageChatChangeTitle")]
    partial class MessageChatChangeTitleConverter : TLObjectConverter<MessageChatChangeTitle>
    {
        public static BaseConverter CreateConverterInstance() => new MessageChatChangeTitleConverter();
        public override TLObject CreateObjectInstance() => new MessageChatChangeTitle();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageChatChangeTitle)tlobj;
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("messageChatChangePhoto")]
    partial class MessageChatChangePhotoConverter : TLObjectConverter<MessageChatChangePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new MessageChatChangePhotoConverter();
        public override TLObject CreateObjectInstance() => new MessageChatChangePhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageChatChangePhoto)tlobj;
            if (name.SequenceEqual(propName_photo))
            {
                obj.Photo = reader.ReadTLObject<ChatPhoto>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageChatDeletePhoto")]
    partial class MessageChatDeletePhotoConverter : TLObjectConverter<MessageChatDeletePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new MessageChatDeletePhotoConverter();
        public override TLObject CreateObjectInstance() => new MessageChatDeletePhoto();
    }

    [TLType("messageChatAddMembers")]
    partial class MessageChatAddMembersConverter : TLObjectConverter<MessageChatAddMembers>
    {
        public static BaseConverter CreateConverterInstance() => new MessageChatAddMembersConverter();
        public override TLObject CreateObjectInstance() => new MessageChatAddMembers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageChatAddMembers)tlobj;
            if (name.SequenceEqual(propName_member_user_ids))
            {
                obj.MemberUserIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("messageChatJoinByLink")]
    partial class MessageChatJoinByLinkConverter : TLObjectConverter<MessageChatJoinByLink>
    {
        public static BaseConverter CreateConverterInstance() => new MessageChatJoinByLinkConverter();
        public override TLObject CreateObjectInstance() => new MessageChatJoinByLink();
    }

    [TLType("messageChatDeleteMember")]
    partial class MessageChatDeleteMemberConverter : TLObjectConverter<MessageChatDeleteMember>
    {
        public static BaseConverter CreateConverterInstance() => new MessageChatDeleteMemberConverter();
        public override TLObject CreateObjectInstance() => new MessageChatDeleteMember();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageChatDeleteMember)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("messageChatUpgradeTo")]
    partial class MessageChatUpgradeToConverter : TLObjectConverter<MessageChatUpgradeTo>
    {
        public static BaseConverter CreateConverterInstance() => new MessageChatUpgradeToConverter();
        public override TLObject CreateObjectInstance() => new MessageChatUpgradeTo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageChatUpgradeTo)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("messageChatUpgradeFrom")]
    partial class MessageChatUpgradeFromConverter : TLObjectConverter<MessageChatUpgradeFrom>
    {
        public static BaseConverter CreateConverterInstance() => new MessageChatUpgradeFromConverter();
        public override TLObject CreateObjectInstance() => new MessageChatUpgradeFrom();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageChatUpgradeFrom)tlobj;
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_basic_group_id))
            {
                obj.BasicGroupId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("messagePinMessage")]
    partial class MessagePinMessageConverter : TLObjectConverter<MessagePinMessage>
    {
        public static BaseConverter CreateConverterInstance() => new MessagePinMessageConverter();
        public override TLObject CreateObjectInstance() => new MessagePinMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessagePinMessage)tlobj;
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("messageScreenshotTaken")]
    partial class MessageScreenshotTakenConverter : TLObjectConverter<MessageScreenshotTaken>
    {
        public static BaseConverter CreateConverterInstance() => new MessageScreenshotTakenConverter();
        public override TLObject CreateObjectInstance() => new MessageScreenshotTaken();
    }

    [TLType("messageChatSetTtl")]
    partial class MessageChatSetTtlConverter : TLObjectConverter<MessageChatSetTtl>
    {
        public static BaseConverter CreateConverterInstance() => new MessageChatSetTtlConverter();
        public override TLObject CreateObjectInstance() => new MessageChatSetTtl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageChatSetTtl)tlobj;
            if (name.SequenceEqual(propName_ttl))
            {
                obj.Ttl = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("messageCustomServiceAction")]
    partial class MessageCustomServiceActionConverter : TLObjectConverter<MessageCustomServiceAction>
    {
        public static BaseConverter CreateConverterInstance() => new MessageCustomServiceActionConverter();
        public override TLObject CreateObjectInstance() => new MessageCustomServiceAction();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageCustomServiceAction)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("messageGameScore")]
    partial class MessageGameScoreConverter : TLObjectConverter<MessageGameScore>
    {
        public static BaseConverter CreateConverterInstance() => new MessageGameScoreConverter();
        public override TLObject CreateObjectInstance() => new MessageGameScore();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageGameScore)tlobj;
            if (name.SequenceEqual(propName_game_message_id))
            {
                obj.GameMessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_game_id))
            {
                obj.GameId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_score))
            {
                obj.Score = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("messagePaymentSuccessful")]
    partial class MessagePaymentSuccessfulConverter : TLObjectConverter<MessagePaymentSuccessful>
    {
        public static BaseConverter CreateConverterInstance() => new MessagePaymentSuccessfulConverter();
        public override TLObject CreateObjectInstance() => new MessagePaymentSuccessful();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessagePaymentSuccessful)tlobj;
            if (name.SequenceEqual(propName_invoice_message_id))
            {
                obj.InvoiceMessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_currency))
            {
                obj.Currency = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_total_amount))
            {
                obj.TotalAmount = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("messagePaymentSuccessfulBot")]
    partial class MessagePaymentSuccessfulBotConverter : TLObjectConverter<MessagePaymentSuccessfulBot>
    {
        public static BaseConverter CreateConverterInstance() => new MessagePaymentSuccessfulBotConverter();
        public override TLObject CreateObjectInstance() => new MessagePaymentSuccessfulBot();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessagePaymentSuccessfulBot)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x33FA1E1Cu when name.SequenceEqual(propName_invoice_message_id):
                    obj.InvoiceMessageId = reader.ReadLong();
                    return true;
                case 0xDDF28636u when name.SequenceEqual(propName_currency):
                    obj.Currency = reader.ReadString();
                    return true;
                case 0x6AC2139Au when name.SequenceEqual(propName_total_amount):
                    obj.TotalAmount = reader.ReadLong();
                    return true;
                case 0x0EEA8A7Du when name.SequenceEqual(propName_invoice_payload):
                    obj.InvoicePayload = reader.ReadBase64String();
                    return true;
                case 0x20399A5Bu when name.SequenceEqual(propName_shipping_option_id):
                    obj.ShippingOptionId = reader.ReadString();
                    return true;
                case 0xF60D2304u when name.SequenceEqual(propName_order_info):
                    obj.OrderInfo = reader.ReadTLObject<OrderInfo>();
                    return true;
                case 0xBA6AD16Cu when name.SequenceEqual(propName_telegram_payment_charge_id):
                    obj.TelegramPaymentChargeId = reader.ReadString();
                    return true;
                case 0x68840ED6u when name.SequenceEqual(propName_provider_payment_charge_id):
                    obj.ProviderPaymentChargeId = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("messageContactRegistered")]
    partial class MessageContactRegisteredConverter : TLObjectConverter<MessageContactRegistered>
    {
        public static BaseConverter CreateConverterInstance() => new MessageContactRegisteredConverter();
        public override TLObject CreateObjectInstance() => new MessageContactRegistered();
    }

    [TLType("messageWebsiteConnected")]
    partial class MessageWebsiteConnectedConverter : TLObjectConverter<MessageWebsiteConnected>
    {
        public static BaseConverter CreateConverterInstance() => new MessageWebsiteConnectedConverter();
        public override TLObject CreateObjectInstance() => new MessageWebsiteConnected();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageWebsiteConnected)tlobj;
            if (name.SequenceEqual(propName_domain_name))
            {
                obj.DomainName = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("messagePassportDataSent")]
    partial class MessagePassportDataSentConverter : TLObjectConverter<MessagePassportDataSent>
    {
        public static BaseConverter CreateConverterInstance() => new MessagePassportDataSentConverter();
        public override TLObject CreateObjectInstance() => new MessagePassportDataSent();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessagePassportDataSent)tlobj;
            if (name.SequenceEqual(propName_types))
            {
                obj.Types = reader.ReadObjectArray<PassportElementType>();
                return true;
            }
            return false;
        }
    }

    [TLType("messagePassportDataReceived")]
    partial class MessagePassportDataReceivedConverter : TLObjectConverter<MessagePassportDataReceived>
    {
        public static BaseConverter CreateConverterInstance() => new MessagePassportDataReceivedConverter();
        public override TLObject CreateObjectInstance() => new MessagePassportDataReceived();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessagePassportDataReceived)tlobj;
            if (name.SequenceEqual(propName_elements))
            {
                obj.Elements = reader.ReadObjectArray<EncryptedPassportElement>();
                return true;
            }
            if (name.SequenceEqual(propName_credentials))
            {
                obj.Credentials = reader.ReadTLObject<EncryptedCredentials>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageUnsupported")]
    partial class MessageUnsupportedConverter : TLObjectConverter<MessageUnsupported>
    {
        public static BaseConverter CreateConverterInstance() => new MessageUnsupportedConverter();
        public override TLObject CreateObjectInstance() => new MessageUnsupported();
    }

    [TLType("textEntityTypeMention")]
    partial class TextEntityTypeMentionConverter : TLObjectConverter<TextEntityTypeMention>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeMentionConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeMention();
    }

    [TLType("textEntityTypeHashtag")]
    partial class TextEntityTypeHashtagConverter : TLObjectConverter<TextEntityTypeHashtag>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeHashtagConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeHashtag();
    }

    [TLType("textEntityTypeCashtag")]
    partial class TextEntityTypeCashtagConverter : TLObjectConverter<TextEntityTypeCashtag>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeCashtagConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeCashtag();
    }

    [TLType("textEntityTypeBotCommand")]
    partial class TextEntityTypeBotCommandConverter : TLObjectConverter<TextEntityTypeBotCommand>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeBotCommandConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeBotCommand();
    }

    [TLType("textEntityTypeUrl")]
    partial class TextEntityTypeUrlConverter : TLObjectConverter<TextEntityTypeUrl>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeUrlConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeUrl();
    }

    [TLType("textEntityTypeEmailAddress")]
    partial class TextEntityTypeEmailAddressConverter : TLObjectConverter<TextEntityTypeEmailAddress>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeEmailAddressConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeEmailAddress();
    }

    [TLType("textEntityTypePhoneNumber")]
    partial class TextEntityTypePhoneNumberConverter : TLObjectConverter<TextEntityTypePhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypePhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypePhoneNumber();
    }

    [TLType("textEntityTypeBankCardNumber")]
    partial class TextEntityTypeBankCardNumberConverter : TLObjectConverter<TextEntityTypeBankCardNumber>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeBankCardNumberConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeBankCardNumber();
    }

    [TLType("textEntityTypeBold")]
    partial class TextEntityTypeBoldConverter : TLObjectConverter<TextEntityTypeBold>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeBoldConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeBold();
    }

    [TLType("textEntityTypeItalic")]
    partial class TextEntityTypeItalicConverter : TLObjectConverter<TextEntityTypeItalic>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeItalicConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeItalic();
    }

    [TLType("textEntityTypeUnderline")]
    partial class TextEntityTypeUnderlineConverter : TLObjectConverter<TextEntityTypeUnderline>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeUnderlineConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeUnderline();
    }

    [TLType("textEntityTypeStrikethrough")]
    partial class TextEntityTypeStrikethroughConverter : TLObjectConverter<TextEntityTypeStrikethrough>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeStrikethroughConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeStrikethrough();
    }

    [TLType("textEntityTypeCode")]
    partial class TextEntityTypeCodeConverter : TLObjectConverter<TextEntityTypeCode>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeCodeConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeCode();
    }

    [TLType("textEntityTypePre")]
    partial class TextEntityTypePreConverter : TLObjectConverter<TextEntityTypePre>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypePreConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypePre();
    }

    [TLType("textEntityTypePreCode")]
    partial class TextEntityTypePreCodeConverter : TLObjectConverter<TextEntityTypePreCode>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypePreCodeConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypePreCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TextEntityTypePreCode)tlobj;
            if (name.SequenceEqual(propName_language))
            {
                obj.Language = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("textEntityTypeTextUrl")]
    partial class TextEntityTypeTextUrlConverter : TLObjectConverter<TextEntityTypeTextUrl>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeTextUrlConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeTextUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TextEntityTypeTextUrl)tlobj;
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("textEntityTypeMentionName")]
    partial class TextEntityTypeMentionNameConverter : TLObjectConverter<TextEntityTypeMentionName>
    {
        public static BaseConverter CreateConverterInstance() => new TextEntityTypeMentionNameConverter();
        public override TLObject CreateObjectInstance() => new TextEntityTypeMentionName();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TextEntityTypeMentionName)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("inputThumbnail")]
    partial class InputThumbnailConverter : TLObjectConverter<InputThumbnail>
    {
        public static BaseConverter CreateConverterInstance() => new InputThumbnailConverter();
        public override TLObject CreateObjectInstance() => new InputThumbnail();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputThumbnail)tlobj;
            if (name.SequenceEqual(propName_thumbnail))
            {
                obj.Thumbnail = reader.ReadTLObject<InputFile>();
                return true;
            }
            if (name.SequenceEqual(propName_width))
            {
                obj.Width = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_height))
            {
                obj.Height = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("messageSchedulingStateSendAtDate")]
    partial class MessageSchedulingStateSendAtDateConverter : TLObjectConverter<MessageSchedulingStateSendAtDate>
    {
        public static BaseConverter CreateConverterInstance() => new MessageSchedulingStateSendAtDateConverter();
        public override TLObject CreateObjectInstance() => new MessageSchedulingStateSendAtDate();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageSchedulingStateSendAtDate)tlobj;
            if (name.SequenceEqual(propName_send_date))
            {
                obj.SendDate = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("messageSchedulingStateSendWhenOnline")]
    partial class MessageSchedulingStateSendWhenOnlineConverter : TLObjectConverter<MessageSchedulingStateSendWhenOnline>
    {
        public static BaseConverter CreateConverterInstance() => new MessageSchedulingStateSendWhenOnlineConverter();
        public override TLObject CreateObjectInstance() => new MessageSchedulingStateSendWhenOnline();
    }

    [TLType("messageSendOptions")]
    partial class MessageSendOptionsConverter : TLObjectConverter<MessageSendOptions>
    {
        public static BaseConverter CreateConverterInstance() => new MessageSendOptionsConverter();
        public override TLObject CreateObjectInstance() => new MessageSendOptions();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageSendOptions)tlobj;
            if (name.SequenceEqual(propName_disable_notification))
            {
                obj.DisableNotification = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_from_background))
            {
                obj.FromBackground = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_scheduling_state))
            {
                obj.SchedulingState = reader.ReadTLObject<MessageSchedulingState>();
                return true;
            }
            return false;
        }
    }

    [TLType("messageCopyOptions")]
    partial class MessageCopyOptionsConverter : TLObjectConverter<MessageCopyOptions>
    {
        public static BaseConverter CreateConverterInstance() => new MessageCopyOptionsConverter();
        public override TLObject CreateObjectInstance() => new MessageCopyOptions();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageCopyOptions)tlobj;
            if (name.SequenceEqual(propName_send_copy))
            {
                obj.SendCopy = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_replace_caption))
            {
                obj.ReplaceCaption = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_new_caption))
            {
                obj.NewCaption = reader.ReadTLObject<FormattedText>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputMessageText")]
    partial class InputMessageTextConverter : TLObjectConverter<InputMessageText>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageTextConverter();
        public override TLObject CreateObjectInstance() => new InputMessageText();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageText)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<FormattedText>();
                return true;
            }
            if (name.SequenceEqual(propName_disable_web_page_preview))
            {
                obj.DisableWebPagePreview = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_clear_draft))
            {
                obj.ClearDraft = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("inputMessageAnimation")]
    partial class InputMessageAnimationConverter : TLObjectConverter<InputMessageAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageAnimationConverter();
        public override TLObject CreateObjectInstance() => new InputMessageAnimation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageAnimation)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xE145EE5Du when name.SequenceEqual(propName_animation):
                    obj.Animation = reader.ReadTLObject<InputFile>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<InputThumbnail>();
                    return true;
                case 0x1764539Du when name.SequenceEqual(propName_added_sticker_file_ids):
                    obj.AddedStickerFileIds = reader.ReadInt32Array();
                    return true;
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<FormattedText>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputMessageAudio")]
    partial class InputMessageAudioConverter : TLObjectConverter<InputMessageAudio>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageAudioConverter();
        public override TLObject CreateObjectInstance() => new InputMessageAudio();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageAudio)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xE0613999u when name.SequenceEqual(propName_audio):
                    obj.Audio = reader.ReadTLObject<InputFile>();
                    return true;
                case 0xF101F0C3u when name.SequenceEqual(propName_album_cover_thumbnail):
                    obj.AlbumCoverThumbnail = reader.ReadTLObject<InputThumbnail>();
                    return true;
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x1499AAB5u when name.SequenceEqual(propName_performer):
                    obj.Performer = reader.ReadString();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<FormattedText>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputMessageDocument")]
    partial class InputMessageDocumentConverter : TLObjectConverter<InputMessageDocument>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageDocumentConverter();
        public override TLObject CreateObjectInstance() => new InputMessageDocument();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageDocument)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x96234BD4u when name.SequenceEqual(propName_document):
                    obj.Document = reader.ReadTLObject<InputFile>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<InputThumbnail>();
                    return true;
                case 0x8BCF25FEu when name.SequenceEqual(propName_disable_content_type_detection):
                    obj.DisableContentTypeDetection = reader.ReadBool();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<FormattedText>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputMessagePhoto")]
    partial class InputMessagePhotoConverter : TLObjectConverter<InputMessagePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessagePhotoConverter();
        public override TLObject CreateObjectInstance() => new InputMessagePhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessagePhoto)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<InputFile>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<InputThumbnail>();
                    return true;
                case 0x1764539Du when name.SequenceEqual(propName_added_sticker_file_ids):
                    obj.AddedStickerFileIds = reader.ReadInt32Array();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<FormattedText>();
                    return true;
                case 0xBD2B425Bu when name.SequenceEqual(propName_ttl):
                    obj.Ttl = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputMessageSticker")]
    partial class InputMessageStickerConverter : TLObjectConverter<InputMessageSticker>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageStickerConverter();
        public override TLObject CreateObjectInstance() => new InputMessageSticker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageSticker)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xC742341Cu when name.SequenceEqual(propName_sticker):
                    obj.Sticker = reader.ReadTLObject<InputFile>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<InputThumbnail>();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputMessageVideo")]
    partial class InputMessageVideoConverter : TLObjectConverter<InputMessageVideo>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageVideoConverter();
        public override TLObject CreateObjectInstance() => new InputMessageVideo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageVideo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xCEF90B6Cu when name.SequenceEqual(propName_video):
                    obj.Video = reader.ReadTLObject<InputFile>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<InputThumbnail>();
                    return true;
                case 0x1764539Du when name.SequenceEqual(propName_added_sticker_file_ids):
                    obj.AddedStickerFileIds = reader.ReadInt32Array();
                    return true;
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0x8D374FBEu when name.SequenceEqual(propName_supports_streaming):
                    obj.SupportsStreaming = reader.ReadBool();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<FormattedText>();
                    return true;
                case 0xBD2B425Bu when name.SequenceEqual(propName_ttl):
                    obj.Ttl = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputMessageVideoNote")]
    partial class InputMessageVideoNoteConverter : TLObjectConverter<InputMessageVideoNote>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageVideoNoteConverter();
        public override TLObject CreateObjectInstance() => new InputMessageVideoNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageVideoNote)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5D4EB201u when name.SequenceEqual(propName_video_note):
                    obj.VideoNote = reader.ReadTLObject<InputFile>();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<InputThumbnail>();
                    return true;
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x83D03615u when name.SequenceEqual(propName_length):
                    obj.Length = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputMessageVoiceNote")]
    partial class InputMessageVoiceNoteConverter : TLObjectConverter<InputMessageVoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageVoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new InputMessageVoiceNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageVoiceNote)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xE9FF84FEu when name.SequenceEqual(propName_voice_note):
                    obj.VoiceNote = reader.ReadTLObject<InputFile>();
                    return true;
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x1AA9F5D2u when name.SequenceEqual(propName_waveform):
                    obj.Waveform = reader.ReadBase64String();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<FormattedText>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputMessageLocation")]
    partial class InputMessageLocationConverter : TLObjectConverter<InputMessageLocation>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageLocationConverter();
        public override TLObject CreateObjectInstance() => new InputMessageLocation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageLocation)tlobj;
            if (name.SequenceEqual(propName_location))
            {
                obj.Location = reader.ReadTLObject<Location>();
                return true;
            }
            if (name.SequenceEqual(propName_live_period))
            {
                obj.LivePeriod = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("inputMessageVenue")]
    partial class InputMessageVenueConverter : TLObjectConverter<InputMessageVenue>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageVenueConverter();
        public override TLObject CreateObjectInstance() => new InputMessageVenue();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageVenue)tlobj;
            if (name.SequenceEqual(propName_venue))
            {
                obj.Venue = reader.ReadTLObject<Venue>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputMessageContact")]
    partial class InputMessageContactConverter : TLObjectConverter<InputMessageContact>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageContactConverter();
        public override TLObject CreateObjectInstance() => new InputMessageContact();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageContact)tlobj;
            if (name.SequenceEqual(propName_contact))
            {
                obj.Contact = reader.ReadTLObject<Contact>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputMessageDice")]
    partial class InputMessageDiceConverter : TLObjectConverter<InputMessageDice>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageDiceConverter();
        public override TLObject CreateObjectInstance() => new InputMessageDice();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageDice)tlobj;
            if (name.SequenceEqual(propName_emoji))
            {
                obj.Emoji = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_clear_draft))
            {
                obj.ClearDraft = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("inputMessageGame")]
    partial class InputMessageGameConverter : TLObjectConverter<InputMessageGame>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageGameConverter();
        public override TLObject CreateObjectInstance() => new InputMessageGame();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageGame)tlobj;
            if (name.SequenceEqual(propName_bot_user_id))
            {
                obj.BotUserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_game_short_name))
            {
                obj.GameShortName = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inputMessageInvoice")]
    partial class InputMessageInvoiceConverter : TLObjectConverter<InputMessageInvoice>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageInvoiceConverter();
        public override TLObject CreateObjectInstance() => new InputMessageInvoice();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageInvoice)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5A906110u when name.SequenceEqual(propName_invoice):
                    obj.Invoice = reader.ReadTLObject<Invoice>();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0x599FCD0Du when name.SequenceEqual(propName_photo_url):
                    obj.PhotoUrl = reader.ReadString();
                    return true;
                case 0xA2E1E9ADu when name.SequenceEqual(propName_photo_size):
                    obj.PhotoSize = reader.ReadInt();
                    return true;
                case 0x7A7C2250u when name.SequenceEqual(propName_photo_width):
                    obj.PhotoWidth = reader.ReadInt();
                    return true;
                case 0x9EF07547u when name.SequenceEqual(propName_photo_height):
                    obj.PhotoHeight = reader.ReadInt();
                    return true;
                case 0x330F77A5u when name.SequenceEqual(propName_payload):
                    obj.Payload = reader.ReadBase64String();
                    return true;
                case 0xE570DD8Eu when name.SequenceEqual(propName_provider_token):
                    obj.ProviderToken = reader.ReadString();
                    return true;
                case 0x7B967909u when name.SequenceEqual(propName_provider_data):
                    obj.ProviderData = reader.ReadString();
                    return true;
                case 0x9E1A41AFu when name.SequenceEqual(propName_start_parameter):
                    obj.StartParameter = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputMessagePoll")]
    partial class InputMessagePollConverter : TLObjectConverter<InputMessagePoll>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessagePollConverter();
        public override TLObject CreateObjectInstance() => new InputMessagePoll();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessagePoll)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x06D5A845u when name.SequenceEqual(propName_question):
                    obj.Question = reader.ReadString();
                    return true;
                case 0xEF286CA5u when name.SequenceEqual(propName_options):
                    obj.Options = reader.ReadStringArray();
                    return true;
                case 0xC3C3A943u when name.SequenceEqual(propName_is_anonymous):
                    obj.IsAnonymous = reader.ReadBool();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<PollType>();
                    return true;
                case 0xC3CA66E3u when name.SequenceEqual(propName_open_period):
                    obj.OpenPeriod = reader.ReadInt();
                    return true;
                case 0x634EE2D0u when name.SequenceEqual(propName_close_date):
                    obj.CloseDate = reader.ReadInt();
                    return true;
                case 0xE31C4FCAu when name.SequenceEqual(propName_is_closed):
                    obj.IsClosed = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputMessageForwarded")]
    partial class InputMessageForwardedConverter : TLObjectConverter<InputMessageForwarded>
    {
        public static BaseConverter CreateConverterInstance() => new InputMessageForwardedConverter();
        public override TLObject CreateObjectInstance() => new InputMessageForwarded();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputMessageForwarded)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xCBEE0078u when name.SequenceEqual(propName_from_chat_id):
                    obj.FromChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0xE28557D1u when name.SequenceEqual(propName_in_game_share):
                    obj.InGameShare = reader.ReadBool();
                    return true;
                case 0xB8DACC19u when name.SequenceEqual(propName_copy_options):
                    obj.CopyOptions = reader.ReadTLObject<MessageCopyOptions>();
                    return true;
            }
            return false;
        }
    }

    [TLType("searchMessagesFilterEmpty")]
    partial class SearchMessagesFilterEmptyConverter : TLObjectConverter<SearchMessagesFilterEmpty>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterEmptyConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterEmpty();
    }

    [TLType("searchMessagesFilterAnimation")]
    partial class SearchMessagesFilterAnimationConverter : TLObjectConverter<SearchMessagesFilterAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterAnimationConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterAnimation();
    }

    [TLType("searchMessagesFilterAudio")]
    partial class SearchMessagesFilterAudioConverter : TLObjectConverter<SearchMessagesFilterAudio>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterAudioConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterAudio();
    }

    [TLType("searchMessagesFilterDocument")]
    partial class SearchMessagesFilterDocumentConverter : TLObjectConverter<SearchMessagesFilterDocument>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterDocumentConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterDocument();
    }

    [TLType("searchMessagesFilterPhoto")]
    partial class SearchMessagesFilterPhotoConverter : TLObjectConverter<SearchMessagesFilterPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterPhotoConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterPhoto();
    }

    [TLType("searchMessagesFilterVideo")]
    partial class SearchMessagesFilterVideoConverter : TLObjectConverter<SearchMessagesFilterVideo>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterVideoConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterVideo();
    }

    [TLType("searchMessagesFilterVoiceNote")]
    partial class SearchMessagesFilterVoiceNoteConverter : TLObjectConverter<SearchMessagesFilterVoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterVoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterVoiceNote();
    }

    [TLType("searchMessagesFilterPhotoAndVideo")]
    partial class SearchMessagesFilterPhotoAndVideoConverter : TLObjectConverter<SearchMessagesFilterPhotoAndVideo>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterPhotoAndVideoConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterPhotoAndVideo();
    }

    [TLType("searchMessagesFilterUrl")]
    partial class SearchMessagesFilterUrlConverter : TLObjectConverter<SearchMessagesFilterUrl>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterUrlConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterUrl();
    }

    [TLType("searchMessagesFilterChatPhoto")]
    partial class SearchMessagesFilterChatPhotoConverter : TLObjectConverter<SearchMessagesFilterChatPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterChatPhotoConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterChatPhoto();
    }

    [TLType("searchMessagesFilterCall")]
    partial class SearchMessagesFilterCallConverter : TLObjectConverter<SearchMessagesFilterCall>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterCallConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterCall();
    }

    [TLType("searchMessagesFilterMissedCall")]
    partial class SearchMessagesFilterMissedCallConverter : TLObjectConverter<SearchMessagesFilterMissedCall>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterMissedCallConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterMissedCall();
    }

    [TLType("searchMessagesFilterVideoNote")]
    partial class SearchMessagesFilterVideoNoteConverter : TLObjectConverter<SearchMessagesFilterVideoNote>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterVideoNoteConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterVideoNote();
    }

    [TLType("searchMessagesFilterVoiceAndVideoNote")]
    partial class SearchMessagesFilterVoiceAndVideoNoteConverter : TLObjectConverter<SearchMessagesFilterVoiceAndVideoNote>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterVoiceAndVideoNoteConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterVoiceAndVideoNote();
    }

    [TLType("searchMessagesFilterMention")]
    partial class SearchMessagesFilterMentionConverter : TLObjectConverter<SearchMessagesFilterMention>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterMentionConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterMention();
    }

    [TLType("searchMessagesFilterUnreadMention")]
    partial class SearchMessagesFilterUnreadMentionConverter : TLObjectConverter<SearchMessagesFilterUnreadMention>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterUnreadMentionConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterUnreadMention();
    }

    [TLType("searchMessagesFilterFailedToSend")]
    partial class SearchMessagesFilterFailedToSendConverter : TLObjectConverter<SearchMessagesFilterFailedToSend>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesFilterFailedToSendConverter();
        public override TLObject CreateObjectInstance() => new SearchMessagesFilterFailedToSend();
    }

    [TLType("chatActionTyping")]
    partial class ChatActionTypingConverter : TLObjectConverter<ChatActionTyping>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionTypingConverter();
        public override TLObject CreateObjectInstance() => new ChatActionTyping();
    }

    [TLType("chatActionRecordingVideo")]
    partial class ChatActionRecordingVideoConverter : TLObjectConverter<ChatActionRecordingVideo>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionRecordingVideoConverter();
        public override TLObject CreateObjectInstance() => new ChatActionRecordingVideo();
    }

    [TLType("chatActionUploadingVideo")]
    partial class ChatActionUploadingVideoConverter : TLObjectConverter<ChatActionUploadingVideo>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionUploadingVideoConverter();
        public override TLObject CreateObjectInstance() => new ChatActionUploadingVideo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatActionUploadingVideo)tlobj;
            if (name.SequenceEqual(propName_progress))
            {
                obj.Progress = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatActionRecordingVoiceNote")]
    partial class ChatActionRecordingVoiceNoteConverter : TLObjectConverter<ChatActionRecordingVoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionRecordingVoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new ChatActionRecordingVoiceNote();
    }

    [TLType("chatActionUploadingVoiceNote")]
    partial class ChatActionUploadingVoiceNoteConverter : TLObjectConverter<ChatActionUploadingVoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionUploadingVoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new ChatActionUploadingVoiceNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatActionUploadingVoiceNote)tlobj;
            if (name.SequenceEqual(propName_progress))
            {
                obj.Progress = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatActionUploadingPhoto")]
    partial class ChatActionUploadingPhotoConverter : TLObjectConverter<ChatActionUploadingPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionUploadingPhotoConverter();
        public override TLObject CreateObjectInstance() => new ChatActionUploadingPhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatActionUploadingPhoto)tlobj;
            if (name.SequenceEqual(propName_progress))
            {
                obj.Progress = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatActionUploadingDocument")]
    partial class ChatActionUploadingDocumentConverter : TLObjectConverter<ChatActionUploadingDocument>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionUploadingDocumentConverter();
        public override TLObject CreateObjectInstance() => new ChatActionUploadingDocument();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatActionUploadingDocument)tlobj;
            if (name.SequenceEqual(propName_progress))
            {
                obj.Progress = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatActionChoosingLocation")]
    partial class ChatActionChoosingLocationConverter : TLObjectConverter<ChatActionChoosingLocation>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionChoosingLocationConverter();
        public override TLObject CreateObjectInstance() => new ChatActionChoosingLocation();
    }

    [TLType("chatActionChoosingContact")]
    partial class ChatActionChoosingContactConverter : TLObjectConverter<ChatActionChoosingContact>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionChoosingContactConverter();
        public override TLObject CreateObjectInstance() => new ChatActionChoosingContact();
    }

    [TLType("chatActionStartPlayingGame")]
    partial class ChatActionStartPlayingGameConverter : TLObjectConverter<ChatActionStartPlayingGame>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionStartPlayingGameConverter();
        public override TLObject CreateObjectInstance() => new ChatActionStartPlayingGame();
    }

    [TLType("chatActionRecordingVideoNote")]
    partial class ChatActionRecordingVideoNoteConverter : TLObjectConverter<ChatActionRecordingVideoNote>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionRecordingVideoNoteConverter();
        public override TLObject CreateObjectInstance() => new ChatActionRecordingVideoNote();
    }

    [TLType("chatActionUploadingVideoNote")]
    partial class ChatActionUploadingVideoNoteConverter : TLObjectConverter<ChatActionUploadingVideoNote>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionUploadingVideoNoteConverter();
        public override TLObject CreateObjectInstance() => new ChatActionUploadingVideoNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatActionUploadingVideoNote)tlobj;
            if (name.SequenceEqual(propName_progress))
            {
                obj.Progress = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatActionCancel")]
    partial class ChatActionCancelConverter : TLObjectConverter<ChatActionCancel>
    {
        public static BaseConverter CreateConverterInstance() => new ChatActionCancelConverter();
        public override TLObject CreateObjectInstance() => new ChatActionCancel();
    }

    [TLType("userStatusEmpty")]
    partial class UserStatusEmptyConverter : TLObjectConverter<UserStatusEmpty>
    {
        public static BaseConverter CreateConverterInstance() => new UserStatusEmptyConverter();
        public override TLObject CreateObjectInstance() => new UserStatusEmpty();
    }

    [TLType("userStatusOnline")]
    partial class UserStatusOnlineConverter : TLObjectConverter<UserStatusOnline>
    {
        public static BaseConverter CreateConverterInstance() => new UserStatusOnlineConverter();
        public override TLObject CreateObjectInstance() => new UserStatusOnline();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UserStatusOnline)tlobj;
            if (name.SequenceEqual(propName_expires))
            {
                obj.Expires = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("userStatusOffline")]
    partial class UserStatusOfflineConverter : TLObjectConverter<UserStatusOffline>
    {
        public static BaseConverter CreateConverterInstance() => new UserStatusOfflineConverter();
        public override TLObject CreateObjectInstance() => new UserStatusOffline();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UserStatusOffline)tlobj;
            if (name.SequenceEqual(propName_was_online))
            {
                obj.WasOnline = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("userStatusRecently")]
    partial class UserStatusRecentlyConverter : TLObjectConverter<UserStatusRecently>
    {
        public static BaseConverter CreateConverterInstance() => new UserStatusRecentlyConverter();
        public override TLObject CreateObjectInstance() => new UserStatusRecently();
    }

    [TLType("userStatusLastWeek")]
    partial class UserStatusLastWeekConverter : TLObjectConverter<UserStatusLastWeek>
    {
        public static BaseConverter CreateConverterInstance() => new UserStatusLastWeekConverter();
        public override TLObject CreateObjectInstance() => new UserStatusLastWeek();
    }

    [TLType("userStatusLastMonth")]
    partial class UserStatusLastMonthConverter : TLObjectConverter<UserStatusLastMonth>
    {
        public static BaseConverter CreateConverterInstance() => new UserStatusLastMonthConverter();
        public override TLObject CreateObjectInstance() => new UserStatusLastMonth();
    }

    [TLType("stickers")]
    partial class StickersConverter : TLObjectConverter<Stickers>
    {
        public static BaseConverter CreateConverterInstance() => new StickersConverter();
        public override TLObject CreateObjectInstance() => new Stickers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Stickers)tlobj;
            if (name.SequenceEqual(propName_stickers))
            {
                obj.Stickers_ = reader.ReadObjectArray<Sticker>();
                return true;
            }
            return false;
        }
    }

    [TLType("emojis")]
    partial class EmojisConverter : TLObjectConverter<Emojis>
    {
        public static BaseConverter CreateConverterInstance() => new EmojisConverter();
        public override TLObject CreateObjectInstance() => new Emojis();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Emojis)tlobj;
            if (name.SequenceEqual(propName_emojis))
            {
                obj.Emojis_ = reader.ReadStringArray();
                return true;
            }
            return false;
        }
    }

    [TLType("stickerSet")]
    partial class StickerSetConverter : TLObjectConverter<StickerSet>
    {
        public static BaseConverter CreateConverterInstance() => new StickerSetConverter();
        public override TLObject CreateObjectInstance() => new StickerSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StickerSet)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x8D39BDE6u when name.SequenceEqual(propName_name):
                    obj.Name = reader.ReadString();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                    return true;
                case 0xB7A3616Cu when name.SequenceEqual(propName_is_installed):
                    obj.IsInstalled = reader.ReadBool();
                    return true;
                case 0xDCD57468u when name.SequenceEqual(propName_is_archived):
                    obj.IsArchived = reader.ReadBool();
                    return true;
                case 0x03A9AAFFu when name.SequenceEqual(propName_is_official):
                    obj.IsOfficial = reader.ReadBool();
                    return true;
                case 0x06B935A3u when name.SequenceEqual(propName_is_animated):
                    obj.IsAnimated = reader.ReadBool();
                    return true;
                case 0x531AE927u when name.SequenceEqual(propName_is_masks):
                    obj.IsMasks = reader.ReadBool();
                    return true;
                case 0x5663919Eu when name.SequenceEqual(propName_is_viewed):
                    obj.IsViewed = reader.ReadBool();
                    return true;
                case 0x1C388ABDu when name.SequenceEqual(propName_stickers):
                    obj.Stickers = reader.ReadObjectArray<Sticker>();
                    return true;
                case 0xB028B7CAu when name.SequenceEqual(propName_emojis):
                    obj.Emojis = reader.ReadObjectArray<Emojis>();
                    return true;
            }
            return false;
        }
    }

    [TLType("stickerSetInfo")]
    partial class StickerSetInfoConverter : TLObjectConverter<StickerSetInfo>
    {
        public static BaseConverter CreateConverterInstance() => new StickerSetInfoConverter();
        public override TLObject CreateObjectInstance() => new StickerSetInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StickerSetInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x8D39BDE6u when name.SequenceEqual(propName_name):
                    obj.Name = reader.ReadString();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                    return true;
                case 0xB7A3616Cu when name.SequenceEqual(propName_is_installed):
                    obj.IsInstalled = reader.ReadBool();
                    return true;
                case 0xDCD57468u when name.SequenceEqual(propName_is_archived):
                    obj.IsArchived = reader.ReadBool();
                    return true;
                case 0x03A9AAFFu when name.SequenceEqual(propName_is_official):
                    obj.IsOfficial = reader.ReadBool();
                    return true;
                case 0x06B935A3u when name.SequenceEqual(propName_is_animated):
                    obj.IsAnimated = reader.ReadBool();
                    return true;
                case 0x531AE927u when name.SequenceEqual(propName_is_masks):
                    obj.IsMasks = reader.ReadBool();
                    return true;
                case 0x5663919Eu when name.SequenceEqual(propName_is_viewed):
                    obj.IsViewed = reader.ReadBool();
                    return true;
                case 0x23A0D95Cu when name.SequenceEqual(propName_size):
                    obj.Size = reader.ReadInt();
                    return true;
                case 0x03BECA89u when name.SequenceEqual(propName_covers):
                    obj.Covers = reader.ReadObjectArray<Sticker>();
                    return true;
            }
            return false;
        }
    }

    [TLType("stickerSets")]
    partial class StickerSetsConverter : TLObjectConverter<StickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new StickerSetsConverter();
        public override TLObject CreateObjectInstance() => new StickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StickerSets)tlobj;
            if (name.SequenceEqual(propName_total_count))
            {
                obj.TotalCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_sets))
            {
                obj.Sets = reader.ReadObjectArray<StickerSetInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("callDiscardReasonEmpty")]
    partial class CallDiscardReasonEmptyConverter : TLObjectConverter<CallDiscardReasonEmpty>
    {
        public static BaseConverter CreateConverterInstance() => new CallDiscardReasonEmptyConverter();
        public override TLObject CreateObjectInstance() => new CallDiscardReasonEmpty();
    }

    [TLType("callDiscardReasonMissed")]
    partial class CallDiscardReasonMissedConverter : TLObjectConverter<CallDiscardReasonMissed>
    {
        public static BaseConverter CreateConverterInstance() => new CallDiscardReasonMissedConverter();
        public override TLObject CreateObjectInstance() => new CallDiscardReasonMissed();
    }

    [TLType("callDiscardReasonDeclined")]
    partial class CallDiscardReasonDeclinedConverter : TLObjectConverter<CallDiscardReasonDeclined>
    {
        public static BaseConverter CreateConverterInstance() => new CallDiscardReasonDeclinedConverter();
        public override TLObject CreateObjectInstance() => new CallDiscardReasonDeclined();
    }

    [TLType("callDiscardReasonDisconnected")]
    partial class CallDiscardReasonDisconnectedConverter : TLObjectConverter<CallDiscardReasonDisconnected>
    {
        public static BaseConverter CreateConverterInstance() => new CallDiscardReasonDisconnectedConverter();
        public override TLObject CreateObjectInstance() => new CallDiscardReasonDisconnected();
    }

    [TLType("callDiscardReasonHungUp")]
    partial class CallDiscardReasonHungUpConverter : TLObjectConverter<CallDiscardReasonHungUp>
    {
        public static BaseConverter CreateConverterInstance() => new CallDiscardReasonHungUpConverter();
        public override TLObject CreateObjectInstance() => new CallDiscardReasonHungUp();
    }

    [TLType("callProtocol")]
    partial class CallProtocolConverter : TLObjectConverter<CallProtocol>
    {
        public static BaseConverter CreateConverterInstance() => new CallProtocolConverter();
        public override TLObject CreateObjectInstance() => new CallProtocol();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallProtocol)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x3576AB49u when name.SequenceEqual(propName_udp_p2p):
                    obj.UdpP2p = reader.ReadBool();
                    return true;
                case 0x0535052Bu when name.SequenceEqual(propName_udp_reflector):
                    obj.UdpReflector = reader.ReadBool();
                    return true;
                case 0x535C0F4Du when name.SequenceEqual(propName_min_layer):
                    obj.MinLayer = reader.ReadInt();
                    return true;
                case 0xF1A5A85Fu when name.SequenceEqual(propName_max_layer):
                    obj.MaxLayer = reader.ReadInt();
                    return true;
                case 0x738BF174u when name.SequenceEqual(propName_library_versions):
                    obj.LibraryVersions = reader.ReadStringArray();
                    return true;
            }
            return false;
        }
    }

    [TLType("callServerTypeTelegramReflector")]
    partial class CallServerTypeTelegramReflectorConverter : TLObjectConverter<CallServerTypeTelegramReflector>
    {
        public static BaseConverter CreateConverterInstance() => new CallServerTypeTelegramReflectorConverter();
        public override TLObject CreateObjectInstance() => new CallServerTypeTelegramReflector();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallServerTypeTelegramReflector)tlobj;
            if (name.SequenceEqual(propName_peer_tag))
            {
                obj.PeerTag = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("callServerTypeWebrtc")]
    partial class CallServerTypeWebrtcConverter : TLObjectConverter<CallServerTypeWebrtc>
    {
        public static BaseConverter CreateConverterInstance() => new CallServerTypeWebrtcConverter();
        public override TLObject CreateObjectInstance() => new CallServerTypeWebrtc();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallServerTypeWebrtc)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x4EAF15B9u when name.SequenceEqual(propName_username):
                    obj.Username = reader.ReadString();
                    return true;
                case 0x364B5F18u when name.SequenceEqual(propName_password):
                    obj.Password = reader.ReadString();
                    return true;
                case 0x21635599u when name.SequenceEqual(propName_supports_turn):
                    obj.SupportsTurn = reader.ReadBool();
                    return true;
                case 0xD7BCB1F2u when name.SequenceEqual(propName_supports_stun):
                    obj.SupportsStun = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("callServer")]
    partial class CallServerConverter : TLObjectConverter<CallServer>
    {
        public static BaseConverter CreateConverterInstance() => new CallServerConverter();
        public override TLObject CreateObjectInstance() => new CallServer();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallServer)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x1438FBC7u when name.SequenceEqual(propName_ip_address):
                    obj.IpAddress = reader.ReadString();
                    return true;
                case 0xE42AD1F3u when name.SequenceEqual(propName_ipv6_address):
                    obj.Ipv6Address = reader.ReadString();
                    return true;
                case 0x7BE412A6u when name.SequenceEqual(propName_port):
                    obj.Port = reader.ReadInt();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<CallServerType>();
                    return true;
            }
            return false;
        }
    }

    [TLType("callId")]
    partial class CallIdConverter : TLObjectConverter<CallId>
    {
        public static BaseConverter CreateConverterInstance() => new CallIdConverter();
        public override TLObject CreateObjectInstance() => new CallId();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallId)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("callStatePending")]
    partial class CallStatePendingConverter : TLObjectConverter<CallStatePending>
    {
        public static BaseConverter CreateConverterInstance() => new CallStatePendingConverter();
        public override TLObject CreateObjectInstance() => new CallStatePending();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallStatePending)tlobj;
            if (name.SequenceEqual(propName_is_created))
            {
                obj.IsCreated = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_is_received))
            {
                obj.IsReceived = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("callStateExchangingKeys")]
    partial class CallStateExchangingKeysConverter : TLObjectConverter<CallStateExchangingKeys>
    {
        public static BaseConverter CreateConverterInstance() => new CallStateExchangingKeysConverter();
        public override TLObject CreateObjectInstance() => new CallStateExchangingKeys();
    }

    [TLType("callStateReady")]
    partial class CallStateReadyConverter : TLObjectConverter<CallStateReady>
    {
        public static BaseConverter CreateConverterInstance() => new CallStateReadyConverter();
        public override TLObject CreateObjectInstance() => new CallStateReady();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallStateReady)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xFB2805B5u when name.SequenceEqual(propName_protocol):
                    obj.Protocol = reader.ReadTLObject<CallProtocol>();
                    return true;
                case 0x70250473u when name.SequenceEqual(propName_servers):
                    obj.Servers = reader.ReadObjectArray<CallServer>();
                    return true;
                case 0x23FF66C7u when name.SequenceEqual(propName_config):
                    obj.Config = reader.ReadString();
                    return true;
                case 0x7D5F7E90u when name.SequenceEqual(propName_encryption_key):
                    obj.EncryptionKey = reader.ReadBase64String();
                    return true;
                case 0xB028B7CAu when name.SequenceEqual(propName_emojis):
                    obj.Emojis = reader.ReadStringArray();
                    return true;
                case 0xF8F0711Fu when name.SequenceEqual(propName_allow_p2p):
                    obj.AllowP2p = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("callStateHangingUp")]
    partial class CallStateHangingUpConverter : TLObjectConverter<CallStateHangingUp>
    {
        public static BaseConverter CreateConverterInstance() => new CallStateHangingUpConverter();
        public override TLObject CreateObjectInstance() => new CallStateHangingUp();
    }

    [TLType("callStateDiscarded")]
    partial class CallStateDiscardedConverter : TLObjectConverter<CallStateDiscarded>
    {
        public static BaseConverter CreateConverterInstance() => new CallStateDiscardedConverter();
        public override TLObject CreateObjectInstance() => new CallStateDiscarded();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallStateDiscarded)tlobj;
            if (name.SequenceEqual(propName_reason))
            {
                obj.Reason = reader.ReadTLObject<CallDiscardReason>();
                return true;
            }
            if (name.SequenceEqual(propName_need_rating))
            {
                obj.NeedRating = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_need_debug_information))
            {
                obj.NeedDebugInformation = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("callStateError")]
    partial class CallStateErrorConverter : TLObjectConverter<CallStateError>
    {
        public static BaseConverter CreateConverterInstance() => new CallStateErrorConverter();
        public override TLObject CreateObjectInstance() => new CallStateError();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallStateError)tlobj;
            if (name.SequenceEqual(propName_error))
            {
                obj.Error = reader.ReadTLObject<Error>();
                return true;
            }
            return false;
        }
    }

    [TLType("callProblemEcho")]
    partial class CallProblemEchoConverter : TLObjectConverter<CallProblemEcho>
    {
        public static BaseConverter CreateConverterInstance() => new CallProblemEchoConverter();
        public override TLObject CreateObjectInstance() => new CallProblemEcho();
    }

    [TLType("callProblemNoise")]
    partial class CallProblemNoiseConverter : TLObjectConverter<CallProblemNoise>
    {
        public static BaseConverter CreateConverterInstance() => new CallProblemNoiseConverter();
        public override TLObject CreateObjectInstance() => new CallProblemNoise();
    }

    [TLType("callProblemInterruptions")]
    partial class CallProblemInterruptionsConverter : TLObjectConverter<CallProblemInterruptions>
    {
        public static BaseConverter CreateConverterInstance() => new CallProblemInterruptionsConverter();
        public override TLObject CreateObjectInstance() => new CallProblemInterruptions();
    }

    [TLType("callProblemDistortedSpeech")]
    partial class CallProblemDistortedSpeechConverter : TLObjectConverter<CallProblemDistortedSpeech>
    {
        public static BaseConverter CreateConverterInstance() => new CallProblemDistortedSpeechConverter();
        public override TLObject CreateObjectInstance() => new CallProblemDistortedSpeech();
    }

    [TLType("callProblemSilentLocal")]
    partial class CallProblemSilentLocalConverter : TLObjectConverter<CallProblemSilentLocal>
    {
        public static BaseConverter CreateConverterInstance() => new CallProblemSilentLocalConverter();
        public override TLObject CreateObjectInstance() => new CallProblemSilentLocal();
    }

    [TLType("callProblemSilentRemote")]
    partial class CallProblemSilentRemoteConverter : TLObjectConverter<CallProblemSilentRemote>
    {
        public static BaseConverter CreateConverterInstance() => new CallProblemSilentRemoteConverter();
        public override TLObject CreateObjectInstance() => new CallProblemSilentRemote();
    }

    [TLType("callProblemDropped")]
    partial class CallProblemDroppedConverter : TLObjectConverter<CallProblemDropped>
    {
        public static BaseConverter CreateConverterInstance() => new CallProblemDroppedConverter();
        public override TLObject CreateObjectInstance() => new CallProblemDropped();
    }

    [TLType("callProblemDistortedVideo")]
    partial class CallProblemDistortedVideoConverter : TLObjectConverter<CallProblemDistortedVideo>
    {
        public static BaseConverter CreateConverterInstance() => new CallProblemDistortedVideoConverter();
        public override TLObject CreateObjectInstance() => new CallProblemDistortedVideo();
    }

    [TLType("callProblemPixelatedVideo")]
    partial class CallProblemPixelatedVideoConverter : TLObjectConverter<CallProblemPixelatedVideo>
    {
        public static BaseConverter CreateConverterInstance() => new CallProblemPixelatedVideoConverter();
        public override TLObject CreateObjectInstance() => new CallProblemPixelatedVideo();
    }

    [TLType("call")]
    partial class CallConverter : TLObjectConverter<Call>
    {
        public static BaseConverter CreateConverterInstance() => new CallConverter();
        public override TLObject CreateObjectInstance() => new Call();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Call)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt();
                    return true;
                case 0x10A75CDAu when name.SequenceEqual(propName_user_id):
                    obj.UserId = reader.ReadInt();
                    return true;
                case 0x5457F918u when name.SequenceEqual(propName_is_outgoing):
                    obj.IsOutgoing = reader.ReadBool();
                    return true;
                case 0x7815FC5Du when name.SequenceEqual(propName_is_video):
                    obj.IsVideo = reader.ReadBool();
                    return true;
                case 0x783132F6u when name.SequenceEqual(propName_state):
                    obj.State = reader.ReadTLObject<CallState>();
                    return true;
            }
            return false;
        }
    }

    [TLType("phoneNumberAuthenticationSettings")]
    partial class PhoneNumberAuthenticationSettingsConverter : TLObjectConverter<PhoneNumberAuthenticationSettings>
    {
        public static BaseConverter CreateConverterInstance() => new PhoneNumberAuthenticationSettingsConverter();
        public override TLObject CreateObjectInstance() => new PhoneNumberAuthenticationSettings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PhoneNumberAuthenticationSettings)tlobj;
            if (name.SequenceEqual(propName_allow_flash_call))
            {
                obj.AllowFlashCall = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_is_current_phone_number))
            {
                obj.IsCurrentPhoneNumber = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_allow_sms_retriever_api))
            {
                obj.AllowSmsRetrieverApi = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("animations")]
    partial class AnimationsConverter : TLObjectConverter<Animations>
    {
        public static BaseConverter CreateConverterInstance() => new AnimationsConverter();
        public override TLObject CreateObjectInstance() => new Animations();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Animations)tlobj;
            if (name.SequenceEqual(propName_animations))
            {
                obj.Animations_ = reader.ReadObjectArray<Animation>();
                return true;
            }
            return false;
        }
    }

    [TLType("importedContacts")]
    partial class ImportedContactsConverter : TLObjectConverter<ImportedContacts>
    {
        public static BaseConverter CreateConverterInstance() => new ImportedContactsConverter();
        public override TLObject CreateObjectInstance() => new ImportedContacts();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ImportedContacts)tlobj;
            if (name.SequenceEqual(propName_user_ids))
            {
                obj.UserIds = reader.ReadInt32Array();
                return true;
            }
            if (name.SequenceEqual(propName_importer_count))
            {
                obj.ImporterCount = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("httpUrl")]
    partial class HttpUrlConverter : TLObjectConverter<HttpUrl>
    {
        public static BaseConverter CreateConverterInstance() => new HttpUrlConverter();
        public override TLObject CreateObjectInstance() => new HttpUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (HttpUrl)tlobj;
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultAnimation")]
    partial class InputInlineQueryResultAnimationConverter : TLObjectConverter<InputInlineQueryResultAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultAnimationConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultAnimation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultAnimation)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0xA00D7179u when name.SequenceEqual(propName_thumbnail_url):
                    obj.ThumbnailUrl = reader.ReadString();
                    return true;
                case 0xE9CC98BDu when name.SequenceEqual(propName_thumbnail_mime_type):
                    obj.ThumbnailMimeType = reader.ReadString();
                    return true;
                case 0x0A47133Au when name.SequenceEqual(propName_video_url):
                    obj.VideoUrl = reader.ReadString();
                    return true;
                case 0x458C71D2u when name.SequenceEqual(propName_video_mime_type):
                    obj.VideoMimeType = reader.ReadString();
                    return true;
                case 0x16F41F89u when name.SequenceEqual(propName_video_duration):
                    obj.VideoDuration = reader.ReadInt();
                    return true;
                case 0x0F0512A3u when name.SequenceEqual(propName_video_width):
                    obj.VideoWidth = reader.ReadInt();
                    return true;
                case 0xCDCF525Eu when name.SequenceEqual(propName_video_height):
                    obj.VideoHeight = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultArticle")]
    partial class InputInlineQueryResultArticleConverter : TLObjectConverter<InputInlineQueryResultArticle>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultArticleConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultArticle();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultArticle)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x328F4C1Eu when name.SequenceEqual(propName_url):
                    obj.Url = reader.ReadString();
                    return true;
                case 0x4ED277C7u when name.SequenceEqual(propName_hide_url):
                    obj.HideUrl = reader.ReadBool();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0xA00D7179u when name.SequenceEqual(propName_thumbnail_url):
                    obj.ThumbnailUrl = reader.ReadString();
                    return true;
                case 0x05E291A4u when name.SequenceEqual(propName_thumbnail_width):
                    obj.ThumbnailWidth = reader.ReadInt();
                    return true;
                case 0x4F941153u when name.SequenceEqual(propName_thumbnail_height):
                    obj.ThumbnailHeight = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultAudio")]
    partial class InputInlineQueryResultAudioConverter : TLObjectConverter<InputInlineQueryResultAudio>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultAudioConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultAudio();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultAudio)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x1499AAB5u when name.SequenceEqual(propName_performer):
                    obj.Performer = reader.ReadString();
                    return true;
                case 0x1A7F30FBu when name.SequenceEqual(propName_audio_url):
                    obj.AudioUrl = reader.ReadString();
                    return true;
                case 0xBEAD474Eu when name.SequenceEqual(propName_audio_duration):
                    obj.AudioDuration = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultContact")]
    partial class InputInlineQueryResultContactConverter : TLObjectConverter<InputInlineQueryResultContact>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultContactConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultContact();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultContact)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x4303B923u when name.SequenceEqual(propName_contact):
                    obj.Contact = reader.ReadTLObject<Contact>();
                    return true;
                case 0xA00D7179u when name.SequenceEqual(propName_thumbnail_url):
                    obj.ThumbnailUrl = reader.ReadString();
                    return true;
                case 0x05E291A4u when name.SequenceEqual(propName_thumbnail_width):
                    obj.ThumbnailWidth = reader.ReadInt();
                    return true;
                case 0x4F941153u when name.SequenceEqual(propName_thumbnail_height):
                    obj.ThumbnailHeight = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultDocument")]
    partial class InputInlineQueryResultDocumentConverter : TLObjectConverter<InputInlineQueryResultDocument>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultDocumentConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultDocument();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultDocument)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0x0DC10022u when name.SequenceEqual(propName_document_url):
                    obj.DocumentUrl = reader.ReadString();
                    return true;
                case 0xC057CA56u when name.SequenceEqual(propName_mime_type):
                    obj.MimeType = reader.ReadString();
                    return true;
                case 0xA00D7179u when name.SequenceEqual(propName_thumbnail_url):
                    obj.ThumbnailUrl = reader.ReadString();
                    return true;
                case 0x05E291A4u when name.SequenceEqual(propName_thumbnail_width):
                    obj.ThumbnailWidth = reader.ReadInt();
                    return true;
                case 0x4F941153u when name.SequenceEqual(propName_thumbnail_height):
                    obj.ThumbnailHeight = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultGame")]
    partial class InputInlineQueryResultGameConverter : TLObjectConverter<InputInlineQueryResultGame>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultGameConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultGame();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultGame)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_game_short_name))
            {
                obj.GameShortName = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_reply_markup))
            {
                obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultLocation")]
    partial class InputInlineQueryResultLocationConverter : TLObjectConverter<InputInlineQueryResultLocation>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultLocationConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultLocation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultLocation)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x0BF5A9A6u when name.SequenceEqual(propName_location):
                    obj.Location = reader.ReadTLObject<Location>();
                    return true;
                case 0x27D29311u when name.SequenceEqual(propName_live_period):
                    obj.LivePeriod = reader.ReadInt();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0xA00D7179u when name.SequenceEqual(propName_thumbnail_url):
                    obj.ThumbnailUrl = reader.ReadString();
                    return true;
                case 0x05E291A4u when name.SequenceEqual(propName_thumbnail_width):
                    obj.ThumbnailWidth = reader.ReadInt();
                    return true;
                case 0x4F941153u when name.SequenceEqual(propName_thumbnail_height):
                    obj.ThumbnailHeight = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultPhoto")]
    partial class InputInlineQueryResultPhotoConverter : TLObjectConverter<InputInlineQueryResultPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultPhotoConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultPhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultPhoto)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0xA00D7179u when name.SequenceEqual(propName_thumbnail_url):
                    obj.ThumbnailUrl = reader.ReadString();
                    return true;
                case 0x599FCD0Du when name.SequenceEqual(propName_photo_url):
                    obj.PhotoUrl = reader.ReadString();
                    return true;
                case 0x7A7C2250u when name.SequenceEqual(propName_photo_width):
                    obj.PhotoWidth = reader.ReadInt();
                    return true;
                case 0x9EF07547u when name.SequenceEqual(propName_photo_height):
                    obj.PhotoHeight = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultSticker")]
    partial class InputInlineQueryResultStickerConverter : TLObjectConverter<InputInlineQueryResultSticker>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultStickerConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultSticker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultSticker)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0xA00D7179u when name.SequenceEqual(propName_thumbnail_url):
                    obj.ThumbnailUrl = reader.ReadString();
                    return true;
                case 0x40CA97CAu when name.SequenceEqual(propName_sticker_url):
                    obj.StickerUrl = reader.ReadString();
                    return true;
                case 0xD557FB33u when name.SequenceEqual(propName_sticker_width):
                    obj.StickerWidth = reader.ReadInt();
                    return true;
                case 0xA63A74EEu when name.SequenceEqual(propName_sticker_height):
                    obj.StickerHeight = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultVenue")]
    partial class InputInlineQueryResultVenueConverter : TLObjectConverter<InputInlineQueryResultVenue>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultVenueConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultVenue();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultVenue)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0xB39AA8FCu when name.SequenceEqual(propName_venue):
                    obj.Venue = reader.ReadTLObject<Venue>();
                    return true;
                case 0xA00D7179u when name.SequenceEqual(propName_thumbnail_url):
                    obj.ThumbnailUrl = reader.ReadString();
                    return true;
                case 0x05E291A4u when name.SequenceEqual(propName_thumbnail_width):
                    obj.ThumbnailWidth = reader.ReadInt();
                    return true;
                case 0x4F941153u when name.SequenceEqual(propName_thumbnail_height):
                    obj.ThumbnailHeight = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultVideo")]
    partial class InputInlineQueryResultVideoConverter : TLObjectConverter<InputInlineQueryResultVideo>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultVideoConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultVideo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultVideo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0xA00D7179u when name.SequenceEqual(propName_thumbnail_url):
                    obj.ThumbnailUrl = reader.ReadString();
                    return true;
                case 0x0A47133Au when name.SequenceEqual(propName_video_url):
                    obj.VideoUrl = reader.ReadString();
                    return true;
                case 0xC057CA56u when name.SequenceEqual(propName_mime_type):
                    obj.MimeType = reader.ReadString();
                    return true;
                case 0x0F0512A3u when name.SequenceEqual(propName_video_width):
                    obj.VideoWidth = reader.ReadInt();
                    return true;
                case 0xCDCF525Eu when name.SequenceEqual(propName_video_height):
                    obj.VideoHeight = reader.ReadInt();
                    return true;
                case 0x16F41F89u when name.SequenceEqual(propName_video_duration):
                    obj.VideoDuration = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inputInlineQueryResultVoiceNote")]
    partial class InputInlineQueryResultVoiceNoteConverter : TLObjectConverter<InputInlineQueryResultVoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new InputInlineQueryResultVoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new InputInlineQueryResultVoiceNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputInlineQueryResultVoiceNote)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x3DF33E04u when name.SequenceEqual(propName_voice_note_url):
                    obj.VoiceNoteUrl = reader.ReadString();
                    return true;
                case 0x4668A5E7u when name.SequenceEqual(propName_voice_note_duration):
                    obj.VoiceNoteDuration = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultArticle")]
    partial class InlineQueryResultArticleConverter : TLObjectConverter<InlineQueryResultArticle>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultArticleConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultArticle();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultArticle)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x328F4C1Eu when name.SequenceEqual(propName_url):
                    obj.Url = reader.ReadString();
                    return true;
                case 0x4ED277C7u when name.SequenceEqual(propName_hide_url):
                    obj.HideUrl = reader.ReadBool();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultContact")]
    partial class InlineQueryResultContactConverter : TLObjectConverter<InlineQueryResultContact>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultContactConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultContact();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultContact)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_contact))
            {
                obj.Contact = reader.ReadTLObject<Contact>();
                return true;
            }
            if (name.SequenceEqual(propName_thumbnail))
            {
                obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultLocation")]
    partial class InlineQueryResultLocationConverter : TLObjectConverter<InlineQueryResultLocation>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultLocationConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultLocation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultLocation)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x0BF5A9A6u when name.SequenceEqual(propName_location):
                    obj.Location = reader.ReadTLObject<Location>();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0xF5B74BC7u when name.SequenceEqual(propName_thumbnail):
                    obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                    return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultVenue")]
    partial class InlineQueryResultVenueConverter : TLObjectConverter<InlineQueryResultVenue>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultVenueConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultVenue();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultVenue)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_venue))
            {
                obj.Venue = reader.ReadTLObject<Venue>();
                return true;
            }
            if (name.SequenceEqual(propName_thumbnail))
            {
                obj.Thumbnail = reader.ReadTLObject<Thumbnail>();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultGame")]
    partial class InlineQueryResultGameConverter : TLObjectConverter<InlineQueryResultGame>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultGameConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultGame();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultGame)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_game))
            {
                obj.Game = reader.ReadTLObject<Game>();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultAnimation")]
    partial class InlineQueryResultAnimationConverter : TLObjectConverter<InlineQueryResultAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultAnimationConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultAnimation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultAnimation)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_animation))
            {
                obj.Animation = reader.ReadTLObject<Animation>();
                return true;
            }
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultAudio")]
    partial class InlineQueryResultAudioConverter : TLObjectConverter<InlineQueryResultAudio>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultAudioConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultAudio();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultAudio)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_audio))
            {
                obj.Audio = reader.ReadTLObject<Audio>();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultDocument")]
    partial class InlineQueryResultDocumentConverter : TLObjectConverter<InlineQueryResultDocument>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultDocumentConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultDocument();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultDocument)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x96234BD4u when name.SequenceEqual(propName_document):
                    obj.Document = reader.ReadTLObject<Document>();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultPhoto")]
    partial class InlineQueryResultPhotoConverter : TLObjectConverter<InlineQueryResultPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultPhotoConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultPhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultPhoto)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<Photo>();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultSticker")]
    partial class InlineQueryResultStickerConverter : TLObjectConverter<InlineQueryResultSticker>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultStickerConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultSticker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultSticker)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<Sticker>();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultVideo")]
    partial class InlineQueryResultVideoConverter : TLObjectConverter<InlineQueryResultVideo>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultVideoConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultVideo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultVideo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0xCEF90B6Cu when name.SequenceEqual(propName_video):
                    obj.Video = reader.ReadTLObject<Video>();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResultVoiceNote")]
    partial class InlineQueryResultVoiceNoteConverter : TLObjectConverter<InlineQueryResultVoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultVoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResultVoiceNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResultVoiceNote)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_voice_note))
            {
                obj.VoiceNote = reader.ReadTLObject<VoiceNote>();
                return true;
            }
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("inlineQueryResults")]
    partial class InlineQueryResultsConverter : TLObjectConverter<InlineQueryResults>
    {
        public static BaseConverter CreateConverterInstance() => new InlineQueryResultsConverter();
        public override TLObject CreateObjectInstance() => new InlineQueryResults();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InlineQueryResults)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x69BBE355u when name.SequenceEqual(propName_inline_query_id):
                    obj.InlineQueryId = reader.ReadInt64String();
                    return true;
                case 0x697AA81Au when name.SequenceEqual(propName_next_offset):
                    obj.NextOffset = reader.ReadString();
                    return true;
                case 0x6C4F4AF5u when name.SequenceEqual(propName_results):
                    obj.Results = reader.ReadObjectArray<InlineQueryResult>();
                    return true;
                case 0xAD9E3C99u when name.SequenceEqual(propName_switch_pm_text):
                    obj.SwitchPmText = reader.ReadString();
                    return true;
                case 0x21833D65u when name.SequenceEqual(propName_switch_pm_parameter):
                    obj.SwitchPmParameter = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("callbackQueryPayloadData")]
    partial class CallbackQueryPayloadDataConverter : TLObjectConverter<CallbackQueryPayloadData>
    {
        public static BaseConverter CreateConverterInstance() => new CallbackQueryPayloadDataConverter();
        public override TLObject CreateObjectInstance() => new CallbackQueryPayloadData();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallbackQueryPayloadData)tlobj;
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("callbackQueryPayloadDataWithPassword")]
    partial class CallbackQueryPayloadDataWithPasswordConverter : TLObjectConverter<CallbackQueryPayloadDataWithPassword>
    {
        public static BaseConverter CreateConverterInstance() => new CallbackQueryPayloadDataWithPasswordConverter();
        public override TLObject CreateObjectInstance() => new CallbackQueryPayloadDataWithPassword();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallbackQueryPayloadDataWithPassword)tlobj;
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("callbackQueryPayloadGame")]
    partial class CallbackQueryPayloadGameConverter : TLObjectConverter<CallbackQueryPayloadGame>
    {
        public static BaseConverter CreateConverterInstance() => new CallbackQueryPayloadGameConverter();
        public override TLObject CreateObjectInstance() => new CallbackQueryPayloadGame();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallbackQueryPayloadGame)tlobj;
            if (name.SequenceEqual(propName_game_short_name))
            {
                obj.GameShortName = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("callbackQueryAnswer")]
    partial class CallbackQueryAnswerConverter : TLObjectConverter<CallbackQueryAnswer>
    {
        public static BaseConverter CreateConverterInstance() => new CallbackQueryAnswerConverter();
        public override TLObject CreateObjectInstance() => new CallbackQueryAnswer();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CallbackQueryAnswer)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_show_alert))
            {
                obj.ShowAlert = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("customRequestResult")]
    partial class CustomRequestResultConverter : TLObjectConverter<CustomRequestResult>
    {
        public static BaseConverter CreateConverterInstance() => new CustomRequestResultConverter();
        public override TLObject CreateObjectInstance() => new CustomRequestResult();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CustomRequestResult)tlobj;
            if (name.SequenceEqual(propName_result))
            {
                obj.Result = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("gameHighScore")]
    partial class GameHighScoreConverter : TLObjectConverter<GameHighScore>
    {
        public static BaseConverter CreateConverterInstance() => new GameHighScoreConverter();
        public override TLObject CreateObjectInstance() => new GameHighScore();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GameHighScore)tlobj;
            if (name.SequenceEqual(propName_position))
            {
                obj.Position = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_score))
            {
                obj.Score = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("gameHighScores")]
    partial class GameHighScoresConverter : TLObjectConverter<GameHighScores>
    {
        public static BaseConverter CreateConverterInstance() => new GameHighScoresConverter();
        public override TLObject CreateObjectInstance() => new GameHighScores();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GameHighScores)tlobj;
            if (name.SequenceEqual(propName_scores))
            {
                obj.Scores = reader.ReadObjectArray<GameHighScore>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventMessageEdited")]
    partial class ChatEventMessageEditedConverter : TLObjectConverter<ChatEventMessageEdited>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventMessageEditedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventMessageEdited();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventMessageEdited)tlobj;
            if (name.SequenceEqual(propName_old_message))
            {
                obj.OldMessage = reader.ReadTLObject<Message>();
                return true;
            }
            if (name.SequenceEqual(propName_new_message))
            {
                obj.NewMessage = reader.ReadTLObject<Message>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventMessageDeleted")]
    partial class ChatEventMessageDeletedConverter : TLObjectConverter<ChatEventMessageDeleted>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventMessageDeletedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventMessageDeleted();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventMessageDeleted)tlobj;
            if (name.SequenceEqual(propName_message))
            {
                obj.Message = reader.ReadTLObject<Message>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventPollStopped")]
    partial class ChatEventPollStoppedConverter : TLObjectConverter<ChatEventPollStopped>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventPollStoppedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventPollStopped();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventPollStopped)tlobj;
            if (name.SequenceEqual(propName_message))
            {
                obj.Message = reader.ReadTLObject<Message>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventMessagePinned")]
    partial class ChatEventMessagePinnedConverter : TLObjectConverter<ChatEventMessagePinned>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventMessagePinnedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventMessagePinned();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventMessagePinned)tlobj;
            if (name.SequenceEqual(propName_message))
            {
                obj.Message = reader.ReadTLObject<Message>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventMessageUnpinned")]
    partial class ChatEventMessageUnpinnedConverter : TLObjectConverter<ChatEventMessageUnpinned>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventMessageUnpinnedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventMessageUnpinned();
    }

    [TLType("chatEventMemberJoined")]
    partial class ChatEventMemberJoinedConverter : TLObjectConverter<ChatEventMemberJoined>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventMemberJoinedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventMemberJoined();
    }

    [TLType("chatEventMemberLeft")]
    partial class ChatEventMemberLeftConverter : TLObjectConverter<ChatEventMemberLeft>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventMemberLeftConverter();
        public override TLObject CreateObjectInstance() => new ChatEventMemberLeft();
    }

    [TLType("chatEventMemberInvited")]
    partial class ChatEventMemberInvitedConverter : TLObjectConverter<ChatEventMemberInvited>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventMemberInvitedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventMemberInvited();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventMemberInvited)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_status))
            {
                obj.Status = reader.ReadTLObject<ChatMemberStatus>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventMemberPromoted")]
    partial class ChatEventMemberPromotedConverter : TLObjectConverter<ChatEventMemberPromoted>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventMemberPromotedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventMemberPromoted();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventMemberPromoted)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_old_status))
            {
                obj.OldStatus = reader.ReadTLObject<ChatMemberStatus>();
                return true;
            }
            if (name.SequenceEqual(propName_new_status))
            {
                obj.NewStatus = reader.ReadTLObject<ChatMemberStatus>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventMemberRestricted")]
    partial class ChatEventMemberRestrictedConverter : TLObjectConverter<ChatEventMemberRestricted>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventMemberRestrictedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventMemberRestricted();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventMemberRestricted)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_old_status))
            {
                obj.OldStatus = reader.ReadTLObject<ChatMemberStatus>();
                return true;
            }
            if (name.SequenceEqual(propName_new_status))
            {
                obj.NewStatus = reader.ReadTLObject<ChatMemberStatus>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventTitleChanged")]
    partial class ChatEventTitleChangedConverter : TLObjectConverter<ChatEventTitleChanged>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventTitleChangedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventTitleChanged();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventTitleChanged)tlobj;
            if (name.SequenceEqual(propName_old_title))
            {
                obj.OldTitle = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_new_title))
            {
                obj.NewTitle = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventPermissionsChanged")]
    partial class ChatEventPermissionsChangedConverter : TLObjectConverter<ChatEventPermissionsChanged>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventPermissionsChangedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventPermissionsChanged();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventPermissionsChanged)tlobj;
            if (name.SequenceEqual(propName_old_permissions))
            {
                obj.OldPermissions = reader.ReadTLObject<ChatPermissions>();
                return true;
            }
            if (name.SequenceEqual(propName_new_permissions))
            {
                obj.NewPermissions = reader.ReadTLObject<ChatPermissions>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventDescriptionChanged")]
    partial class ChatEventDescriptionChangedConverter : TLObjectConverter<ChatEventDescriptionChanged>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventDescriptionChangedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventDescriptionChanged();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventDescriptionChanged)tlobj;
            if (name.SequenceEqual(propName_old_description))
            {
                obj.OldDescription = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_new_description))
            {
                obj.NewDescription = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventUsernameChanged")]
    partial class ChatEventUsernameChangedConverter : TLObjectConverter<ChatEventUsernameChanged>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventUsernameChangedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventUsernameChanged();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventUsernameChanged)tlobj;
            if (name.SequenceEqual(propName_old_username))
            {
                obj.OldUsername = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_new_username))
            {
                obj.NewUsername = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventPhotoChanged")]
    partial class ChatEventPhotoChangedConverter : TLObjectConverter<ChatEventPhotoChanged>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventPhotoChangedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventPhotoChanged();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventPhotoChanged)tlobj;
            if (name.SequenceEqual(propName_old_photo))
            {
                obj.OldPhoto = reader.ReadTLObject<ChatPhoto>();
                return true;
            }
            if (name.SequenceEqual(propName_new_photo))
            {
                obj.NewPhoto = reader.ReadTLObject<ChatPhoto>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventInvitesToggled")]
    partial class ChatEventInvitesToggledConverter : TLObjectConverter<ChatEventInvitesToggled>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventInvitesToggledConverter();
        public override TLObject CreateObjectInstance() => new ChatEventInvitesToggled();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventInvitesToggled)tlobj;
            if (name.SequenceEqual(propName_can_invite_users))
            {
                obj.CanInviteUsers = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventLinkedChatChanged")]
    partial class ChatEventLinkedChatChangedConverter : TLObjectConverter<ChatEventLinkedChatChanged>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventLinkedChatChangedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventLinkedChatChanged();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventLinkedChatChanged)tlobj;
            if (name.SequenceEqual(propName_old_linked_chat_id))
            {
                obj.OldLinkedChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_new_linked_chat_id))
            {
                obj.NewLinkedChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventSlowModeDelayChanged")]
    partial class ChatEventSlowModeDelayChangedConverter : TLObjectConverter<ChatEventSlowModeDelayChanged>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventSlowModeDelayChangedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventSlowModeDelayChanged();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventSlowModeDelayChanged)tlobj;
            if (name.SequenceEqual(propName_old_slow_mode_delay))
            {
                obj.OldSlowModeDelay = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_new_slow_mode_delay))
            {
                obj.NewSlowModeDelay = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventSignMessagesToggled")]
    partial class ChatEventSignMessagesToggledConverter : TLObjectConverter<ChatEventSignMessagesToggled>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventSignMessagesToggledConverter();
        public override TLObject CreateObjectInstance() => new ChatEventSignMessagesToggled();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventSignMessagesToggled)tlobj;
            if (name.SequenceEqual(propName_sign_messages))
            {
                obj.SignMessages = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventStickerSetChanged")]
    partial class ChatEventStickerSetChangedConverter : TLObjectConverter<ChatEventStickerSetChanged>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventStickerSetChangedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventStickerSetChanged();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventStickerSetChanged)tlobj;
            if (name.SequenceEqual(propName_old_sticker_set_id))
            {
                obj.OldStickerSetId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_new_sticker_set_id))
            {
                obj.NewStickerSetId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventLocationChanged")]
    partial class ChatEventLocationChangedConverter : TLObjectConverter<ChatEventLocationChanged>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventLocationChangedConverter();
        public override TLObject CreateObjectInstance() => new ChatEventLocationChanged();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventLocationChanged)tlobj;
            if (name.SequenceEqual(propName_old_location))
            {
                obj.OldLocation = reader.ReadTLObject<ChatLocation>();
                return true;
            }
            if (name.SequenceEqual(propName_new_location))
            {
                obj.NewLocation = reader.ReadTLObject<ChatLocation>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventIsAllHistoryAvailableToggled")]
    partial class ChatEventIsAllHistoryAvailableToggledConverter : TLObjectConverter<ChatEventIsAllHistoryAvailableToggled>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventIsAllHistoryAvailableToggledConverter();
        public override TLObject CreateObjectInstance() => new ChatEventIsAllHistoryAvailableToggled();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventIsAllHistoryAvailableToggled)tlobj;
            if (name.SequenceEqual(propName_is_all_history_available))
            {
                obj.IsAllHistoryAvailable = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEvent")]
    partial class ChatEventConverter : TLObjectConverter<ChatEvent>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventConverter();
        public override TLObject CreateObjectInstance() => new ChatEvent();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEvent)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0xD472DC59u when name.SequenceEqual(propName_date):
                    obj.Date = reader.ReadInt();
                    return true;
                case 0x10A75CDAu when name.SequenceEqual(propName_user_id):
                    obj.UserId = reader.ReadInt();
                    return true;
                case 0xC4642EFFu when name.SequenceEqual(propName_action):
                    obj.Action = reader.ReadTLObject<ChatEventAction>();
                    return true;
            }
            return false;
        }
    }

    [TLType("chatEvents")]
    partial class ChatEventsConverter : TLObjectConverter<ChatEvents>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventsConverter();
        public override TLObject CreateObjectInstance() => new ChatEvents();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEvents)tlobj;
            if (name.SequenceEqual(propName_events))
            {
                obj.Events = reader.ReadObjectArray<ChatEvent>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatEventLogFilters")]
    partial class ChatEventLogFiltersConverter : TLObjectConverter<ChatEventLogFilters>
    {
        public static BaseConverter CreateConverterInstance() => new ChatEventLogFiltersConverter();
        public override TLObject CreateObjectInstance() => new ChatEventLogFilters();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatEventLogFilters)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xB9009A12u when name.SequenceEqual(propName_message_edits):
                    obj.MessageEdits = reader.ReadBool();
                    return true;
                case 0x5E1101E0u when name.SequenceEqual(propName_message_deletions):
                    obj.MessageDeletions = reader.ReadBool();
                    return true;
                case 0xE6353A99u when name.SequenceEqual(propName_message_pins):
                    obj.MessagePins = reader.ReadBool();
                    return true;
                case 0x6B7C67A5u when name.SequenceEqual(propName_member_joins):
                    obj.MemberJoins = reader.ReadBool();
                    return true;
                case 0x3CF61538u when name.SequenceEqual(propName_member_leaves):
                    obj.MemberLeaves = reader.ReadBool();
                    return true;
                case 0xC87201DAu when name.SequenceEqual(propName_member_invites):
                    obj.MemberInvites = reader.ReadBool();
                    return true;
                case 0x9F2A5F12u when name.SequenceEqual(propName_member_promotions):
                    obj.MemberPromotions = reader.ReadBool();
                    return true;
                case 0xE6AF4AD3u when name.SequenceEqual(propName_member_restrictions):
                    obj.MemberRestrictions = reader.ReadBool();
                    return true;
                case 0xE7813CABu when name.SequenceEqual(propName_info_changes):
                    obj.InfoChanges = reader.ReadBool();
                    return true;
                case 0xCDE8066Du when name.SequenceEqual(propName_setting_changes):
                    obj.SettingChanges = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("languagePackStringValueOrdinary")]
    partial class LanguagePackStringValueOrdinaryConverter : TLObjectConverter<LanguagePackStringValueOrdinary>
    {
        public static BaseConverter CreateConverterInstance() => new LanguagePackStringValueOrdinaryConverter();
        public override TLObject CreateObjectInstance() => new LanguagePackStringValueOrdinary();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LanguagePackStringValueOrdinary)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("languagePackStringValuePluralized")]
    partial class LanguagePackStringValuePluralizedConverter : TLObjectConverter<LanguagePackStringValuePluralized>
    {
        public static BaseConverter CreateConverterInstance() => new LanguagePackStringValuePluralizedConverter();
        public override TLObject CreateObjectInstance() => new LanguagePackStringValuePluralized();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LanguagePackStringValuePluralized)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x64F6302Du when name.SequenceEqual(propName_zero_value):
                    obj.ZeroValue = reader.ReadString();
                    return true;
                case 0x06FD77C1u when name.SequenceEqual(propName_one_value):
                    obj.OneValue = reader.ReadString();
                    return true;
                case 0x55EEB88Bu when name.SequenceEqual(propName_two_value):
                    obj.TwoValue = reader.ReadString();
                    return true;
                case 0x25FABCBBu when name.SequenceEqual(propName_few_value):
                    obj.FewValue = reader.ReadString();
                    return true;
                case 0xDC8D049Cu when name.SequenceEqual(propName_many_value):
                    obj.ManyValue = reader.ReadString();
                    return true;
                case 0xAAB337DFu when name.SequenceEqual(propName_other_value):
                    obj.OtherValue = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("languagePackStringValueDeleted")]
    partial class LanguagePackStringValueDeletedConverter : TLObjectConverter<LanguagePackStringValueDeleted>
    {
        public static BaseConverter CreateConverterInstance() => new LanguagePackStringValueDeletedConverter();
        public override TLObject CreateObjectInstance() => new LanguagePackStringValueDeleted();
    }

    [TLType("languagePackString")]
    partial class LanguagePackStringConverter : TLObjectConverter<LanguagePackString>
    {
        public static BaseConverter CreateConverterInstance() => new LanguagePackStringConverter();
        public override TLObject CreateObjectInstance() => new LanguagePackString();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LanguagePackString)tlobj;
            if (name.SequenceEqual(propName_key))
            {
                obj.Key = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadTLObject<LanguagePackStringValue>();
                return true;
            }
            return false;
        }
    }

    [TLType("languagePackStrings")]
    partial class LanguagePackStringsConverter : TLObjectConverter<LanguagePackStrings>
    {
        public static BaseConverter CreateConverterInstance() => new LanguagePackStringsConverter();
        public override TLObject CreateObjectInstance() => new LanguagePackStrings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LanguagePackStrings)tlobj;
            if (name.SequenceEqual(propName_strings))
            {
                obj.Strings = reader.ReadObjectArray<LanguagePackString>();
                return true;
            }
            return false;
        }
    }

    [TLType("languagePackInfo")]
    partial class LanguagePackInfoConverter : TLObjectConverter<LanguagePackInfo>
    {
        public static BaseConverter CreateConverterInstance() => new LanguagePackInfoConverter();
        public override TLObject CreateObjectInstance() => new LanguagePackInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LanguagePackInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadString();
                    return true;
                case 0x341FF03Bu when name.SequenceEqual(propName_base_language_pack_id):
                    obj.BaseLanguagePackId = reader.ReadString();
                    return true;
                case 0x8D39BDE6u when name.SequenceEqual(propName_name):
                    obj.Name = reader.ReadString();
                    return true;
                case 0x20804CCCu when name.SequenceEqual(propName_native_name):
                    obj.NativeName = reader.ReadString();
                    return true;
                case 0x7341CD05u when name.SequenceEqual(propName_plural_code):
                    obj.PluralCode = reader.ReadString();
                    return true;
                case 0x03A9AAFFu when name.SequenceEqual(propName_is_official):
                    obj.IsOfficial = reader.ReadBool();
                    return true;
                case 0x8E30FD54u when name.SequenceEqual(propName_is_rtl):
                    obj.IsRtl = reader.ReadBool();
                    return true;
                case 0xF93B82BCu when name.SequenceEqual(propName_is_beta):
                    obj.IsBeta = reader.ReadBool();
                    return true;
                case 0xB7A3616Cu when name.SequenceEqual(propName_is_installed):
                    obj.IsInstalled = reader.ReadBool();
                    return true;
                case 0xC0B90337u when name.SequenceEqual(propName_total_string_count):
                    obj.TotalStringCount = reader.ReadInt();
                    return true;
                case 0x46B1E69Du when name.SequenceEqual(propName_translated_string_count):
                    obj.TranslatedStringCount = reader.ReadInt();
                    return true;
                case 0x1602E504u when name.SequenceEqual(propName_local_string_count):
                    obj.LocalStringCount = reader.ReadInt();
                    return true;
                case 0x5159F5FAu when name.SequenceEqual(propName_translation_url):
                    obj.TranslationUrl = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("localizationTargetInfo")]
    partial class LocalizationTargetInfoConverter : TLObjectConverter<LocalizationTargetInfo>
    {
        public static BaseConverter CreateConverterInstance() => new LocalizationTargetInfoConverter();
        public override TLObject CreateObjectInstance() => new LocalizationTargetInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LocalizationTargetInfo)tlobj;
            if (name.SequenceEqual(propName_language_packs))
            {
                obj.LanguagePacks = reader.ReadObjectArray<LanguagePackInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenFirebaseCloudMessaging")]
    partial class DeviceTokenFirebaseCloudMessagingConverter : TLObjectConverter<DeviceTokenFirebaseCloudMessaging>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenFirebaseCloudMessagingConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenFirebaseCloudMessaging();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenFirebaseCloudMessaging)tlobj;
            if (name.SequenceEqual(propName_token))
            {
                obj.Token = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_encrypt))
            {
                obj.Encrypt = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenApplePush")]
    partial class DeviceTokenApplePushConverter : TLObjectConverter<DeviceTokenApplePush>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenApplePushConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenApplePush();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenApplePush)tlobj;
            if (name.SequenceEqual(propName_device_token))
            {
                obj.DeviceToken = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_app_sandbox))
            {
                obj.IsAppSandbox = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenApplePushVoIP")]
    partial class DeviceTokenApplePushVoIPConverter : TLObjectConverter<DeviceTokenApplePushVoIP>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenApplePushVoIPConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenApplePushVoIP();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenApplePushVoIP)tlobj;
            if (name.SequenceEqual(propName_device_token))
            {
                obj.DeviceToken = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_app_sandbox))
            {
                obj.IsAppSandbox = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_encrypt))
            {
                obj.Encrypt = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenWindowsPush")]
    partial class DeviceTokenWindowsPushConverter : TLObjectConverter<DeviceTokenWindowsPush>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenWindowsPushConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenWindowsPush();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenWindowsPush)tlobj;
            if (name.SequenceEqual(propName_access_token))
            {
                obj.AccessToken = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenMicrosoftPush")]
    partial class DeviceTokenMicrosoftPushConverter : TLObjectConverter<DeviceTokenMicrosoftPush>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenMicrosoftPushConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenMicrosoftPush();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenMicrosoftPush)tlobj;
            if (name.SequenceEqual(propName_channel_uri))
            {
                obj.ChannelUri = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenMicrosoftPushVoIP")]
    partial class DeviceTokenMicrosoftPushVoIPConverter : TLObjectConverter<DeviceTokenMicrosoftPushVoIP>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenMicrosoftPushVoIPConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenMicrosoftPushVoIP();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenMicrosoftPushVoIP)tlobj;
            if (name.SequenceEqual(propName_channel_uri))
            {
                obj.ChannelUri = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenWebPush")]
    partial class DeviceTokenWebPushConverter : TLObjectConverter<DeviceTokenWebPush>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenWebPushConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenWebPush();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenWebPush)tlobj;
            if (name.SequenceEqual(propName_endpoint))
            {
                obj.Endpoint = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_p256dh_base64url))
            {
                obj.P256dhBase64url = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_auth_base64url))
            {
                obj.AuthBase64url = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenSimplePush")]
    partial class DeviceTokenSimplePushConverter : TLObjectConverter<DeviceTokenSimplePush>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenSimplePushConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenSimplePush();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenSimplePush)tlobj;
            if (name.SequenceEqual(propName_endpoint))
            {
                obj.Endpoint = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenUbuntuPush")]
    partial class DeviceTokenUbuntuPushConverter : TLObjectConverter<DeviceTokenUbuntuPush>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenUbuntuPushConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenUbuntuPush();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenUbuntuPush)tlobj;
            if (name.SequenceEqual(propName_token))
            {
                obj.Token = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenBlackBerryPush")]
    partial class DeviceTokenBlackBerryPushConverter : TLObjectConverter<DeviceTokenBlackBerryPush>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenBlackBerryPushConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenBlackBerryPush();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenBlackBerryPush)tlobj;
            if (name.SequenceEqual(propName_token))
            {
                obj.Token = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("deviceTokenTizenPush")]
    partial class DeviceTokenTizenPushConverter : TLObjectConverter<DeviceTokenTizenPush>
    {
        public static BaseConverter CreateConverterInstance() => new DeviceTokenTizenPushConverter();
        public override TLObject CreateObjectInstance() => new DeviceTokenTizenPush();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeviceTokenTizenPush)tlobj;
            if (name.SequenceEqual(propName_reg_id))
            {
                obj.RegId = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("pushReceiverId")]
    partial class PushReceiverIdConverter : TLObjectConverter<PushReceiverId>
    {
        public static BaseConverter CreateConverterInstance() => new PushReceiverIdConverter();
        public override TLObject CreateObjectInstance() => new PushReceiverId();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushReceiverId)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("backgroundFillSolid")]
    partial class BackgroundFillSolidConverter : TLObjectConverter<BackgroundFillSolid>
    {
        public static BaseConverter CreateConverterInstance() => new BackgroundFillSolidConverter();
        public override TLObject CreateObjectInstance() => new BackgroundFillSolid();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BackgroundFillSolid)tlobj;
            if (name.SequenceEqual(propName_color))
            {
                obj.Color = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("backgroundFillGradient")]
    partial class BackgroundFillGradientConverter : TLObjectConverter<BackgroundFillGradient>
    {
        public static BaseConverter CreateConverterInstance() => new BackgroundFillGradientConverter();
        public override TLObject CreateObjectInstance() => new BackgroundFillGradient();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BackgroundFillGradient)tlobj;
            if (name.SequenceEqual(propName_top_color))
            {
                obj.TopColor = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_bottom_color))
            {
                obj.BottomColor = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_rotation_angle))
            {
                obj.RotationAngle = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("backgroundTypeWallpaper")]
    partial class BackgroundTypeWallpaperConverter : TLObjectConverter<BackgroundTypeWallpaper>
    {
        public static BaseConverter CreateConverterInstance() => new BackgroundTypeWallpaperConverter();
        public override TLObject CreateObjectInstance() => new BackgroundTypeWallpaper();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BackgroundTypeWallpaper)tlobj;
            if (name.SequenceEqual(propName_is_blurred))
            {
                obj.IsBlurred = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_is_moving))
            {
                obj.IsMoving = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("backgroundTypePattern")]
    partial class BackgroundTypePatternConverter : TLObjectConverter<BackgroundTypePattern>
    {
        public static BaseConverter CreateConverterInstance() => new BackgroundTypePatternConverter();
        public override TLObject CreateObjectInstance() => new BackgroundTypePattern();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BackgroundTypePattern)tlobj;
            if (name.SequenceEqual(propName_fill))
            {
                obj.Fill = reader.ReadTLObject<BackgroundFill>();
                return true;
            }
            if (name.SequenceEqual(propName_intensity))
            {
                obj.Intensity = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_is_moving))
            {
                obj.IsMoving = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("backgroundTypeFill")]
    partial class BackgroundTypeFillConverter : TLObjectConverter<BackgroundTypeFill>
    {
        public static BaseConverter CreateConverterInstance() => new BackgroundTypeFillConverter();
        public override TLObject CreateObjectInstance() => new BackgroundTypeFill();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BackgroundTypeFill)tlobj;
            if (name.SequenceEqual(propName_fill))
            {
                obj.Fill = reader.ReadTLObject<BackgroundFill>();
                return true;
            }
            return false;
        }
    }

    [TLType("background")]
    partial class BackgroundConverter : TLObjectConverter<Background>
    {
        public static BaseConverter CreateConverterInstance() => new BackgroundConverter();
        public override TLObject CreateObjectInstance() => new Background();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Background)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x0B620743u when name.SequenceEqual(propName_is_default):
                    obj.IsDefault = reader.ReadBool();
                    return true;
                case 0x96FEDCE2u when name.SequenceEqual(propName_is_dark):
                    obj.IsDark = reader.ReadBool();
                    return true;
                case 0x8D39BDE6u when name.SequenceEqual(propName_name):
                    obj.Name = reader.ReadString();
                    return true;
                case 0x96234BD4u when name.SequenceEqual(propName_document):
                    obj.Document = reader.ReadTLObject<Document>();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<BackgroundType>();
                    return true;
            }
            return false;
        }
    }

    [TLType("backgrounds")]
    partial class BackgroundsConverter : TLObjectConverter<Backgrounds>
    {
        public static BaseConverter CreateConverterInstance() => new BackgroundsConverter();
        public override TLObject CreateObjectInstance() => new Backgrounds();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Backgrounds)tlobj;
            if (name.SequenceEqual(propName_backgrounds))
            {
                obj.Backgrounds_ = reader.ReadObjectArray<Background>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputBackgroundLocal")]
    partial class InputBackgroundLocalConverter : TLObjectConverter<InputBackgroundLocal>
    {
        public static BaseConverter CreateConverterInstance() => new InputBackgroundLocalConverter();
        public override TLObject CreateObjectInstance() => new InputBackgroundLocal();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputBackgroundLocal)tlobj;
            if (name.SequenceEqual(propName_background))
            {
                obj.Background = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputBackgroundRemote")]
    partial class InputBackgroundRemoteConverter : TLObjectConverter<InputBackgroundRemote>
    {
        public static BaseConverter CreateConverterInstance() => new InputBackgroundRemoteConverter();
        public override TLObject CreateObjectInstance() => new InputBackgroundRemote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputBackgroundRemote)tlobj;
            if (name.SequenceEqual(propName_background_id))
            {
                obj.BackgroundId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("hashtags")]
    partial class HashtagsConverter : TLObjectConverter<Hashtags>
    {
        public static BaseConverter CreateConverterInstance() => new HashtagsConverter();
        public override TLObject CreateObjectInstance() => new Hashtags();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Hashtags)tlobj;
            if (name.SequenceEqual(propName_hashtags))
            {
                obj.Hashtags_ = reader.ReadStringArray();
                return true;
            }
            return false;
        }
    }

    [TLType("canTransferOwnershipResultOk")]
    partial class CanTransferOwnershipResultOkConverter : TLObjectConverter<CanTransferOwnershipResultOk>
    {
        public static BaseConverter CreateConverterInstance() => new CanTransferOwnershipResultOkConverter();
        public override TLObject CreateObjectInstance() => new CanTransferOwnershipResultOk();
    }

    [TLType("canTransferOwnershipResultPasswordNeeded")]
    partial class CanTransferOwnershipResultPasswordNeededConverter : TLObjectConverter<CanTransferOwnershipResultPasswordNeeded>
    {
        public static BaseConverter CreateConverterInstance() => new CanTransferOwnershipResultPasswordNeededConverter();
        public override TLObject CreateObjectInstance() => new CanTransferOwnershipResultPasswordNeeded();
    }

    [TLType("canTransferOwnershipResultPasswordTooFresh")]
    partial class CanTransferOwnershipResultPasswordTooFreshConverter : TLObjectConverter<CanTransferOwnershipResultPasswordTooFresh>
    {
        public static BaseConverter CreateConverterInstance() => new CanTransferOwnershipResultPasswordTooFreshConverter();
        public override TLObject CreateObjectInstance() => new CanTransferOwnershipResultPasswordTooFresh();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CanTransferOwnershipResultPasswordTooFresh)tlobj;
            if (name.SequenceEqual(propName_retry_after))
            {
                obj.RetryAfter = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("canTransferOwnershipResultSessionTooFresh")]
    partial class CanTransferOwnershipResultSessionTooFreshConverter : TLObjectConverter<CanTransferOwnershipResultSessionTooFresh>
    {
        public static BaseConverter CreateConverterInstance() => new CanTransferOwnershipResultSessionTooFreshConverter();
        public override TLObject CreateObjectInstance() => new CanTransferOwnershipResultSessionTooFresh();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CanTransferOwnershipResultSessionTooFresh)tlobj;
            if (name.SequenceEqual(propName_retry_after))
            {
                obj.RetryAfter = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("checkChatUsernameResultOk")]
    partial class CheckChatUsernameResultOkConverter : TLObjectConverter<CheckChatUsernameResultOk>
    {
        public static BaseConverter CreateConverterInstance() => new CheckChatUsernameResultOkConverter();
        public override TLObject CreateObjectInstance() => new CheckChatUsernameResultOk();
    }

    [TLType("checkChatUsernameResultUsernameInvalid")]
    partial class CheckChatUsernameResultUsernameInvalidConverter : TLObjectConverter<CheckChatUsernameResultUsernameInvalid>
    {
        public static BaseConverter CreateConverterInstance() => new CheckChatUsernameResultUsernameInvalidConverter();
        public override TLObject CreateObjectInstance() => new CheckChatUsernameResultUsernameInvalid();
    }

    [TLType("checkChatUsernameResultUsernameOccupied")]
    partial class CheckChatUsernameResultUsernameOccupiedConverter : TLObjectConverter<CheckChatUsernameResultUsernameOccupied>
    {
        public static BaseConverter CreateConverterInstance() => new CheckChatUsernameResultUsernameOccupiedConverter();
        public override TLObject CreateObjectInstance() => new CheckChatUsernameResultUsernameOccupied();
    }

    [TLType("checkChatUsernameResultPublicChatsTooMuch")]
    partial class CheckChatUsernameResultPublicChatsTooMuchConverter : TLObjectConverter<CheckChatUsernameResultPublicChatsTooMuch>
    {
        public static BaseConverter CreateConverterInstance() => new CheckChatUsernameResultPublicChatsTooMuchConverter();
        public override TLObject CreateObjectInstance() => new CheckChatUsernameResultPublicChatsTooMuch();
    }

    [TLType("checkChatUsernameResultPublicGroupsUnavailable")]
    partial class CheckChatUsernameResultPublicGroupsUnavailableConverter : TLObjectConverter<CheckChatUsernameResultPublicGroupsUnavailable>
    {
        public static BaseConverter CreateConverterInstance() => new CheckChatUsernameResultPublicGroupsUnavailableConverter();
        public override TLObject CreateObjectInstance() => new CheckChatUsernameResultPublicGroupsUnavailable();
    }

    [TLType("pushMessageContentHidden")]
    partial class PushMessageContentHiddenConverter : TLObjectConverter<PushMessageContentHidden>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentHiddenConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentHidden();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentHidden)tlobj;
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentAnimation")]
    partial class PushMessageContentAnimationConverter : TLObjectConverter<PushMessageContentAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentAnimationConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentAnimation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentAnimation)tlobj;
            if (name.SequenceEqual(propName_animation))
            {
                obj.Animation = reader.ReadTLObject<Animation>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentAudio")]
    partial class PushMessageContentAudioConverter : TLObjectConverter<PushMessageContentAudio>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentAudioConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentAudio();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentAudio)tlobj;
            if (name.SequenceEqual(propName_audio))
            {
                obj.Audio = reader.ReadTLObject<Audio>();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentContact")]
    partial class PushMessageContentContactConverter : TLObjectConverter<PushMessageContentContact>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentContactConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentContact();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentContact)tlobj;
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentContactRegistered")]
    partial class PushMessageContentContactRegisteredConverter : TLObjectConverter<PushMessageContentContactRegistered>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentContactRegisteredConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentContactRegistered();
    }

    [TLType("pushMessageContentDocument")]
    partial class PushMessageContentDocumentConverter : TLObjectConverter<PushMessageContentDocument>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentDocumentConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentDocument();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentDocument)tlobj;
            if (name.SequenceEqual(propName_document))
            {
                obj.Document = reader.ReadTLObject<Document>();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentGame")]
    partial class PushMessageContentGameConverter : TLObjectConverter<PushMessageContentGame>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentGameConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentGame();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentGame)tlobj;
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentGameScore")]
    partial class PushMessageContentGameScoreConverter : TLObjectConverter<PushMessageContentGameScore>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentGameScoreConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentGameScore();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentGameScore)tlobj;
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_score))
            {
                obj.Score = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentInvoice")]
    partial class PushMessageContentInvoiceConverter : TLObjectConverter<PushMessageContentInvoice>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentInvoiceConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentInvoice();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentInvoice)tlobj;
            if (name.SequenceEqual(propName_price))
            {
                obj.Price = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentLocation")]
    partial class PushMessageContentLocationConverter : TLObjectConverter<PushMessageContentLocation>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentLocationConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentLocation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentLocation)tlobj;
            if (name.SequenceEqual(propName_is_live))
            {
                obj.IsLive = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentPhoto")]
    partial class PushMessageContentPhotoConverter : TLObjectConverter<PushMessageContentPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentPhotoConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentPhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentPhoto)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x812716E3u when name.SequenceEqual(propName_photo):
                    obj.Photo = reader.ReadTLObject<Photo>();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadString();
                    return true;
                case 0x913C2656u when name.SequenceEqual(propName_is_secret):
                    obj.IsSecret = reader.ReadBool();
                    return true;
                case 0xC372E838u when name.SequenceEqual(propName_is_pinned):
                    obj.IsPinned = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentPoll")]
    partial class PushMessageContentPollConverter : TLObjectConverter<PushMessageContentPoll>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentPollConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentPoll();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentPoll)tlobj;
            if (name.SequenceEqual(propName_question))
            {
                obj.Question = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_regular))
            {
                obj.IsRegular = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentScreenshotTaken")]
    partial class PushMessageContentScreenshotTakenConverter : TLObjectConverter<PushMessageContentScreenshotTaken>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentScreenshotTakenConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentScreenshotTaken();
    }

    [TLType("pushMessageContentSticker")]
    partial class PushMessageContentStickerConverter : TLObjectConverter<PushMessageContentSticker>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentStickerConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentSticker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentSticker)tlobj;
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<Sticker>();
                return true;
            }
            if (name.SequenceEqual(propName_emoji))
            {
                obj.Emoji = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentText")]
    partial class PushMessageContentTextConverter : TLObjectConverter<PushMessageContentText>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentTextConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentText();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentText)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentVideo")]
    partial class PushMessageContentVideoConverter : TLObjectConverter<PushMessageContentVideo>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentVideoConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentVideo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentVideo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xCEF90B6Cu when name.SequenceEqual(propName_video):
                    obj.Video = reader.ReadTLObject<Video>();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadString();
                    return true;
                case 0x913C2656u when name.SequenceEqual(propName_is_secret):
                    obj.IsSecret = reader.ReadBool();
                    return true;
                case 0xC372E838u when name.SequenceEqual(propName_is_pinned):
                    obj.IsPinned = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentVideoNote")]
    partial class PushMessageContentVideoNoteConverter : TLObjectConverter<PushMessageContentVideoNote>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentVideoNoteConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentVideoNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentVideoNote)tlobj;
            if (name.SequenceEqual(propName_video_note))
            {
                obj.VideoNote = reader.ReadTLObject<VideoNote>();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentVoiceNote")]
    partial class PushMessageContentVoiceNoteConverter : TLObjectConverter<PushMessageContentVoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentVoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentVoiceNote();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentVoiceNote)tlobj;
            if (name.SequenceEqual(propName_voice_note))
            {
                obj.VoiceNote = reader.ReadTLObject<VoiceNote>();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentBasicGroupChatCreate")]
    partial class PushMessageContentBasicGroupChatCreateConverter : TLObjectConverter<PushMessageContentBasicGroupChatCreate>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentBasicGroupChatCreateConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentBasicGroupChatCreate();
    }

    [TLType("pushMessageContentChatAddMembers")]
    partial class PushMessageContentChatAddMembersConverter : TLObjectConverter<PushMessageContentChatAddMembers>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentChatAddMembersConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentChatAddMembers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentChatAddMembers)tlobj;
            if (name.SequenceEqual(propName_member_name))
            {
                obj.MemberName = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_current_user))
            {
                obj.IsCurrentUser = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_is_returned))
            {
                obj.IsReturned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentChatChangePhoto")]
    partial class PushMessageContentChatChangePhotoConverter : TLObjectConverter<PushMessageContentChatChangePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentChatChangePhotoConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentChatChangePhoto();
    }

    [TLType("pushMessageContentChatChangeTitle")]
    partial class PushMessageContentChatChangeTitleConverter : TLObjectConverter<PushMessageContentChatChangeTitle>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentChatChangeTitleConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentChatChangeTitle();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentChatChangeTitle)tlobj;
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentChatDeleteMember")]
    partial class PushMessageContentChatDeleteMemberConverter : TLObjectConverter<PushMessageContentChatDeleteMember>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentChatDeleteMemberConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentChatDeleteMember();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentChatDeleteMember)tlobj;
            if (name.SequenceEqual(propName_member_name))
            {
                obj.MemberName = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_current_user))
            {
                obj.IsCurrentUser = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_is_left))
            {
                obj.IsLeft = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentChatJoinByLink")]
    partial class PushMessageContentChatJoinByLinkConverter : TLObjectConverter<PushMessageContentChatJoinByLink>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentChatJoinByLinkConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentChatJoinByLink();
    }

    [TLType("pushMessageContentMessageForwards")]
    partial class PushMessageContentMessageForwardsConverter : TLObjectConverter<PushMessageContentMessageForwards>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentMessageForwardsConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentMessageForwards();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentMessageForwards)tlobj;
            if (name.SequenceEqual(propName_total_count))
            {
                obj.TotalCount = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("pushMessageContentMediaAlbum")]
    partial class PushMessageContentMediaAlbumConverter : TLObjectConverter<PushMessageContentMediaAlbum>
    {
        public static BaseConverter CreateConverterInstance() => new PushMessageContentMediaAlbumConverter();
        public override TLObject CreateObjectInstance() => new PushMessageContentMediaAlbum();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PushMessageContentMediaAlbum)tlobj;
            if (name.SequenceEqual(propName_total_count))
            {
                obj.TotalCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_has_photos))
            {
                obj.HasPhotos = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_has_videos))
            {
                obj.HasVideos = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("notificationTypeNewMessage")]
    partial class NotificationTypeNewMessageConverter : TLObjectConverter<NotificationTypeNewMessage>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationTypeNewMessageConverter();
        public override TLObject CreateObjectInstance() => new NotificationTypeNewMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (NotificationTypeNewMessage)tlobj;
            if (name.SequenceEqual(propName_message))
            {
                obj.Message = reader.ReadTLObject<Message>();
                return true;
            }
            return false;
        }
    }

    [TLType("notificationTypeNewSecretChat")]
    partial class NotificationTypeNewSecretChatConverter : TLObjectConverter<NotificationTypeNewSecretChat>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationTypeNewSecretChatConverter();
        public override TLObject CreateObjectInstance() => new NotificationTypeNewSecretChat();
    }

    [TLType("notificationTypeNewCall")]
    partial class NotificationTypeNewCallConverter : TLObjectConverter<NotificationTypeNewCall>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationTypeNewCallConverter();
        public override TLObject CreateObjectInstance() => new NotificationTypeNewCall();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (NotificationTypeNewCall)tlobj;
            if (name.SequenceEqual(propName_call_id))
            {
                obj.CallId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("notificationTypeNewPushMessage")]
    partial class NotificationTypeNewPushMessageConverter : TLObjectConverter<NotificationTypeNewPushMessage>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationTypeNewPushMessageConverter();
        public override TLObject CreateObjectInstance() => new NotificationTypeNewPushMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (NotificationTypeNewPushMessage)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x3FFD45EEu when name.SequenceEqual(propName_sender_user_id):
                    obj.SenderUserId = reader.ReadInt();
                    return true;
                case 0x215B6CBDu when name.SequenceEqual(propName_sender_chat_id):
                    obj.SenderChatId = reader.ReadLong();
                    return true;
                case 0xD8D42D5Au when name.SequenceEqual(propName_sender_name):
                    obj.SenderName = reader.ReadString();
                    return true;
                case 0x5457F918u when name.SequenceEqual(propName_is_outgoing):
                    obj.IsOutgoing = reader.ReadBool();
                    return true;
                case 0x90BEC3C2u when name.SequenceEqual(propName_content):
                    obj.Content = reader.ReadTLObject<PushMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("notificationGroupTypeMessages")]
    partial class NotificationGroupTypeMessagesConverter : TLObjectConverter<NotificationGroupTypeMessages>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationGroupTypeMessagesConverter();
        public override TLObject CreateObjectInstance() => new NotificationGroupTypeMessages();
    }

    [TLType("notificationGroupTypeMentions")]
    partial class NotificationGroupTypeMentionsConverter : TLObjectConverter<NotificationGroupTypeMentions>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationGroupTypeMentionsConverter();
        public override TLObject CreateObjectInstance() => new NotificationGroupTypeMentions();
    }

    [TLType("notificationGroupTypeSecretChat")]
    partial class NotificationGroupTypeSecretChatConverter : TLObjectConverter<NotificationGroupTypeSecretChat>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationGroupTypeSecretChatConverter();
        public override TLObject CreateObjectInstance() => new NotificationGroupTypeSecretChat();
    }

    [TLType("notificationGroupTypeCalls")]
    partial class NotificationGroupTypeCallsConverter : TLObjectConverter<NotificationGroupTypeCalls>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationGroupTypeCallsConverter();
        public override TLObject CreateObjectInstance() => new NotificationGroupTypeCalls();
    }

    [TLType("notification")]
    partial class NotificationConverter : TLObjectConverter<Notification>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationConverter();
        public override TLObject CreateObjectInstance() => new Notification();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Notification)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt();
                    return true;
                case 0xD472DC59u when name.SequenceEqual(propName_date):
                    obj.Date = reader.ReadInt();
                    return true;
                case 0xD03BF3DFu when name.SequenceEqual(propName_is_silent):
                    obj.IsSilent = reader.ReadBool();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<NotificationType>();
                    return true;
            }
            return false;
        }
    }

    [TLType("notificationGroup")]
    partial class NotificationGroupConverter : TLObjectConverter<NotificationGroup>
    {
        public static BaseConverter CreateConverterInstance() => new NotificationGroupConverter();
        public override TLObject CreateObjectInstance() => new NotificationGroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (NotificationGroup)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<NotificationGroupType>();
                    return true;
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x92BEA9B5u when name.SequenceEqual(propName_total_count):
                    obj.TotalCount = reader.ReadInt();
                    return true;
                case 0xF352E36Fu when name.SequenceEqual(propName_notifications):
                    obj.Notifications = reader.ReadObjectArray<Notification>();
                    return true;
            }
            return false;
        }
    }

    [TLType("optionValueBoolean")]
    partial class OptionValueBooleanConverter : TLObjectConverter<OptionValueBoolean>
    {
        public static BaseConverter CreateConverterInstance() => new OptionValueBooleanConverter();
        public override TLObject CreateObjectInstance() => new OptionValueBoolean();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (OptionValueBoolean)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("optionValueEmpty")]
    partial class OptionValueEmptyConverter : TLObjectConverter<OptionValueEmpty>
    {
        public static BaseConverter CreateConverterInstance() => new OptionValueEmptyConverter();
        public override TLObject CreateObjectInstance() => new OptionValueEmpty();
    }

    [TLType("optionValueInteger")]
    partial class OptionValueIntegerConverter : TLObjectConverter<OptionValueInteger>
    {
        public static BaseConverter CreateConverterInstance() => new OptionValueIntegerConverter();
        public override TLObject CreateObjectInstance() => new OptionValueInteger();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (OptionValueInteger)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("optionValueString")]
    partial class OptionValueStringConverter : TLObjectConverter<OptionValueString>
    {
        public static BaseConverter CreateConverterInstance() => new OptionValueStringConverter();
        public override TLObject CreateObjectInstance() => new OptionValueString();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (OptionValueString)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("jsonObjectMember")]
    partial class JsonObjectMemberConverter : TLObjectConverter<JsonObjectMember>
    {
        public static BaseConverter CreateConverterInstance() => new JsonObjectMemberConverter();
        public override TLObject CreateObjectInstance() => new JsonObjectMember();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (JsonObjectMember)tlobj;
            if (name.SequenceEqual(propName_key))
            {
                obj.Key = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadTLObject<JsonValue>();
                return true;
            }
            return false;
        }
    }

    [TLType("jsonValueNull")]
    partial class JsonValueNullConverter : TLObjectConverter<JsonValueNull>
    {
        public static BaseConverter CreateConverterInstance() => new JsonValueNullConverter();
        public override TLObject CreateObjectInstance() => new JsonValueNull();
    }

    [TLType("jsonValueBoolean")]
    partial class JsonValueBooleanConverter : TLObjectConverter<JsonValueBoolean>
    {
        public static BaseConverter CreateConverterInstance() => new JsonValueBooleanConverter();
        public override TLObject CreateObjectInstance() => new JsonValueBoolean();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (JsonValueBoolean)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("jsonValueNumber")]
    partial class JsonValueNumberConverter : TLObjectConverter<JsonValueNumber>
    {
        public static BaseConverter CreateConverterInstance() => new JsonValueNumberConverter();
        public override TLObject CreateObjectInstance() => new JsonValueNumber();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (JsonValueNumber)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadDouble();
                return true;
            }
            return false;
        }
    }

    [TLType("jsonValueString")]
    partial class JsonValueStringConverter : TLObjectConverter<JsonValueString>
    {
        public static BaseConverter CreateConverterInstance() => new JsonValueStringConverter();
        public override TLObject CreateObjectInstance() => new JsonValueString();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (JsonValueString)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("jsonValueArray")]
    partial class JsonValueArrayConverter : TLObjectConverter<JsonValueArray>
    {
        public static BaseConverter CreateConverterInstance() => new JsonValueArrayConverter();
        public override TLObject CreateObjectInstance() => new JsonValueArray();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (JsonValueArray)tlobj;
            if (name.SequenceEqual(propName_values))
            {
                obj.Values = reader.ReadObjectArray<JsonValue>();
                return true;
            }
            return false;
        }
    }

    [TLType("jsonValueObject")]
    partial class JsonValueObjectConverter : TLObjectConverter<JsonValueObject>
    {
        public static BaseConverter CreateConverterInstance() => new JsonValueObjectConverter();
        public override TLObject CreateObjectInstance() => new JsonValueObject();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (JsonValueObject)tlobj;
            if (name.SequenceEqual(propName_members))
            {
                obj.Members = reader.ReadObjectArray<JsonObjectMember>();
                return true;
            }
            return false;
        }
    }

    [TLType("userPrivacySettingRuleAllowAll")]
    partial class UserPrivacySettingRuleAllowAllConverter : TLObjectConverter<UserPrivacySettingRuleAllowAll>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingRuleAllowAllConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingRuleAllowAll();
    }

    [TLType("userPrivacySettingRuleAllowContacts")]
    partial class UserPrivacySettingRuleAllowContactsConverter : TLObjectConverter<UserPrivacySettingRuleAllowContacts>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingRuleAllowContactsConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingRuleAllowContacts();
    }

    [TLType("userPrivacySettingRuleAllowUsers")]
    partial class UserPrivacySettingRuleAllowUsersConverter : TLObjectConverter<UserPrivacySettingRuleAllowUsers>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingRuleAllowUsersConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingRuleAllowUsers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UserPrivacySettingRuleAllowUsers)tlobj;
            if (name.SequenceEqual(propName_user_ids))
            {
                obj.UserIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("userPrivacySettingRuleAllowChatMembers")]
    partial class UserPrivacySettingRuleAllowChatMembersConverter : TLObjectConverter<UserPrivacySettingRuleAllowChatMembers>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingRuleAllowChatMembersConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingRuleAllowChatMembers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UserPrivacySettingRuleAllowChatMembers)tlobj;
            if (name.SequenceEqual(propName_chat_ids))
            {
                obj.ChatIds = reader.ReadInt53Array();
                return true;
            }
            return false;
        }
    }

    [TLType("userPrivacySettingRuleRestrictAll")]
    partial class UserPrivacySettingRuleRestrictAllConverter : TLObjectConverter<UserPrivacySettingRuleRestrictAll>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingRuleRestrictAllConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingRuleRestrictAll();
    }

    [TLType("userPrivacySettingRuleRestrictContacts")]
    partial class UserPrivacySettingRuleRestrictContactsConverter : TLObjectConverter<UserPrivacySettingRuleRestrictContacts>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingRuleRestrictContactsConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingRuleRestrictContacts();
    }

    [TLType("userPrivacySettingRuleRestrictUsers")]
    partial class UserPrivacySettingRuleRestrictUsersConverter : TLObjectConverter<UserPrivacySettingRuleRestrictUsers>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingRuleRestrictUsersConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingRuleRestrictUsers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UserPrivacySettingRuleRestrictUsers)tlobj;
            if (name.SequenceEqual(propName_user_ids))
            {
                obj.UserIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("userPrivacySettingRuleRestrictChatMembers")]
    partial class UserPrivacySettingRuleRestrictChatMembersConverter : TLObjectConverter<UserPrivacySettingRuleRestrictChatMembers>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingRuleRestrictChatMembersConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingRuleRestrictChatMembers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UserPrivacySettingRuleRestrictChatMembers)tlobj;
            if (name.SequenceEqual(propName_chat_ids))
            {
                obj.ChatIds = reader.ReadInt53Array();
                return true;
            }
            return false;
        }
    }

    [TLType("userPrivacySettingRules")]
    partial class UserPrivacySettingRulesConverter : TLObjectConverter<UserPrivacySettingRules>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingRulesConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingRules();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UserPrivacySettingRules)tlobj;
            if (name.SequenceEqual(propName_rules))
            {
                obj.Rules = reader.ReadObjectArray<UserPrivacySettingRule>();
                return true;
            }
            return false;
        }
    }

    [TLType("userPrivacySettingShowStatus")]
    partial class UserPrivacySettingShowStatusConverter : TLObjectConverter<UserPrivacySettingShowStatus>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingShowStatusConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingShowStatus();
    }

    [TLType("userPrivacySettingShowProfilePhoto")]
    partial class UserPrivacySettingShowProfilePhotoConverter : TLObjectConverter<UserPrivacySettingShowProfilePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingShowProfilePhotoConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingShowProfilePhoto();
    }

    [TLType("userPrivacySettingShowLinkInForwardedMessages")]
    partial class UserPrivacySettingShowLinkInForwardedMessagesConverter : TLObjectConverter<UserPrivacySettingShowLinkInForwardedMessages>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingShowLinkInForwardedMessagesConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingShowLinkInForwardedMessages();
    }

    [TLType("userPrivacySettingShowPhoneNumber")]
    partial class UserPrivacySettingShowPhoneNumberConverter : TLObjectConverter<UserPrivacySettingShowPhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingShowPhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingShowPhoneNumber();
    }

    [TLType("userPrivacySettingAllowChatInvites")]
    partial class UserPrivacySettingAllowChatInvitesConverter : TLObjectConverter<UserPrivacySettingAllowChatInvites>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingAllowChatInvitesConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingAllowChatInvites();
    }

    [TLType("userPrivacySettingAllowCalls")]
    partial class UserPrivacySettingAllowCallsConverter : TLObjectConverter<UserPrivacySettingAllowCalls>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingAllowCallsConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingAllowCalls();
    }

    [TLType("userPrivacySettingAllowPeerToPeerCalls")]
    partial class UserPrivacySettingAllowPeerToPeerCallsConverter : TLObjectConverter<UserPrivacySettingAllowPeerToPeerCalls>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingAllowPeerToPeerCallsConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingAllowPeerToPeerCalls();
    }

    [TLType("userPrivacySettingAllowFindingByPhoneNumber")]
    partial class UserPrivacySettingAllowFindingByPhoneNumberConverter : TLObjectConverter<UserPrivacySettingAllowFindingByPhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new UserPrivacySettingAllowFindingByPhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new UserPrivacySettingAllowFindingByPhoneNumber();
    }

    [TLType("accountTtl")]
    partial class AccountTtlConverter : TLObjectConverter<AccountTtl>
    {
        public static BaseConverter CreateConverterInstance() => new AccountTtlConverter();
        public override TLObject CreateObjectInstance() => new AccountTtl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AccountTtl)tlobj;
            if (name.SequenceEqual(propName_days))
            {
                obj.Days = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("session")]
    partial class SessionConverter : TLObjectConverter<Session>
    {
        public static BaseConverter CreateConverterInstance() => new SessionConverter();
        public override TLObject CreateObjectInstance() => new Session();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Session)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x9742C457u when name.SequenceEqual(propName_is_current):
                    obj.IsCurrent = reader.ReadBool();
                    return true;
                case 0xE09929DFu when name.SequenceEqual(propName_is_password_pending):
                    obj.IsPasswordPending = reader.ReadBool();
                    return true;
                case 0x45A1DC75u when name.SequenceEqual(propName_api_id):
                    obj.ApiId = reader.ReadInt();
                    return true;
                case 0xF64C864Du when name.SequenceEqual(propName_application_name):
                    obj.ApplicationName = reader.ReadString();
                    return true;
                case 0xE6576A12u when name.SequenceEqual(propName_application_version):
                    obj.ApplicationVersion = reader.ReadString();
                    return true;
                case 0x7D21F64Eu when name.SequenceEqual(propName_is_official_application):
                    obj.IsOfficialApplication = reader.ReadBool();
                    return true;
                case 0xB398D2B1u when name.SequenceEqual(propName_device_model):
                    obj.DeviceModel = reader.ReadString();
                    return true;
                case 0x2A4A32B2u when name.SequenceEqual(propName_platform):
                    obj.Platform = reader.ReadString();
                    return true;
                case 0xC8C94F83u when name.SequenceEqual(propName_system_version):
                    obj.SystemVersion = reader.ReadString();
                    return true;
                case 0xF498E26Au when name.SequenceEqual(propName_log_in_date):
                    obj.LogInDate = reader.ReadInt();
                    return true;
                case 0xA4E318ADu when name.SequenceEqual(propName_last_active_date):
                    obj.LastActiveDate = reader.ReadInt();
                    return true;
                case 0x4B388A5Cu when name.SequenceEqual(propName_ip):
                    obj.Ip = reader.ReadString();
                    return true;
                case 0xA59115D1u when name.SequenceEqual(propName_country):
                    obj.Country = reader.ReadString();
                    return true;
                case 0x031AFE7Du when name.SequenceEqual(propName_region):
                    obj.Region = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("sessions")]
    partial class SessionsConverter : TLObjectConverter<Sessions>
    {
        public static BaseConverter CreateConverterInstance() => new SessionsConverter();
        public override TLObject CreateObjectInstance() => new Sessions();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Sessions)tlobj;
            if (name.SequenceEqual(propName_sessions))
            {
                obj.Sessions_ = reader.ReadObjectArray<Session>();
                return true;
            }
            return false;
        }
    }

    [TLType("connectedWebsite")]
    partial class ConnectedWebsiteConverter : TLObjectConverter<ConnectedWebsite>
    {
        public static BaseConverter CreateConverterInstance() => new ConnectedWebsiteConverter();
        public override TLObject CreateObjectInstance() => new ConnectedWebsite();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ConnectedWebsite)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0xDA26DFB1u when name.SequenceEqual(propName_domain_name):
                    obj.DomainName = reader.ReadString();
                    return true;
                case 0x0BC9D8A8u when name.SequenceEqual(propName_bot_user_id):
                    obj.BotUserId = reader.ReadInt();
                    return true;
                case 0x07531D8Fu when name.SequenceEqual(propName_browser):
                    obj.Browser = reader.ReadString();
                    return true;
                case 0x2A4A32B2u when name.SequenceEqual(propName_platform):
                    obj.Platform = reader.ReadString();
                    return true;
                case 0xF498E26Au when name.SequenceEqual(propName_log_in_date):
                    obj.LogInDate = reader.ReadInt();
                    return true;
                case 0xA4E318ADu when name.SequenceEqual(propName_last_active_date):
                    obj.LastActiveDate = reader.ReadInt();
                    return true;
                case 0x4B388A5Cu when name.SequenceEqual(propName_ip):
                    obj.Ip = reader.ReadString();
                    return true;
                case 0x0BF5A9A6u when name.SequenceEqual(propName_location):
                    obj.Location = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("connectedWebsites")]
    partial class ConnectedWebsitesConverter : TLObjectConverter<ConnectedWebsites>
    {
        public static BaseConverter CreateConverterInstance() => new ConnectedWebsitesConverter();
        public override TLObject CreateObjectInstance() => new ConnectedWebsites();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ConnectedWebsites)tlobj;
            if (name.SequenceEqual(propName_websites))
            {
                obj.Websites = reader.ReadObjectArray<ConnectedWebsite>();
                return true;
            }
            return false;
        }
    }

    [TLType("chatReportReasonSpam")]
    partial class ChatReportReasonSpamConverter : TLObjectConverter<ChatReportReasonSpam>
    {
        public static BaseConverter CreateConverterInstance() => new ChatReportReasonSpamConverter();
        public override TLObject CreateObjectInstance() => new ChatReportReasonSpam();
    }

    [TLType("chatReportReasonViolence")]
    partial class ChatReportReasonViolenceConverter : TLObjectConverter<ChatReportReasonViolence>
    {
        public static BaseConverter CreateConverterInstance() => new ChatReportReasonViolenceConverter();
        public override TLObject CreateObjectInstance() => new ChatReportReasonViolence();
    }

    [TLType("chatReportReasonPornography")]
    partial class ChatReportReasonPornographyConverter : TLObjectConverter<ChatReportReasonPornography>
    {
        public static BaseConverter CreateConverterInstance() => new ChatReportReasonPornographyConverter();
        public override TLObject CreateObjectInstance() => new ChatReportReasonPornography();
    }

    [TLType("chatReportReasonChildAbuse")]
    partial class ChatReportReasonChildAbuseConverter : TLObjectConverter<ChatReportReasonChildAbuse>
    {
        public static BaseConverter CreateConverterInstance() => new ChatReportReasonChildAbuseConverter();
        public override TLObject CreateObjectInstance() => new ChatReportReasonChildAbuse();
    }

    [TLType("chatReportReasonCopyright")]
    partial class ChatReportReasonCopyrightConverter : TLObjectConverter<ChatReportReasonCopyright>
    {
        public static BaseConverter CreateConverterInstance() => new ChatReportReasonCopyrightConverter();
        public override TLObject CreateObjectInstance() => new ChatReportReasonCopyright();
    }

    [TLType("chatReportReasonUnrelatedLocation")]
    partial class ChatReportReasonUnrelatedLocationConverter : TLObjectConverter<ChatReportReasonUnrelatedLocation>
    {
        public static BaseConverter CreateConverterInstance() => new ChatReportReasonUnrelatedLocationConverter();
        public override TLObject CreateObjectInstance() => new ChatReportReasonUnrelatedLocation();
    }

    [TLType("chatReportReasonCustom")]
    partial class ChatReportReasonCustomConverter : TLObjectConverter<ChatReportReasonCustom>
    {
        public static BaseConverter CreateConverterInstance() => new ChatReportReasonCustomConverter();
        public override TLObject CreateObjectInstance() => new ChatReportReasonCustom();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatReportReasonCustom)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("messageLink")]
    partial class MessageLinkConverter : TLObjectConverter<MessageLink>
    {
        public static BaseConverter CreateConverterInstance() => new MessageLinkConverter();
        public override TLObject CreateObjectInstance() => new MessageLink();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageLink)tlobj;
            if (name.SequenceEqual(propName_link))
            {
                obj.Link = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_public))
            {
                obj.IsPublic = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("messageLinkInfo")]
    partial class MessageLinkInfoConverter : TLObjectConverter<MessageLinkInfo>
    {
        public static BaseConverter CreateConverterInstance() => new MessageLinkInfoConverter();
        public override TLObject CreateObjectInstance() => new MessageLinkInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageLinkInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA0F3B367u when name.SequenceEqual(propName_is_public):
                    obj.IsPublic = reader.ReadBool();
                    return true;
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x24F208E4u when name.SequenceEqual(propName_message):
                    obj.Message = reader.ReadTLObject<Message>();
                    return true;
                case 0x84014C14u when name.SequenceEqual(propName_for_album):
                    obj.ForAlbum = reader.ReadBool();
                    return true;
                case 0x981B4866u when name.SequenceEqual(propName_for_comment):
                    obj.ForComment = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("filePart")]
    partial class FilePartConverter : TLObjectConverter<FilePart>
    {
        public static BaseConverter CreateConverterInstance() => new FilePartConverter();
        public override TLObject CreateObjectInstance() => new FilePart();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (FilePart)tlobj;
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("fileTypeNone")]
    partial class FileTypeNoneConverter : TLObjectConverter<FileTypeNone>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeNoneConverter();
        public override TLObject CreateObjectInstance() => new FileTypeNone();
    }

    [TLType("fileTypeAnimation")]
    partial class FileTypeAnimationConverter : TLObjectConverter<FileTypeAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeAnimationConverter();
        public override TLObject CreateObjectInstance() => new FileTypeAnimation();
    }

    [TLType("fileTypeAudio")]
    partial class FileTypeAudioConverter : TLObjectConverter<FileTypeAudio>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeAudioConverter();
        public override TLObject CreateObjectInstance() => new FileTypeAudio();
    }

    [TLType("fileTypeDocument")]
    partial class FileTypeDocumentConverter : TLObjectConverter<FileTypeDocument>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeDocumentConverter();
        public override TLObject CreateObjectInstance() => new FileTypeDocument();
    }

    [TLType("fileTypePhoto")]
    partial class FileTypePhotoConverter : TLObjectConverter<FileTypePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypePhotoConverter();
        public override TLObject CreateObjectInstance() => new FileTypePhoto();
    }

    [TLType("fileTypeProfilePhoto")]
    partial class FileTypeProfilePhotoConverter : TLObjectConverter<FileTypeProfilePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeProfilePhotoConverter();
        public override TLObject CreateObjectInstance() => new FileTypeProfilePhoto();
    }

    [TLType("fileTypeSecret")]
    partial class FileTypeSecretConverter : TLObjectConverter<FileTypeSecret>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeSecretConverter();
        public override TLObject CreateObjectInstance() => new FileTypeSecret();
    }

    [TLType("fileTypeSecretThumbnail")]
    partial class FileTypeSecretThumbnailConverter : TLObjectConverter<FileTypeSecretThumbnail>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeSecretThumbnailConverter();
        public override TLObject CreateObjectInstance() => new FileTypeSecretThumbnail();
    }

    [TLType("fileTypeSecure")]
    partial class FileTypeSecureConverter : TLObjectConverter<FileTypeSecure>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeSecureConverter();
        public override TLObject CreateObjectInstance() => new FileTypeSecure();
    }

    [TLType("fileTypeSticker")]
    partial class FileTypeStickerConverter : TLObjectConverter<FileTypeSticker>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeStickerConverter();
        public override TLObject CreateObjectInstance() => new FileTypeSticker();
    }

    [TLType("fileTypeThumbnail")]
    partial class FileTypeThumbnailConverter : TLObjectConverter<FileTypeThumbnail>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeThumbnailConverter();
        public override TLObject CreateObjectInstance() => new FileTypeThumbnail();
    }

    [TLType("fileTypeUnknown")]
    partial class FileTypeUnknownConverter : TLObjectConverter<FileTypeUnknown>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeUnknownConverter();
        public override TLObject CreateObjectInstance() => new FileTypeUnknown();
    }

    [TLType("fileTypeVideo")]
    partial class FileTypeVideoConverter : TLObjectConverter<FileTypeVideo>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeVideoConverter();
        public override TLObject CreateObjectInstance() => new FileTypeVideo();
    }

    [TLType("fileTypeVideoNote")]
    partial class FileTypeVideoNoteConverter : TLObjectConverter<FileTypeVideoNote>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeVideoNoteConverter();
        public override TLObject CreateObjectInstance() => new FileTypeVideoNote();
    }

    [TLType("fileTypeVoiceNote")]
    partial class FileTypeVoiceNoteConverter : TLObjectConverter<FileTypeVoiceNote>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeVoiceNoteConverter();
        public override TLObject CreateObjectInstance() => new FileTypeVoiceNote();
    }

    [TLType("fileTypeWallpaper")]
    partial class FileTypeWallpaperConverter : TLObjectConverter<FileTypeWallpaper>
    {
        public static BaseConverter CreateConverterInstance() => new FileTypeWallpaperConverter();
        public override TLObject CreateObjectInstance() => new FileTypeWallpaper();
    }

    [TLType("storageStatisticsByFileType")]
    partial class StorageStatisticsByFileTypeConverter : TLObjectConverter<StorageStatisticsByFileType>
    {
        public static BaseConverter CreateConverterInstance() => new StorageStatisticsByFileTypeConverter();
        public override TLObject CreateObjectInstance() => new StorageStatisticsByFileType();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StorageStatisticsByFileType)tlobj;
            if (name.SequenceEqual(propName_file_type))
            {
                obj.FileType = reader.ReadTLObject<FileType>();
                return true;
            }
            if (name.SequenceEqual(propName_size))
            {
                obj.Size = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_count))
            {
                obj.Count = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("storageStatisticsByChat")]
    partial class StorageStatisticsByChatConverter : TLObjectConverter<StorageStatisticsByChat>
    {
        public static BaseConverter CreateConverterInstance() => new StorageStatisticsByChatConverter();
        public override TLObject CreateObjectInstance() => new StorageStatisticsByChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StorageStatisticsByChat)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x23A0D95Cu when name.SequenceEqual(propName_size):
                    obj.Size = reader.ReadLong();
                    return true;
                case 0x39B1DDF4u when name.SequenceEqual(propName_count):
                    obj.Count = reader.ReadInt();
                    return true;
                case 0x44017B50u when name.SequenceEqual(propName_by_file_type):
                    obj.ByFileType = reader.ReadObjectArray<StorageStatisticsByFileType>();
                    return true;
            }
            return false;
        }
    }

    [TLType("storageStatistics")]
    partial class StorageStatisticsConverter : TLObjectConverter<StorageStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new StorageStatisticsConverter();
        public override TLObject CreateObjectInstance() => new StorageStatistics();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StorageStatistics)tlobj;
            if (name.SequenceEqual(propName_size))
            {
                obj.Size = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_count))
            {
                obj.Count = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_by_chat))
            {
                obj.ByChat = reader.ReadObjectArray<StorageStatisticsByChat>();
                return true;
            }
            return false;
        }
    }

    [TLType("storageStatisticsFast")]
    partial class StorageStatisticsFastConverter : TLObjectConverter<StorageStatisticsFast>
    {
        public static BaseConverter CreateConverterInstance() => new StorageStatisticsFastConverter();
        public override TLObject CreateObjectInstance() => new StorageStatisticsFast();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StorageStatisticsFast)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x064F4514u when name.SequenceEqual(propName_files_size):
                    obj.FilesSize = reader.ReadLong();
                    return true;
                case 0x2662CB4Bu when name.SequenceEqual(propName_file_count):
                    obj.FileCount = reader.ReadInt();
                    return true;
                case 0x9387473Cu when name.SequenceEqual(propName_database_size):
                    obj.DatabaseSize = reader.ReadLong();
                    return true;
                case 0x3ECFB135u when name.SequenceEqual(propName_language_pack_database_size):
                    obj.LanguagePackDatabaseSize = reader.ReadLong();
                    return true;
                case 0x13B521F3u when name.SequenceEqual(propName_log_size):
                    obj.LogSize = reader.ReadLong();
                    return true;
            }
            return false;
        }
    }

    [TLType("databaseStatistics")]
    partial class DatabaseStatisticsConverter : TLObjectConverter<DatabaseStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new DatabaseStatisticsConverter();
        public override TLObject CreateObjectInstance() => new DatabaseStatistics();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DatabaseStatistics)tlobj;
            if (name.SequenceEqual(propName_statistics))
            {
                obj.Statistics = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("networkTypeNone")]
    partial class NetworkTypeNoneConverter : TLObjectConverter<NetworkTypeNone>
    {
        public static BaseConverter CreateConverterInstance() => new NetworkTypeNoneConverter();
        public override TLObject CreateObjectInstance() => new NetworkTypeNone();
    }

    [TLType("networkTypeMobile")]
    partial class NetworkTypeMobileConverter : TLObjectConverter<NetworkTypeMobile>
    {
        public static BaseConverter CreateConverterInstance() => new NetworkTypeMobileConverter();
        public override TLObject CreateObjectInstance() => new NetworkTypeMobile();
    }

    [TLType("networkTypeMobileRoaming")]
    partial class NetworkTypeMobileRoamingConverter : TLObjectConverter<NetworkTypeMobileRoaming>
    {
        public static BaseConverter CreateConverterInstance() => new NetworkTypeMobileRoamingConverter();
        public override TLObject CreateObjectInstance() => new NetworkTypeMobileRoaming();
    }

    [TLType("networkTypeWiFi")]
    partial class NetworkTypeWiFiConverter : TLObjectConverter<NetworkTypeWiFi>
    {
        public static BaseConverter CreateConverterInstance() => new NetworkTypeWiFiConverter();
        public override TLObject CreateObjectInstance() => new NetworkTypeWiFi();
    }

    [TLType("networkTypeOther")]
    partial class NetworkTypeOtherConverter : TLObjectConverter<NetworkTypeOther>
    {
        public static BaseConverter CreateConverterInstance() => new NetworkTypeOtherConverter();
        public override TLObject CreateObjectInstance() => new NetworkTypeOther();
    }

    [TLType("networkStatisticsEntryFile")]
    partial class NetworkStatisticsEntryFileConverter : TLObjectConverter<NetworkStatisticsEntryFile>
    {
        public static BaseConverter CreateConverterInstance() => new NetworkStatisticsEntryFileConverter();
        public override TLObject CreateObjectInstance() => new NetworkStatisticsEntryFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (NetworkStatisticsEntryFile)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xFC33717Cu when name.SequenceEqual(propName_file_type):
                    obj.FileType = reader.ReadTLObject<FileType>();
                    return true;
                case 0x4CB5D30Eu when name.SequenceEqual(propName_network_type):
                    obj.NetworkType = reader.ReadTLObject<NetworkType>();
                    return true;
                case 0x48762A6Bu when name.SequenceEqual(propName_sent_bytes):
                    obj.SentBytes = reader.ReadLong();
                    return true;
                case 0x63388C02u when name.SequenceEqual(propName_received_bytes):
                    obj.ReceivedBytes = reader.ReadLong();
                    return true;
            }
            return false;
        }
    }

    [TLType("networkStatisticsEntryCall")]
    partial class NetworkStatisticsEntryCallConverter : TLObjectConverter<NetworkStatisticsEntryCall>
    {
        public static BaseConverter CreateConverterInstance() => new NetworkStatisticsEntryCallConverter();
        public override TLObject CreateObjectInstance() => new NetworkStatisticsEntryCall();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (NetworkStatisticsEntryCall)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x4CB5D30Eu when name.SequenceEqual(propName_network_type):
                    obj.NetworkType = reader.ReadTLObject<NetworkType>();
                    return true;
                case 0x48762A6Bu when name.SequenceEqual(propName_sent_bytes):
                    obj.SentBytes = reader.ReadLong();
                    return true;
                case 0x63388C02u when name.SequenceEqual(propName_received_bytes):
                    obj.ReceivedBytes = reader.ReadLong();
                    return true;
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadDouble();
                    return true;
            }
            return false;
        }
    }

    [TLType("networkStatistics")]
    partial class NetworkStatisticsConverter : TLObjectConverter<NetworkStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new NetworkStatisticsConverter();
        public override TLObject CreateObjectInstance() => new NetworkStatistics();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (NetworkStatistics)tlobj;
            if (name.SequenceEqual(propName_since_date))
            {
                obj.SinceDate = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_entries))
            {
                obj.Entries = reader.ReadObjectArray<NetworkStatisticsEntry>();
                return true;
            }
            return false;
        }
    }

    [TLType("autoDownloadSettings")]
    partial class AutoDownloadSettingsConverter : TLObjectConverter<AutoDownloadSettings>
    {
        public static BaseConverter CreateConverterInstance() => new AutoDownloadSettingsConverter();
        public override TLObject CreateObjectInstance() => new AutoDownloadSettings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AutoDownloadSettings)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xE1777A14u when name.SequenceEqual(propName_is_auto_download_enabled):
                    obj.IsAutoDownloadEnabled = reader.ReadBool();
                    return true;
                case 0xF0152393u when name.SequenceEqual(propName_max_photo_file_size):
                    obj.MaxPhotoFileSize = reader.ReadInt();
                    return true;
                case 0x68913420u when name.SequenceEqual(propName_max_video_file_size):
                    obj.MaxVideoFileSize = reader.ReadInt();
                    return true;
                case 0xCE0570C5u when name.SequenceEqual(propName_max_other_file_size):
                    obj.MaxOtherFileSize = reader.ReadInt();
                    return true;
                case 0xFCB99A0Au when name.SequenceEqual(propName_video_upload_bitrate):
                    obj.VideoUploadBitrate = reader.ReadInt();
                    return true;
                case 0xA717A29Fu when name.SequenceEqual(propName_preload_large_videos):
                    obj.PreloadLargeVideos = reader.ReadBool();
                    return true;
                case 0x96E7EC43u when name.SequenceEqual(propName_preload_next_audio):
                    obj.PreloadNextAudio = reader.ReadBool();
                    return true;
                case 0xC3AE95EFu when name.SequenceEqual(propName_use_less_data_for_calls):
                    obj.UseLessDataForCalls = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("autoDownloadSettingsPresets")]
    partial class AutoDownloadSettingsPresetsConverter : TLObjectConverter<AutoDownloadSettingsPresets>
    {
        public static BaseConverter CreateConverterInstance() => new AutoDownloadSettingsPresetsConverter();
        public override TLObject CreateObjectInstance() => new AutoDownloadSettingsPresets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AutoDownloadSettingsPresets)tlobj;
            if (name.SequenceEqual(propName_low))
            {
                obj.Low = reader.ReadTLObject<AutoDownloadSettings>();
                return true;
            }
            if (name.SequenceEqual(propName_medium))
            {
                obj.Medium = reader.ReadTLObject<AutoDownloadSettings>();
                return true;
            }
            if (name.SequenceEqual(propName_high))
            {
                obj.High = reader.ReadTLObject<AutoDownloadSettings>();
                return true;
            }
            return false;
        }
    }

    [TLType("connectionStateWaitingForNetwork")]
    partial class ConnectionStateWaitingForNetworkConverter : TLObjectConverter<ConnectionStateWaitingForNetwork>
    {
        public static BaseConverter CreateConverterInstance() => new ConnectionStateWaitingForNetworkConverter();
        public override TLObject CreateObjectInstance() => new ConnectionStateWaitingForNetwork();
    }

    [TLType("connectionStateConnectingToProxy")]
    partial class ConnectionStateConnectingToProxyConverter : TLObjectConverter<ConnectionStateConnectingToProxy>
    {
        public static BaseConverter CreateConverterInstance() => new ConnectionStateConnectingToProxyConverter();
        public override TLObject CreateObjectInstance() => new ConnectionStateConnectingToProxy();
    }

    [TLType("connectionStateConnecting")]
    partial class ConnectionStateConnectingConverter : TLObjectConverter<ConnectionStateConnecting>
    {
        public static BaseConverter CreateConverterInstance() => new ConnectionStateConnectingConverter();
        public override TLObject CreateObjectInstance() => new ConnectionStateConnecting();
    }

    [TLType("connectionStateUpdating")]
    partial class ConnectionStateUpdatingConverter : TLObjectConverter<ConnectionStateUpdating>
    {
        public static BaseConverter CreateConverterInstance() => new ConnectionStateUpdatingConverter();
        public override TLObject CreateObjectInstance() => new ConnectionStateUpdating();
    }

    [TLType("connectionStateReady")]
    partial class ConnectionStateReadyConverter : TLObjectConverter<ConnectionStateReady>
    {
        public static BaseConverter CreateConverterInstance() => new ConnectionStateReadyConverter();
        public override TLObject CreateObjectInstance() => new ConnectionStateReady();
    }

    [TLType("topChatCategoryUsers")]
    partial class TopChatCategoryUsersConverter : TLObjectConverter<TopChatCategoryUsers>
    {
        public static BaseConverter CreateConverterInstance() => new TopChatCategoryUsersConverter();
        public override TLObject CreateObjectInstance() => new TopChatCategoryUsers();
    }

    [TLType("topChatCategoryBots")]
    partial class TopChatCategoryBotsConverter : TLObjectConverter<TopChatCategoryBots>
    {
        public static BaseConverter CreateConverterInstance() => new TopChatCategoryBotsConverter();
        public override TLObject CreateObjectInstance() => new TopChatCategoryBots();
    }

    [TLType("topChatCategoryGroups")]
    partial class TopChatCategoryGroupsConverter : TLObjectConverter<TopChatCategoryGroups>
    {
        public static BaseConverter CreateConverterInstance() => new TopChatCategoryGroupsConverter();
        public override TLObject CreateObjectInstance() => new TopChatCategoryGroups();
    }

    [TLType("topChatCategoryChannels")]
    partial class TopChatCategoryChannelsConverter : TLObjectConverter<TopChatCategoryChannels>
    {
        public static BaseConverter CreateConverterInstance() => new TopChatCategoryChannelsConverter();
        public override TLObject CreateObjectInstance() => new TopChatCategoryChannels();
    }

    [TLType("topChatCategoryInlineBots")]
    partial class TopChatCategoryInlineBotsConverter : TLObjectConverter<TopChatCategoryInlineBots>
    {
        public static BaseConverter CreateConverterInstance() => new TopChatCategoryInlineBotsConverter();
        public override TLObject CreateObjectInstance() => new TopChatCategoryInlineBots();
    }

    [TLType("topChatCategoryCalls")]
    partial class TopChatCategoryCallsConverter : TLObjectConverter<TopChatCategoryCalls>
    {
        public static BaseConverter CreateConverterInstance() => new TopChatCategoryCallsConverter();
        public override TLObject CreateObjectInstance() => new TopChatCategoryCalls();
    }

    [TLType("topChatCategoryForwardChats")]
    partial class TopChatCategoryForwardChatsConverter : TLObjectConverter<TopChatCategoryForwardChats>
    {
        public static BaseConverter CreateConverterInstance() => new TopChatCategoryForwardChatsConverter();
        public override TLObject CreateObjectInstance() => new TopChatCategoryForwardChats();
    }

    [TLType("tMeUrlTypeUser")]
    partial class TMeUrlTypeUserConverter : TLObjectConverter<TMeUrlTypeUser>
    {
        public static BaseConverter CreateConverterInstance() => new TMeUrlTypeUserConverter();
        public override TLObject CreateObjectInstance() => new TMeUrlTypeUser();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TMeUrlTypeUser)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("tMeUrlTypeSupergroup")]
    partial class TMeUrlTypeSupergroupConverter : TLObjectConverter<TMeUrlTypeSupergroup>
    {
        public static BaseConverter CreateConverterInstance() => new TMeUrlTypeSupergroupConverter();
        public override TLObject CreateObjectInstance() => new TMeUrlTypeSupergroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TMeUrlTypeSupergroup)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("tMeUrlTypeChatInvite")]
    partial class TMeUrlTypeChatInviteConverter : TLObjectConverter<TMeUrlTypeChatInvite>
    {
        public static BaseConverter CreateConverterInstance() => new TMeUrlTypeChatInviteConverter();
        public override TLObject CreateObjectInstance() => new TMeUrlTypeChatInvite();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TMeUrlTypeChatInvite)tlobj;
            if (name.SequenceEqual(propName_info))
            {
                obj.Info = reader.ReadTLObject<ChatInviteLinkInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("tMeUrlTypeStickerSet")]
    partial class TMeUrlTypeStickerSetConverter : TLObjectConverter<TMeUrlTypeStickerSet>
    {
        public static BaseConverter CreateConverterInstance() => new TMeUrlTypeStickerSetConverter();
        public override TLObject CreateObjectInstance() => new TMeUrlTypeStickerSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TMeUrlTypeStickerSet)tlobj;
            if (name.SequenceEqual(propName_sticker_set_id))
            {
                obj.StickerSetId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("tMeUrl")]
    partial class TMeUrlConverter : TLObjectConverter<TMeUrl>
    {
        public static BaseConverter CreateConverterInstance() => new TMeUrlConverter();
        public override TLObject CreateObjectInstance() => new TMeUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TMeUrl)tlobj;
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<TMeUrlType>();
                return true;
            }
            return false;
        }
    }

    [TLType("tMeUrls")]
    partial class TMeUrlsConverter : TLObjectConverter<TMeUrls>
    {
        public static BaseConverter CreateConverterInstance() => new TMeUrlsConverter();
        public override TLObject CreateObjectInstance() => new TMeUrls();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TMeUrls)tlobj;
            if (name.SequenceEqual(propName_urls))
            {
                obj.Urls = reader.ReadObjectArray<TMeUrl>();
                return true;
            }
            return false;
        }
    }

    [TLType("suggestedActionEnableArchiveAndMuteNewChats")]
    partial class SuggestedActionEnableArchiveAndMuteNewChatsConverter : TLObjectConverter<SuggestedActionEnableArchiveAndMuteNewChats>
    {
        public static BaseConverter CreateConverterInstance() => new SuggestedActionEnableArchiveAndMuteNewChatsConverter();
        public override TLObject CreateObjectInstance() => new SuggestedActionEnableArchiveAndMuteNewChats();
    }

    [TLType("suggestedActionCheckPhoneNumber")]
    partial class SuggestedActionCheckPhoneNumberConverter : TLObjectConverter<SuggestedActionCheckPhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new SuggestedActionCheckPhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new SuggestedActionCheckPhoneNumber();
    }

    [TLType("count")]
    partial class CountConverter : TLObjectConverter<Count>
    {
        public static BaseConverter CreateConverterInstance() => new CountConverter();
        public override TLObject CreateObjectInstance() => new Count();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Count)tlobj;
            if (name.SequenceEqual(propName_count))
            {
                obj.Count_ = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("text")]
    partial class TextConverter : TLObjectConverter<Text>
    {
        public static BaseConverter CreateConverterInstance() => new TextConverter();
        public override TLObject CreateObjectInstance() => new Text();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Text)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text_ = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("seconds")]
    partial class SecondsConverter : TLObjectConverter<Seconds>
    {
        public static BaseConverter CreateConverterInstance() => new SecondsConverter();
        public override TLObject CreateObjectInstance() => new Seconds();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Seconds)tlobj;
            if (name.SequenceEqual(propName_seconds))
            {
                obj.Seconds_ = reader.ReadDouble();
                return true;
            }
            return false;
        }
    }

    [TLType("deepLinkInfo")]
    partial class DeepLinkInfoConverter : TLObjectConverter<DeepLinkInfo>
    {
        public static BaseConverter CreateConverterInstance() => new DeepLinkInfoConverter();
        public override TLObject CreateObjectInstance() => new DeepLinkInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeepLinkInfo)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<FormattedText>();
                return true;
            }
            if (name.SequenceEqual(propName_need_update_application))
            {
                obj.NeedUpdateApplication = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("textParseModeMarkdown")]
    partial class TextParseModeMarkdownConverter : TLObjectConverter<TextParseModeMarkdown>
    {
        public static BaseConverter CreateConverterInstance() => new TextParseModeMarkdownConverter();
        public override TLObject CreateObjectInstance() => new TextParseModeMarkdown();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TextParseModeMarkdown)tlobj;
            if (name.SequenceEqual(propName_version))
            {
                obj.Version = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("textParseModeHTML")]
    partial class TextParseModeHTMLConverter : TLObjectConverter<TextParseModeHTML>
    {
        public static BaseConverter CreateConverterInstance() => new TextParseModeHTMLConverter();
        public override TLObject CreateObjectInstance() => new TextParseModeHTML();
    }

    [TLType("proxyTypeSocks5")]
    partial class ProxyTypeSocks5Converter : TLObjectConverter<ProxyTypeSocks5>
    {
        public static BaseConverter CreateConverterInstance() => new ProxyTypeSocks5Converter();
        public override TLObject CreateObjectInstance() => new ProxyTypeSocks5();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ProxyTypeSocks5)tlobj;
            if (name.SequenceEqual(propName_username))
            {
                obj.Username = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("proxyTypeHttp")]
    partial class ProxyTypeHttpConverter : TLObjectConverter<ProxyTypeHttp>
    {
        public static BaseConverter CreateConverterInstance() => new ProxyTypeHttpConverter();
        public override TLObject CreateObjectInstance() => new ProxyTypeHttp();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ProxyTypeHttp)tlobj;
            if (name.SequenceEqual(propName_username))
            {
                obj.Username = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_http_only))
            {
                obj.HttpOnly = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("proxyTypeMtproto")]
    partial class ProxyTypeMtprotoConverter : TLObjectConverter<ProxyTypeMtproto>
    {
        public static BaseConverter CreateConverterInstance() => new ProxyTypeMtprotoConverter();
        public override TLObject CreateObjectInstance() => new ProxyTypeMtproto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ProxyTypeMtproto)tlobj;
            if (name.SequenceEqual(propName_secret))
            {
                obj.Secret = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("proxy")]
    partial class ProxyConverter : TLObjectConverter<Proxy>
    {
        public static BaseConverter CreateConverterInstance() => new ProxyConverter();
        public override TLObject CreateObjectInstance() => new Proxy();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Proxy)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt();
                    return true;
                case 0x40AC3DD2u when name.SequenceEqual(propName_server):
                    obj.Server = reader.ReadString();
                    return true;
                case 0x7BE412A6u when name.SequenceEqual(propName_port):
                    obj.Port = reader.ReadInt();
                    return true;
                case 0x6F907C60u when name.SequenceEqual(propName_last_used_date):
                    obj.LastUsedDate = reader.ReadInt();
                    return true;
                case 0x7C2FEF3Bu when name.SequenceEqual(propName_is_enabled):
                    obj.IsEnabled = reader.ReadBool();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<ProxyType>();
                    return true;
            }
            return false;
        }
    }

    [TLType("proxies")]
    partial class ProxiesConverter : TLObjectConverter<Proxies>
    {
        public static BaseConverter CreateConverterInstance() => new ProxiesConverter();
        public override TLObject CreateObjectInstance() => new Proxies();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Proxies)tlobj;
            if (name.SequenceEqual(propName_proxies))
            {
                obj.Proxies_ = reader.ReadObjectArray<Proxy>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputStickerStatic")]
    partial class InputStickerStaticConverter : TLObjectConverter<InputStickerStatic>
    {
        public static BaseConverter CreateConverterInstance() => new InputStickerStaticConverter();
        public override TLObject CreateObjectInstance() => new InputStickerStatic();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputStickerStatic)tlobj;
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<InputFile>();
                return true;
            }
            if (name.SequenceEqual(propName_emojis))
            {
                obj.Emojis = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_mask_position))
            {
                obj.MaskPosition = reader.ReadTLObject<MaskPosition>();
                return true;
            }
            return false;
        }
    }

    [TLType("inputStickerAnimated")]
    partial class InputStickerAnimatedConverter : TLObjectConverter<InputStickerAnimated>
    {
        public static BaseConverter CreateConverterInstance() => new InputStickerAnimatedConverter();
        public override TLObject CreateObjectInstance() => new InputStickerAnimated();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (InputStickerAnimated)tlobj;
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<InputFile>();
                return true;
            }
            if (name.SequenceEqual(propName_emojis))
            {
                obj.Emojis = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("dateRange")]
    partial class DateRangeConverter : TLObjectConverter<DateRange>
    {
        public static BaseConverter CreateConverterInstance() => new DateRangeConverter();
        public override TLObject CreateObjectInstance() => new DateRange();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DateRange)tlobj;
            if (name.SequenceEqual(propName_start_date))
            {
                obj.StartDate = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_end_date))
            {
                obj.EndDate = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("statisticsValue")]
    partial class StatisticsValueConverter : TLObjectConverter<StatisticsValue>
    {
        public static BaseConverter CreateConverterInstance() => new StatisticsValueConverter();
        public override TLObject CreateObjectInstance() => new StatisticsValue();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StatisticsValue)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadDouble();
                return true;
            }
            if (name.SequenceEqual(propName_previous_value))
            {
                obj.PreviousValue = reader.ReadDouble();
                return true;
            }
            if (name.SequenceEqual(propName_growth_rate_percentage))
            {
                obj.GrowthRatePercentage = reader.ReadDouble();
                return true;
            }
            return false;
        }
    }

    [TLType("statisticsGraphData")]
    partial class StatisticsGraphDataConverter : TLObjectConverter<StatisticsGraphData>
    {
        public static BaseConverter CreateConverterInstance() => new StatisticsGraphDataConverter();
        public override TLObject CreateObjectInstance() => new StatisticsGraphData();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StatisticsGraphData)tlobj;
            if (name.SequenceEqual(propName_json_data))
            {
                obj.JsonData = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_zoom_token))
            {
                obj.ZoomToken = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("statisticsGraphAsync")]
    partial class StatisticsGraphAsyncConverter : TLObjectConverter<StatisticsGraphAsync>
    {
        public static BaseConverter CreateConverterInstance() => new StatisticsGraphAsyncConverter();
        public override TLObject CreateObjectInstance() => new StatisticsGraphAsync();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StatisticsGraphAsync)tlobj;
            if (name.SequenceEqual(propName_token))
            {
                obj.Token = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("statisticsGraphError")]
    partial class StatisticsGraphErrorConverter : TLObjectConverter<StatisticsGraphError>
    {
        public static BaseConverter CreateConverterInstance() => new StatisticsGraphErrorConverter();
        public override TLObject CreateObjectInstance() => new StatisticsGraphError();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StatisticsGraphError)tlobj;
            if (name.SequenceEqual(propName_error_message))
            {
                obj.ErrorMessage = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("chatStatisticsMessageInteractionInfo")]
    partial class ChatStatisticsMessageInteractionInfoConverter : TLObjectConverter<ChatStatisticsMessageInteractionInfo>
    {
        public static BaseConverter CreateConverterInstance() => new ChatStatisticsMessageInteractionInfoConverter();
        public override TLObject CreateObjectInstance() => new ChatStatisticsMessageInteractionInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatStatisticsMessageInteractionInfo)tlobj;
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_view_count))
            {
                obj.ViewCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_forward_count))
            {
                obj.ForwardCount = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatStatisticsMessageSenderInfo")]
    partial class ChatStatisticsMessageSenderInfoConverter : TLObjectConverter<ChatStatisticsMessageSenderInfo>
    {
        public static BaseConverter CreateConverterInstance() => new ChatStatisticsMessageSenderInfoConverter();
        public override TLObject CreateObjectInstance() => new ChatStatisticsMessageSenderInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatStatisticsMessageSenderInfo)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_sent_message_count))
            {
                obj.SentMessageCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_average_character_count))
            {
                obj.AverageCharacterCount = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatStatisticsAdministratorActionsInfo")]
    partial class ChatStatisticsAdministratorActionsInfoConverter : TLObjectConverter<ChatStatisticsAdministratorActionsInfo>
    {
        public static BaseConverter CreateConverterInstance() => new ChatStatisticsAdministratorActionsInfoConverter();
        public override TLObject CreateObjectInstance() => new ChatStatisticsAdministratorActionsInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatStatisticsAdministratorActionsInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x10A75CDAu when name.SequenceEqual(propName_user_id):
                    obj.UserId = reader.ReadInt();
                    return true;
                case 0x0727C922u when name.SequenceEqual(propName_deleted_message_count):
                    obj.DeletedMessageCount = reader.ReadInt();
                    return true;
                case 0x2254A79Du when name.SequenceEqual(propName_banned_user_count):
                    obj.BannedUserCount = reader.ReadInt();
                    return true;
                case 0xAB7DD8DAu when name.SequenceEqual(propName_restricted_user_count):
                    obj.RestrictedUserCount = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("chatStatisticsInviterInfo")]
    partial class ChatStatisticsInviterInfoConverter : TLObjectConverter<ChatStatisticsInviterInfo>
    {
        public static BaseConverter CreateConverterInstance() => new ChatStatisticsInviterInfoConverter();
        public override TLObject CreateObjectInstance() => new ChatStatisticsInviterInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatStatisticsInviterInfo)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_added_member_count))
            {
                obj.AddedMemberCount = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("chatStatisticsSupergroup")]
    partial class ChatStatisticsSupergroupConverter : TLObjectConverter<ChatStatisticsSupergroup>
    {
        public static BaseConverter CreateConverterInstance() => new ChatStatisticsSupergroupConverter();
        public override TLObject CreateObjectInstance() => new ChatStatisticsSupergroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatStatisticsSupergroup)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x99C94704u when name.SequenceEqual(propName_period):
                    obj.Period = reader.ReadTLObject<DateRange>();
                    return true;
                case 0x512E01CBu when name.SequenceEqual(propName_member_count):
                    obj.MemberCount = reader.ReadTLObject<StatisticsValue>();
                    return true;
                case 0x2AC37CD8u when name.SequenceEqual(propName_message_count):
                    obj.MessageCount = reader.ReadTLObject<StatisticsValue>();
                    return true;
                case 0xAC43D49Fu when name.SequenceEqual(propName_viewer_count):
                    obj.ViewerCount = reader.ReadTLObject<StatisticsValue>();
                    return true;
                case 0x81B54B58u when name.SequenceEqual(propName_sender_count):
                    obj.SenderCount = reader.ReadTLObject<StatisticsValue>();
                    return true;
                case 0x0D7F2A10u when name.SequenceEqual(propName_member_count_graph):
                    obj.MemberCountGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0xFDE7288Au when name.SequenceEqual(propName_join_graph):
                    obj.JoinGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0x82920CDAu when name.SequenceEqual(propName_join_by_source_graph):
                    obj.JoinBySourceGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0x55F49CA0u when name.SequenceEqual(propName_language_graph):
                    obj.LanguageGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0x24364C49u when name.SequenceEqual(propName_message_content_graph):
                    obj.MessageContentGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0x78E5A644u when name.SequenceEqual(propName_action_graph):
                    obj.ActionGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0xF981C2AEu when name.SequenceEqual(propName_day_graph):
                    obj.DayGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0x0CAD0D4Eu when name.SequenceEqual(propName_week_graph):
                    obj.WeekGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0xBE4DB2F1u when name.SequenceEqual(propName_top_senders):
                    obj.TopSenders = reader.ReadObjectArray<ChatStatisticsMessageSenderInfo>();
                    return true;
                case 0x3C797EBFu when name.SequenceEqual(propName_top_administrators):
                    obj.TopAdministrators = reader.ReadObjectArray<ChatStatisticsAdministratorActionsInfo>();
                    return true;
                case 0x962661D3u when name.SequenceEqual(propName_top_inviters):
                    obj.TopInviters = reader.ReadObjectArray<ChatStatisticsInviterInfo>();
                    return true;
            }
            return false;
        }
    }

    [TLType("chatStatisticsChannel")]
    partial class ChatStatisticsChannelConverter : TLObjectConverter<ChatStatisticsChannel>
    {
        public static BaseConverter CreateConverterInstance() => new ChatStatisticsChannelConverter();
        public override TLObject CreateObjectInstance() => new ChatStatisticsChannel();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChatStatisticsChannel)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x99C94704u when name.SequenceEqual(propName_period):
                    obj.Period = reader.ReadTLObject<DateRange>();
                    return true;
                case 0x512E01CBu when name.SequenceEqual(propName_member_count):
                    obj.MemberCount = reader.ReadTLObject<StatisticsValue>();
                    return true;
                case 0x745A0870u when name.SequenceEqual(propName_mean_view_count):
                    obj.MeanViewCount = reader.ReadTLObject<StatisticsValue>();
                    return true;
                case 0x68DA9F48u when name.SequenceEqual(propName_mean_share_count):
                    obj.MeanShareCount = reader.ReadTLObject<StatisticsValue>();
                    return true;
                case 0x3618C1F6u when name.SequenceEqual(propName_enabled_notifications_percentage):
                    obj.EnabledNotificationsPercentage = reader.ReadDouble();
                    return true;
                case 0x0D7F2A10u when name.SequenceEqual(propName_member_count_graph):
                    obj.MemberCountGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0xFDE7288Au when name.SequenceEqual(propName_join_graph):
                    obj.JoinGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0xCC7139D3u when name.SequenceEqual(propName_mute_graph):
                    obj.MuteGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0x070E4A8Cu when name.SequenceEqual(propName_view_count_by_hour_graph):
                    obj.ViewCountByHourGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0x9F87EC6Fu when name.SequenceEqual(propName_view_count_by_source_graph):
                    obj.ViewCountBySourceGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0x82920CDAu when name.SequenceEqual(propName_join_by_source_graph):
                    obj.JoinBySourceGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0x55F49CA0u when name.SequenceEqual(propName_language_graph):
                    obj.LanguageGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0xA8ED17F4u when name.SequenceEqual(propName_message_interaction_graph):
                    obj.MessageInteractionGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0xA51FF426u when name.SequenceEqual(propName_instant_view_interaction_graph):
                    obj.InstantViewInteractionGraph = reader.ReadTLObject<StatisticsGraph>();
                    return true;
                case 0xE319660Au when name.SequenceEqual(propName_recent_message_interactions):
                    obj.RecentMessageInteractions = reader.ReadObjectArray<ChatStatisticsMessageInteractionInfo>();
                    return true;
            }
            return false;
        }
    }

    [TLType("messageStatistics")]
    partial class MessageStatisticsConverter : TLObjectConverter<MessageStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new MessageStatisticsConverter();
        public override TLObject CreateObjectInstance() => new MessageStatistics();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (MessageStatistics)tlobj;
            if (name.SequenceEqual(propName_message_interaction_graph))
            {
                obj.MessageInteractionGraph = reader.ReadTLObject<StatisticsGraph>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateAuthorizationState")]
    partial class UpdateAuthorizationStateConverter : TLObjectConverter<UpdateAuthorizationState>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateAuthorizationStateConverter();
        public override TLObject CreateObjectInstance() => new UpdateAuthorizationState();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateAuthorizationState)tlobj;
            if (name.SequenceEqual(propName_authorization_state))
            {
                obj.AuthorizationState = reader.ReadTLObject<AuthorizationState>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateNewMessage")]
    partial class UpdateNewMessageConverter : TLObjectConverter<UpdateNewMessage>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewMessageConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewMessage)tlobj;
            if (name.SequenceEqual(propName_message))
            {
                obj.Message = reader.ReadTLObject<Message>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateMessageSendAcknowledged")]
    partial class UpdateMessageSendAcknowledgedConverter : TLObjectConverter<UpdateMessageSendAcknowledged>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateMessageSendAcknowledgedConverter();
        public override TLObject CreateObjectInstance() => new UpdateMessageSendAcknowledged();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateMessageSendAcknowledged)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("updateMessageSendSucceeded")]
    partial class UpdateMessageSendSucceededConverter : TLObjectConverter<UpdateMessageSendSucceeded>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateMessageSendSucceededConverter();
        public override TLObject CreateObjectInstance() => new UpdateMessageSendSucceeded();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateMessageSendSucceeded)tlobj;
            if (name.SequenceEqual(propName_message))
            {
                obj.Message = reader.ReadTLObject<Message>();
                return true;
            }
            if (name.SequenceEqual(propName_old_message_id))
            {
                obj.OldMessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("updateMessageSendFailed")]
    partial class UpdateMessageSendFailedConverter : TLObjectConverter<UpdateMessageSendFailed>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateMessageSendFailedConverter();
        public override TLObject CreateObjectInstance() => new UpdateMessageSendFailed();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateMessageSendFailed)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x24F208E4u when name.SequenceEqual(propName_message):
                    obj.Message = reader.ReadTLObject<Message>();
                    return true;
                case 0xA485767Au when name.SequenceEqual(propName_old_message_id):
                    obj.OldMessageId = reader.ReadLong();
                    return true;
                case 0x14FC1187u when name.SequenceEqual(propName_error_code):
                    obj.ErrorCode = reader.ReadInt();
                    return true;
                case 0x3A4689D1u when name.SequenceEqual(propName_error_message):
                    obj.ErrorMessage = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateMessageContent")]
    partial class UpdateMessageContentConverter : TLObjectConverter<UpdateMessageContent>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateMessageContentConverter();
        public override TLObject CreateObjectInstance() => new UpdateMessageContent();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateMessageContent)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_new_content))
            {
                obj.NewContent = reader.ReadTLObject<MessageContent>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateMessageEdited")]
    partial class UpdateMessageEditedConverter : TLObjectConverter<UpdateMessageEdited>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateMessageEditedConverter();
        public override TLObject CreateObjectInstance() => new UpdateMessageEdited();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateMessageEdited)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x9165AFAEu when name.SequenceEqual(propName_edit_date):
                    obj.EditDate = reader.ReadInt();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateMessageInteractionInfo")]
    partial class UpdateMessageInteractionInfoConverter : TLObjectConverter<UpdateMessageInteractionInfo>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateMessageInteractionInfoConverter();
        public override TLObject CreateObjectInstance() => new UpdateMessageInteractionInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateMessageInteractionInfo)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_interaction_info))
            {
                obj.InteractionInfo = reader.ReadTLObject<MessageInteractionInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateMessageContentOpened")]
    partial class UpdateMessageContentOpenedConverter : TLObjectConverter<UpdateMessageContentOpened>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateMessageContentOpenedConverter();
        public override TLObject CreateObjectInstance() => new UpdateMessageContentOpened();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateMessageContentOpened)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("updateMessageMentionRead")]
    partial class UpdateMessageMentionReadConverter : TLObjectConverter<UpdateMessageMentionRead>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateMessageMentionReadConverter();
        public override TLObject CreateObjectInstance() => new UpdateMessageMentionRead();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateMessageMentionRead)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_unread_mention_count))
            {
                obj.UnreadMentionCount = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("updateMessageLiveLocationViewed")]
    partial class UpdateMessageLiveLocationViewedConverter : TLObjectConverter<UpdateMessageLiveLocationViewed>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateMessageLiveLocationViewedConverter();
        public override TLObject CreateObjectInstance() => new UpdateMessageLiveLocationViewed();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateMessageLiveLocationViewed)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("updateNewChat")]
    partial class UpdateNewChatConverter : TLObjectConverter<UpdateNewChat>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewChatConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewChat)tlobj;
            if (name.SequenceEqual(propName_chat))
            {
                obj.Chat = reader.ReadTLObject<Chat>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatTitle")]
    partial class UpdateChatTitleConverter : TLObjectConverter<UpdateChatTitle>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatTitleConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatTitle();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatTitle)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatPhoto")]
    partial class UpdateChatPhotoConverter : TLObjectConverter<UpdateChatPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatPhotoConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatPhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatPhoto)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_photo))
            {
                obj.Photo = reader.ReadTLObject<ChatPhotoInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatPermissions")]
    partial class UpdateChatPermissionsConverter : TLObjectConverter<UpdateChatPermissions>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatPermissionsConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatPermissions();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatPermissions)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_permissions))
            {
                obj.Permissions = reader.ReadTLObject<ChatPermissions>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatLastMessage")]
    partial class UpdateChatLastMessageConverter : TLObjectConverter<UpdateChatLastMessage>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatLastMessageConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatLastMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatLastMessage)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_last_message))
            {
                obj.LastMessage = reader.ReadTLObject<Message>();
                return true;
            }
            if (name.SequenceEqual(propName_positions))
            {
                obj.Positions = reader.ReadObjectArray<ChatPosition>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatPosition")]
    partial class UpdateChatPositionConverter : TLObjectConverter<UpdateChatPosition>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatPositionConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatPosition();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatPosition)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_position))
            {
                obj.Position = reader.ReadTLObject<ChatPosition>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatIsMarkedAsUnread")]
    partial class UpdateChatIsMarkedAsUnreadConverter : TLObjectConverter<UpdateChatIsMarkedAsUnread>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatIsMarkedAsUnreadConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatIsMarkedAsUnread();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatIsMarkedAsUnread)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_is_marked_as_unread))
            {
                obj.IsMarkedAsUnread = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatIsBlocked")]
    partial class UpdateChatIsBlockedConverter : TLObjectConverter<UpdateChatIsBlocked>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatIsBlockedConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatIsBlocked();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatIsBlocked)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_is_blocked))
            {
                obj.IsBlocked = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatHasScheduledMessages")]
    partial class UpdateChatHasScheduledMessagesConverter : TLObjectConverter<UpdateChatHasScheduledMessages>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatHasScheduledMessagesConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatHasScheduledMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatHasScheduledMessages)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_has_scheduled_messages))
            {
                obj.HasScheduledMessages = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatDefaultDisableNotification")]
    partial class UpdateChatDefaultDisableNotificationConverter : TLObjectConverter<UpdateChatDefaultDisableNotification>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatDefaultDisableNotificationConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatDefaultDisableNotification();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatDefaultDisableNotification)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_default_disable_notification))
            {
                obj.DefaultDisableNotification = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatReadInbox")]
    partial class UpdateChatReadInboxConverter : TLObjectConverter<UpdateChatReadInbox>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatReadInboxConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatReadInbox();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatReadInbox)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_last_read_inbox_message_id))
            {
                obj.LastReadInboxMessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_unread_count))
            {
                obj.UnreadCount = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatReadOutbox")]
    partial class UpdateChatReadOutboxConverter : TLObjectConverter<UpdateChatReadOutbox>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatReadOutboxConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatReadOutbox();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatReadOutbox)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_last_read_outbox_message_id))
            {
                obj.LastReadOutboxMessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatUnreadMentionCount")]
    partial class UpdateChatUnreadMentionCountConverter : TLObjectConverter<UpdateChatUnreadMentionCount>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatUnreadMentionCountConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatUnreadMentionCount();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatUnreadMentionCount)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_unread_mention_count))
            {
                obj.UnreadMentionCount = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatNotificationSettings")]
    partial class UpdateChatNotificationSettingsConverter : TLObjectConverter<UpdateChatNotificationSettings>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatNotificationSettingsConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatNotificationSettings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatNotificationSettings)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_notification_settings))
            {
                obj.NotificationSettings = reader.ReadTLObject<ChatNotificationSettings>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateScopeNotificationSettings")]
    partial class UpdateScopeNotificationSettingsConverter : TLObjectConverter<UpdateScopeNotificationSettings>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateScopeNotificationSettingsConverter();
        public override TLObject CreateObjectInstance() => new UpdateScopeNotificationSettings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateScopeNotificationSettings)tlobj;
            if (name.SequenceEqual(propName_scope))
            {
                obj.Scope = reader.ReadTLObject<NotificationSettingsScope>();
                return true;
            }
            if (name.SequenceEqual(propName_notification_settings))
            {
                obj.NotificationSettings = reader.ReadTLObject<ScopeNotificationSettings>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatActionBar")]
    partial class UpdateChatActionBarConverter : TLObjectConverter<UpdateChatActionBar>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatActionBarConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatActionBar();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatActionBar)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_action_bar))
            {
                obj.ActionBar = reader.ReadTLObject<ChatActionBar>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatPinnedMessage")]
    partial class UpdateChatPinnedMessageConverter : TLObjectConverter<UpdateChatPinnedMessage>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatPinnedMessageConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatPinnedMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatPinnedMessage)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_pinned_message_id))
            {
                obj.PinnedMessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatReplyMarkup")]
    partial class UpdateChatReplyMarkupConverter : TLObjectConverter<UpdateChatReplyMarkup>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatReplyMarkupConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatReplyMarkup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatReplyMarkup)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_reply_markup_message_id))
            {
                obj.ReplyMarkupMessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatDraftMessage")]
    partial class UpdateChatDraftMessageConverter : TLObjectConverter<UpdateChatDraftMessage>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatDraftMessageConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatDraftMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatDraftMessage)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_draft_message))
            {
                obj.DraftMessage = reader.ReadTLObject<DraftMessage>();
                return true;
            }
            if (name.SequenceEqual(propName_positions))
            {
                obj.Positions = reader.ReadObjectArray<ChatPosition>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatFilters")]
    partial class UpdateChatFiltersConverter : TLObjectConverter<UpdateChatFilters>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatFiltersConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatFilters();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatFilters)tlobj;
            if (name.SequenceEqual(propName_chat_filters))
            {
                obj.ChatFilters = reader.ReadObjectArray<ChatFilterInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateChatOnlineMemberCount")]
    partial class UpdateChatOnlineMemberCountConverter : TLObjectConverter<UpdateChatOnlineMemberCount>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateChatOnlineMemberCountConverter();
        public override TLObject CreateObjectInstance() => new UpdateChatOnlineMemberCount();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateChatOnlineMemberCount)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_online_member_count))
            {
                obj.OnlineMemberCount = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("updateNotification")]
    partial class UpdateNotificationConverter : TLObjectConverter<UpdateNotification>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNotificationConverter();
        public override TLObject CreateObjectInstance() => new UpdateNotification();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNotification)tlobj;
            if (name.SequenceEqual(propName_notification_group_id))
            {
                obj.NotificationGroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_notification))
            {
                obj.Notification = reader.ReadTLObject<Notification>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateNotificationGroup")]
    partial class UpdateNotificationGroupConverter : TLObjectConverter<UpdateNotificationGroup>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNotificationGroupConverter();
        public override TLObject CreateObjectInstance() => new UpdateNotificationGroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNotificationGroup)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x41A3C3BAu when name.SequenceEqual(propName_notification_group_id):
                    obj.NotificationGroupId = reader.ReadInt();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<NotificationGroupType>();
                    return true;
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x38BB96B3u when name.SequenceEqual(propName_notification_settings_chat_id):
                    obj.NotificationSettingsChatId = reader.ReadLong();
                    return true;
                case 0xD03BF3DFu when name.SequenceEqual(propName_is_silent):
                    obj.IsSilent = reader.ReadBool();
                    return true;
                case 0x92BEA9B5u when name.SequenceEqual(propName_total_count):
                    obj.TotalCount = reader.ReadInt();
                    return true;
                case 0x884EABE2u when name.SequenceEqual(propName_added_notifications):
                    obj.AddedNotifications = reader.ReadObjectArray<Notification>();
                    return true;
                case 0xF018DF2Eu when name.SequenceEqual(propName_removed_notification_ids):
                    obj.RemovedNotificationIds = reader.ReadInt32Array();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateActiveNotifications")]
    partial class UpdateActiveNotificationsConverter : TLObjectConverter<UpdateActiveNotifications>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateActiveNotificationsConverter();
        public override TLObject CreateObjectInstance() => new UpdateActiveNotifications();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateActiveNotifications)tlobj;
            if (name.SequenceEqual(propName_groups))
            {
                obj.Groups = reader.ReadObjectArray<NotificationGroup>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateHavePendingNotifications")]
    partial class UpdateHavePendingNotificationsConverter : TLObjectConverter<UpdateHavePendingNotifications>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateHavePendingNotificationsConverter();
        public override TLObject CreateObjectInstance() => new UpdateHavePendingNotifications();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateHavePendingNotifications)tlobj;
            if (name.SequenceEqual(propName_have_delayed_notifications))
            {
                obj.HaveDelayedNotifications = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_have_unreceived_notifications))
            {
                obj.HaveUnreceivedNotifications = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("updateDeleteMessages")]
    partial class UpdateDeleteMessagesConverter : TLObjectConverter<UpdateDeleteMessages>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateDeleteMessagesConverter();
        public override TLObject CreateObjectInstance() => new UpdateDeleteMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateDeleteMessages)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x02203345u when name.SequenceEqual(propName_message_ids):
                    obj.MessageIds = reader.ReadInt53Array();
                    return true;
                case 0x3653E954u when name.SequenceEqual(propName_is_permanent):
                    obj.IsPermanent = reader.ReadBool();
                    return true;
                case 0xFB824E9Cu when name.SequenceEqual(propName_from_cache):
                    obj.FromCache = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateUserChatAction")]
    partial class UpdateUserChatActionConverter : TLObjectConverter<UpdateUserChatAction>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateUserChatActionConverter();
        public override TLObject CreateObjectInstance() => new UpdateUserChatAction();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateUserChatAction)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xCF8E5A53u when name.SequenceEqual(propName_message_thread_id):
                    obj.MessageThreadId = reader.ReadLong();
                    return true;
                case 0x10A75CDAu when name.SequenceEqual(propName_user_id):
                    obj.UserId = reader.ReadInt();
                    return true;
                case 0xC4642EFFu when name.SequenceEqual(propName_action):
                    obj.Action = reader.ReadTLObject<ChatAction>();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateUserStatus")]
    partial class UpdateUserStatusConverter : TLObjectConverter<UpdateUserStatus>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateUserStatusConverter();
        public override TLObject CreateObjectInstance() => new UpdateUserStatus();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateUserStatus)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_status))
            {
                obj.Status = reader.ReadTLObject<UserStatus>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateUser")]
    partial class UpdateUserConverter : TLObjectConverter<UpdateUser>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateUserConverter();
        public override TLObject CreateObjectInstance() => new UpdateUser();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateUser)tlobj;
            if (name.SequenceEqual(propName_user))
            {
                obj.User = reader.ReadTLObject<User>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateBasicGroup")]
    partial class UpdateBasicGroupConverter : TLObjectConverter<UpdateBasicGroup>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateBasicGroupConverter();
        public override TLObject CreateObjectInstance() => new UpdateBasicGroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateBasicGroup)tlobj;
            if (name.SequenceEqual(propName_basic_group))
            {
                obj.BasicGroup = reader.ReadTLObject<BasicGroup>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateSupergroup")]
    partial class UpdateSupergroupConverter : TLObjectConverter<UpdateSupergroup>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateSupergroupConverter();
        public override TLObject CreateObjectInstance() => new UpdateSupergroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateSupergroup)tlobj;
            if (name.SequenceEqual(propName_supergroup))
            {
                obj.Supergroup = reader.ReadTLObject<Supergroup>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateSecretChat")]
    partial class UpdateSecretChatConverter : TLObjectConverter<UpdateSecretChat>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateSecretChatConverter();
        public override TLObject CreateObjectInstance() => new UpdateSecretChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateSecretChat)tlobj;
            if (name.SequenceEqual(propName_secret_chat))
            {
                obj.SecretChat = reader.ReadTLObject<SecretChat>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateUserFullInfo")]
    partial class UpdateUserFullInfoConverter : TLObjectConverter<UpdateUserFullInfo>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateUserFullInfoConverter();
        public override TLObject CreateObjectInstance() => new UpdateUserFullInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateUserFullInfo)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_user_full_info))
            {
                obj.UserFullInfo = reader.ReadTLObject<UserFullInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateBasicGroupFullInfo")]
    partial class UpdateBasicGroupFullInfoConverter : TLObjectConverter<UpdateBasicGroupFullInfo>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateBasicGroupFullInfoConverter();
        public override TLObject CreateObjectInstance() => new UpdateBasicGroupFullInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateBasicGroupFullInfo)tlobj;
            if (name.SequenceEqual(propName_basic_group_id))
            {
                obj.BasicGroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_basic_group_full_info))
            {
                obj.BasicGroupFullInfo = reader.ReadTLObject<BasicGroupFullInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateSupergroupFullInfo")]
    partial class UpdateSupergroupFullInfoConverter : TLObjectConverter<UpdateSupergroupFullInfo>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateSupergroupFullInfoConverter();
        public override TLObject CreateObjectInstance() => new UpdateSupergroupFullInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateSupergroupFullInfo)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_supergroup_full_info))
            {
                obj.SupergroupFullInfo = reader.ReadTLObject<SupergroupFullInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateServiceNotification")]
    partial class UpdateServiceNotificationConverter : TLObjectConverter<UpdateServiceNotification>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateServiceNotificationConverter();
        public override TLObject CreateObjectInstance() => new UpdateServiceNotification();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateServiceNotification)tlobj;
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_content))
            {
                obj.Content = reader.ReadTLObject<MessageContent>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateFile")]
    partial class UpdateFileConverter : TLObjectConverter<UpdateFile>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateFileConverter();
        public override TLObject CreateObjectInstance() => new UpdateFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateFile)tlobj;
            if (name.SequenceEqual(propName_file))
            {
                obj.File = reader.ReadTLObject<File>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateFileGenerationStart")]
    partial class UpdateFileGenerationStartConverter : TLObjectConverter<UpdateFileGenerationStart>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateFileGenerationStartConverter();
        public override TLObject CreateObjectInstance() => new UpdateFileGenerationStart();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateFileGenerationStart)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xCD5A09A5u when name.SequenceEqual(propName_generation_id):
                    obj.GenerationId = reader.ReadInt64String();
                    return true;
                case 0x4A385140u when name.SequenceEqual(propName_original_path):
                    obj.OriginalPath = reader.ReadString();
                    return true;
                case 0x4C1327C7u when name.SequenceEqual(propName_destination_path):
                    obj.DestinationPath = reader.ReadString();
                    return true;
                case 0x8CDFBD85u when name.SequenceEqual(propName_conversion):
                    obj.Conversion = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateFileGenerationStop")]
    partial class UpdateFileGenerationStopConverter : TLObjectConverter<UpdateFileGenerationStop>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateFileGenerationStopConverter();
        public override TLObject CreateObjectInstance() => new UpdateFileGenerationStop();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateFileGenerationStop)tlobj;
            if (name.SequenceEqual(propName_generation_id))
            {
                obj.GenerationId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("updateCall")]
    partial class UpdateCallConverter : TLObjectConverter<UpdateCall>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateCallConverter();
        public override TLObject CreateObjectInstance() => new UpdateCall();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateCall)tlobj;
            if (name.SequenceEqual(propName_call))
            {
                obj.Call = reader.ReadTLObject<Call>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateNewCallSignalingData")]
    partial class UpdateNewCallSignalingDataConverter : TLObjectConverter<UpdateNewCallSignalingData>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewCallSignalingDataConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewCallSignalingData();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewCallSignalingData)tlobj;
            if (name.SequenceEqual(propName_call_id))
            {
                obj.CallId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("updateUserPrivacySettingRules")]
    partial class UpdateUserPrivacySettingRulesConverter : TLObjectConverter<UpdateUserPrivacySettingRules>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateUserPrivacySettingRulesConverter();
        public override TLObject CreateObjectInstance() => new UpdateUserPrivacySettingRules();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateUserPrivacySettingRules)tlobj;
            if (name.SequenceEqual(propName_setting))
            {
                obj.Setting = reader.ReadTLObject<UserPrivacySetting>();
                return true;
            }
            if (name.SequenceEqual(propName_rules))
            {
                obj.Rules = reader.ReadTLObject<UserPrivacySettingRules>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateUnreadMessageCount")]
    partial class UpdateUnreadMessageCountConverter : TLObjectConverter<UpdateUnreadMessageCount>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateUnreadMessageCountConverter();
        public override TLObject CreateObjectInstance() => new UpdateUnreadMessageCount();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateUnreadMessageCount)tlobj;
            if (name.SequenceEqual(propName_chat_list))
            {
                obj.ChatList = reader.ReadTLObject<ChatList>();
                return true;
            }
            if (name.SequenceEqual(propName_unread_count))
            {
                obj.UnreadCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_unread_unmuted_count))
            {
                obj.UnreadUnmutedCount = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("updateUnreadChatCount")]
    partial class UpdateUnreadChatCountConverter : TLObjectConverter<UpdateUnreadChatCount>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateUnreadChatCountConverter();
        public override TLObject CreateObjectInstance() => new UpdateUnreadChatCount();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateUnreadChatCount)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xE24898C4u when name.SequenceEqual(propName_chat_list):
                    obj.ChatList = reader.ReadTLObject<ChatList>();
                    return true;
                case 0x92BEA9B5u when name.SequenceEqual(propName_total_count):
                    obj.TotalCount = reader.ReadInt();
                    return true;
                case 0x5ED9F1BEu when name.SequenceEqual(propName_unread_count):
                    obj.UnreadCount = reader.ReadInt();
                    return true;
                case 0xFABECDAFu when name.SequenceEqual(propName_unread_unmuted_count):
                    obj.UnreadUnmutedCount = reader.ReadInt();
                    return true;
                case 0xAE40155Cu when name.SequenceEqual(propName_marked_as_unread_count):
                    obj.MarkedAsUnreadCount = reader.ReadInt();
                    return true;
                case 0xD4EE259Du when name.SequenceEqual(propName_marked_as_unread_unmuted_count):
                    obj.MarkedAsUnreadUnmutedCount = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateOption")]
    partial class UpdateOptionConverter : TLObjectConverter<UpdateOption>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateOptionConverter();
        public override TLObject CreateObjectInstance() => new UpdateOption();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateOption)tlobj;
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadTLObject<OptionValue>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateStickerSet")]
    partial class UpdateStickerSetConverter : TLObjectConverter<UpdateStickerSet>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateStickerSetConverter();
        public override TLObject CreateObjectInstance() => new UpdateStickerSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateStickerSet)tlobj;
            if (name.SequenceEqual(propName_sticker_set))
            {
                obj.StickerSet = reader.ReadTLObject<StickerSet>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateInstalledStickerSets")]
    partial class UpdateInstalledStickerSetsConverter : TLObjectConverter<UpdateInstalledStickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateInstalledStickerSetsConverter();
        public override TLObject CreateObjectInstance() => new UpdateInstalledStickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateInstalledStickerSets)tlobj;
            if (name.SequenceEqual(propName_is_masks))
            {
                obj.IsMasks = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_sticker_set_ids))
            {
                obj.StickerSetIds = reader.ReadInt64Array();
                return true;
            }
            return false;
        }
    }

    [TLType("updateTrendingStickerSets")]
    partial class UpdateTrendingStickerSetsConverter : TLObjectConverter<UpdateTrendingStickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateTrendingStickerSetsConverter();
        public override TLObject CreateObjectInstance() => new UpdateTrendingStickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateTrendingStickerSets)tlobj;
            if (name.SequenceEqual(propName_sticker_sets))
            {
                obj.StickerSets = reader.ReadTLObject<StickerSets>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateRecentStickers")]
    partial class UpdateRecentStickersConverter : TLObjectConverter<UpdateRecentStickers>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateRecentStickersConverter();
        public override TLObject CreateObjectInstance() => new UpdateRecentStickers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateRecentStickers)tlobj;
            if (name.SequenceEqual(propName_is_attached))
            {
                obj.IsAttached = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_sticker_ids))
            {
                obj.StickerIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("updateFavoriteStickers")]
    partial class UpdateFavoriteStickersConverter : TLObjectConverter<UpdateFavoriteStickers>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateFavoriteStickersConverter();
        public override TLObject CreateObjectInstance() => new UpdateFavoriteStickers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateFavoriteStickers)tlobj;
            if (name.SequenceEqual(propName_sticker_ids))
            {
                obj.StickerIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("updateSavedAnimations")]
    partial class UpdateSavedAnimationsConverter : TLObjectConverter<UpdateSavedAnimations>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateSavedAnimationsConverter();
        public override TLObject CreateObjectInstance() => new UpdateSavedAnimations();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateSavedAnimations)tlobj;
            if (name.SequenceEqual(propName_animation_ids))
            {
                obj.AnimationIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("updateSelectedBackground")]
    partial class UpdateSelectedBackgroundConverter : TLObjectConverter<UpdateSelectedBackground>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateSelectedBackgroundConverter();
        public override TLObject CreateObjectInstance() => new UpdateSelectedBackground();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateSelectedBackground)tlobj;
            if (name.SequenceEqual(propName_for_dark_theme))
            {
                obj.ForDarkTheme = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_background))
            {
                obj.Background = reader.ReadTLObject<Background>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateLanguagePackStrings")]
    partial class UpdateLanguagePackStringsConverter : TLObjectConverter<UpdateLanguagePackStrings>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateLanguagePackStringsConverter();
        public override TLObject CreateObjectInstance() => new UpdateLanguagePackStrings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateLanguagePackStrings)tlobj;
            if (name.SequenceEqual(propName_localization_target))
            {
                obj.LocalizationTarget = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_language_pack_id))
            {
                obj.LanguagePackId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_strings))
            {
                obj.Strings = reader.ReadObjectArray<LanguagePackString>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateConnectionState")]
    partial class UpdateConnectionStateConverter : TLObjectConverter<UpdateConnectionState>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateConnectionStateConverter();
        public override TLObject CreateObjectInstance() => new UpdateConnectionState();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateConnectionState)tlobj;
            if (name.SequenceEqual(propName_state))
            {
                obj.State = reader.ReadTLObject<ConnectionState>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateTermsOfService")]
    partial class UpdateTermsOfServiceConverter : TLObjectConverter<UpdateTermsOfService>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateTermsOfServiceConverter();
        public override TLObject CreateObjectInstance() => new UpdateTermsOfService();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateTermsOfService)tlobj;
            if (name.SequenceEqual(propName_terms_of_service_id))
            {
                obj.TermsOfServiceId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_terms_of_service))
            {
                obj.TermsOfService = reader.ReadTLObject<TermsOfService>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateUsersNearby")]
    partial class UpdateUsersNearbyConverter : TLObjectConverter<UpdateUsersNearby>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateUsersNearbyConverter();
        public override TLObject CreateObjectInstance() => new UpdateUsersNearby();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateUsersNearby)tlobj;
            if (name.SequenceEqual(propName_users_nearby))
            {
                obj.UsersNearby = reader.ReadObjectArray<ChatNearby>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateDiceEmojis")]
    partial class UpdateDiceEmojisConverter : TLObjectConverter<UpdateDiceEmojis>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateDiceEmojisConverter();
        public override TLObject CreateObjectInstance() => new UpdateDiceEmojis();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateDiceEmojis)tlobj;
            if (name.SequenceEqual(propName_emojis))
            {
                obj.Emojis = reader.ReadStringArray();
                return true;
            }
            return false;
        }
    }

    [TLType("updateAnimationSearchParameters")]
    partial class UpdateAnimationSearchParametersConverter : TLObjectConverter<UpdateAnimationSearchParameters>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateAnimationSearchParametersConverter();
        public override TLObject CreateObjectInstance() => new UpdateAnimationSearchParameters();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateAnimationSearchParameters)tlobj;
            if (name.SequenceEqual(propName_provider))
            {
                obj.Provider = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_emojis))
            {
                obj.Emojis = reader.ReadStringArray();
                return true;
            }
            return false;
        }
    }

    [TLType("updateSuggestedActions")]
    partial class UpdateSuggestedActionsConverter : TLObjectConverter<UpdateSuggestedActions>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateSuggestedActionsConverter();
        public override TLObject CreateObjectInstance() => new UpdateSuggestedActions();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateSuggestedActions)tlobj;
            if (name.SequenceEqual(propName_added_actions))
            {
                obj.AddedActions = reader.ReadObjectArray<SuggestedAction>();
                return true;
            }
            if (name.SequenceEqual(propName_removed_actions))
            {
                obj.RemovedActions = reader.ReadObjectArray<SuggestedAction>();
                return true;
            }
            return false;
        }
    }

    [TLType("updateNewInlineQuery")]
    partial class UpdateNewInlineQueryConverter : TLObjectConverter<UpdateNewInlineQuery>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewInlineQueryConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewInlineQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewInlineQuery)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x3FFD45EEu when name.SequenceEqual(propName_sender_user_id):
                    obj.SenderUserId = reader.ReadInt();
                    return true;
                case 0xA9E70BA0u when name.SequenceEqual(propName_user_location):
                    obj.UserLocation = reader.ReadTLObject<Location>();
                    return true;
                case 0xF8CE75E3u when name.SequenceEqual(propName_query):
                    obj.Query = reader.ReadString();
                    return true;
                case 0x14C8D3CAu when name.SequenceEqual(propName_offset):
                    obj.Offset = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateNewChosenInlineResult")]
    partial class UpdateNewChosenInlineResultConverter : TLObjectConverter<UpdateNewChosenInlineResult>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewChosenInlineResultConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewChosenInlineResult();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewChosenInlineResult)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x3FFD45EEu when name.SequenceEqual(propName_sender_user_id):
                    obj.SenderUserId = reader.ReadInt();
                    return true;
                case 0xA9E70BA0u when name.SequenceEqual(propName_user_location):
                    obj.UserLocation = reader.ReadTLObject<Location>();
                    return true;
                case 0xF8CE75E3u when name.SequenceEqual(propName_query):
                    obj.Query = reader.ReadString();
                    return true;
                case 0xB0FA30F4u when name.SequenceEqual(propName_result_id):
                    obj.ResultId = reader.ReadString();
                    return true;
                case 0xB60D9910u when name.SequenceEqual(propName_inline_message_id):
                    obj.InlineMessageId = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateNewCallbackQuery")]
    partial class UpdateNewCallbackQueryConverter : TLObjectConverter<UpdateNewCallbackQuery>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewCallbackQueryConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewCallbackQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewCallbackQuery)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x3FFD45EEu when name.SequenceEqual(propName_sender_user_id):
                    obj.SenderUserId = reader.ReadInt();
                    return true;
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0xFC89DB47u when name.SequenceEqual(propName_chat_instance):
                    obj.ChatInstance = reader.ReadInt64String();
                    return true;
                case 0x330F77A5u when name.SequenceEqual(propName_payload):
                    obj.Payload = reader.ReadTLObject<CallbackQueryPayload>();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateNewInlineCallbackQuery")]
    partial class UpdateNewInlineCallbackQueryConverter : TLObjectConverter<UpdateNewInlineCallbackQuery>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewInlineCallbackQueryConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewInlineCallbackQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewInlineCallbackQuery)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x3FFD45EEu when name.SequenceEqual(propName_sender_user_id):
                    obj.SenderUserId = reader.ReadInt();
                    return true;
                case 0xB60D9910u when name.SequenceEqual(propName_inline_message_id):
                    obj.InlineMessageId = reader.ReadString();
                    return true;
                case 0xFC89DB47u when name.SequenceEqual(propName_chat_instance):
                    obj.ChatInstance = reader.ReadInt64String();
                    return true;
                case 0x330F77A5u when name.SequenceEqual(propName_payload):
                    obj.Payload = reader.ReadTLObject<CallbackQueryPayload>();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateNewShippingQuery")]
    partial class UpdateNewShippingQueryConverter : TLObjectConverter<UpdateNewShippingQuery>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewShippingQueryConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewShippingQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewShippingQuery)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x3FFD45EEu when name.SequenceEqual(propName_sender_user_id):
                    obj.SenderUserId = reader.ReadInt();
                    return true;
                case 0x0EEA8A7Du when name.SequenceEqual(propName_invoice_payload):
                    obj.InvoicePayload = reader.ReadString();
                    return true;
                case 0x84FB8F74u when name.SequenceEqual(propName_shipping_address):
                    obj.ShippingAddress = reader.ReadTLObject<Address>();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateNewPreCheckoutQuery")]
    partial class UpdateNewPreCheckoutQueryConverter : TLObjectConverter<UpdateNewPreCheckoutQuery>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewPreCheckoutQueryConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewPreCheckoutQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewPreCheckoutQuery)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x37386AE0u when name.SequenceEqual(propName_id):
                    obj.Id = reader.ReadInt64String();
                    return true;
                case 0x3FFD45EEu when name.SequenceEqual(propName_sender_user_id):
                    obj.SenderUserId = reader.ReadInt();
                    return true;
                case 0xDDF28636u when name.SequenceEqual(propName_currency):
                    obj.Currency = reader.ReadString();
                    return true;
                case 0x6AC2139Au when name.SequenceEqual(propName_total_amount):
                    obj.TotalAmount = reader.ReadLong();
                    return true;
                case 0x0EEA8A7Du when name.SequenceEqual(propName_invoice_payload):
                    obj.InvoicePayload = reader.ReadBase64String();
                    return true;
                case 0x20399A5Bu when name.SequenceEqual(propName_shipping_option_id):
                    obj.ShippingOptionId = reader.ReadString();
                    return true;
                case 0xF60D2304u when name.SequenceEqual(propName_order_info):
                    obj.OrderInfo = reader.ReadTLObject<OrderInfo>();
                    return true;
            }
            return false;
        }
    }

    [TLType("updateNewCustomEvent")]
    partial class UpdateNewCustomEventConverter : TLObjectConverter<UpdateNewCustomEvent>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewCustomEventConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewCustomEvent();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewCustomEvent)tlobj;
            if (name.SequenceEqual(propName_event))
            {
                obj.Event = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("updateNewCustomQuery")]
    partial class UpdateNewCustomQueryConverter : TLObjectConverter<UpdateNewCustomQuery>
    {
        public static BaseConverter CreateConverterInstance() => new UpdateNewCustomQueryConverter();
        public override TLObject CreateObjectInstance() => new UpdateNewCustomQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdateNewCustomQuery)tlobj;
            if (name.SequenceEqual(propName_id))
            {
                obj.Id = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_timeout))
            {
                obj.Timeout = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("updatePoll")]
    partial class UpdatePollConverter : TLObjectConverter<UpdatePoll>
    {
        public static BaseConverter CreateConverterInstance() => new UpdatePollConverter();
        public override TLObject CreateObjectInstance() => new UpdatePoll();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdatePoll)tlobj;
            if (name.SequenceEqual(propName_poll))
            {
                obj.Poll = reader.ReadTLObject<Poll>();
                return true;
            }
            return false;
        }
    }

    [TLType("updatePollAnswer")]
    partial class UpdatePollAnswerConverter : TLObjectConverter<UpdatePollAnswer>
    {
        public static BaseConverter CreateConverterInstance() => new UpdatePollAnswerConverter();
        public override TLObject CreateObjectInstance() => new UpdatePollAnswer();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpdatePollAnswer)tlobj;
            if (name.SequenceEqual(propName_poll_id))
            {
                obj.PollId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_option_ids))
            {
                obj.OptionIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("updates")]
    partial class UpdatesConverter : TLObjectConverter<Updates>
    {
        public static BaseConverter CreateConverterInstance() => new UpdatesConverter();
        public override TLObject CreateObjectInstance() => new Updates();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (Updates)tlobj;
            if (name.SequenceEqual(propName_updates))
            {
                obj.Updates_ = reader.ReadObjectArray<Update>();
                return true;
            }
            return false;
        }
    }

    [TLType("logStreamDefault")]
    partial class LogStreamDefaultConverter : TLObjectConverter<LogStreamDefault>
    {
        public static BaseConverter CreateConverterInstance() => new LogStreamDefaultConverter();
        public override TLObject CreateObjectInstance() => new LogStreamDefault();
    }

    [TLType("logStreamFile")]
    partial class LogStreamFileConverter : TLObjectConverter<LogStreamFile>
    {
        public static BaseConverter CreateConverterInstance() => new LogStreamFileConverter();
        public override TLObject CreateObjectInstance() => new LogStreamFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LogStreamFile)tlobj;
            if (name.SequenceEqual(propName_path))
            {
                obj.Path = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_max_file_size))
            {
                obj.MaxFileSize = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_redirect_stderr))
            {
                obj.RedirectStderr = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("logStreamEmpty")]
    partial class LogStreamEmptyConverter : TLObjectConverter<LogStreamEmpty>
    {
        public static BaseConverter CreateConverterInstance() => new LogStreamEmptyConverter();
        public override TLObject CreateObjectInstance() => new LogStreamEmpty();
    }

    [TLType("logVerbosityLevel")]
    partial class LogVerbosityLevelConverter : TLObjectConverter<LogVerbosityLevel>
    {
        public static BaseConverter CreateConverterInstance() => new LogVerbosityLevelConverter();
        public override TLObject CreateObjectInstance() => new LogVerbosityLevel();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LogVerbosityLevel)tlobj;
            if (name.SequenceEqual(propName_verbosity_level))
            {
                obj.VerbosityLevel = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("logTags")]
    partial class LogTagsConverter : TLObjectConverter<LogTags>
    {
        public static BaseConverter CreateConverterInstance() => new LogTagsConverter();
        public override TLObject CreateObjectInstance() => new LogTags();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LogTags)tlobj;
            if (name.SequenceEqual(propName_tags))
            {
                obj.Tags = reader.ReadStringArray();
                return true;
            }
            return false;
        }
    }

    [TLType("testInt")]
    partial class TestIntConverter : TLObjectConverter<TestInt>
    {
        public static BaseConverter CreateConverterInstance() => new TestIntConverter();
        public override TLObject CreateObjectInstance() => new TestInt();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestInt)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("testString")]
    partial class TestStringConverter : TLObjectConverter<TestString>
    {
        public static BaseConverter CreateConverterInstance() => new TestStringConverter();
        public override TLObject CreateObjectInstance() => new TestString();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestString)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("testBytes")]
    partial class TestBytesConverter : TLObjectConverter<TestBytes>
    {
        public static BaseConverter CreateConverterInstance() => new TestBytesConverter();
        public override TLObject CreateObjectInstance() => new TestBytes();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestBytes)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("testVectorInt")]
    partial class TestVectorIntConverter : TLObjectConverter<TestVectorInt>
    {
        public static BaseConverter CreateConverterInstance() => new TestVectorIntConverter();
        public override TLObject CreateObjectInstance() => new TestVectorInt();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestVectorInt)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("testVectorIntObject")]
    partial class TestVectorIntObjectConverter : TLObjectConverter<TestVectorIntObject>
    {
        public static BaseConverter CreateConverterInstance() => new TestVectorIntObjectConverter();
        public override TLObject CreateObjectInstance() => new TestVectorIntObject();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestVectorIntObject)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadObjectArray<TestInt>();
                return true;
            }
            return false;
        }
    }

    [TLType("testVectorString")]
    partial class TestVectorStringConverter : TLObjectConverter<TestVectorString>
    {
        public static BaseConverter CreateConverterInstance() => new TestVectorStringConverter();
        public override TLObject CreateObjectInstance() => new TestVectorString();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestVectorString)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadStringArray();
                return true;
            }
            return false;
        }
    }

    [TLType("testVectorStringObject")]
    partial class TestVectorStringObjectConverter : TLObjectConverter<TestVectorStringObject>
    {
        public static BaseConverter CreateConverterInstance() => new TestVectorStringObjectConverter();
        public override TLObject CreateObjectInstance() => new TestVectorStringObject();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestVectorStringObject)tlobj;
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadObjectArray<TestString>();
                return true;
            }
            return false;
        }
    }

    [TLType("getAuthorizationState")]
    partial class GetAuthorizationStateConverter : TLObjectConverter<GetAuthorizationState>
    {
        public static BaseConverter CreateConverterInstance() => new GetAuthorizationStateConverter();
        public override TLObject CreateObjectInstance() => new GetAuthorizationState();
    }

    [TLType("setTdlibParameters")]
    partial class SetTdlibParametersConverter : TLObjectConverter<SetTdlibParameters>
    {
        public static BaseConverter CreateConverterInstance() => new SetTdlibParametersConverter();
        public override TLObject CreateObjectInstance() => new SetTdlibParameters();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetTdlibParameters)tlobj;
            if (name.SequenceEqual(propName_parameters))
            {
                obj.Parameters = reader.ReadTLObject<TdlibParameters>();
                return true;
            }
            return false;
        }
    }

    [TLType("checkDatabaseEncryptionKey")]
    partial class CheckDatabaseEncryptionKeyConverter : TLObjectConverter<CheckDatabaseEncryptionKey>
    {
        public static BaseConverter CreateConverterInstance() => new CheckDatabaseEncryptionKeyConverter();
        public override TLObject CreateObjectInstance() => new CheckDatabaseEncryptionKey();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckDatabaseEncryptionKey)tlobj;
            if (name.SequenceEqual(propName_encryption_key))
            {
                obj.EncryptionKey = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("setAuthenticationPhoneNumber")]
    partial class SetAuthenticationPhoneNumberConverter : TLObjectConverter<SetAuthenticationPhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new SetAuthenticationPhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new SetAuthenticationPhoneNumber();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetAuthenticationPhoneNumber)tlobj;
            if (name.SequenceEqual(propName_phone_number))
            {
                obj.PhoneNumber = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_settings))
            {
                obj.Settings = reader.ReadTLObject<PhoneNumberAuthenticationSettings>();
                return true;
            }
            return false;
        }
    }

    [TLType("resendAuthenticationCode")]
    partial class ResendAuthenticationCodeConverter : TLObjectConverter<ResendAuthenticationCode>
    {
        public static BaseConverter CreateConverterInstance() => new ResendAuthenticationCodeConverter();
        public override TLObject CreateObjectInstance() => new ResendAuthenticationCode();
    }

    [TLType("checkAuthenticationCode")]
    partial class CheckAuthenticationCodeConverter : TLObjectConverter<CheckAuthenticationCode>
    {
        public static BaseConverter CreateConverterInstance() => new CheckAuthenticationCodeConverter();
        public override TLObject CreateObjectInstance() => new CheckAuthenticationCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckAuthenticationCode)tlobj;
            if (name.SequenceEqual(propName_code))
            {
                obj.Code = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("requestQrCodeAuthentication")]
    partial class RequestQrCodeAuthenticationConverter : TLObjectConverter<RequestQrCodeAuthentication>
    {
        public static BaseConverter CreateConverterInstance() => new RequestQrCodeAuthenticationConverter();
        public override TLObject CreateObjectInstance() => new RequestQrCodeAuthentication();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RequestQrCodeAuthentication)tlobj;
            if (name.SequenceEqual(propName_other_user_ids))
            {
                obj.OtherUserIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("registerUser")]
    partial class RegisterUserConverter : TLObjectConverter<RegisterUser>
    {
        public static BaseConverter CreateConverterInstance() => new RegisterUserConverter();
        public override TLObject CreateObjectInstance() => new RegisterUser();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RegisterUser)tlobj;
            if (name.SequenceEqual(propName_first_name))
            {
                obj.FirstName = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_last_name))
            {
                obj.LastName = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("checkAuthenticationPassword")]
    partial class CheckAuthenticationPasswordConverter : TLObjectConverter<CheckAuthenticationPassword>
    {
        public static BaseConverter CreateConverterInstance() => new CheckAuthenticationPasswordConverter();
        public override TLObject CreateObjectInstance() => new CheckAuthenticationPassword();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckAuthenticationPassword)tlobj;
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("requestAuthenticationPasswordRecovery")]
    partial class RequestAuthenticationPasswordRecoveryConverter : TLObjectConverter<RequestAuthenticationPasswordRecovery>
    {
        public static BaseConverter CreateConverterInstance() => new RequestAuthenticationPasswordRecoveryConverter();
        public override TLObject CreateObjectInstance() => new RequestAuthenticationPasswordRecovery();
    }

    [TLType("recoverAuthenticationPassword")]
    partial class RecoverAuthenticationPasswordConverter : TLObjectConverter<RecoverAuthenticationPassword>
    {
        public static BaseConverter CreateConverterInstance() => new RecoverAuthenticationPasswordConverter();
        public override TLObject CreateObjectInstance() => new RecoverAuthenticationPassword();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RecoverAuthenticationPassword)tlobj;
            if (name.SequenceEqual(propName_recovery_code))
            {
                obj.RecoveryCode = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("checkAuthenticationBotToken")]
    partial class CheckAuthenticationBotTokenConverter : TLObjectConverter<CheckAuthenticationBotToken>
    {
        public static BaseConverter CreateConverterInstance() => new CheckAuthenticationBotTokenConverter();
        public override TLObject CreateObjectInstance() => new CheckAuthenticationBotToken();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckAuthenticationBotToken)tlobj;
            if (name.SequenceEqual(propName_token))
            {
                obj.Token = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("logOut")]
    partial class LogOutConverter : TLObjectConverter<LogOut>
    {
        public static BaseConverter CreateConverterInstance() => new LogOutConverter();
        public override TLObject CreateObjectInstance() => new LogOut();
    }

    [TLType("close")]
    partial class CloseConverter : TLObjectConverter<Close>
    {
        public static BaseConverter CreateConverterInstance() => new CloseConverter();
        public override TLObject CreateObjectInstance() => new Close();
    }

    [TLType("destroy")]
    partial class DestroyConverter : TLObjectConverter<Destroy>
    {
        public static BaseConverter CreateConverterInstance() => new DestroyConverter();
        public override TLObject CreateObjectInstance() => new Destroy();
    }

    [TLType("confirmQrCodeAuthentication")]
    partial class ConfirmQrCodeAuthenticationConverter : TLObjectConverter<ConfirmQrCodeAuthentication>
    {
        public static BaseConverter CreateConverterInstance() => new ConfirmQrCodeAuthenticationConverter();
        public override TLObject CreateObjectInstance() => new ConfirmQrCodeAuthentication();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ConfirmQrCodeAuthentication)tlobj;
            if (name.SequenceEqual(propName_link))
            {
                obj.Link = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getCurrentState")]
    partial class GetCurrentStateConverter : TLObjectConverter<GetCurrentState>
    {
        public static BaseConverter CreateConverterInstance() => new GetCurrentStateConverter();
        public override TLObject CreateObjectInstance() => new GetCurrentState();
    }

    [TLType("setDatabaseEncryptionKey")]
    partial class SetDatabaseEncryptionKeyConverter : TLObjectConverter<SetDatabaseEncryptionKey>
    {
        public static BaseConverter CreateConverterInstance() => new SetDatabaseEncryptionKeyConverter();
        public override TLObject CreateObjectInstance() => new SetDatabaseEncryptionKey();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetDatabaseEncryptionKey)tlobj;
            if (name.SequenceEqual(propName_new_encryption_key))
            {
                obj.NewEncryptionKey = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("getPasswordState")]
    partial class GetPasswordStateConverter : TLObjectConverter<GetPasswordState>
    {
        public static BaseConverter CreateConverterInstance() => new GetPasswordStateConverter();
        public override TLObject CreateObjectInstance() => new GetPasswordState();
    }

    [TLType("setPassword")]
    partial class SetPasswordConverter : TLObjectConverter<SetPassword>
    {
        public static BaseConverter CreateConverterInstance() => new SetPasswordConverter();
        public override TLObject CreateObjectInstance() => new SetPassword();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetPassword)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5810B10Au when name.SequenceEqual(propName_old_password):
                    obj.OldPassword = reader.ReadString();
                    return true;
                case 0x09748147u when name.SequenceEqual(propName_new_password):
                    obj.NewPassword = reader.ReadString();
                    return true;
                case 0xA47BA567u when name.SequenceEqual(propName_new_hint):
                    obj.NewHint = reader.ReadString();
                    return true;
                case 0x29D5E02Fu when name.SequenceEqual(propName_set_recovery_email_address):
                    obj.SetRecoveryEmailAddress = reader.ReadBool();
                    return true;
                case 0xF139975Du when name.SequenceEqual(propName_new_recovery_email_address):
                    obj.NewRecoveryEmailAddress = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("getRecoveryEmailAddress")]
    partial class GetRecoveryEmailAddressConverter : TLObjectConverter<GetRecoveryEmailAddress>
    {
        public static BaseConverter CreateConverterInstance() => new GetRecoveryEmailAddressConverter();
        public override TLObject CreateObjectInstance() => new GetRecoveryEmailAddress();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetRecoveryEmailAddress)tlobj;
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setRecoveryEmailAddress")]
    partial class SetRecoveryEmailAddressConverter : TLObjectConverter<SetRecoveryEmailAddress>
    {
        public static BaseConverter CreateConverterInstance() => new SetRecoveryEmailAddressConverter();
        public override TLObject CreateObjectInstance() => new SetRecoveryEmailAddress();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetRecoveryEmailAddress)tlobj;
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_new_recovery_email_address))
            {
                obj.NewRecoveryEmailAddress = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("checkRecoveryEmailAddressCode")]
    partial class CheckRecoveryEmailAddressCodeConverter : TLObjectConverter<CheckRecoveryEmailAddressCode>
    {
        public static BaseConverter CreateConverterInstance() => new CheckRecoveryEmailAddressCodeConverter();
        public override TLObject CreateObjectInstance() => new CheckRecoveryEmailAddressCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckRecoveryEmailAddressCode)tlobj;
            if (name.SequenceEqual(propName_code))
            {
                obj.Code = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("resendRecoveryEmailAddressCode")]
    partial class ResendRecoveryEmailAddressCodeConverter : TLObjectConverter<ResendRecoveryEmailAddressCode>
    {
        public static BaseConverter CreateConverterInstance() => new ResendRecoveryEmailAddressCodeConverter();
        public override TLObject CreateObjectInstance() => new ResendRecoveryEmailAddressCode();
    }

    [TLType("requestPasswordRecovery")]
    partial class RequestPasswordRecoveryConverter : TLObjectConverter<RequestPasswordRecovery>
    {
        public static BaseConverter CreateConverterInstance() => new RequestPasswordRecoveryConverter();
        public override TLObject CreateObjectInstance() => new RequestPasswordRecovery();
    }

    [TLType("recoverPassword")]
    partial class RecoverPasswordConverter : TLObjectConverter<RecoverPassword>
    {
        public static BaseConverter CreateConverterInstance() => new RecoverPasswordConverter();
        public override TLObject CreateObjectInstance() => new RecoverPassword();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RecoverPassword)tlobj;
            if (name.SequenceEqual(propName_recovery_code))
            {
                obj.RecoveryCode = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("createTemporaryPassword")]
    partial class CreateTemporaryPasswordConverter : TLObjectConverter<CreateTemporaryPassword>
    {
        public static BaseConverter CreateConverterInstance() => new CreateTemporaryPasswordConverter();
        public override TLObject CreateObjectInstance() => new CreateTemporaryPassword();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreateTemporaryPassword)tlobj;
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_valid_for))
            {
                obj.ValidFor = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getTemporaryPasswordState")]
    partial class GetTemporaryPasswordStateConverter : TLObjectConverter<GetTemporaryPasswordState>
    {
        public static BaseConverter CreateConverterInstance() => new GetTemporaryPasswordStateConverter();
        public override TLObject CreateObjectInstance() => new GetTemporaryPasswordState();
    }

    [TLType("getMe")]
    partial class GetMeConverter : TLObjectConverter<GetMe>
    {
        public static BaseConverter CreateConverterInstance() => new GetMeConverter();
        public override TLObject CreateObjectInstance() => new GetMe();
    }

    [TLType("getUser")]
    partial class GetUserConverter : TLObjectConverter<GetUser>
    {
        public static BaseConverter CreateConverterInstance() => new GetUserConverter();
        public override TLObject CreateObjectInstance() => new GetUser();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetUser)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getUserFullInfo")]
    partial class GetUserFullInfoConverter : TLObjectConverter<GetUserFullInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetUserFullInfoConverter();
        public override TLObject CreateObjectInstance() => new GetUserFullInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetUserFullInfo)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getBasicGroup")]
    partial class GetBasicGroupConverter : TLObjectConverter<GetBasicGroup>
    {
        public static BaseConverter CreateConverterInstance() => new GetBasicGroupConverter();
        public override TLObject CreateObjectInstance() => new GetBasicGroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetBasicGroup)tlobj;
            if (name.SequenceEqual(propName_basic_group_id))
            {
                obj.BasicGroupId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getBasicGroupFullInfo")]
    partial class GetBasicGroupFullInfoConverter : TLObjectConverter<GetBasicGroupFullInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetBasicGroupFullInfoConverter();
        public override TLObject CreateObjectInstance() => new GetBasicGroupFullInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetBasicGroupFullInfo)tlobj;
            if (name.SequenceEqual(propName_basic_group_id))
            {
                obj.BasicGroupId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getSupergroup")]
    partial class GetSupergroupConverter : TLObjectConverter<GetSupergroup>
    {
        public static BaseConverter CreateConverterInstance() => new GetSupergroupConverter();
        public override TLObject CreateObjectInstance() => new GetSupergroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetSupergroup)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getSupergroupFullInfo")]
    partial class GetSupergroupFullInfoConverter : TLObjectConverter<GetSupergroupFullInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetSupergroupFullInfoConverter();
        public override TLObject CreateObjectInstance() => new GetSupergroupFullInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetSupergroupFullInfo)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getSecretChat")]
    partial class GetSecretChatConverter : TLObjectConverter<GetSecretChat>
    {
        public static BaseConverter CreateConverterInstance() => new GetSecretChatConverter();
        public override TLObject CreateObjectInstance() => new GetSecretChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetSecretChat)tlobj;
            if (name.SequenceEqual(propName_secret_chat_id))
            {
                obj.SecretChatId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getChat")]
    partial class GetChatConverter : TLObjectConverter<GetChat>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatConverter();
        public override TLObject CreateObjectInstance() => new GetChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChat)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("getMessage")]
    partial class GetMessageConverter : TLObjectConverter<GetMessage>
    {
        public static BaseConverter CreateConverterInstance() => new GetMessageConverter();
        public override TLObject CreateObjectInstance() => new GetMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMessage)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("getMessageLocally")]
    partial class GetMessageLocallyConverter : TLObjectConverter<GetMessageLocally>
    {
        public static BaseConverter CreateConverterInstance() => new GetMessageLocallyConverter();
        public override TLObject CreateObjectInstance() => new GetMessageLocally();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMessageLocally)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("getRepliedMessage")]
    partial class GetRepliedMessageConverter : TLObjectConverter<GetRepliedMessage>
    {
        public static BaseConverter CreateConverterInstance() => new GetRepliedMessageConverter();
        public override TLObject CreateObjectInstance() => new GetRepliedMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetRepliedMessage)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatPinnedMessage")]
    partial class GetChatPinnedMessageConverter : TLObjectConverter<GetChatPinnedMessage>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatPinnedMessageConverter();
        public override TLObject CreateObjectInstance() => new GetChatPinnedMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatPinnedMessage)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("getMessages")]
    partial class GetMessagesConverter : TLObjectConverter<GetMessages>
    {
        public static BaseConverter CreateConverterInstance() => new GetMessagesConverter();
        public override TLObject CreateObjectInstance() => new GetMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMessages)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_ids))
            {
                obj.MessageIds = reader.ReadInt53Array();
                return true;
            }
            return false;
        }
    }

    [TLType("getMessageThread")]
    partial class GetMessageThreadConverter : TLObjectConverter<GetMessageThread>
    {
        public static BaseConverter CreateConverterInstance() => new GetMessageThreadConverter();
        public override TLObject CreateObjectInstance() => new GetMessageThread();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMessageThread)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("getFile")]
    partial class GetFileConverter : TLObjectConverter<GetFile>
    {
        public static BaseConverter CreateConverterInstance() => new GetFileConverter();
        public override TLObject CreateObjectInstance() => new GetFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetFile)tlobj;
            if (name.SequenceEqual(propName_file_id))
            {
                obj.FileId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getRemoteFile")]
    partial class GetRemoteFileConverter : TLObjectConverter<GetRemoteFile>
    {
        public static BaseConverter CreateConverterInstance() => new GetRemoteFileConverter();
        public override TLObject CreateObjectInstance() => new GetRemoteFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetRemoteFile)tlobj;
            if (name.SequenceEqual(propName_remote_file_id))
            {
                obj.RemoteFileId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_file_type))
            {
                obj.FileType = reader.ReadTLObject<FileType>();
                return true;
            }
            return false;
        }
    }

    [TLType("getChats")]
    partial class GetChatsConverter : TLObjectConverter<GetChats>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatsConverter();
        public override TLObject CreateObjectInstance() => new GetChats();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChats)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xE24898C4u when name.SequenceEqual(propName_chat_list):
                    obj.ChatList = reader.ReadTLObject<ChatList>();
                    return true;
                case 0x85783281u when name.SequenceEqual(propName_offset_order):
                    obj.OffsetOrder = reader.ReadInt64String();
                    return true;
                case 0x1C9D2887u when name.SequenceEqual(propName_offset_chat_id):
                    obj.OffsetChatId = reader.ReadLong();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("searchPublicChat")]
    partial class SearchPublicChatConverter : TLObjectConverter<SearchPublicChat>
    {
        public static BaseConverter CreateConverterInstance() => new SearchPublicChatConverter();
        public override TLObject CreateObjectInstance() => new SearchPublicChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchPublicChat)tlobj;
            if (name.SequenceEqual(propName_username))
            {
                obj.Username = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("searchPublicChats")]
    partial class SearchPublicChatsConverter : TLObjectConverter<SearchPublicChats>
    {
        public static BaseConverter CreateConverterInstance() => new SearchPublicChatsConverter();
        public override TLObject CreateObjectInstance() => new SearchPublicChats();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchPublicChats)tlobj;
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("searchChats")]
    partial class SearchChatsConverter : TLObjectConverter<SearchChats>
    {
        public static BaseConverter CreateConverterInstance() => new SearchChatsConverter();
        public override TLObject CreateObjectInstance() => new SearchChats();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchChats)tlobj;
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("searchChatsOnServer")]
    partial class SearchChatsOnServerConverter : TLObjectConverter<SearchChatsOnServer>
    {
        public static BaseConverter CreateConverterInstance() => new SearchChatsOnServerConverter();
        public override TLObject CreateObjectInstance() => new SearchChatsOnServer();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchChatsOnServer)tlobj;
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("searchChatsNearby")]
    partial class SearchChatsNearbyConverter : TLObjectConverter<SearchChatsNearby>
    {
        public static BaseConverter CreateConverterInstance() => new SearchChatsNearbyConverter();
        public override TLObject CreateObjectInstance() => new SearchChatsNearby();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchChatsNearby)tlobj;
            if (name.SequenceEqual(propName_location))
            {
                obj.Location = reader.ReadTLObject<Location>();
                return true;
            }
            return false;
        }
    }

    [TLType("getTopChats")]
    partial class GetTopChatsConverter : TLObjectConverter<GetTopChats>
    {
        public static BaseConverter CreateConverterInstance() => new GetTopChatsConverter();
        public override TLObject CreateObjectInstance() => new GetTopChats();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetTopChats)tlobj;
            if (name.SequenceEqual(propName_category))
            {
                obj.Category = reader.ReadTLObject<TopChatCategory>();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("removeTopChat")]
    partial class RemoveTopChatConverter : TLObjectConverter<RemoveTopChat>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveTopChatConverter();
        public override TLObject CreateObjectInstance() => new RemoveTopChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveTopChat)tlobj;
            if (name.SequenceEqual(propName_category))
            {
                obj.Category = reader.ReadTLObject<TopChatCategory>();
                return true;
            }
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("addRecentlyFoundChat")]
    partial class AddRecentlyFoundChatConverter : TLObjectConverter<AddRecentlyFoundChat>
    {
        public static BaseConverter CreateConverterInstance() => new AddRecentlyFoundChatConverter();
        public override TLObject CreateObjectInstance() => new AddRecentlyFoundChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddRecentlyFoundChat)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("removeRecentlyFoundChat")]
    partial class RemoveRecentlyFoundChatConverter : TLObjectConverter<RemoveRecentlyFoundChat>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveRecentlyFoundChatConverter();
        public override TLObject CreateObjectInstance() => new RemoveRecentlyFoundChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveRecentlyFoundChat)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("clearRecentlyFoundChats")]
    partial class ClearRecentlyFoundChatsConverter : TLObjectConverter<ClearRecentlyFoundChats>
    {
        public static BaseConverter CreateConverterInstance() => new ClearRecentlyFoundChatsConverter();
        public override TLObject CreateObjectInstance() => new ClearRecentlyFoundChats();
    }

    [TLType("checkChatUsername")]
    partial class CheckChatUsernameConverter : TLObjectConverter<CheckChatUsername>
    {
        public static BaseConverter CreateConverterInstance() => new CheckChatUsernameConverter();
        public override TLObject CreateObjectInstance() => new CheckChatUsername();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckChatUsername)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_username))
            {
                obj.Username = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getCreatedPublicChats")]
    partial class GetCreatedPublicChatsConverter : TLObjectConverter<GetCreatedPublicChats>
    {
        public static BaseConverter CreateConverterInstance() => new GetCreatedPublicChatsConverter();
        public override TLObject CreateObjectInstance() => new GetCreatedPublicChats();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetCreatedPublicChats)tlobj;
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<PublicChatType>();
                return true;
            }
            return false;
        }
    }

    [TLType("checkCreatedPublicChatsLimit")]
    partial class CheckCreatedPublicChatsLimitConverter : TLObjectConverter<CheckCreatedPublicChatsLimit>
    {
        public static BaseConverter CreateConverterInstance() => new CheckCreatedPublicChatsLimitConverter();
        public override TLObject CreateObjectInstance() => new CheckCreatedPublicChatsLimit();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckCreatedPublicChatsLimit)tlobj;
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<PublicChatType>();
                return true;
            }
            return false;
        }
    }

    [TLType("getSuitableDiscussionChats")]
    partial class GetSuitableDiscussionChatsConverter : TLObjectConverter<GetSuitableDiscussionChats>
    {
        public static BaseConverter CreateConverterInstance() => new GetSuitableDiscussionChatsConverter();
        public override TLObject CreateObjectInstance() => new GetSuitableDiscussionChats();
    }

    [TLType("getInactiveSupergroupChats")]
    partial class GetInactiveSupergroupChatsConverter : TLObjectConverter<GetInactiveSupergroupChats>
    {
        public static BaseConverter CreateConverterInstance() => new GetInactiveSupergroupChatsConverter();
        public override TLObject CreateObjectInstance() => new GetInactiveSupergroupChats();
    }

    [TLType("getGroupsInCommon")]
    partial class GetGroupsInCommonConverter : TLObjectConverter<GetGroupsInCommon>
    {
        public static BaseConverter CreateConverterInstance() => new GetGroupsInCommonConverter();
        public override TLObject CreateObjectInstance() => new GetGroupsInCommon();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetGroupsInCommon)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_offset_chat_id))
            {
                obj.OffsetChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatHistory")]
    partial class GetChatHistoryConverter : TLObjectConverter<GetChatHistory>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatHistoryConverter();
        public override TLObject CreateObjectInstance() => new GetChatHistory();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatHistory)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x00CB8E7Bu when name.SequenceEqual(propName_from_message_id):
                    obj.FromMessageId = reader.ReadLong();
                    return true;
                case 0x14C8D3CAu when name.SequenceEqual(propName_offset):
                    obj.Offset = reader.ReadInt();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
                case 0xC204D933u when name.SequenceEqual(propName_only_local):
                    obj.OnlyLocal = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("getMessageThreadHistory")]
    partial class GetMessageThreadHistoryConverter : TLObjectConverter<GetMessageThreadHistory>
    {
        public static BaseConverter CreateConverterInstance() => new GetMessageThreadHistoryConverter();
        public override TLObject CreateObjectInstance() => new GetMessageThreadHistory();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMessageThreadHistory)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x00CB8E7Bu when name.SequenceEqual(propName_from_message_id):
                    obj.FromMessageId = reader.ReadLong();
                    return true;
                case 0x14C8D3CAu when name.SequenceEqual(propName_offset):
                    obj.Offset = reader.ReadInt();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("deleteChatHistory")]
    partial class DeleteChatHistoryConverter : TLObjectConverter<DeleteChatHistory>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteChatHistoryConverter();
        public override TLObject CreateObjectInstance() => new DeleteChatHistory();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeleteChatHistory)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_remove_from_chat_list))
            {
                obj.RemoveFromChatList = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_revoke))
            {
                obj.Revoke = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("searchChatMessages")]
    partial class SearchChatMessagesConverter : TLObjectConverter<SearchChatMessages>
    {
        public static BaseConverter CreateConverterInstance() => new SearchChatMessagesConverter();
        public override TLObject CreateObjectInstance() => new SearchChatMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchChatMessages)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xF8CE75E3u when name.SequenceEqual(propName_query):
                    obj.Query = reader.ReadString();
                    return true;
                case 0x3FFD45EEu when name.SequenceEqual(propName_sender_user_id):
                    obj.SenderUserId = reader.ReadInt();
                    return true;
                case 0x00CB8E7Bu when name.SequenceEqual(propName_from_message_id):
                    obj.FromMessageId = reader.ReadLong();
                    return true;
                case 0x14C8D3CAu when name.SequenceEqual(propName_offset):
                    obj.Offset = reader.ReadInt();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
                case 0xC7E16877u when name.SequenceEqual(propName_filter):
                    obj.Filter = reader.ReadTLObject<SearchMessagesFilter>();
                    return true;
                case 0xCF8E5A53u when name.SequenceEqual(propName_message_thread_id):
                    obj.MessageThreadId = reader.ReadLong();
                    return true;
            }
            return false;
        }
    }

    [TLType("searchMessages")]
    partial class SearchMessagesConverter : TLObjectConverter<SearchMessages>
    {
        public static BaseConverter CreateConverterInstance() => new SearchMessagesConverter();
        public override TLObject CreateObjectInstance() => new SearchMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchMessages)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xE24898C4u when name.SequenceEqual(propName_chat_list):
                    obj.ChatList = reader.ReadTLObject<ChatList>();
                    return true;
                case 0xF8CE75E3u when name.SequenceEqual(propName_query):
                    obj.Query = reader.ReadString();
                    return true;
                case 0x9B895ACBu when name.SequenceEqual(propName_offset_date):
                    obj.OffsetDate = reader.ReadInt();
                    return true;
                case 0x1C9D2887u when name.SequenceEqual(propName_offset_chat_id):
                    obj.OffsetChatId = reader.ReadLong();
                    return true;
                case 0x87DB836Eu when name.SequenceEqual(propName_offset_message_id):
                    obj.OffsetMessageId = reader.ReadLong();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
                case 0xC7E16877u when name.SequenceEqual(propName_filter):
                    obj.Filter = reader.ReadTLObject<SearchMessagesFilter>();
                    return true;
                case 0x945269CCu when name.SequenceEqual(propName_min_date):
                    obj.MinDate = reader.ReadInt();
                    return true;
                case 0xD6939896u when name.SequenceEqual(propName_max_date):
                    obj.MaxDate = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("searchSecretMessages")]
    partial class SearchSecretMessagesConverter : TLObjectConverter<SearchSecretMessages>
    {
        public static BaseConverter CreateConverterInstance() => new SearchSecretMessagesConverter();
        public override TLObject CreateObjectInstance() => new SearchSecretMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchSecretMessages)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xF8CE75E3u when name.SequenceEqual(propName_query):
                    obj.Query = reader.ReadString();
                    return true;
                case 0x14C8D3CAu when name.SequenceEqual(propName_offset):
                    obj.Offset = reader.ReadString();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
                case 0xC7E16877u when name.SequenceEqual(propName_filter):
                    obj.Filter = reader.ReadTLObject<SearchMessagesFilter>();
                    return true;
            }
            return false;
        }
    }

    [TLType("searchCallMessages")]
    partial class SearchCallMessagesConverter : TLObjectConverter<SearchCallMessages>
    {
        public static BaseConverter CreateConverterInstance() => new SearchCallMessagesConverter();
        public override TLObject CreateObjectInstance() => new SearchCallMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchCallMessages)tlobj;
            if (name.SequenceEqual(propName_from_message_id))
            {
                obj.FromMessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_only_missed))
            {
                obj.OnlyMissed = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("searchChatRecentLocationMessages")]
    partial class SearchChatRecentLocationMessagesConverter : TLObjectConverter<SearchChatRecentLocationMessages>
    {
        public static BaseConverter CreateConverterInstance() => new SearchChatRecentLocationMessagesConverter();
        public override TLObject CreateObjectInstance() => new SearchChatRecentLocationMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchChatRecentLocationMessages)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getActiveLiveLocationMessages")]
    partial class GetActiveLiveLocationMessagesConverter : TLObjectConverter<GetActiveLiveLocationMessages>
    {
        public static BaseConverter CreateConverterInstance() => new GetActiveLiveLocationMessagesConverter();
        public override TLObject CreateObjectInstance() => new GetActiveLiveLocationMessages();
    }

    [TLType("getChatMessageByDate")]
    partial class GetChatMessageByDateConverter : TLObjectConverter<GetChatMessageByDate>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatMessageByDateConverter();
        public override TLObject CreateObjectInstance() => new GetChatMessageByDate();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatMessageByDate)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_date))
            {
                obj.Date = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatMessageCount")]
    partial class GetChatMessageCountConverter : TLObjectConverter<GetChatMessageCount>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatMessageCountConverter();
        public override TLObject CreateObjectInstance() => new GetChatMessageCount();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatMessageCount)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_filter))
            {
                obj.Filter = reader.ReadTLObject<SearchMessagesFilter>();
                return true;
            }
            if (name.SequenceEqual(propName_return_local))
            {
                obj.ReturnLocal = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatScheduledMessages")]
    partial class GetChatScheduledMessagesConverter : TLObjectConverter<GetChatScheduledMessages>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatScheduledMessagesConverter();
        public override TLObject CreateObjectInstance() => new GetChatScheduledMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatScheduledMessages)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("getMessagePublicForwards")]
    partial class GetMessagePublicForwardsConverter : TLObjectConverter<GetMessagePublicForwards>
    {
        public static BaseConverter CreateConverterInstance() => new GetMessagePublicForwardsConverter();
        public override TLObject CreateObjectInstance() => new GetMessagePublicForwards();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMessagePublicForwards)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x14C8D3CAu when name.SequenceEqual(propName_offset):
                    obj.Offset = reader.ReadString();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("removeNotification")]
    partial class RemoveNotificationConverter : TLObjectConverter<RemoveNotification>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveNotificationConverter();
        public override TLObject CreateObjectInstance() => new RemoveNotification();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveNotification)tlobj;
            if (name.SequenceEqual(propName_notification_group_id))
            {
                obj.NotificationGroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_notification_id))
            {
                obj.NotificationId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("removeNotificationGroup")]
    partial class RemoveNotificationGroupConverter : TLObjectConverter<RemoveNotificationGroup>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveNotificationGroupConverter();
        public override TLObject CreateObjectInstance() => new RemoveNotificationGroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveNotificationGroup)tlobj;
            if (name.SequenceEqual(propName_notification_group_id))
            {
                obj.NotificationGroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_max_notification_id))
            {
                obj.MaxNotificationId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getMessageLink")]
    partial class GetMessageLinkConverter : TLObjectConverter<GetMessageLink>
    {
        public static BaseConverter CreateConverterInstance() => new GetMessageLinkConverter();
        public override TLObject CreateObjectInstance() => new GetMessageLink();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMessageLink)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x84014C14u when name.SequenceEqual(propName_for_album):
                    obj.ForAlbum = reader.ReadBool();
                    return true;
                case 0x981B4866u when name.SequenceEqual(propName_for_comment):
                    obj.ForComment = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("getMessageEmbeddingCode")]
    partial class GetMessageEmbeddingCodeConverter : TLObjectConverter<GetMessageEmbeddingCode>
    {
        public static BaseConverter CreateConverterInstance() => new GetMessageEmbeddingCodeConverter();
        public override TLObject CreateObjectInstance() => new GetMessageEmbeddingCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMessageEmbeddingCode)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_for_album))
            {
                obj.ForAlbum = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getMessageLinkInfo")]
    partial class GetMessageLinkInfoConverter : TLObjectConverter<GetMessageLinkInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetMessageLinkInfoConverter();
        public override TLObject CreateObjectInstance() => new GetMessageLinkInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMessageLinkInfo)tlobj;
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("sendMessage")]
    partial class SendMessageConverter : TLObjectConverter<SendMessage>
    {
        public static BaseConverter CreateConverterInstance() => new SendMessageConverter();
        public override TLObject CreateObjectInstance() => new SendMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendMessage)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xCF8E5A53u when name.SequenceEqual(propName_message_thread_id):
                    obj.MessageThreadId = reader.ReadLong();
                    return true;
                case 0x7E9ECDF7u when name.SequenceEqual(propName_reply_to_message_id):
                    obj.ReplyToMessageId = reader.ReadLong();
                    return true;
                case 0xEF286CA5u when name.SequenceEqual(propName_options):
                    obj.Options = reader.ReadTLObject<MessageSendOptions>();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("sendMessageAlbum")]
    partial class SendMessageAlbumConverter : TLObjectConverter<SendMessageAlbum>
    {
        public static BaseConverter CreateConverterInstance() => new SendMessageAlbumConverter();
        public override TLObject CreateObjectInstance() => new SendMessageAlbum();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendMessageAlbum)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xCF8E5A53u when name.SequenceEqual(propName_message_thread_id):
                    obj.MessageThreadId = reader.ReadLong();
                    return true;
                case 0x7E9ECDF7u when name.SequenceEqual(propName_reply_to_message_id):
                    obj.ReplyToMessageId = reader.ReadLong();
                    return true;
                case 0xEF286CA5u when name.SequenceEqual(propName_options):
                    obj.Options = reader.ReadTLObject<MessageSendOptions>();
                    return true;
                case 0xB550DCAEu when name.SequenceEqual(propName_input_message_contents):
                    obj.InputMessageContents = reader.ReadObjectArray<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("sendBotStartMessage")]
    partial class SendBotStartMessageConverter : TLObjectConverter<SendBotStartMessage>
    {
        public static BaseConverter CreateConverterInstance() => new SendBotStartMessageConverter();
        public override TLObject CreateObjectInstance() => new SendBotStartMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendBotStartMessage)tlobj;
            if (name.SequenceEqual(propName_bot_user_id))
            {
                obj.BotUserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_parameter))
            {
                obj.Parameter = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("sendInlineQueryResultMessage")]
    partial class SendInlineQueryResultMessageConverter : TLObjectConverter<SendInlineQueryResultMessage>
    {
        public static BaseConverter CreateConverterInstance() => new SendInlineQueryResultMessageConverter();
        public override TLObject CreateObjectInstance() => new SendInlineQueryResultMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendInlineQueryResultMessage)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xCF8E5A53u when name.SequenceEqual(propName_message_thread_id):
                    obj.MessageThreadId = reader.ReadLong();
                    return true;
                case 0x7E9ECDF7u when name.SequenceEqual(propName_reply_to_message_id):
                    obj.ReplyToMessageId = reader.ReadLong();
                    return true;
                case 0xEF286CA5u when name.SequenceEqual(propName_options):
                    obj.Options = reader.ReadTLObject<MessageSendOptions>();
                    return true;
                case 0xC0DF8479u when name.SequenceEqual(propName_query_id):
                    obj.QueryId = reader.ReadInt64String();
                    return true;
                case 0xB0FA30F4u when name.SequenceEqual(propName_result_id):
                    obj.ResultId = reader.ReadString();
                    return true;
                case 0xE58B44F0u when name.SequenceEqual(propName_hide_via_bot):
                    obj.HideViaBot = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("forwardMessages")]
    partial class ForwardMessagesConverter : TLObjectConverter<ForwardMessages>
    {
        public static BaseConverter CreateConverterInstance() => new ForwardMessagesConverter();
        public override TLObject CreateObjectInstance() => new ForwardMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ForwardMessages)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xCBEE0078u when name.SequenceEqual(propName_from_chat_id):
                    obj.FromChatId = reader.ReadLong();
                    return true;
                case 0x02203345u when name.SequenceEqual(propName_message_ids):
                    obj.MessageIds = reader.ReadInt53Array();
                    return true;
                case 0xEF286CA5u when name.SequenceEqual(propName_options):
                    obj.Options = reader.ReadTLObject<MessageSendOptions>();
                    return true;
                case 0x9DC2C16Du when name.SequenceEqual(propName_send_copy):
                    obj.SendCopy = reader.ReadBool();
                    return true;
                case 0xA965AE00u when name.SequenceEqual(propName_remove_caption):
                    obj.RemoveCaption = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("resendMessages")]
    partial class ResendMessagesConverter : TLObjectConverter<ResendMessages>
    {
        public static BaseConverter CreateConverterInstance() => new ResendMessagesConverter();
        public override TLObject CreateObjectInstance() => new ResendMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ResendMessages)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_ids))
            {
                obj.MessageIds = reader.ReadInt53Array();
                return true;
            }
            return false;
        }
    }

    [TLType("sendChatSetTtlMessage")]
    partial class SendChatSetTtlMessageConverter : TLObjectConverter<SendChatSetTtlMessage>
    {
        public static BaseConverter CreateConverterInstance() => new SendChatSetTtlMessageConverter();
        public override TLObject CreateObjectInstance() => new SendChatSetTtlMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendChatSetTtlMessage)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_ttl))
            {
                obj.Ttl = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("sendChatScreenshotTakenNotification")]
    partial class SendChatScreenshotTakenNotificationConverter : TLObjectConverter<SendChatScreenshotTakenNotification>
    {
        public static BaseConverter CreateConverterInstance() => new SendChatScreenshotTakenNotificationConverter();
        public override TLObject CreateObjectInstance() => new SendChatScreenshotTakenNotification();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendChatScreenshotTakenNotification)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("addLocalMessage")]
    partial class AddLocalMessageConverter : TLObjectConverter<AddLocalMessage>
    {
        public static BaseConverter CreateConverterInstance() => new AddLocalMessageConverter();
        public override TLObject CreateObjectInstance() => new AddLocalMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddLocalMessage)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x3FFD45EEu when name.SequenceEqual(propName_sender_user_id):
                    obj.SenderUserId = reader.ReadInt();
                    return true;
                case 0x7E9ECDF7u when name.SequenceEqual(propName_reply_to_message_id):
                    obj.ReplyToMessageId = reader.ReadLong();
                    return true;
                case 0xC4198C8Bu when name.SequenceEqual(propName_disable_notification):
                    obj.DisableNotification = reader.ReadBool();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("deleteMessages")]
    partial class DeleteMessagesConverter : TLObjectConverter<DeleteMessages>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteMessagesConverter();
        public override TLObject CreateObjectInstance() => new DeleteMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeleteMessages)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_ids))
            {
                obj.MessageIds = reader.ReadInt53Array();
                return true;
            }
            if (name.SequenceEqual(propName_revoke))
            {
                obj.Revoke = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("deleteChatMessagesFromUser")]
    partial class DeleteChatMessagesFromUserConverter : TLObjectConverter<DeleteChatMessagesFromUser>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteChatMessagesFromUserConverter();
        public override TLObject CreateObjectInstance() => new DeleteChatMessagesFromUser();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeleteChatMessagesFromUser)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("editMessageText")]
    partial class EditMessageTextConverter : TLObjectConverter<EditMessageText>
    {
        public static BaseConverter CreateConverterInstance() => new EditMessageTextConverter();
        public override TLObject CreateObjectInstance() => new EditMessageText();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditMessageText)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("editMessageLiveLocation")]
    partial class EditMessageLiveLocationConverter : TLObjectConverter<EditMessageLiveLocation>
    {
        public static BaseConverter CreateConverterInstance() => new EditMessageLiveLocationConverter();
        public override TLObject CreateObjectInstance() => new EditMessageLiveLocation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditMessageLiveLocation)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0x0BF5A9A6u when name.SequenceEqual(propName_location):
                    obj.Location = reader.ReadTLObject<Location>();
                    return true;
            }
            return false;
        }
    }

    [TLType("editMessageMedia")]
    partial class EditMessageMediaConverter : TLObjectConverter<EditMessageMedia>
    {
        public static BaseConverter CreateConverterInstance() => new EditMessageMediaConverter();
        public override TLObject CreateObjectInstance() => new EditMessageMedia();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditMessageMedia)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xC29BD529u when name.SequenceEqual(propName_input_message_content):
                    obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                    return true;
            }
            return false;
        }
    }

    [TLType("editMessageCaption")]
    partial class EditMessageCaptionConverter : TLObjectConverter<EditMessageCaption>
    {
        public static BaseConverter CreateConverterInstance() => new EditMessageCaptionConverter();
        public override TLObject CreateObjectInstance() => new EditMessageCaption();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditMessageCaption)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x36A139ACu when name.SequenceEqual(propName_reply_markup):
                    obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                    return true;
                case 0xEF131C65u when name.SequenceEqual(propName_caption):
                    obj.Caption = reader.ReadTLObject<FormattedText>();
                    return true;
            }
            return false;
        }
    }

    [TLType("editMessageReplyMarkup")]
    partial class EditMessageReplyMarkupConverter : TLObjectConverter<EditMessageReplyMarkup>
    {
        public static BaseConverter CreateConverterInstance() => new EditMessageReplyMarkupConverter();
        public override TLObject CreateObjectInstance() => new EditMessageReplyMarkup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditMessageReplyMarkup)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_reply_markup))
            {
                obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                return true;
            }
            return false;
        }
    }

    [TLType("editInlineMessageText")]
    partial class EditInlineMessageTextConverter : TLObjectConverter<EditInlineMessageText>
    {
        public static BaseConverter CreateConverterInstance() => new EditInlineMessageTextConverter();
        public override TLObject CreateObjectInstance() => new EditInlineMessageText();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditInlineMessageText)tlobj;
            if (name.SequenceEqual(propName_inline_message_id))
            {
                obj.InlineMessageId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_reply_markup))
            {
                obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                return true;
            }
            if (name.SequenceEqual(propName_input_message_content))
            {
                obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                return true;
            }
            return false;
        }
    }

    [TLType("editInlineMessageLiveLocation")]
    partial class EditInlineMessageLiveLocationConverter : TLObjectConverter<EditInlineMessageLiveLocation>
    {
        public static BaseConverter CreateConverterInstance() => new EditInlineMessageLiveLocationConverter();
        public override TLObject CreateObjectInstance() => new EditInlineMessageLiveLocation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditInlineMessageLiveLocation)tlobj;
            if (name.SequenceEqual(propName_inline_message_id))
            {
                obj.InlineMessageId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_reply_markup))
            {
                obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                return true;
            }
            if (name.SequenceEqual(propName_location))
            {
                obj.Location = reader.ReadTLObject<Location>();
                return true;
            }
            return false;
        }
    }

    [TLType("editInlineMessageMedia")]
    partial class EditInlineMessageMediaConverter : TLObjectConverter<EditInlineMessageMedia>
    {
        public static BaseConverter CreateConverterInstance() => new EditInlineMessageMediaConverter();
        public override TLObject CreateObjectInstance() => new EditInlineMessageMedia();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditInlineMessageMedia)tlobj;
            if (name.SequenceEqual(propName_inline_message_id))
            {
                obj.InlineMessageId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_reply_markup))
            {
                obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                return true;
            }
            if (name.SequenceEqual(propName_input_message_content))
            {
                obj.InputMessageContent = reader.ReadTLObject<InputMessageContent>();
                return true;
            }
            return false;
        }
    }

    [TLType("editInlineMessageCaption")]
    partial class EditInlineMessageCaptionConverter : TLObjectConverter<EditInlineMessageCaption>
    {
        public static BaseConverter CreateConverterInstance() => new EditInlineMessageCaptionConverter();
        public override TLObject CreateObjectInstance() => new EditInlineMessageCaption();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditInlineMessageCaption)tlobj;
            if (name.SequenceEqual(propName_inline_message_id))
            {
                obj.InlineMessageId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_reply_markup))
            {
                obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                return true;
            }
            if (name.SequenceEqual(propName_caption))
            {
                obj.Caption = reader.ReadTLObject<FormattedText>();
                return true;
            }
            return false;
        }
    }

    [TLType("editInlineMessageReplyMarkup")]
    partial class EditInlineMessageReplyMarkupConverter : TLObjectConverter<EditInlineMessageReplyMarkup>
    {
        public static BaseConverter CreateConverterInstance() => new EditInlineMessageReplyMarkupConverter();
        public override TLObject CreateObjectInstance() => new EditInlineMessageReplyMarkup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditInlineMessageReplyMarkup)tlobj;
            if (name.SequenceEqual(propName_inline_message_id))
            {
                obj.InlineMessageId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_reply_markup))
            {
                obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                return true;
            }
            return false;
        }
    }

    [TLType("editMessageSchedulingState")]
    partial class EditMessageSchedulingStateConverter : TLObjectConverter<EditMessageSchedulingState>
    {
        public static BaseConverter CreateConverterInstance() => new EditMessageSchedulingStateConverter();
        public override TLObject CreateObjectInstance() => new EditMessageSchedulingState();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditMessageSchedulingState)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_scheduling_state))
            {
                obj.SchedulingState = reader.ReadTLObject<MessageSchedulingState>();
                return true;
            }
            return false;
        }
    }

    [TLType("getTextEntities")]
    partial class GetTextEntitiesConverter : TLObjectConverter<GetTextEntities>
    {
        public static BaseConverter CreateConverterInstance() => new GetTextEntitiesConverter();
        public override TLObject CreateObjectInstance() => new GetTextEntities();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetTextEntities)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("parseTextEntities")]
    partial class ParseTextEntitiesConverter : TLObjectConverter<ParseTextEntities>
    {
        public static BaseConverter CreateConverterInstance() => new ParseTextEntitiesConverter();
        public override TLObject CreateObjectInstance() => new ParseTextEntities();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ParseTextEntities)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_parse_mode))
            {
                obj.ParseMode = reader.ReadTLObject<TextParseMode>();
                return true;
            }
            return false;
        }
    }

    [TLType("parseMarkdown")]
    partial class ParseMarkdownConverter : TLObjectConverter<ParseMarkdown>
    {
        public static BaseConverter CreateConverterInstance() => new ParseMarkdownConverter();
        public override TLObject CreateObjectInstance() => new ParseMarkdown();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ParseMarkdown)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<FormattedText>();
                return true;
            }
            return false;
        }
    }

    [TLType("getMarkdownText")]
    partial class GetMarkdownTextConverter : TLObjectConverter<GetMarkdownText>
    {
        public static BaseConverter CreateConverterInstance() => new GetMarkdownTextConverter();
        public override TLObject CreateObjectInstance() => new GetMarkdownText();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMarkdownText)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<FormattedText>();
                return true;
            }
            return false;
        }
    }

    [TLType("getFileMimeType")]
    partial class GetFileMimeTypeConverter : TLObjectConverter<GetFileMimeType>
    {
        public static BaseConverter CreateConverterInstance() => new GetFileMimeTypeConverter();
        public override TLObject CreateObjectInstance() => new GetFileMimeType();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetFileMimeType)tlobj;
            if (name.SequenceEqual(propName_file_name))
            {
                obj.FileName = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getFileExtension")]
    partial class GetFileExtensionConverter : TLObjectConverter<GetFileExtension>
    {
        public static BaseConverter CreateConverterInstance() => new GetFileExtensionConverter();
        public override TLObject CreateObjectInstance() => new GetFileExtension();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetFileExtension)tlobj;
            if (name.SequenceEqual(propName_mime_type))
            {
                obj.MimeType = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("cleanFileName")]
    partial class CleanFileNameConverter : TLObjectConverter<CleanFileName>
    {
        public static BaseConverter CreateConverterInstance() => new CleanFileNameConverter();
        public override TLObject CreateObjectInstance() => new CleanFileName();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CleanFileName)tlobj;
            if (name.SequenceEqual(propName_file_name))
            {
                obj.FileName = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getLanguagePackString")]
    partial class GetLanguagePackStringConverter : TLObjectConverter<GetLanguagePackString>
    {
        public static BaseConverter CreateConverterInstance() => new GetLanguagePackStringConverter();
        public override TLObject CreateObjectInstance() => new GetLanguagePackString();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetLanguagePackString)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x8D3E23FBu when name.SequenceEqual(propName_language_pack_database_path):
                    obj.LanguagePackDatabasePath = reader.ReadString();
                    return true;
                case 0x732E8310u when name.SequenceEqual(propName_localization_target):
                    obj.LocalizationTarget = reader.ReadString();
                    return true;
                case 0xF007307Bu when name.SequenceEqual(propName_language_pack_id):
                    obj.LanguagePackId = reader.ReadString();
                    return true;
                case 0x6815C86Cu when name.SequenceEqual(propName_key):
                    obj.Key = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("getJsonValue")]
    partial class GetJsonValueConverter : TLObjectConverter<GetJsonValue>
    {
        public static BaseConverter CreateConverterInstance() => new GetJsonValueConverter();
        public override TLObject CreateObjectInstance() => new GetJsonValue();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetJsonValue)tlobj;
            if (name.SequenceEqual(propName_json))
            {
                obj.Json = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getJsonString")]
    partial class GetJsonStringConverter : TLObjectConverter<GetJsonString>
    {
        public static BaseConverter CreateConverterInstance() => new GetJsonStringConverter();
        public override TLObject CreateObjectInstance() => new GetJsonString();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetJsonString)tlobj;
            if (name.SequenceEqual(propName_json_value))
            {
                obj.JsonValue = reader.ReadTLObject<JsonValue>();
                return true;
            }
            return false;
        }
    }

    [TLType("setPollAnswer")]
    partial class SetPollAnswerConverter : TLObjectConverter<SetPollAnswer>
    {
        public static BaseConverter CreateConverterInstance() => new SetPollAnswerConverter();
        public override TLObject CreateObjectInstance() => new SetPollAnswer();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetPollAnswer)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_option_ids))
            {
                obj.OptionIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("getPollVoters")]
    partial class GetPollVotersConverter : TLObjectConverter<GetPollVoters>
    {
        public static BaseConverter CreateConverterInstance() => new GetPollVotersConverter();
        public override TLObject CreateObjectInstance() => new GetPollVoters();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetPollVoters)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0xC06844E4u when name.SequenceEqual(propName_option_id):
                    obj.OptionId = reader.ReadInt();
                    return true;
                case 0x14C8D3CAu when name.SequenceEqual(propName_offset):
                    obj.Offset = reader.ReadInt();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("stopPoll")]
    partial class StopPollConverter : TLObjectConverter<StopPoll>
    {
        public static BaseConverter CreateConverterInstance() => new StopPollConverter();
        public override TLObject CreateObjectInstance() => new StopPoll();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (StopPoll)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_reply_markup))
            {
                obj.ReplyMarkup = reader.ReadTLObject<ReplyMarkup>();
                return true;
            }
            return false;
        }
    }

    [TLType("hideSuggestedAction")]
    partial class HideSuggestedActionConverter : TLObjectConverter<HideSuggestedAction>
    {
        public static BaseConverter CreateConverterInstance() => new HideSuggestedActionConverter();
        public override TLObject CreateObjectInstance() => new HideSuggestedAction();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (HideSuggestedAction)tlobj;
            if (name.SequenceEqual(propName_action))
            {
                obj.Action = reader.ReadTLObject<SuggestedAction>();
                return true;
            }
            return false;
        }
    }

    [TLType("getLoginUrlInfo")]
    partial class GetLoginUrlInfoConverter : TLObjectConverter<GetLoginUrlInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetLoginUrlInfoConverter();
        public override TLObject CreateObjectInstance() => new GetLoginUrlInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetLoginUrlInfo)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_button_id))
            {
                obj.ButtonId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getLoginUrl")]
    partial class GetLoginUrlConverter : TLObjectConverter<GetLoginUrl>
    {
        public static BaseConverter CreateConverterInstance() => new GetLoginUrlConverter();
        public override TLObject CreateObjectInstance() => new GetLoginUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetLoginUrl)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0xFAD92BE7u when name.SequenceEqual(propName_button_id):
                    obj.ButtonId = reader.ReadInt();
                    return true;
                case 0xF5EDBE4Du when name.SequenceEqual(propName_allow_write_access):
                    obj.AllowWriteAccess = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("getInlineQueryResults")]
    partial class GetInlineQueryResultsConverter : TLObjectConverter<GetInlineQueryResults>
    {
        public static BaseConverter CreateConverterInstance() => new GetInlineQueryResultsConverter();
        public override TLObject CreateObjectInstance() => new GetInlineQueryResults();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetInlineQueryResults)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x0BC9D8A8u when name.SequenceEqual(propName_bot_user_id):
                    obj.BotUserId = reader.ReadInt();
                    return true;
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xA9E70BA0u when name.SequenceEqual(propName_user_location):
                    obj.UserLocation = reader.ReadTLObject<Location>();
                    return true;
                case 0xF8CE75E3u when name.SequenceEqual(propName_query):
                    obj.Query = reader.ReadString();
                    return true;
                case 0x14C8D3CAu when name.SequenceEqual(propName_offset):
                    obj.Offset = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("answerInlineQuery")]
    partial class AnswerInlineQueryConverter : TLObjectConverter<AnswerInlineQuery>
    {
        public static BaseConverter CreateConverterInstance() => new AnswerInlineQueryConverter();
        public override TLObject CreateObjectInstance() => new AnswerInlineQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AnswerInlineQuery)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x69BBE355u when name.SequenceEqual(propName_inline_query_id):
                    obj.InlineQueryId = reader.ReadInt64String();
                    return true;
                case 0x61C3FF3Eu when name.SequenceEqual(propName_is_personal):
                    obj.IsPersonal = reader.ReadBool();
                    return true;
                case 0x6C4F4AF5u when name.SequenceEqual(propName_results):
                    obj.Results = reader.ReadObjectArray<InputInlineQueryResult>();
                    return true;
                case 0x70EF59C7u when name.SequenceEqual(propName_cache_time):
                    obj.CacheTime = reader.ReadInt();
                    return true;
                case 0x697AA81Au when name.SequenceEqual(propName_next_offset):
                    obj.NextOffset = reader.ReadString();
                    return true;
                case 0xAD9E3C99u when name.SequenceEqual(propName_switch_pm_text):
                    obj.SwitchPmText = reader.ReadString();
                    return true;
                case 0x21833D65u when name.SequenceEqual(propName_switch_pm_parameter):
                    obj.SwitchPmParameter = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("getCallbackQueryAnswer")]
    partial class GetCallbackQueryAnswerConverter : TLObjectConverter<GetCallbackQueryAnswer>
    {
        public static BaseConverter CreateConverterInstance() => new GetCallbackQueryAnswerConverter();
        public override TLObject CreateObjectInstance() => new GetCallbackQueryAnswer();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetCallbackQueryAnswer)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_payload))
            {
                obj.Payload = reader.ReadTLObject<CallbackQueryPayload>();
                return true;
            }
            return false;
        }
    }

    [TLType("answerCallbackQuery")]
    partial class AnswerCallbackQueryConverter : TLObjectConverter<AnswerCallbackQuery>
    {
        public static BaseConverter CreateConverterInstance() => new AnswerCallbackQueryConverter();
        public override TLObject CreateObjectInstance() => new AnswerCallbackQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AnswerCallbackQuery)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xFC520E2Fu when name.SequenceEqual(propName_callback_query_id):
                    obj.CallbackQueryId = reader.ReadInt64String();
                    return true;
                case 0xBDE64E3Eu when name.SequenceEqual(propName_text):
                    obj.Text = reader.ReadString();
                    return true;
                case 0x8C21035Du when name.SequenceEqual(propName_show_alert):
                    obj.ShowAlert = reader.ReadBool();
                    return true;
                case 0x328F4C1Eu when name.SequenceEqual(propName_url):
                    obj.Url = reader.ReadString();
                    return true;
                case 0x70EF59C7u when name.SequenceEqual(propName_cache_time):
                    obj.CacheTime = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("answerShippingQuery")]
    partial class AnswerShippingQueryConverter : TLObjectConverter<AnswerShippingQuery>
    {
        public static BaseConverter CreateConverterInstance() => new AnswerShippingQueryConverter();
        public override TLObject CreateObjectInstance() => new AnswerShippingQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AnswerShippingQuery)tlobj;
            if (name.SequenceEqual(propName_shipping_query_id))
            {
                obj.ShippingQueryId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_shipping_options))
            {
                obj.ShippingOptions = reader.ReadObjectArray<ShippingOption>();
                return true;
            }
            if (name.SequenceEqual(propName_error_message))
            {
                obj.ErrorMessage = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("answerPreCheckoutQuery")]
    partial class AnswerPreCheckoutQueryConverter : TLObjectConverter<AnswerPreCheckoutQuery>
    {
        public static BaseConverter CreateConverterInstance() => new AnswerPreCheckoutQueryConverter();
        public override TLObject CreateObjectInstance() => new AnswerPreCheckoutQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AnswerPreCheckoutQuery)tlobj;
            if (name.SequenceEqual(propName_pre_checkout_query_id))
            {
                obj.PreCheckoutQueryId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_error_message))
            {
                obj.ErrorMessage = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setGameScore")]
    partial class SetGameScoreConverter : TLObjectConverter<SetGameScore>
    {
        public static BaseConverter CreateConverterInstance() => new SetGameScoreConverter();
        public override TLObject CreateObjectInstance() => new SetGameScore();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetGameScore)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x66108411u when name.SequenceEqual(propName_edit_message):
                    obj.EditMessage = reader.ReadBool();
                    return true;
                case 0x10A75CDAu when name.SequenceEqual(propName_user_id):
                    obj.UserId = reader.ReadInt();
                    return true;
                case 0xD22F9095u when name.SequenceEqual(propName_score):
                    obj.Score = reader.ReadInt();
                    return true;
                case 0x79A98884u when name.SequenceEqual(propName_force):
                    obj.Force = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("setInlineGameScore")]
    partial class SetInlineGameScoreConverter : TLObjectConverter<SetInlineGameScore>
    {
        public static BaseConverter CreateConverterInstance() => new SetInlineGameScoreConverter();
        public override TLObject CreateObjectInstance() => new SetInlineGameScore();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetInlineGameScore)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xB60D9910u when name.SequenceEqual(propName_inline_message_id):
                    obj.InlineMessageId = reader.ReadString();
                    return true;
                case 0x66108411u when name.SequenceEqual(propName_edit_message):
                    obj.EditMessage = reader.ReadBool();
                    return true;
                case 0x10A75CDAu when name.SequenceEqual(propName_user_id):
                    obj.UserId = reader.ReadInt();
                    return true;
                case 0xD22F9095u when name.SequenceEqual(propName_score):
                    obj.Score = reader.ReadInt();
                    return true;
                case 0x79A98884u when name.SequenceEqual(propName_force):
                    obj.Force = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("getGameHighScores")]
    partial class GetGameHighScoresConverter : TLObjectConverter<GetGameHighScores>
    {
        public static BaseConverter CreateConverterInstance() => new GetGameHighScoresConverter();
        public override TLObject CreateObjectInstance() => new GetGameHighScores();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetGameHighScores)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getInlineGameHighScores")]
    partial class GetInlineGameHighScoresConverter : TLObjectConverter<GetInlineGameHighScores>
    {
        public static BaseConverter CreateConverterInstance() => new GetInlineGameHighScoresConverter();
        public override TLObject CreateObjectInstance() => new GetInlineGameHighScores();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetInlineGameHighScores)tlobj;
            if (name.SequenceEqual(propName_inline_message_id))
            {
                obj.InlineMessageId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("deleteChatReplyMarkup")]
    partial class DeleteChatReplyMarkupConverter : TLObjectConverter<DeleteChatReplyMarkup>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteChatReplyMarkupConverter();
        public override TLObject CreateObjectInstance() => new DeleteChatReplyMarkup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeleteChatReplyMarkup)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("sendChatAction")]
    partial class SendChatActionConverter : TLObjectConverter<SendChatAction>
    {
        public static BaseConverter CreateConverterInstance() => new SendChatActionConverter();
        public override TLObject CreateObjectInstance() => new SendChatAction();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendChatAction)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_thread_id))
            {
                obj.MessageThreadId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_action))
            {
                obj.Action = reader.ReadTLObject<ChatAction>();
                return true;
            }
            return false;
        }
    }

    [TLType("openChat")]
    partial class OpenChatConverter : TLObjectConverter<OpenChat>
    {
        public static BaseConverter CreateConverterInstance() => new OpenChatConverter();
        public override TLObject CreateObjectInstance() => new OpenChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (OpenChat)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("closeChat")]
    partial class CloseChatConverter : TLObjectConverter<CloseChat>
    {
        public static BaseConverter CreateConverterInstance() => new CloseChatConverter();
        public override TLObject CreateObjectInstance() => new CloseChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CloseChat)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("viewMessages")]
    partial class ViewMessagesConverter : TLObjectConverter<ViewMessages>
    {
        public static BaseConverter CreateConverterInstance() => new ViewMessagesConverter();
        public override TLObject CreateObjectInstance() => new ViewMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ViewMessages)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xCF8E5A53u when name.SequenceEqual(propName_message_thread_id):
                    obj.MessageThreadId = reader.ReadLong();
                    return true;
                case 0x02203345u when name.SequenceEqual(propName_message_ids):
                    obj.MessageIds = reader.ReadInt53Array();
                    return true;
                case 0xD91A92C1u when name.SequenceEqual(propName_force_read):
                    obj.ForceRead = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("openMessageContent")]
    partial class OpenMessageContentConverter : TLObjectConverter<OpenMessageContent>
    {
        public static BaseConverter CreateConverterInstance() => new OpenMessageContentConverter();
        public override TLObject CreateObjectInstance() => new OpenMessageContent();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (OpenMessageContent)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("readAllChatMentions")]
    partial class ReadAllChatMentionsConverter : TLObjectConverter<ReadAllChatMentions>
    {
        public static BaseConverter CreateConverterInstance() => new ReadAllChatMentionsConverter();
        public override TLObject CreateObjectInstance() => new ReadAllChatMentions();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ReadAllChatMentions)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("createPrivateChat")]
    partial class CreatePrivateChatConverter : TLObjectConverter<CreatePrivateChat>
    {
        public static BaseConverter CreateConverterInstance() => new CreatePrivateChatConverter();
        public override TLObject CreateObjectInstance() => new CreatePrivateChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreatePrivateChat)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_force))
            {
                obj.Force = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("createBasicGroupChat")]
    partial class CreateBasicGroupChatConverter : TLObjectConverter<CreateBasicGroupChat>
    {
        public static BaseConverter CreateConverterInstance() => new CreateBasicGroupChatConverter();
        public override TLObject CreateObjectInstance() => new CreateBasicGroupChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreateBasicGroupChat)tlobj;
            if (name.SequenceEqual(propName_basic_group_id))
            {
                obj.BasicGroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_force))
            {
                obj.Force = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("createSupergroupChat")]
    partial class CreateSupergroupChatConverter : TLObjectConverter<CreateSupergroupChat>
    {
        public static BaseConverter CreateConverterInstance() => new CreateSupergroupChatConverter();
        public override TLObject CreateObjectInstance() => new CreateSupergroupChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreateSupergroupChat)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_force))
            {
                obj.Force = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("createSecretChat")]
    partial class CreateSecretChatConverter : TLObjectConverter<CreateSecretChat>
    {
        public static BaseConverter CreateConverterInstance() => new CreateSecretChatConverter();
        public override TLObject CreateObjectInstance() => new CreateSecretChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreateSecretChat)tlobj;
            if (name.SequenceEqual(propName_secret_chat_id))
            {
                obj.SecretChatId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("createNewBasicGroupChat")]
    partial class CreateNewBasicGroupChatConverter : TLObjectConverter<CreateNewBasicGroupChat>
    {
        public static BaseConverter CreateConverterInstance() => new CreateNewBasicGroupChatConverter();
        public override TLObject CreateObjectInstance() => new CreateNewBasicGroupChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreateNewBasicGroupChat)tlobj;
            if (name.SequenceEqual(propName_user_ids))
            {
                obj.UserIds = reader.ReadInt32Array();
                return true;
            }
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("createNewSupergroupChat")]
    partial class CreateNewSupergroupChatConverter : TLObjectConverter<CreateNewSupergroupChat>
    {
        public static BaseConverter CreateConverterInstance() => new CreateNewSupergroupChatConverter();
        public override TLObject CreateObjectInstance() => new CreateNewSupergroupChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreateNewSupergroupChat)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x19519D69u when name.SequenceEqual(propName_is_channel):
                    obj.IsChannel = reader.ReadBool();
                    return true;
                case 0x346F3B69u when name.SequenceEqual(propName_description):
                    obj.Description = reader.ReadString();
                    return true;
                case 0x0BF5A9A6u when name.SequenceEqual(propName_location):
                    obj.Location = reader.ReadTLObject<ChatLocation>();
                    return true;
            }
            return false;
        }
    }

    [TLType("createNewSecretChat")]
    partial class CreateNewSecretChatConverter : TLObjectConverter<CreateNewSecretChat>
    {
        public static BaseConverter CreateConverterInstance() => new CreateNewSecretChatConverter();
        public override TLObject CreateObjectInstance() => new CreateNewSecretChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreateNewSecretChat)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("upgradeBasicGroupChatToSupergroupChat")]
    partial class UpgradeBasicGroupChatToSupergroupChatConverter : TLObjectConverter<UpgradeBasicGroupChatToSupergroupChat>
    {
        public static BaseConverter CreateConverterInstance() => new UpgradeBasicGroupChatToSupergroupChatConverter();
        public override TLObject CreateObjectInstance() => new UpgradeBasicGroupChatToSupergroupChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UpgradeBasicGroupChatToSupergroupChat)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatListsToAddChat")]
    partial class GetChatListsToAddChatConverter : TLObjectConverter<GetChatListsToAddChat>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatListsToAddChatConverter();
        public override TLObject CreateObjectInstance() => new GetChatListsToAddChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatListsToAddChat)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("addChatToList")]
    partial class AddChatToListConverter : TLObjectConverter<AddChatToList>
    {
        public static BaseConverter CreateConverterInstance() => new AddChatToListConverter();
        public override TLObject CreateObjectInstance() => new AddChatToList();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddChatToList)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_chat_list))
            {
                obj.ChatList = reader.ReadTLObject<ChatList>();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatFilter")]
    partial class GetChatFilterConverter : TLObjectConverter<GetChatFilter>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatFilterConverter();
        public override TLObject CreateObjectInstance() => new GetChatFilter();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatFilter)tlobj;
            if (name.SequenceEqual(propName_chat_filter_id))
            {
                obj.ChatFilterId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("createChatFilter")]
    partial class CreateChatFilterConverter : TLObjectConverter<CreateChatFilter>
    {
        public static BaseConverter CreateConverterInstance() => new CreateChatFilterConverter();
        public override TLObject CreateObjectInstance() => new CreateChatFilter();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreateChatFilter)tlobj;
            if (name.SequenceEqual(propName_filter))
            {
                obj.Filter = reader.ReadTLObject<ChatFilter>();
                return true;
            }
            return false;
        }
    }

    [TLType("editChatFilter")]
    partial class EditChatFilterConverter : TLObjectConverter<EditChatFilter>
    {
        public static BaseConverter CreateConverterInstance() => new EditChatFilterConverter();
        public override TLObject CreateObjectInstance() => new EditChatFilter();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditChatFilter)tlobj;
            if (name.SequenceEqual(propName_chat_filter_id))
            {
                obj.ChatFilterId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_filter))
            {
                obj.Filter = reader.ReadTLObject<ChatFilter>();
                return true;
            }
            return false;
        }
    }

    [TLType("deleteChatFilter")]
    partial class DeleteChatFilterConverter : TLObjectConverter<DeleteChatFilter>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteChatFilterConverter();
        public override TLObject CreateObjectInstance() => new DeleteChatFilter();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeleteChatFilter)tlobj;
            if (name.SequenceEqual(propName_chat_filter_id))
            {
                obj.ChatFilterId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("reorderChatFilters")]
    partial class ReorderChatFiltersConverter : TLObjectConverter<ReorderChatFilters>
    {
        public static BaseConverter CreateConverterInstance() => new ReorderChatFiltersConverter();
        public override TLObject CreateObjectInstance() => new ReorderChatFilters();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ReorderChatFilters)tlobj;
            if (name.SequenceEqual(propName_chat_filter_ids))
            {
                obj.ChatFilterIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("getRecommendedChatFilters")]
    partial class GetRecommendedChatFiltersConverter : TLObjectConverter<GetRecommendedChatFilters>
    {
        public static BaseConverter CreateConverterInstance() => new GetRecommendedChatFiltersConverter();
        public override TLObject CreateObjectInstance() => new GetRecommendedChatFilters();
    }

    [TLType("getChatFilterDefaultIconName")]
    partial class GetChatFilterDefaultIconNameConverter : TLObjectConverter<GetChatFilterDefaultIconName>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatFilterDefaultIconNameConverter();
        public override TLObject CreateObjectInstance() => new GetChatFilterDefaultIconName();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatFilterDefaultIconName)tlobj;
            if (name.SequenceEqual(propName_filter))
            {
                obj.Filter = reader.ReadTLObject<ChatFilter>();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatTitle")]
    partial class SetChatTitleConverter : TLObjectConverter<SetChatTitle>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatTitleConverter();
        public override TLObject CreateObjectInstance() => new SetChatTitle();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatTitle)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_title))
            {
                obj.Title = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatPhoto")]
    partial class SetChatPhotoConverter : TLObjectConverter<SetChatPhoto>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatPhotoConverter();
        public override TLObject CreateObjectInstance() => new SetChatPhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatPhoto)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_photo))
            {
                obj.Photo = reader.ReadTLObject<InputChatPhoto>();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatPermissions")]
    partial class SetChatPermissionsConverter : TLObjectConverter<SetChatPermissions>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatPermissionsConverter();
        public override TLObject CreateObjectInstance() => new SetChatPermissions();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatPermissions)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_permissions))
            {
                obj.Permissions = reader.ReadTLObject<ChatPermissions>();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatDraftMessage")]
    partial class SetChatDraftMessageConverter : TLObjectConverter<SetChatDraftMessage>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatDraftMessageConverter();
        public override TLObject CreateObjectInstance() => new SetChatDraftMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatDraftMessage)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_thread_id))
            {
                obj.MessageThreadId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_draft_message))
            {
                obj.DraftMessage = reader.ReadTLObject<DraftMessage>();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatNotificationSettings")]
    partial class SetChatNotificationSettingsConverter : TLObjectConverter<SetChatNotificationSettings>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatNotificationSettingsConverter();
        public override TLObject CreateObjectInstance() => new SetChatNotificationSettings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatNotificationSettings)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_notification_settings))
            {
                obj.NotificationSettings = reader.ReadTLObject<ChatNotificationSettings>();
                return true;
            }
            return false;
        }
    }

    [TLType("toggleChatIsMarkedAsUnread")]
    partial class ToggleChatIsMarkedAsUnreadConverter : TLObjectConverter<ToggleChatIsMarkedAsUnread>
    {
        public static BaseConverter CreateConverterInstance() => new ToggleChatIsMarkedAsUnreadConverter();
        public override TLObject CreateObjectInstance() => new ToggleChatIsMarkedAsUnread();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ToggleChatIsMarkedAsUnread)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_is_marked_as_unread))
            {
                obj.IsMarkedAsUnread = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("toggleChatIsBlocked")]
    partial class ToggleChatIsBlockedConverter : TLObjectConverter<ToggleChatIsBlocked>
    {
        public static BaseConverter CreateConverterInstance() => new ToggleChatIsBlockedConverter();
        public override TLObject CreateObjectInstance() => new ToggleChatIsBlocked();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ToggleChatIsBlocked)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_is_blocked))
            {
                obj.IsBlocked = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("toggleChatDefaultDisableNotification")]
    partial class ToggleChatDefaultDisableNotificationConverter : TLObjectConverter<ToggleChatDefaultDisableNotification>
    {
        public static BaseConverter CreateConverterInstance() => new ToggleChatDefaultDisableNotificationConverter();
        public override TLObject CreateObjectInstance() => new ToggleChatDefaultDisableNotification();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ToggleChatDefaultDisableNotification)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_default_disable_notification))
            {
                obj.DefaultDisableNotification = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatClientData")]
    partial class SetChatClientDataConverter : TLObjectConverter<SetChatClientData>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatClientDataConverter();
        public override TLObject CreateObjectInstance() => new SetChatClientData();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatClientData)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_client_data))
            {
                obj.ClientData = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatDescription")]
    partial class SetChatDescriptionConverter : TLObjectConverter<SetChatDescription>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatDescriptionConverter();
        public override TLObject CreateObjectInstance() => new SetChatDescription();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatDescription)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_description))
            {
                obj.Description = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatDiscussionGroup")]
    partial class SetChatDiscussionGroupConverter : TLObjectConverter<SetChatDiscussionGroup>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatDiscussionGroupConverter();
        public override TLObject CreateObjectInstance() => new SetChatDiscussionGroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatDiscussionGroup)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_discussion_chat_id))
            {
                obj.DiscussionChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatLocation")]
    partial class SetChatLocationConverter : TLObjectConverter<SetChatLocation>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatLocationConverter();
        public override TLObject CreateObjectInstance() => new SetChatLocation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatLocation)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_location))
            {
                obj.Location = reader.ReadTLObject<ChatLocation>();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatSlowModeDelay")]
    partial class SetChatSlowModeDelayConverter : TLObjectConverter<SetChatSlowModeDelay>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatSlowModeDelayConverter();
        public override TLObject CreateObjectInstance() => new SetChatSlowModeDelay();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatSlowModeDelay)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_slow_mode_delay))
            {
                obj.SlowModeDelay = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("pinChatMessage")]
    partial class PinChatMessageConverter : TLObjectConverter<PinChatMessage>
    {
        public static BaseConverter CreateConverterInstance() => new PinChatMessageConverter();
        public override TLObject CreateObjectInstance() => new PinChatMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PinChatMessage)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_disable_notification))
            {
                obj.DisableNotification = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("unpinChatMessage")]
    partial class UnpinChatMessageConverter : TLObjectConverter<UnpinChatMessage>
    {
        public static BaseConverter CreateConverterInstance() => new UnpinChatMessageConverter();
        public override TLObject CreateObjectInstance() => new UnpinChatMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UnpinChatMessage)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("joinChat")]
    partial class JoinChatConverter : TLObjectConverter<JoinChat>
    {
        public static BaseConverter CreateConverterInstance() => new JoinChatConverter();
        public override TLObject CreateObjectInstance() => new JoinChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (JoinChat)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("leaveChat")]
    partial class LeaveChatConverter : TLObjectConverter<LeaveChat>
    {
        public static BaseConverter CreateConverterInstance() => new LeaveChatConverter();
        public override TLObject CreateObjectInstance() => new LeaveChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (LeaveChat)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("addChatMember")]
    partial class AddChatMemberConverter : TLObjectConverter<AddChatMember>
    {
        public static BaseConverter CreateConverterInstance() => new AddChatMemberConverter();
        public override TLObject CreateObjectInstance() => new AddChatMember();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddChatMember)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_forward_limit))
            {
                obj.ForwardLimit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("addChatMembers")]
    partial class AddChatMembersConverter : TLObjectConverter<AddChatMembers>
    {
        public static BaseConverter CreateConverterInstance() => new AddChatMembersConverter();
        public override TLObject CreateObjectInstance() => new AddChatMembers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddChatMembers)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_user_ids))
            {
                obj.UserIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("setChatMemberStatus")]
    partial class SetChatMemberStatusConverter : TLObjectConverter<SetChatMemberStatus>
    {
        public static BaseConverter CreateConverterInstance() => new SetChatMemberStatusConverter();
        public override TLObject CreateObjectInstance() => new SetChatMemberStatus();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetChatMemberStatus)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_status))
            {
                obj.Status = reader.ReadTLObject<ChatMemberStatus>();
                return true;
            }
            return false;
        }
    }

    [TLType("canTransferOwnership")]
    partial class CanTransferOwnershipConverter : TLObjectConverter<CanTransferOwnership>
    {
        public static BaseConverter CreateConverterInstance() => new CanTransferOwnershipConverter();
        public override TLObject CreateObjectInstance() => new CanTransferOwnership();
    }

    [TLType("transferChatOwnership")]
    partial class TransferChatOwnershipConverter : TLObjectConverter<TransferChatOwnership>
    {
        public static BaseConverter CreateConverterInstance() => new TransferChatOwnershipConverter();
        public override TLObject CreateObjectInstance() => new TransferChatOwnership();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TransferChatOwnership)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatMember")]
    partial class GetChatMemberConverter : TLObjectConverter<GetChatMember>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatMemberConverter();
        public override TLObject CreateObjectInstance() => new GetChatMember();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatMember)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("searchChatMembers")]
    partial class SearchChatMembersConverter : TLObjectConverter<SearchChatMembers>
    {
        public static BaseConverter CreateConverterInstance() => new SearchChatMembersConverter();
        public override TLObject CreateObjectInstance() => new SearchChatMembers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchChatMembers)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xF8CE75E3u when name.SequenceEqual(propName_query):
                    obj.Query = reader.ReadString();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
                case 0xC7E16877u when name.SequenceEqual(propName_filter):
                    obj.Filter = reader.ReadTLObject<ChatMembersFilter>();
                    return true;
            }
            return false;
        }
    }

    [TLType("getChatAdministrators")]
    partial class GetChatAdministratorsConverter : TLObjectConverter<GetChatAdministrators>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatAdministratorsConverter();
        public override TLObject CreateObjectInstance() => new GetChatAdministrators();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatAdministrators)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("clearAllDraftMessages")]
    partial class ClearAllDraftMessagesConverter : TLObjectConverter<ClearAllDraftMessages>
    {
        public static BaseConverter CreateConverterInstance() => new ClearAllDraftMessagesConverter();
        public override TLObject CreateObjectInstance() => new ClearAllDraftMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ClearAllDraftMessages)tlobj;
            if (name.SequenceEqual(propName_exclude_secret_chats))
            {
                obj.ExcludeSecretChats = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatNotificationSettingsExceptions")]
    partial class GetChatNotificationSettingsExceptionsConverter : TLObjectConverter<GetChatNotificationSettingsExceptions>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatNotificationSettingsExceptionsConverter();
        public override TLObject CreateObjectInstance() => new GetChatNotificationSettingsExceptions();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatNotificationSettingsExceptions)tlobj;
            if (name.SequenceEqual(propName_scope))
            {
                obj.Scope = reader.ReadTLObject<NotificationSettingsScope>();
                return true;
            }
            if (name.SequenceEqual(propName_compare_sound))
            {
                obj.CompareSound = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getScopeNotificationSettings")]
    partial class GetScopeNotificationSettingsConverter : TLObjectConverter<GetScopeNotificationSettings>
    {
        public static BaseConverter CreateConverterInstance() => new GetScopeNotificationSettingsConverter();
        public override TLObject CreateObjectInstance() => new GetScopeNotificationSettings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetScopeNotificationSettings)tlobj;
            if (name.SequenceEqual(propName_scope))
            {
                obj.Scope = reader.ReadTLObject<NotificationSettingsScope>();
                return true;
            }
            return false;
        }
    }

    [TLType("setScopeNotificationSettings")]
    partial class SetScopeNotificationSettingsConverter : TLObjectConverter<SetScopeNotificationSettings>
    {
        public static BaseConverter CreateConverterInstance() => new SetScopeNotificationSettingsConverter();
        public override TLObject CreateObjectInstance() => new SetScopeNotificationSettings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetScopeNotificationSettings)tlobj;
            if (name.SequenceEqual(propName_scope))
            {
                obj.Scope = reader.ReadTLObject<NotificationSettingsScope>();
                return true;
            }
            if (name.SequenceEqual(propName_notification_settings))
            {
                obj.NotificationSettings = reader.ReadTLObject<ScopeNotificationSettings>();
                return true;
            }
            return false;
        }
    }

    [TLType("resetAllNotificationSettings")]
    partial class ResetAllNotificationSettingsConverter : TLObjectConverter<ResetAllNotificationSettings>
    {
        public static BaseConverter CreateConverterInstance() => new ResetAllNotificationSettingsConverter();
        public override TLObject CreateObjectInstance() => new ResetAllNotificationSettings();
    }

    [TLType("toggleChatIsPinned")]
    partial class ToggleChatIsPinnedConverter : TLObjectConverter<ToggleChatIsPinned>
    {
        public static BaseConverter CreateConverterInstance() => new ToggleChatIsPinnedConverter();
        public override TLObject CreateObjectInstance() => new ToggleChatIsPinned();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ToggleChatIsPinned)tlobj;
            if (name.SequenceEqual(propName_chat_list))
            {
                obj.ChatList = reader.ReadTLObject<ChatList>();
                return true;
            }
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_is_pinned))
            {
                obj.IsPinned = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("setPinnedChats")]
    partial class SetPinnedChatsConverter : TLObjectConverter<SetPinnedChats>
    {
        public static BaseConverter CreateConverterInstance() => new SetPinnedChatsConverter();
        public override TLObject CreateObjectInstance() => new SetPinnedChats();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetPinnedChats)tlobj;
            if (name.SequenceEqual(propName_chat_list))
            {
                obj.ChatList = reader.ReadTLObject<ChatList>();
                return true;
            }
            if (name.SequenceEqual(propName_chat_ids))
            {
                obj.ChatIds = reader.ReadInt53Array();
                return true;
            }
            return false;
        }
    }

    [TLType("downloadFile")]
    partial class DownloadFileConverter : TLObjectConverter<DownloadFile>
    {
        public static BaseConverter CreateConverterInstance() => new DownloadFileConverter();
        public override TLObject CreateObjectInstance() => new DownloadFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DownloadFile)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x6BBC1599u when name.SequenceEqual(propName_file_id):
                    obj.FileId = reader.ReadInt();
                    return true;
                case 0x94E4E309u when name.SequenceEqual(propName_priority):
                    obj.Priority = reader.ReadInt();
                    return true;
                case 0x14C8D3CAu when name.SequenceEqual(propName_offset):
                    obj.Offset = reader.ReadInt();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
                case 0x9F269C56u when name.SequenceEqual(propName_synchronous):
                    obj.Synchronous = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("getFileDownloadedPrefixSize")]
    partial class GetFileDownloadedPrefixSizeConverter : TLObjectConverter<GetFileDownloadedPrefixSize>
    {
        public static BaseConverter CreateConverterInstance() => new GetFileDownloadedPrefixSizeConverter();
        public override TLObject CreateObjectInstance() => new GetFileDownloadedPrefixSize();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetFileDownloadedPrefixSize)tlobj;
            if (name.SequenceEqual(propName_file_id))
            {
                obj.FileId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_offset))
            {
                obj.Offset = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("cancelDownloadFile")]
    partial class CancelDownloadFileConverter : TLObjectConverter<CancelDownloadFile>
    {
        public static BaseConverter CreateConverterInstance() => new CancelDownloadFileConverter();
        public override TLObject CreateObjectInstance() => new CancelDownloadFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CancelDownloadFile)tlobj;
            if (name.SequenceEqual(propName_file_id))
            {
                obj.FileId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_only_if_pending))
            {
                obj.OnlyIfPending = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("uploadFile")]
    partial class UploadFileConverter : TLObjectConverter<UploadFile>
    {
        public static BaseConverter CreateConverterInstance() => new UploadFileConverter();
        public override TLObject CreateObjectInstance() => new UploadFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UploadFile)tlobj;
            if (name.SequenceEqual(propName_file))
            {
                obj.File = reader.ReadTLObject<InputFile>();
                return true;
            }
            if (name.SequenceEqual(propName_file_type))
            {
                obj.FileType = reader.ReadTLObject<FileType>();
                return true;
            }
            if (name.SequenceEqual(propName_priority))
            {
                obj.Priority = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("cancelUploadFile")]
    partial class CancelUploadFileConverter : TLObjectConverter<CancelUploadFile>
    {
        public static BaseConverter CreateConverterInstance() => new CancelUploadFileConverter();
        public override TLObject CreateObjectInstance() => new CancelUploadFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CancelUploadFile)tlobj;
            if (name.SequenceEqual(propName_file_id))
            {
                obj.FileId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("writeGeneratedFilePart")]
    partial class WriteGeneratedFilePartConverter : TLObjectConverter<WriteGeneratedFilePart>
    {
        public static BaseConverter CreateConverterInstance() => new WriteGeneratedFilePartConverter();
        public override TLObject CreateObjectInstance() => new WriteGeneratedFilePart();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (WriteGeneratedFilePart)tlobj;
            if (name.SequenceEqual(propName_generation_id))
            {
                obj.GenerationId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_offset))
            {
                obj.Offset = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("setFileGenerationProgress")]
    partial class SetFileGenerationProgressConverter : TLObjectConverter<SetFileGenerationProgress>
    {
        public static BaseConverter CreateConverterInstance() => new SetFileGenerationProgressConverter();
        public override TLObject CreateObjectInstance() => new SetFileGenerationProgress();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetFileGenerationProgress)tlobj;
            if (name.SequenceEqual(propName_generation_id))
            {
                obj.GenerationId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_expected_size))
            {
                obj.ExpectedSize = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_local_prefix_size))
            {
                obj.LocalPrefixSize = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("finishFileGeneration")]
    partial class FinishFileGenerationConverter : TLObjectConverter<FinishFileGeneration>
    {
        public static BaseConverter CreateConverterInstance() => new FinishFileGenerationConverter();
        public override TLObject CreateObjectInstance() => new FinishFileGeneration();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (FinishFileGeneration)tlobj;
            if (name.SequenceEqual(propName_generation_id))
            {
                obj.GenerationId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_error))
            {
                obj.Error = reader.ReadTLObject<Error>();
                return true;
            }
            return false;
        }
    }

    [TLType("readFilePart")]
    partial class ReadFilePartConverter : TLObjectConverter<ReadFilePart>
    {
        public static BaseConverter CreateConverterInstance() => new ReadFilePartConverter();
        public override TLObject CreateObjectInstance() => new ReadFilePart();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ReadFilePart)tlobj;
            if (name.SequenceEqual(propName_file_id))
            {
                obj.FileId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_offset))
            {
                obj.Offset = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_count))
            {
                obj.Count = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("deleteFile")]
    partial class DeleteFileConverter : TLObjectConverter<DeleteFile>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteFileConverter();
        public override TLObject CreateObjectInstance() => new DeleteFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeleteFile)tlobj;
            if (name.SequenceEqual(propName_file_id))
            {
                obj.FileId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("generateChatInviteLink")]
    partial class GenerateChatInviteLinkConverter : TLObjectConverter<GenerateChatInviteLink>
    {
        public static BaseConverter CreateConverterInstance() => new GenerateChatInviteLinkConverter();
        public override TLObject CreateObjectInstance() => new GenerateChatInviteLink();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GenerateChatInviteLink)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("checkChatInviteLink")]
    partial class CheckChatInviteLinkConverter : TLObjectConverter<CheckChatInviteLink>
    {
        public static BaseConverter CreateConverterInstance() => new CheckChatInviteLinkConverter();
        public override TLObject CreateObjectInstance() => new CheckChatInviteLink();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckChatInviteLink)tlobj;
            if (name.SequenceEqual(propName_invite_link))
            {
                obj.InviteLink = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("joinChatByInviteLink")]
    partial class JoinChatByInviteLinkConverter : TLObjectConverter<JoinChatByInviteLink>
    {
        public static BaseConverter CreateConverterInstance() => new JoinChatByInviteLinkConverter();
        public override TLObject CreateObjectInstance() => new JoinChatByInviteLink();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (JoinChatByInviteLink)tlobj;
            if (name.SequenceEqual(propName_invite_link))
            {
                obj.InviteLink = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("createCall")]
    partial class CreateCallConverter : TLObjectConverter<CreateCall>
    {
        public static BaseConverter CreateConverterInstance() => new CreateCallConverter();
        public override TLObject CreateObjectInstance() => new CreateCall();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreateCall)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_protocol))
            {
                obj.Protocol = reader.ReadTLObject<CallProtocol>();
                return true;
            }
            if (name.SequenceEqual(propName_is_video))
            {
                obj.IsVideo = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("acceptCall")]
    partial class AcceptCallConverter : TLObjectConverter<AcceptCall>
    {
        public static BaseConverter CreateConverterInstance() => new AcceptCallConverter();
        public override TLObject CreateObjectInstance() => new AcceptCall();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AcceptCall)tlobj;
            if (name.SequenceEqual(propName_call_id))
            {
                obj.CallId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_protocol))
            {
                obj.Protocol = reader.ReadTLObject<CallProtocol>();
                return true;
            }
            return false;
        }
    }

    [TLType("sendCallSignalingData")]
    partial class SendCallSignalingDataConverter : TLObjectConverter<SendCallSignalingData>
    {
        public static BaseConverter CreateConverterInstance() => new SendCallSignalingDataConverter();
        public override TLObject CreateObjectInstance() => new SendCallSignalingData();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendCallSignalingData)tlobj;
            if (name.SequenceEqual(propName_call_id))
            {
                obj.CallId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("discardCall")]
    partial class DiscardCallConverter : TLObjectConverter<DiscardCall>
    {
        public static BaseConverter CreateConverterInstance() => new DiscardCallConverter();
        public override TLObject CreateObjectInstance() => new DiscardCall();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DiscardCall)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5A852F4Fu when name.SequenceEqual(propName_call_id):
                    obj.CallId = reader.ReadInt();
                    return true;
                case 0x23243DC1u when name.SequenceEqual(propName_is_disconnected):
                    obj.IsDisconnected = reader.ReadBool();
                    return true;
                case 0x2FA0FD0Du when name.SequenceEqual(propName_duration):
                    obj.Duration = reader.ReadInt();
                    return true;
                case 0x7815FC5Du when name.SequenceEqual(propName_is_video):
                    obj.IsVideo = reader.ReadBool();
                    return true;
                case 0xC1C626FFu when name.SequenceEqual(propName_connection_id):
                    obj.ConnectionId = reader.ReadInt64String();
                    return true;
            }
            return false;
        }
    }

    [TLType("sendCallRating")]
    partial class SendCallRatingConverter : TLObjectConverter<SendCallRating>
    {
        public static BaseConverter CreateConverterInstance() => new SendCallRatingConverter();
        public override TLObject CreateObjectInstance() => new SendCallRating();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendCallRating)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5A852F4Fu when name.SequenceEqual(propName_call_id):
                    obj.CallId = reader.ReadInt();
                    return true;
                case 0xF2891050u when name.SequenceEqual(propName_rating):
                    obj.Rating = reader.ReadInt();
                    return true;
                case 0x67A6C45Eu when name.SequenceEqual(propName_comment):
                    obj.Comment = reader.ReadString();
                    return true;
                case 0xA8C6987Du when name.SequenceEqual(propName_problems):
                    obj.Problems = reader.ReadObjectArray<CallProblem>();
                    return true;
            }
            return false;
        }
    }

    [TLType("sendCallDebugInformation")]
    partial class SendCallDebugInformationConverter : TLObjectConverter<SendCallDebugInformation>
    {
        public static BaseConverter CreateConverterInstance() => new SendCallDebugInformationConverter();
        public override TLObject CreateObjectInstance() => new SendCallDebugInformation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendCallDebugInformation)tlobj;
            if (name.SequenceEqual(propName_call_id))
            {
                obj.CallId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_debug_information))
            {
                obj.DebugInformation = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("blockChatFromReplies")]
    partial class BlockChatFromRepliesConverter : TLObjectConverter<BlockChatFromReplies>
    {
        public static BaseConverter CreateConverterInstance() => new BlockChatFromRepliesConverter();
        public override TLObject CreateObjectInstance() => new BlockChatFromReplies();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (BlockChatFromReplies)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x90DD0D6Eu when name.SequenceEqual(propName_delete_message):
                    obj.DeleteMessage = reader.ReadBool();
                    return true;
                case 0x9E7FB437u when name.SequenceEqual(propName_delete_all_messages):
                    obj.DeleteAllMessages = reader.ReadBool();
                    return true;
                case 0x47FD6F5Du when name.SequenceEqual(propName_report_spam):
                    obj.ReportSpam = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("getBlockedChats")]
    partial class GetBlockedChatsConverter : TLObjectConverter<GetBlockedChats>
    {
        public static BaseConverter CreateConverterInstance() => new GetBlockedChatsConverter();
        public override TLObject CreateObjectInstance() => new GetBlockedChats();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetBlockedChats)tlobj;
            if (name.SequenceEqual(propName_offset))
            {
                obj.Offset = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("addContact")]
    partial class AddContactConverter : TLObjectConverter<AddContact>
    {
        public static BaseConverter CreateConverterInstance() => new AddContactConverter();
        public override TLObject CreateObjectInstance() => new AddContact();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddContact)tlobj;
            if (name.SequenceEqual(propName_contact))
            {
                obj.Contact = reader.ReadTLObject<Contact>();
                return true;
            }
            if (name.SequenceEqual(propName_share_phone_number))
            {
                obj.SharePhoneNumber = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("importContacts")]
    partial class ImportContactsConverter : TLObjectConverter<ImportContacts>
    {
        public static BaseConverter CreateConverterInstance() => new ImportContactsConverter();
        public override TLObject CreateObjectInstance() => new ImportContacts();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ImportContacts)tlobj;
            if (name.SequenceEqual(propName_contacts))
            {
                obj.Contacts = reader.ReadObjectArray<Contact>();
                return true;
            }
            return false;
        }
    }

    [TLType("getContacts")]
    partial class GetContactsConverter : TLObjectConverter<GetContacts>
    {
        public static BaseConverter CreateConverterInstance() => new GetContactsConverter();
        public override TLObject CreateObjectInstance() => new GetContacts();
    }

    [TLType("searchContacts")]
    partial class SearchContactsConverter : TLObjectConverter<SearchContacts>
    {
        public static BaseConverter CreateConverterInstance() => new SearchContactsConverter();
        public override TLObject CreateObjectInstance() => new SearchContacts();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchContacts)tlobj;
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("removeContacts")]
    partial class RemoveContactsConverter : TLObjectConverter<RemoveContacts>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveContactsConverter();
        public override TLObject CreateObjectInstance() => new RemoveContacts();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveContacts)tlobj;
            if (name.SequenceEqual(propName_user_ids))
            {
                obj.UserIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("getImportedContactCount")]
    partial class GetImportedContactCountConverter : TLObjectConverter<GetImportedContactCount>
    {
        public static BaseConverter CreateConverterInstance() => new GetImportedContactCountConverter();
        public override TLObject CreateObjectInstance() => new GetImportedContactCount();
    }

    [TLType("changeImportedContacts")]
    partial class ChangeImportedContactsConverter : TLObjectConverter<ChangeImportedContacts>
    {
        public static BaseConverter CreateConverterInstance() => new ChangeImportedContactsConverter();
        public override TLObject CreateObjectInstance() => new ChangeImportedContacts();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChangeImportedContacts)tlobj;
            if (name.SequenceEqual(propName_contacts))
            {
                obj.Contacts = reader.ReadObjectArray<Contact>();
                return true;
            }
            return false;
        }
    }

    [TLType("clearImportedContacts")]
    partial class ClearImportedContactsConverter : TLObjectConverter<ClearImportedContacts>
    {
        public static BaseConverter CreateConverterInstance() => new ClearImportedContactsConverter();
        public override TLObject CreateObjectInstance() => new ClearImportedContacts();
    }

    [TLType("sharePhoneNumber")]
    partial class SharePhoneNumberConverter : TLObjectConverter<SharePhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new SharePhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new SharePhoneNumber();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SharePhoneNumber)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getUserProfilePhotos")]
    partial class GetUserProfilePhotosConverter : TLObjectConverter<GetUserProfilePhotos>
    {
        public static BaseConverter CreateConverterInstance() => new GetUserProfilePhotosConverter();
        public override TLObject CreateObjectInstance() => new GetUserProfilePhotos();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetUserProfilePhotos)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_offset))
            {
                obj.Offset = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getStickers")]
    partial class GetStickersConverter : TLObjectConverter<GetStickers>
    {
        public static BaseConverter CreateConverterInstance() => new GetStickersConverter();
        public override TLObject CreateObjectInstance() => new GetStickers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetStickers)tlobj;
            if (name.SequenceEqual(propName_emoji))
            {
                obj.Emoji = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("searchStickers")]
    partial class SearchStickersConverter : TLObjectConverter<SearchStickers>
    {
        public static BaseConverter CreateConverterInstance() => new SearchStickersConverter();
        public override TLObject CreateObjectInstance() => new SearchStickers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchStickers)tlobj;
            if (name.SequenceEqual(propName_emoji))
            {
                obj.Emoji = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getInstalledStickerSets")]
    partial class GetInstalledStickerSetsConverter : TLObjectConverter<GetInstalledStickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new GetInstalledStickerSetsConverter();
        public override TLObject CreateObjectInstance() => new GetInstalledStickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetInstalledStickerSets)tlobj;
            if (name.SequenceEqual(propName_is_masks))
            {
                obj.IsMasks = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getArchivedStickerSets")]
    partial class GetArchivedStickerSetsConverter : TLObjectConverter<GetArchivedStickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new GetArchivedStickerSetsConverter();
        public override TLObject CreateObjectInstance() => new GetArchivedStickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetArchivedStickerSets)tlobj;
            if (name.SequenceEqual(propName_is_masks))
            {
                obj.IsMasks = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_offset_sticker_set_id))
            {
                obj.OffsetStickerSetId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getTrendingStickerSets")]
    partial class GetTrendingStickerSetsConverter : TLObjectConverter<GetTrendingStickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new GetTrendingStickerSetsConverter();
        public override TLObject CreateObjectInstance() => new GetTrendingStickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetTrendingStickerSets)tlobj;
            if (name.SequenceEqual(propName_offset))
            {
                obj.Offset = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getAttachedStickerSets")]
    partial class GetAttachedStickerSetsConverter : TLObjectConverter<GetAttachedStickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new GetAttachedStickerSetsConverter();
        public override TLObject CreateObjectInstance() => new GetAttachedStickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetAttachedStickerSets)tlobj;
            if (name.SequenceEqual(propName_file_id))
            {
                obj.FileId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getStickerSet")]
    partial class GetStickerSetConverter : TLObjectConverter<GetStickerSet>
    {
        public static BaseConverter CreateConverterInstance() => new GetStickerSetConverter();
        public override TLObject CreateObjectInstance() => new GetStickerSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetStickerSet)tlobj;
            if (name.SequenceEqual(propName_set_id))
            {
                obj.SetId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("searchStickerSet")]
    partial class SearchStickerSetConverter : TLObjectConverter<SearchStickerSet>
    {
        public static BaseConverter CreateConverterInstance() => new SearchStickerSetConverter();
        public override TLObject CreateObjectInstance() => new SearchStickerSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchStickerSet)tlobj;
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("searchInstalledStickerSets")]
    partial class SearchInstalledStickerSetsConverter : TLObjectConverter<SearchInstalledStickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new SearchInstalledStickerSetsConverter();
        public override TLObject CreateObjectInstance() => new SearchInstalledStickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchInstalledStickerSets)tlobj;
            if (name.SequenceEqual(propName_is_masks))
            {
                obj.IsMasks = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("searchStickerSets")]
    partial class SearchStickerSetsConverter : TLObjectConverter<SearchStickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new SearchStickerSetsConverter();
        public override TLObject CreateObjectInstance() => new SearchStickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchStickerSets)tlobj;
            if (name.SequenceEqual(propName_query))
            {
                obj.Query = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("changeStickerSet")]
    partial class ChangeStickerSetConverter : TLObjectConverter<ChangeStickerSet>
    {
        public static BaseConverter CreateConverterInstance() => new ChangeStickerSetConverter();
        public override TLObject CreateObjectInstance() => new ChangeStickerSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChangeStickerSet)tlobj;
            if (name.SequenceEqual(propName_set_id))
            {
                obj.SetId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_is_installed))
            {
                obj.IsInstalled = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_is_archived))
            {
                obj.IsArchived = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("viewTrendingStickerSets")]
    partial class ViewTrendingStickerSetsConverter : TLObjectConverter<ViewTrendingStickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new ViewTrendingStickerSetsConverter();
        public override TLObject CreateObjectInstance() => new ViewTrendingStickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ViewTrendingStickerSets)tlobj;
            if (name.SequenceEqual(propName_sticker_set_ids))
            {
                obj.StickerSetIds = reader.ReadInt64Array();
                return true;
            }
            return false;
        }
    }

    [TLType("reorderInstalledStickerSets")]
    partial class ReorderInstalledStickerSetsConverter : TLObjectConverter<ReorderInstalledStickerSets>
    {
        public static BaseConverter CreateConverterInstance() => new ReorderInstalledStickerSetsConverter();
        public override TLObject CreateObjectInstance() => new ReorderInstalledStickerSets();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ReorderInstalledStickerSets)tlobj;
            if (name.SequenceEqual(propName_is_masks))
            {
                obj.IsMasks = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_sticker_set_ids))
            {
                obj.StickerSetIds = reader.ReadInt64Array();
                return true;
            }
            return false;
        }
    }

    [TLType("getRecentStickers")]
    partial class GetRecentStickersConverter : TLObjectConverter<GetRecentStickers>
    {
        public static BaseConverter CreateConverterInstance() => new GetRecentStickersConverter();
        public override TLObject CreateObjectInstance() => new GetRecentStickers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetRecentStickers)tlobj;
            if (name.SequenceEqual(propName_is_attached))
            {
                obj.IsAttached = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("addRecentSticker")]
    partial class AddRecentStickerConverter : TLObjectConverter<AddRecentSticker>
    {
        public static BaseConverter CreateConverterInstance() => new AddRecentStickerConverter();
        public override TLObject CreateObjectInstance() => new AddRecentSticker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddRecentSticker)tlobj;
            if (name.SequenceEqual(propName_is_attached))
            {
                obj.IsAttached = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("removeRecentSticker")]
    partial class RemoveRecentStickerConverter : TLObjectConverter<RemoveRecentSticker>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveRecentStickerConverter();
        public override TLObject CreateObjectInstance() => new RemoveRecentSticker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveRecentSticker)tlobj;
            if (name.SequenceEqual(propName_is_attached))
            {
                obj.IsAttached = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("clearRecentStickers")]
    partial class ClearRecentStickersConverter : TLObjectConverter<ClearRecentStickers>
    {
        public static BaseConverter CreateConverterInstance() => new ClearRecentStickersConverter();
        public override TLObject CreateObjectInstance() => new ClearRecentStickers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ClearRecentStickers)tlobj;
            if (name.SequenceEqual(propName_is_attached))
            {
                obj.IsAttached = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getFavoriteStickers")]
    partial class GetFavoriteStickersConverter : TLObjectConverter<GetFavoriteStickers>
    {
        public static BaseConverter CreateConverterInstance() => new GetFavoriteStickersConverter();
        public override TLObject CreateObjectInstance() => new GetFavoriteStickers();
    }

    [TLType("addFavoriteSticker")]
    partial class AddFavoriteStickerConverter : TLObjectConverter<AddFavoriteSticker>
    {
        public static BaseConverter CreateConverterInstance() => new AddFavoriteStickerConverter();
        public override TLObject CreateObjectInstance() => new AddFavoriteSticker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddFavoriteSticker)tlobj;
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("removeFavoriteSticker")]
    partial class RemoveFavoriteStickerConverter : TLObjectConverter<RemoveFavoriteSticker>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveFavoriteStickerConverter();
        public override TLObject CreateObjectInstance() => new RemoveFavoriteSticker();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveFavoriteSticker)tlobj;
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("getStickerEmojis")]
    partial class GetStickerEmojisConverter : TLObjectConverter<GetStickerEmojis>
    {
        public static BaseConverter CreateConverterInstance() => new GetStickerEmojisConverter();
        public override TLObject CreateObjectInstance() => new GetStickerEmojis();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetStickerEmojis)tlobj;
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("searchEmojis")]
    partial class SearchEmojisConverter : TLObjectConverter<SearchEmojis>
    {
        public static BaseConverter CreateConverterInstance() => new SearchEmojisConverter();
        public override TLObject CreateObjectInstance() => new SearchEmojis();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchEmojis)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_exact_match))
            {
                obj.ExactMatch = reader.ReadBool();
                return true;
            }
            if (name.SequenceEqual(propName_input_language_codes))
            {
                obj.InputLanguageCodes = reader.ReadStringArray();
                return true;
            }
            return false;
        }
    }

    [TLType("getEmojiSuggestionsUrl")]
    partial class GetEmojiSuggestionsUrlConverter : TLObjectConverter<GetEmojiSuggestionsUrl>
    {
        public static BaseConverter CreateConverterInstance() => new GetEmojiSuggestionsUrlConverter();
        public override TLObject CreateObjectInstance() => new GetEmojiSuggestionsUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetEmojiSuggestionsUrl)tlobj;
            if (name.SequenceEqual(propName_language_code))
            {
                obj.LanguageCode = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getSavedAnimations")]
    partial class GetSavedAnimationsConverter : TLObjectConverter<GetSavedAnimations>
    {
        public static BaseConverter CreateConverterInstance() => new GetSavedAnimationsConverter();
        public override TLObject CreateObjectInstance() => new GetSavedAnimations();
    }

    [TLType("addSavedAnimation")]
    partial class AddSavedAnimationConverter : TLObjectConverter<AddSavedAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new AddSavedAnimationConverter();
        public override TLObject CreateObjectInstance() => new AddSavedAnimation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddSavedAnimation)tlobj;
            if (name.SequenceEqual(propName_animation))
            {
                obj.Animation = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("removeSavedAnimation")]
    partial class RemoveSavedAnimationConverter : TLObjectConverter<RemoveSavedAnimation>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveSavedAnimationConverter();
        public override TLObject CreateObjectInstance() => new RemoveSavedAnimation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveSavedAnimation)tlobj;
            if (name.SequenceEqual(propName_animation))
            {
                obj.Animation = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("getRecentInlineBots")]
    partial class GetRecentInlineBotsConverter : TLObjectConverter<GetRecentInlineBots>
    {
        public static BaseConverter CreateConverterInstance() => new GetRecentInlineBotsConverter();
        public override TLObject CreateObjectInstance() => new GetRecentInlineBots();
    }

    [TLType("searchHashtags")]
    partial class SearchHashtagsConverter : TLObjectConverter<SearchHashtags>
    {
        public static BaseConverter CreateConverterInstance() => new SearchHashtagsConverter();
        public override TLObject CreateObjectInstance() => new SearchHashtags();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchHashtags)tlobj;
            if (name.SequenceEqual(propName_prefix))
            {
                obj.Prefix = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_limit))
            {
                obj.Limit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("removeRecentHashtag")]
    partial class RemoveRecentHashtagConverter : TLObjectConverter<RemoveRecentHashtag>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveRecentHashtagConverter();
        public override TLObject CreateObjectInstance() => new RemoveRecentHashtag();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveRecentHashtag)tlobj;
            if (name.SequenceEqual(propName_hashtag))
            {
                obj.Hashtag = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getWebPagePreview")]
    partial class GetWebPagePreviewConverter : TLObjectConverter<GetWebPagePreview>
    {
        public static BaseConverter CreateConverterInstance() => new GetWebPagePreviewConverter();
        public override TLObject CreateObjectInstance() => new GetWebPagePreview();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetWebPagePreview)tlobj;
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadTLObject<FormattedText>();
                return true;
            }
            return false;
        }
    }

    [TLType("getWebPageInstantView")]
    partial class GetWebPageInstantViewConverter : TLObjectConverter<GetWebPageInstantView>
    {
        public static BaseConverter CreateConverterInstance() => new GetWebPageInstantViewConverter();
        public override TLObject CreateObjectInstance() => new GetWebPageInstantView();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetWebPageInstantView)tlobj;
            if (name.SequenceEqual(propName_url))
            {
                obj.Url = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_force_full))
            {
                obj.ForceFull = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("setProfilePhoto")]
    partial class SetProfilePhotoConverter : TLObjectConverter<SetProfilePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new SetProfilePhotoConverter();
        public override TLObject CreateObjectInstance() => new SetProfilePhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetProfilePhoto)tlobj;
            if (name.SequenceEqual(propName_photo))
            {
                obj.Photo = reader.ReadTLObject<InputChatPhoto>();
                return true;
            }
            return false;
        }
    }

    [TLType("deleteProfilePhoto")]
    partial class DeleteProfilePhotoConverter : TLObjectConverter<DeleteProfilePhoto>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteProfilePhotoConverter();
        public override TLObject CreateObjectInstance() => new DeleteProfilePhoto();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeleteProfilePhoto)tlobj;
            if (name.SequenceEqual(propName_profile_photo_id))
            {
                obj.ProfilePhotoId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("setName")]
    partial class SetNameConverter : TLObjectConverter<SetName>
    {
        public static BaseConverter CreateConverterInstance() => new SetNameConverter();
        public override TLObject CreateObjectInstance() => new SetName();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetName)tlobj;
            if (name.SequenceEqual(propName_first_name))
            {
                obj.FirstName = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_last_name))
            {
                obj.LastName = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setBio")]
    partial class SetBioConverter : TLObjectConverter<SetBio>
    {
        public static BaseConverter CreateConverterInstance() => new SetBioConverter();
        public override TLObject CreateObjectInstance() => new SetBio();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetBio)tlobj;
            if (name.SequenceEqual(propName_bio))
            {
                obj.Bio = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setUsername")]
    partial class SetUsernameConverter : TLObjectConverter<SetUsername>
    {
        public static BaseConverter CreateConverterInstance() => new SetUsernameConverter();
        public override TLObject CreateObjectInstance() => new SetUsername();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetUsername)tlobj;
            if (name.SequenceEqual(propName_username))
            {
                obj.Username = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setLocation")]
    partial class SetLocationConverter : TLObjectConverter<SetLocation>
    {
        public static BaseConverter CreateConverterInstance() => new SetLocationConverter();
        public override TLObject CreateObjectInstance() => new SetLocation();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetLocation)tlobj;
            if (name.SequenceEqual(propName_location))
            {
                obj.Location = reader.ReadTLObject<Location>();
                return true;
            }
            return false;
        }
    }

    [TLType("changePhoneNumber")]
    partial class ChangePhoneNumberConverter : TLObjectConverter<ChangePhoneNumber>
    {
        public static BaseConverter CreateConverterInstance() => new ChangePhoneNumberConverter();
        public override TLObject CreateObjectInstance() => new ChangePhoneNumber();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ChangePhoneNumber)tlobj;
            if (name.SequenceEqual(propName_phone_number))
            {
                obj.PhoneNumber = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_settings))
            {
                obj.Settings = reader.ReadTLObject<PhoneNumberAuthenticationSettings>();
                return true;
            }
            return false;
        }
    }

    [TLType("resendChangePhoneNumberCode")]
    partial class ResendChangePhoneNumberCodeConverter : TLObjectConverter<ResendChangePhoneNumberCode>
    {
        public static BaseConverter CreateConverterInstance() => new ResendChangePhoneNumberCodeConverter();
        public override TLObject CreateObjectInstance() => new ResendChangePhoneNumberCode();
    }

    [TLType("checkChangePhoneNumberCode")]
    partial class CheckChangePhoneNumberCodeConverter : TLObjectConverter<CheckChangePhoneNumberCode>
    {
        public static BaseConverter CreateConverterInstance() => new CheckChangePhoneNumberCodeConverter();
        public override TLObject CreateObjectInstance() => new CheckChangePhoneNumberCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckChangePhoneNumberCode)tlobj;
            if (name.SequenceEqual(propName_code))
            {
                obj.Code = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setCommands")]
    partial class SetCommandsConverter : TLObjectConverter<SetCommands>
    {
        public static BaseConverter CreateConverterInstance() => new SetCommandsConverter();
        public override TLObject CreateObjectInstance() => new SetCommands();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetCommands)tlobj;
            if (name.SequenceEqual(propName_commands))
            {
                obj.Commands = reader.ReadObjectArray<BotCommand>();
                return true;
            }
            return false;
        }
    }

    [TLType("getActiveSessions")]
    partial class GetActiveSessionsConverter : TLObjectConverter<GetActiveSessions>
    {
        public static BaseConverter CreateConverterInstance() => new GetActiveSessionsConverter();
        public override TLObject CreateObjectInstance() => new GetActiveSessions();
    }

    [TLType("terminateSession")]
    partial class TerminateSessionConverter : TLObjectConverter<TerminateSession>
    {
        public static BaseConverter CreateConverterInstance() => new TerminateSessionConverter();
        public override TLObject CreateObjectInstance() => new TerminateSession();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TerminateSession)tlobj;
            if (name.SequenceEqual(propName_session_id))
            {
                obj.SessionId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("terminateAllOtherSessions")]
    partial class TerminateAllOtherSessionsConverter : TLObjectConverter<TerminateAllOtherSessions>
    {
        public static BaseConverter CreateConverterInstance() => new TerminateAllOtherSessionsConverter();
        public override TLObject CreateObjectInstance() => new TerminateAllOtherSessions();
    }

    [TLType("getConnectedWebsites")]
    partial class GetConnectedWebsitesConverter : TLObjectConverter<GetConnectedWebsites>
    {
        public static BaseConverter CreateConverterInstance() => new GetConnectedWebsitesConverter();
        public override TLObject CreateObjectInstance() => new GetConnectedWebsites();
    }

    [TLType("disconnectWebsite")]
    partial class DisconnectWebsiteConverter : TLObjectConverter<DisconnectWebsite>
    {
        public static BaseConverter CreateConverterInstance() => new DisconnectWebsiteConverter();
        public override TLObject CreateObjectInstance() => new DisconnectWebsite();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DisconnectWebsite)tlobj;
            if (name.SequenceEqual(propName_website_id))
            {
                obj.WebsiteId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("disconnectAllWebsites")]
    partial class DisconnectAllWebsitesConverter : TLObjectConverter<DisconnectAllWebsites>
    {
        public static BaseConverter CreateConverterInstance() => new DisconnectAllWebsitesConverter();
        public override TLObject CreateObjectInstance() => new DisconnectAllWebsites();
    }

    [TLType("setSupergroupUsername")]
    partial class SetSupergroupUsernameConverter : TLObjectConverter<SetSupergroupUsername>
    {
        public static BaseConverter CreateConverterInstance() => new SetSupergroupUsernameConverter();
        public override TLObject CreateObjectInstance() => new SetSupergroupUsername();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetSupergroupUsername)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_username))
            {
                obj.Username = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setSupergroupStickerSet")]
    partial class SetSupergroupStickerSetConverter : TLObjectConverter<SetSupergroupStickerSet>
    {
        public static BaseConverter CreateConverterInstance() => new SetSupergroupStickerSetConverter();
        public override TLObject CreateObjectInstance() => new SetSupergroupStickerSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetSupergroupStickerSet)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_sticker_set_id))
            {
                obj.StickerSetId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("toggleSupergroupSignMessages")]
    partial class ToggleSupergroupSignMessagesConverter : TLObjectConverter<ToggleSupergroupSignMessages>
    {
        public static BaseConverter CreateConverterInstance() => new ToggleSupergroupSignMessagesConverter();
        public override TLObject CreateObjectInstance() => new ToggleSupergroupSignMessages();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ToggleSupergroupSignMessages)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_sign_messages))
            {
                obj.SignMessages = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("toggleSupergroupIsAllHistoryAvailable")]
    partial class ToggleSupergroupIsAllHistoryAvailableConverter : TLObjectConverter<ToggleSupergroupIsAllHistoryAvailable>
    {
        public static BaseConverter CreateConverterInstance() => new ToggleSupergroupIsAllHistoryAvailableConverter();
        public override TLObject CreateObjectInstance() => new ToggleSupergroupIsAllHistoryAvailable();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ToggleSupergroupIsAllHistoryAvailable)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_is_all_history_available))
            {
                obj.IsAllHistoryAvailable = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("reportSupergroupSpam")]
    partial class ReportSupergroupSpamConverter : TLObjectConverter<ReportSupergroupSpam>
    {
        public static BaseConverter CreateConverterInstance() => new ReportSupergroupSpamConverter();
        public override TLObject CreateObjectInstance() => new ReportSupergroupSpam();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ReportSupergroupSpam)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_message_ids))
            {
                obj.MessageIds = reader.ReadInt53Array();
                return true;
            }
            return false;
        }
    }

    [TLType("getSupergroupMembers")]
    partial class GetSupergroupMembersConverter : TLObjectConverter<GetSupergroupMembers>
    {
        public static BaseConverter CreateConverterInstance() => new GetSupergroupMembersConverter();
        public override TLObject CreateObjectInstance() => new GetSupergroupMembers();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetSupergroupMembers)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xE5C85855u when name.SequenceEqual(propName_supergroup_id):
                    obj.SupergroupId = reader.ReadInt();
                    return true;
                case 0xC7E16877u when name.SequenceEqual(propName_filter):
                    obj.Filter = reader.ReadTLObject<SupergroupMembersFilter>();
                    return true;
                case 0x14C8D3CAu when name.SequenceEqual(propName_offset):
                    obj.Offset = reader.ReadInt();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("deleteSupergroup")]
    partial class DeleteSupergroupConverter : TLObjectConverter<DeleteSupergroup>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteSupergroupConverter();
        public override TLObject CreateObjectInstance() => new DeleteSupergroup();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeleteSupergroup)tlobj;
            if (name.SequenceEqual(propName_supergroup_id))
            {
                obj.SupergroupId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("closeSecretChat")]
    partial class CloseSecretChatConverter : TLObjectConverter<CloseSecretChat>
    {
        public static BaseConverter CreateConverterInstance() => new CloseSecretChatConverter();
        public override TLObject CreateObjectInstance() => new CloseSecretChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CloseSecretChat)tlobj;
            if (name.SequenceEqual(propName_secret_chat_id))
            {
                obj.SecretChatId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatEventLog")]
    partial class GetChatEventLogConverter : TLObjectConverter<GetChatEventLog>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatEventLogConverter();
        public override TLObject CreateObjectInstance() => new GetChatEventLog();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatEventLog)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0xF8CE75E3u when name.SequenceEqual(propName_query):
                    obj.Query = reader.ReadString();
                    return true;
                case 0x4B0B8882u when name.SequenceEqual(propName_from_event_id):
                    obj.FromEventId = reader.ReadInt64String();
                    return true;
                case 0x32DAD934u when name.SequenceEqual(propName_limit):
                    obj.Limit = reader.ReadInt();
                    return true;
                case 0xABD6BE4Cu when name.SequenceEqual(propName_filters):
                    obj.Filters = reader.ReadTLObject<ChatEventLogFilters>();
                    return true;
                case 0xE076DE0Bu when name.SequenceEqual(propName_user_ids):
                    obj.UserIds = reader.ReadInt32Array();
                    return true;
            }
            return false;
        }
    }

    [TLType("getPaymentForm")]
    partial class GetPaymentFormConverter : TLObjectConverter<GetPaymentForm>
    {
        public static BaseConverter CreateConverterInstance() => new GetPaymentFormConverter();
        public override TLObject CreateObjectInstance() => new GetPaymentForm();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetPaymentForm)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("validateOrderInfo")]
    partial class ValidateOrderInfoConverter : TLObjectConverter<ValidateOrderInfo>
    {
        public static BaseConverter CreateConverterInstance() => new ValidateOrderInfoConverter();
        public override TLObject CreateObjectInstance() => new ValidateOrderInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ValidateOrderInfo)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0xF60D2304u when name.SequenceEqual(propName_order_info):
                    obj.OrderInfo = reader.ReadTLObject<OrderInfo>();
                    return true;
                case 0xA7B324C2u when name.SequenceEqual(propName_allow_save):
                    obj.AllowSave = reader.ReadBool();
                    return true;
            }
            return false;
        }
    }

    [TLType("sendPaymentForm")]
    partial class SendPaymentFormConverter : TLObjectConverter<SendPaymentForm>
    {
        public static BaseConverter CreateConverterInstance() => new SendPaymentFormConverter();
        public override TLObject CreateObjectInstance() => new SendPaymentForm();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendPaymentForm)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
                case 0x5E295EB4u when name.SequenceEqual(propName_message_id):
                    obj.MessageId = reader.ReadLong();
                    return true;
                case 0x01157794u when name.SequenceEqual(propName_order_info_id):
                    obj.OrderInfoId = reader.ReadString();
                    return true;
                case 0x20399A5Bu when name.SequenceEqual(propName_shipping_option_id):
                    obj.ShippingOptionId = reader.ReadString();
                    return true;
                case 0xE8FD9BD1u when name.SequenceEqual(propName_credentials):
                    obj.Credentials = reader.ReadTLObject<InputCredentials>();
                    return true;
            }
            return false;
        }
    }

    [TLType("getPaymentReceipt")]
    partial class GetPaymentReceiptConverter : TLObjectConverter<GetPaymentReceipt>
    {
        public static BaseConverter CreateConverterInstance() => new GetPaymentReceiptConverter();
        public override TLObject CreateObjectInstance() => new GetPaymentReceipt();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetPaymentReceipt)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("getSavedOrderInfo")]
    partial class GetSavedOrderInfoConverter : TLObjectConverter<GetSavedOrderInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetSavedOrderInfoConverter();
        public override TLObject CreateObjectInstance() => new GetSavedOrderInfo();
    }

    [TLType("deleteSavedOrderInfo")]
    partial class DeleteSavedOrderInfoConverter : TLObjectConverter<DeleteSavedOrderInfo>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteSavedOrderInfoConverter();
        public override TLObject CreateObjectInstance() => new DeleteSavedOrderInfo();
    }

    [TLType("deleteSavedCredentials")]
    partial class DeleteSavedCredentialsConverter : TLObjectConverter<DeleteSavedCredentials>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteSavedCredentialsConverter();
        public override TLObject CreateObjectInstance() => new DeleteSavedCredentials();
    }

    [TLType("getSupportUser")]
    partial class GetSupportUserConverter : TLObjectConverter<GetSupportUser>
    {
        public static BaseConverter CreateConverterInstance() => new GetSupportUserConverter();
        public override TLObject CreateObjectInstance() => new GetSupportUser();
    }

    [TLType("getBackgrounds")]
    partial class GetBackgroundsConverter : TLObjectConverter<GetBackgrounds>
    {
        public static BaseConverter CreateConverterInstance() => new GetBackgroundsConverter();
        public override TLObject CreateObjectInstance() => new GetBackgrounds();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetBackgrounds)tlobj;
            if (name.SequenceEqual(propName_for_dark_theme))
            {
                obj.ForDarkTheme = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getBackgroundUrl")]
    partial class GetBackgroundUrlConverter : TLObjectConverter<GetBackgroundUrl>
    {
        public static BaseConverter CreateConverterInstance() => new GetBackgroundUrlConverter();
        public override TLObject CreateObjectInstance() => new GetBackgroundUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetBackgroundUrl)tlobj;
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<BackgroundType>();
                return true;
            }
            return false;
        }
    }

    [TLType("searchBackground")]
    partial class SearchBackgroundConverter : TLObjectConverter<SearchBackground>
    {
        public static BaseConverter CreateConverterInstance() => new SearchBackgroundConverter();
        public override TLObject CreateObjectInstance() => new SearchBackground();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SearchBackground)tlobj;
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setBackground")]
    partial class SetBackgroundConverter : TLObjectConverter<SetBackground>
    {
        public static BaseConverter CreateConverterInstance() => new SetBackgroundConverter();
        public override TLObject CreateObjectInstance() => new SetBackground();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetBackground)tlobj;
            if (name.SequenceEqual(propName_background))
            {
                obj.Background = reader.ReadTLObject<InputBackground>();
                return true;
            }
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<BackgroundType>();
                return true;
            }
            if (name.SequenceEqual(propName_for_dark_theme))
            {
                obj.ForDarkTheme = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("removeBackground")]
    partial class RemoveBackgroundConverter : TLObjectConverter<RemoveBackground>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveBackgroundConverter();
        public override TLObject CreateObjectInstance() => new RemoveBackground();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveBackground)tlobj;
            if (name.SequenceEqual(propName_background_id))
            {
                obj.BackgroundId = reader.ReadInt64String();
                return true;
            }
            return false;
        }
    }

    [TLType("resetBackgrounds")]
    partial class ResetBackgroundsConverter : TLObjectConverter<ResetBackgrounds>
    {
        public static BaseConverter CreateConverterInstance() => new ResetBackgroundsConverter();
        public override TLObject CreateObjectInstance() => new ResetBackgrounds();
    }

    [TLType("getLocalizationTargetInfo")]
    partial class GetLocalizationTargetInfoConverter : TLObjectConverter<GetLocalizationTargetInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetLocalizationTargetInfoConverter();
        public override TLObject CreateObjectInstance() => new GetLocalizationTargetInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetLocalizationTargetInfo)tlobj;
            if (name.SequenceEqual(propName_only_local))
            {
                obj.OnlyLocal = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getLanguagePackInfo")]
    partial class GetLanguagePackInfoConverter : TLObjectConverter<GetLanguagePackInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetLanguagePackInfoConverter();
        public override TLObject CreateObjectInstance() => new GetLanguagePackInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetLanguagePackInfo)tlobj;
            if (name.SequenceEqual(propName_language_pack_id))
            {
                obj.LanguagePackId = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getLanguagePackStrings")]
    partial class GetLanguagePackStringsConverter : TLObjectConverter<GetLanguagePackStrings>
    {
        public static BaseConverter CreateConverterInstance() => new GetLanguagePackStringsConverter();
        public override TLObject CreateObjectInstance() => new GetLanguagePackStrings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetLanguagePackStrings)tlobj;
            if (name.SequenceEqual(propName_language_pack_id))
            {
                obj.LanguagePackId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_keys))
            {
                obj.Keys = reader.ReadStringArray();
                return true;
            }
            return false;
        }
    }

    [TLType("synchronizeLanguagePack")]
    partial class SynchronizeLanguagePackConverter : TLObjectConverter<SynchronizeLanguagePack>
    {
        public static BaseConverter CreateConverterInstance() => new SynchronizeLanguagePackConverter();
        public override TLObject CreateObjectInstance() => new SynchronizeLanguagePack();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SynchronizeLanguagePack)tlobj;
            if (name.SequenceEqual(propName_language_pack_id))
            {
                obj.LanguagePackId = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("addCustomServerLanguagePack")]
    partial class AddCustomServerLanguagePackConverter : TLObjectConverter<AddCustomServerLanguagePack>
    {
        public static BaseConverter CreateConverterInstance() => new AddCustomServerLanguagePackConverter();
        public override TLObject CreateObjectInstance() => new AddCustomServerLanguagePack();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddCustomServerLanguagePack)tlobj;
            if (name.SequenceEqual(propName_language_pack_id))
            {
                obj.LanguagePackId = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setCustomLanguagePack")]
    partial class SetCustomLanguagePackConverter : TLObjectConverter<SetCustomLanguagePack>
    {
        public static BaseConverter CreateConverterInstance() => new SetCustomLanguagePackConverter();
        public override TLObject CreateObjectInstance() => new SetCustomLanguagePack();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetCustomLanguagePack)tlobj;
            if (name.SequenceEqual(propName_info))
            {
                obj.Info = reader.ReadTLObject<LanguagePackInfo>();
                return true;
            }
            if (name.SequenceEqual(propName_strings))
            {
                obj.Strings = reader.ReadObjectArray<LanguagePackString>();
                return true;
            }
            return false;
        }
    }

    [TLType("editCustomLanguagePackInfo")]
    partial class EditCustomLanguagePackInfoConverter : TLObjectConverter<EditCustomLanguagePackInfo>
    {
        public static BaseConverter CreateConverterInstance() => new EditCustomLanguagePackInfoConverter();
        public override TLObject CreateObjectInstance() => new EditCustomLanguagePackInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditCustomLanguagePackInfo)tlobj;
            if (name.SequenceEqual(propName_info))
            {
                obj.Info = reader.ReadTLObject<LanguagePackInfo>();
                return true;
            }
            return false;
        }
    }

    [TLType("setCustomLanguagePackString")]
    partial class SetCustomLanguagePackStringConverter : TLObjectConverter<SetCustomLanguagePackString>
    {
        public static BaseConverter CreateConverterInstance() => new SetCustomLanguagePackStringConverter();
        public override TLObject CreateObjectInstance() => new SetCustomLanguagePackString();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetCustomLanguagePackString)tlobj;
            if (name.SequenceEqual(propName_language_pack_id))
            {
                obj.LanguagePackId = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_new_string))
            {
                obj.NewString = reader.ReadTLObject<LanguagePackString>();
                return true;
            }
            return false;
        }
    }

    [TLType("deleteLanguagePack")]
    partial class DeleteLanguagePackConverter : TLObjectConverter<DeleteLanguagePack>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteLanguagePackConverter();
        public override TLObject CreateObjectInstance() => new DeleteLanguagePack();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeleteLanguagePack)tlobj;
            if (name.SequenceEqual(propName_language_pack_id))
            {
                obj.LanguagePackId = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("registerDevice")]
    partial class RegisterDeviceConverter : TLObjectConverter<RegisterDevice>
    {
        public static BaseConverter CreateConverterInstance() => new RegisterDeviceConverter();
        public override TLObject CreateObjectInstance() => new RegisterDevice();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RegisterDevice)tlobj;
            if (name.SequenceEqual(propName_device_token))
            {
                obj.DeviceToken = reader.ReadTLObject<DeviceToken>();
                return true;
            }
            if (name.SequenceEqual(propName_other_user_ids))
            {
                obj.OtherUserIds = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("processPushNotification")]
    partial class ProcessPushNotificationConverter : TLObjectConverter<ProcessPushNotification>
    {
        public static BaseConverter CreateConverterInstance() => new ProcessPushNotificationConverter();
        public override TLObject CreateObjectInstance() => new ProcessPushNotification();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ProcessPushNotification)tlobj;
            if (name.SequenceEqual(propName_payload))
            {
                obj.Payload = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getPushReceiverId")]
    partial class GetPushReceiverIdConverter : TLObjectConverter<GetPushReceiverId>
    {
        public static BaseConverter CreateConverterInstance() => new GetPushReceiverIdConverter();
        public override TLObject CreateObjectInstance() => new GetPushReceiverId();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetPushReceiverId)tlobj;
            if (name.SequenceEqual(propName_payload))
            {
                obj.Payload = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getRecentlyVisitedTMeUrls")]
    partial class GetRecentlyVisitedTMeUrlsConverter : TLObjectConverter<GetRecentlyVisitedTMeUrls>
    {
        public static BaseConverter CreateConverterInstance() => new GetRecentlyVisitedTMeUrlsConverter();
        public override TLObject CreateObjectInstance() => new GetRecentlyVisitedTMeUrls();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetRecentlyVisitedTMeUrls)tlobj;
            if (name.SequenceEqual(propName_referrer))
            {
                obj.Referrer = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setUserPrivacySettingRules")]
    partial class SetUserPrivacySettingRulesConverter : TLObjectConverter<SetUserPrivacySettingRules>
    {
        public static BaseConverter CreateConverterInstance() => new SetUserPrivacySettingRulesConverter();
        public override TLObject CreateObjectInstance() => new SetUserPrivacySettingRules();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetUserPrivacySettingRules)tlobj;
            if (name.SequenceEqual(propName_setting))
            {
                obj.Setting = reader.ReadTLObject<UserPrivacySetting>();
                return true;
            }
            if (name.SequenceEqual(propName_rules))
            {
                obj.Rules = reader.ReadTLObject<UserPrivacySettingRules>();
                return true;
            }
            return false;
        }
    }

    [TLType("getUserPrivacySettingRules")]
    partial class GetUserPrivacySettingRulesConverter : TLObjectConverter<GetUserPrivacySettingRules>
    {
        public static BaseConverter CreateConverterInstance() => new GetUserPrivacySettingRulesConverter();
        public override TLObject CreateObjectInstance() => new GetUserPrivacySettingRules();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetUserPrivacySettingRules)tlobj;
            if (name.SequenceEqual(propName_setting))
            {
                obj.Setting = reader.ReadTLObject<UserPrivacySetting>();
                return true;
            }
            return false;
        }
    }

    [TLType("getOption")]
    partial class GetOptionConverter : TLObjectConverter<GetOption>
    {
        public static BaseConverter CreateConverterInstance() => new GetOptionConverter();
        public override TLObject CreateObjectInstance() => new GetOption();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetOption)tlobj;
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setOption")]
    partial class SetOptionConverter : TLObjectConverter<SetOption>
    {
        public static BaseConverter CreateConverterInstance() => new SetOptionConverter();
        public override TLObject CreateObjectInstance() => new SetOption();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetOption)tlobj;
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_value))
            {
                obj.Value = reader.ReadTLObject<OptionValue>();
                return true;
            }
            return false;
        }
    }

    [TLType("setAccountTtl")]
    partial class SetAccountTtlConverter : TLObjectConverter<SetAccountTtl>
    {
        public static BaseConverter CreateConverterInstance() => new SetAccountTtlConverter();
        public override TLObject CreateObjectInstance() => new SetAccountTtl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetAccountTtl)tlobj;
            if (name.SequenceEqual(propName_ttl))
            {
                obj.Ttl = reader.ReadTLObject<AccountTtl>();
                return true;
            }
            return false;
        }
    }

    [TLType("getAccountTtl")]
    partial class GetAccountTtlConverter : TLObjectConverter<GetAccountTtl>
    {
        public static BaseConverter CreateConverterInstance() => new GetAccountTtlConverter();
        public override TLObject CreateObjectInstance() => new GetAccountTtl();
    }

    [TLType("deleteAccount")]
    partial class DeleteAccountConverter : TLObjectConverter<DeleteAccount>
    {
        public static BaseConverter CreateConverterInstance() => new DeleteAccountConverter();
        public override TLObject CreateObjectInstance() => new DeleteAccount();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeleteAccount)tlobj;
            if (name.SequenceEqual(propName_reason))
            {
                obj.Reason = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("removeChatActionBar")]
    partial class RemoveChatActionBarConverter : TLObjectConverter<RemoveChatActionBar>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveChatActionBarConverter();
        public override TLObject CreateObjectInstance() => new RemoveChatActionBar();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveChatActionBar)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("reportChat")]
    partial class ReportChatConverter : TLObjectConverter<ReportChat>
    {
        public static BaseConverter CreateConverterInstance() => new ReportChatConverter();
        public override TLObject CreateObjectInstance() => new ReportChat();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (ReportChat)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_reason))
            {
                obj.Reason = reader.ReadTLObject<ChatReportReason>();
                return true;
            }
            if (name.SequenceEqual(propName_message_ids))
            {
                obj.MessageIds = reader.ReadInt53Array();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatStatisticsUrl")]
    partial class GetChatStatisticsUrlConverter : TLObjectConverter<GetChatStatisticsUrl>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatStatisticsUrlConverter();
        public override TLObject CreateObjectInstance() => new GetChatStatisticsUrl();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatStatisticsUrl)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_parameters))
            {
                obj.Parameters = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_is_dark))
            {
                obj.IsDark = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getChatStatistics")]
    partial class GetChatStatisticsConverter : TLObjectConverter<GetChatStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new GetChatStatisticsConverter();
        public override TLObject CreateObjectInstance() => new GetChatStatistics();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetChatStatistics)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_is_dark))
            {
                obj.IsDark = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getMessageStatistics")]
    partial class GetMessageStatisticsConverter : TLObjectConverter<GetMessageStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new GetMessageStatisticsConverter();
        public override TLObject CreateObjectInstance() => new GetMessageStatistics();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMessageStatistics)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_message_id))
            {
                obj.MessageId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_is_dark))
            {
                obj.IsDark = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("getStatisticsGraph")]
    partial class GetStatisticsGraphConverter : TLObjectConverter<GetStatisticsGraph>
    {
        public static BaseConverter CreateConverterInstance() => new GetStatisticsGraphConverter();
        public override TLObject CreateObjectInstance() => new GetStatisticsGraph();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetStatisticsGraph)tlobj;
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_token))
            {
                obj.Token = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_x))
            {
                obj.X = reader.ReadLong();
                return true;
            }
            return false;
        }
    }

    [TLType("getStorageStatistics")]
    partial class GetStorageStatisticsConverter : TLObjectConverter<GetStorageStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new GetStorageStatisticsConverter();
        public override TLObject CreateObjectInstance() => new GetStorageStatistics();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetStorageStatistics)tlobj;
            if (name.SequenceEqual(propName_chat_limit))
            {
                obj.ChatLimit = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getStorageStatisticsFast")]
    partial class GetStorageStatisticsFastConverter : TLObjectConverter<GetStorageStatisticsFast>
    {
        public static BaseConverter CreateConverterInstance() => new GetStorageStatisticsFastConverter();
        public override TLObject CreateObjectInstance() => new GetStorageStatisticsFast();
    }

    [TLType("getDatabaseStatistics")]
    partial class GetDatabaseStatisticsConverter : TLObjectConverter<GetDatabaseStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new GetDatabaseStatisticsConverter();
        public override TLObject CreateObjectInstance() => new GetDatabaseStatistics();
    }

    [TLType("optimizeStorage")]
    partial class OptimizeStorageConverter : TLObjectConverter<OptimizeStorage>
    {
        public static BaseConverter CreateConverterInstance() => new OptimizeStorageConverter();
        public override TLObject CreateObjectInstance() => new OptimizeStorage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (OptimizeStorage)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x23A0D95Cu when name.SequenceEqual(propName_size):
                    obj.Size = reader.ReadLong();
                    return true;
                case 0xBD2B425Bu when name.SequenceEqual(propName_ttl):
                    obj.Ttl = reader.ReadInt();
                    return true;
                case 0x39B1DDF4u when name.SequenceEqual(propName_count):
                    obj.Count = reader.ReadInt();
                    return true;
                case 0xA8BB7C17u when name.SequenceEqual(propName_immunity_delay):
                    obj.ImmunityDelay = reader.ReadInt();
                    return true;
                case 0x13FAFA9Du when name.SequenceEqual(propName_file_types):
                    obj.FileTypes = reader.ReadObjectArray<FileType>();
                    return true;
                case 0x06F8DD46u when name.SequenceEqual(propName_chat_ids):
                    obj.ChatIds = reader.ReadInt53Array();
                    return true;
                case 0x10F6373Du when name.SequenceEqual(propName_exclude_chat_ids):
                    obj.ExcludeChatIds = reader.ReadInt53Array();
                    return true;
                case 0x1B34D9A2u when name.SequenceEqual(propName_return_deleted_file_statistics):
                    obj.ReturnDeletedFileStatistics = reader.ReadBool();
                    return true;
                case 0xDE7B75BFu when name.SequenceEqual(propName_chat_limit):
                    obj.ChatLimit = reader.ReadInt();
                    return true;
            }
            return false;
        }
    }

    [TLType("setNetworkType")]
    partial class SetNetworkTypeConverter : TLObjectConverter<SetNetworkType>
    {
        public static BaseConverter CreateConverterInstance() => new SetNetworkTypeConverter();
        public override TLObject CreateObjectInstance() => new SetNetworkType();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetNetworkType)tlobj;
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<NetworkType>();
                return true;
            }
            return false;
        }
    }

    [TLType("getNetworkStatistics")]
    partial class GetNetworkStatisticsConverter : TLObjectConverter<GetNetworkStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new GetNetworkStatisticsConverter();
        public override TLObject CreateObjectInstance() => new GetNetworkStatistics();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetNetworkStatistics)tlobj;
            if (name.SequenceEqual(propName_only_current))
            {
                obj.OnlyCurrent = reader.ReadBool();
                return true;
            }
            return false;
        }
    }

    [TLType("addNetworkStatistics")]
    partial class AddNetworkStatisticsConverter : TLObjectConverter<AddNetworkStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new AddNetworkStatisticsConverter();
        public override TLObject CreateObjectInstance() => new AddNetworkStatistics();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddNetworkStatistics)tlobj;
            if (name.SequenceEqual(propName_entry))
            {
                obj.Entry = reader.ReadTLObject<NetworkStatisticsEntry>();
                return true;
            }
            return false;
        }
    }

    [TLType("resetNetworkStatistics")]
    partial class ResetNetworkStatisticsConverter : TLObjectConverter<ResetNetworkStatistics>
    {
        public static BaseConverter CreateConverterInstance() => new ResetNetworkStatisticsConverter();
        public override TLObject CreateObjectInstance() => new ResetNetworkStatistics();
    }

    [TLType("getAutoDownloadSettingsPresets")]
    partial class GetAutoDownloadSettingsPresetsConverter : TLObjectConverter<GetAutoDownloadSettingsPresets>
    {
        public static BaseConverter CreateConverterInstance() => new GetAutoDownloadSettingsPresetsConverter();
        public override TLObject CreateObjectInstance() => new GetAutoDownloadSettingsPresets();
    }

    [TLType("setAutoDownloadSettings")]
    partial class SetAutoDownloadSettingsConverter : TLObjectConverter<SetAutoDownloadSettings>
    {
        public static BaseConverter CreateConverterInstance() => new SetAutoDownloadSettingsConverter();
        public override TLObject CreateObjectInstance() => new SetAutoDownloadSettings();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetAutoDownloadSettings)tlobj;
            if (name.SequenceEqual(propName_settings))
            {
                obj.Settings = reader.ReadTLObject<AutoDownloadSettings>();
                return true;
            }
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<NetworkType>();
                return true;
            }
            return false;
        }
    }

    [TLType("getBankCardInfo")]
    partial class GetBankCardInfoConverter : TLObjectConverter<GetBankCardInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetBankCardInfoConverter();
        public override TLObject CreateObjectInstance() => new GetBankCardInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetBankCardInfo)tlobj;
            if (name.SequenceEqual(propName_bank_card_number))
            {
                obj.BankCardNumber = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getPassportElement")]
    partial class GetPassportElementConverter : TLObjectConverter<GetPassportElement>
    {
        public static BaseConverter CreateConverterInstance() => new GetPassportElementConverter();
        public override TLObject CreateObjectInstance() => new GetPassportElement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetPassportElement)tlobj;
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<PassportElementType>();
                return true;
            }
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getAllPassportElements")]
    partial class GetAllPassportElementsConverter : TLObjectConverter<GetAllPassportElements>
    {
        public static BaseConverter CreateConverterInstance() => new GetAllPassportElementsConverter();
        public override TLObject CreateObjectInstance() => new GetAllPassportElements();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetAllPassportElements)tlobj;
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setPassportElement")]
    partial class SetPassportElementConverter : TLObjectConverter<SetPassportElement>
    {
        public static BaseConverter CreateConverterInstance() => new SetPassportElementConverter();
        public override TLObject CreateObjectInstance() => new SetPassportElement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetPassportElement)tlobj;
            if (name.SequenceEqual(propName_element))
            {
                obj.Element = reader.ReadTLObject<InputPassportElement>();
                return true;
            }
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("deletePassportElement")]
    partial class DeletePassportElementConverter : TLObjectConverter<DeletePassportElement>
    {
        public static BaseConverter CreateConverterInstance() => new DeletePassportElementConverter();
        public override TLObject CreateObjectInstance() => new DeletePassportElement();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (DeletePassportElement)tlobj;
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadTLObject<PassportElementType>();
                return true;
            }
            return false;
        }
    }

    [TLType("setPassportElementErrors")]
    partial class SetPassportElementErrorsConverter : TLObjectConverter<SetPassportElementErrors>
    {
        public static BaseConverter CreateConverterInstance() => new SetPassportElementErrorsConverter();
        public override TLObject CreateObjectInstance() => new SetPassportElementErrors();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetPassportElementErrors)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_errors))
            {
                obj.Errors = reader.ReadObjectArray<InputPassportElementError>();
                return true;
            }
            return false;
        }
    }

    [TLType("getPreferredCountryLanguage")]
    partial class GetPreferredCountryLanguageConverter : TLObjectConverter<GetPreferredCountryLanguage>
    {
        public static BaseConverter CreateConverterInstance() => new GetPreferredCountryLanguageConverter();
        public override TLObject CreateObjectInstance() => new GetPreferredCountryLanguage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetPreferredCountryLanguage)tlobj;
            if (name.SequenceEqual(propName_country_code))
            {
                obj.CountryCode = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("sendPhoneNumberVerificationCode")]
    partial class SendPhoneNumberVerificationCodeConverter : TLObjectConverter<SendPhoneNumberVerificationCode>
    {
        public static BaseConverter CreateConverterInstance() => new SendPhoneNumberVerificationCodeConverter();
        public override TLObject CreateObjectInstance() => new SendPhoneNumberVerificationCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendPhoneNumberVerificationCode)tlobj;
            if (name.SequenceEqual(propName_phone_number))
            {
                obj.PhoneNumber = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_settings))
            {
                obj.Settings = reader.ReadTLObject<PhoneNumberAuthenticationSettings>();
                return true;
            }
            return false;
        }
    }

    [TLType("resendPhoneNumberVerificationCode")]
    partial class ResendPhoneNumberVerificationCodeConverter : TLObjectConverter<ResendPhoneNumberVerificationCode>
    {
        public static BaseConverter CreateConverterInstance() => new ResendPhoneNumberVerificationCodeConverter();
        public override TLObject CreateObjectInstance() => new ResendPhoneNumberVerificationCode();
    }

    [TLType("checkPhoneNumberVerificationCode")]
    partial class CheckPhoneNumberVerificationCodeConverter : TLObjectConverter<CheckPhoneNumberVerificationCode>
    {
        public static BaseConverter CreateConverterInstance() => new CheckPhoneNumberVerificationCodeConverter();
        public override TLObject CreateObjectInstance() => new CheckPhoneNumberVerificationCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckPhoneNumberVerificationCode)tlobj;
            if (name.SequenceEqual(propName_code))
            {
                obj.Code = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("sendEmailAddressVerificationCode")]
    partial class SendEmailAddressVerificationCodeConverter : TLObjectConverter<SendEmailAddressVerificationCode>
    {
        public static BaseConverter CreateConverterInstance() => new SendEmailAddressVerificationCodeConverter();
        public override TLObject CreateObjectInstance() => new SendEmailAddressVerificationCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendEmailAddressVerificationCode)tlobj;
            if (name.SequenceEqual(propName_email_address))
            {
                obj.EmailAddress = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("resendEmailAddressVerificationCode")]
    partial class ResendEmailAddressVerificationCodeConverter : TLObjectConverter<ResendEmailAddressVerificationCode>
    {
        public static BaseConverter CreateConverterInstance() => new ResendEmailAddressVerificationCodeConverter();
        public override TLObject CreateObjectInstance() => new ResendEmailAddressVerificationCode();
    }

    [TLType("checkEmailAddressVerificationCode")]
    partial class CheckEmailAddressVerificationCodeConverter : TLObjectConverter<CheckEmailAddressVerificationCode>
    {
        public static BaseConverter CreateConverterInstance() => new CheckEmailAddressVerificationCodeConverter();
        public override TLObject CreateObjectInstance() => new CheckEmailAddressVerificationCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckEmailAddressVerificationCode)tlobj;
            if (name.SequenceEqual(propName_code))
            {
                obj.Code = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getPassportAuthorizationForm")]
    partial class GetPassportAuthorizationFormConverter : TLObjectConverter<GetPassportAuthorizationForm>
    {
        public static BaseConverter CreateConverterInstance() => new GetPassportAuthorizationFormConverter();
        public override TLObject CreateObjectInstance() => new GetPassportAuthorizationForm();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetPassportAuthorizationForm)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x0BC9D8A8u when name.SequenceEqual(propName_bot_user_id):
                    obj.BotUserId = reader.ReadInt();
                    return true;
                case 0xBE2AF3EBu when name.SequenceEqual(propName_scope):
                    obj.Scope = reader.ReadString();
                    return true;
                case 0xF88012C4u when name.SequenceEqual(propName_public_key):
                    obj.PublicKey = reader.ReadString();
                    return true;
                case 0xF90879F8u when name.SequenceEqual(propName_nonce):
                    obj.Nonce = reader.ReadString();
                    return true;
            }
            return false;
        }
    }

    [TLType("getPassportAuthorizationFormAvailableElements")]
    partial class GetPassportAuthorizationFormAvailableElementsConverter : TLObjectConverter<GetPassportAuthorizationFormAvailableElements>
    {
        public static BaseConverter CreateConverterInstance() => new GetPassportAuthorizationFormAvailableElementsConverter();
        public override TLObject CreateObjectInstance() => new GetPassportAuthorizationFormAvailableElements();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetPassportAuthorizationFormAvailableElements)tlobj;
            if (name.SequenceEqual(propName_autorization_form_id))
            {
                obj.AutorizationFormId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_password))
            {
                obj.Password = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("sendPassportAuthorizationForm")]
    partial class SendPassportAuthorizationFormConverter : TLObjectConverter<SendPassportAuthorizationForm>
    {
        public static BaseConverter CreateConverterInstance() => new SendPassportAuthorizationFormConverter();
        public override TLObject CreateObjectInstance() => new SendPassportAuthorizationForm();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendPassportAuthorizationForm)tlobj;
            if (name.SequenceEqual(propName_autorization_form_id))
            {
                obj.AutorizationFormId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_types))
            {
                obj.Types = reader.ReadObjectArray<PassportElementType>();
                return true;
            }
            return false;
        }
    }

    [TLType("sendPhoneNumberConfirmationCode")]
    partial class SendPhoneNumberConfirmationCodeConverter : TLObjectConverter<SendPhoneNumberConfirmationCode>
    {
        public static BaseConverter CreateConverterInstance() => new SendPhoneNumberConfirmationCodeConverter();
        public override TLObject CreateObjectInstance() => new SendPhoneNumberConfirmationCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendPhoneNumberConfirmationCode)tlobj;
            if (name.SequenceEqual(propName_hash))
            {
                obj.Hash = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_phone_number))
            {
                obj.PhoneNumber = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_settings))
            {
                obj.Settings = reader.ReadTLObject<PhoneNumberAuthenticationSettings>();
                return true;
            }
            return false;
        }
    }

    [TLType("resendPhoneNumberConfirmationCode")]
    partial class ResendPhoneNumberConfirmationCodeConverter : TLObjectConverter<ResendPhoneNumberConfirmationCode>
    {
        public static BaseConverter CreateConverterInstance() => new ResendPhoneNumberConfirmationCodeConverter();
        public override TLObject CreateObjectInstance() => new ResendPhoneNumberConfirmationCode();
    }

    [TLType("checkPhoneNumberConfirmationCode")]
    partial class CheckPhoneNumberConfirmationCodeConverter : TLObjectConverter<CheckPhoneNumberConfirmationCode>
    {
        public static BaseConverter CreateConverterInstance() => new CheckPhoneNumberConfirmationCodeConverter();
        public override TLObject CreateObjectInstance() => new CheckPhoneNumberConfirmationCode();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CheckPhoneNumberConfirmationCode)tlobj;
            if (name.SequenceEqual(propName_code))
            {
                obj.Code = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setBotUpdatesStatus")]
    partial class SetBotUpdatesStatusConverter : TLObjectConverter<SetBotUpdatesStatus>
    {
        public static BaseConverter CreateConverterInstance() => new SetBotUpdatesStatusConverter();
        public override TLObject CreateObjectInstance() => new SetBotUpdatesStatus();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetBotUpdatesStatus)tlobj;
            if (name.SequenceEqual(propName_pending_update_count))
            {
                obj.PendingUpdateCount = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_error_message))
            {
                obj.ErrorMessage = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("uploadStickerFile")]
    partial class UploadStickerFileConverter : TLObjectConverter<UploadStickerFile>
    {
        public static BaseConverter CreateConverterInstance() => new UploadStickerFileConverter();
        public override TLObject CreateObjectInstance() => new UploadStickerFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (UploadStickerFile)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_png_sticker))
            {
                obj.PngSticker = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("createNewStickerSet")]
    partial class CreateNewStickerSetConverter : TLObjectConverter<CreateNewStickerSet>
    {
        public static BaseConverter CreateConverterInstance() => new CreateNewStickerSetConverter();
        public override TLObject CreateObjectInstance() => new CreateNewStickerSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (CreateNewStickerSet)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x10A75CDAu when name.SequenceEqual(propName_user_id):
                    obj.UserId = reader.ReadInt();
                    return true;
                case 0x9865B509u when name.SequenceEqual(propName_title):
                    obj.Title = reader.ReadString();
                    return true;
                case 0x8D39BDE6u when name.SequenceEqual(propName_name):
                    obj.Name = reader.ReadString();
                    return true;
                case 0x531AE927u when name.SequenceEqual(propName_is_masks):
                    obj.IsMasks = reader.ReadBool();
                    return true;
                case 0x1C388ABDu when name.SequenceEqual(propName_stickers):
                    obj.Stickers = reader.ReadObjectArray<InputSticker>();
                    return true;
            }
            return false;
        }
    }

    [TLType("addStickerToSet")]
    partial class AddStickerToSetConverter : TLObjectConverter<AddStickerToSet>
    {
        public static BaseConverter CreateConverterInstance() => new AddStickerToSetConverter();
        public override TLObject CreateObjectInstance() => new AddStickerToSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddStickerToSet)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<InputSticker>();
                return true;
            }
            return false;
        }
    }

    [TLType("setStickerSetThumbnail")]
    partial class SetStickerSetThumbnailConverter : TLObjectConverter<SetStickerSetThumbnail>
    {
        public static BaseConverter CreateConverterInstance() => new SetStickerSetThumbnailConverter();
        public override TLObject CreateObjectInstance() => new SetStickerSetThumbnail();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetStickerSetThumbnail)tlobj;
            if (name.SequenceEqual(propName_user_id))
            {
                obj.UserId = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_name))
            {
                obj.Name = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_thumbnail))
            {
                obj.Thumbnail = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("setStickerPositionInSet")]
    partial class SetStickerPositionInSetConverter : TLObjectConverter<SetStickerPositionInSet>
    {
        public static BaseConverter CreateConverterInstance() => new SetStickerPositionInSetConverter();
        public override TLObject CreateObjectInstance() => new SetStickerPositionInSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetStickerPositionInSet)tlobj;
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<InputFile>();
                return true;
            }
            if (name.SequenceEqual(propName_position))
            {
                obj.Position = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("removeStickerFromSet")]
    partial class RemoveStickerFromSetConverter : TLObjectConverter<RemoveStickerFromSet>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveStickerFromSetConverter();
        public override TLObject CreateObjectInstance() => new RemoveStickerFromSet();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveStickerFromSet)tlobj;
            if (name.SequenceEqual(propName_sticker))
            {
                obj.Sticker = reader.ReadTLObject<InputFile>();
                return true;
            }
            return false;
        }
    }

    [TLType("getMapThumbnailFile")]
    partial class GetMapThumbnailFileConverter : TLObjectConverter<GetMapThumbnailFile>
    {
        public static BaseConverter CreateConverterInstance() => new GetMapThumbnailFileConverter();
        public override TLObject CreateObjectInstance() => new GetMapThumbnailFile();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetMapThumbnailFile)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x0BF5A9A6u when name.SequenceEqual(propName_location):
                    obj.Location = reader.ReadTLObject<Location>();
                    return true;
                case 0xDF92E232u when name.SequenceEqual(propName_zoom):
                    obj.Zoom = reader.ReadInt();
                    return true;
                case 0x95876E1Fu when name.SequenceEqual(propName_width):
                    obj.Width = reader.ReadInt();
                    return true;
                case 0xD5BDBB42u when name.SequenceEqual(propName_height):
                    obj.Height = reader.ReadInt();
                    return true;
                case 0x82971C71u when name.SequenceEqual(propName_scale):
                    obj.Scale = reader.ReadInt();
                    return true;
                case 0xA81C9111u when name.SequenceEqual(propName_chat_id):
                    obj.ChatId = reader.ReadLong();
                    return true;
            }
            return false;
        }
    }

    [TLType("acceptTermsOfService")]
    partial class AcceptTermsOfServiceConverter : TLObjectConverter<AcceptTermsOfService>
    {
        public static BaseConverter CreateConverterInstance() => new AcceptTermsOfServiceConverter();
        public override TLObject CreateObjectInstance() => new AcceptTermsOfService();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AcceptTermsOfService)tlobj;
            if (name.SequenceEqual(propName_terms_of_service_id))
            {
                obj.TermsOfServiceId = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("sendCustomRequest")]
    partial class SendCustomRequestConverter : TLObjectConverter<SendCustomRequest>
    {
        public static BaseConverter CreateConverterInstance() => new SendCustomRequestConverter();
        public override TLObject CreateObjectInstance() => new SendCustomRequest();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SendCustomRequest)tlobj;
            if (name.SequenceEqual(propName_method))
            {
                obj.Method = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_parameters))
            {
                obj.Parameters = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("answerCustomQuery")]
    partial class AnswerCustomQueryConverter : TLObjectConverter<AnswerCustomQuery>
    {
        public static BaseConverter CreateConverterInstance() => new AnswerCustomQueryConverter();
        public override TLObject CreateObjectInstance() => new AnswerCustomQuery();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AnswerCustomQuery)tlobj;
            if (name.SequenceEqual(propName_custom_query_id))
            {
                obj.CustomQueryId = reader.ReadInt64String();
                return true;
            }
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("setAlarm")]
    partial class SetAlarmConverter : TLObjectConverter<SetAlarm>
    {
        public static BaseConverter CreateConverterInstance() => new SetAlarmConverter();
        public override TLObject CreateObjectInstance() => new SetAlarm();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetAlarm)tlobj;
            if (name.SequenceEqual(propName_seconds))
            {
                obj.Seconds = reader.ReadDouble();
                return true;
            }
            return false;
        }
    }

    [TLType("getCountries")]
    partial class GetCountriesConverter : TLObjectConverter<GetCountries>
    {
        public static BaseConverter CreateConverterInstance() => new GetCountriesConverter();
        public override TLObject CreateObjectInstance() => new GetCountries();
    }

    [TLType("getCountryCode")]
    partial class GetCountryCodeConverter : TLObjectConverter<GetCountryCode>
    {
        public static BaseConverter CreateConverterInstance() => new GetCountryCodeConverter();
        public override TLObject CreateObjectInstance() => new GetCountryCode();
    }

    [TLType("getPhoneNumberInfo")]
    partial class GetPhoneNumberInfoConverter : TLObjectConverter<GetPhoneNumberInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetPhoneNumberInfoConverter();
        public override TLObject CreateObjectInstance() => new GetPhoneNumberInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetPhoneNumberInfo)tlobj;
            if (name.SequenceEqual(propName_phone_number_prefix))
            {
                obj.PhoneNumberPrefix = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getInviteText")]
    partial class GetInviteTextConverter : TLObjectConverter<GetInviteText>
    {
        public static BaseConverter CreateConverterInstance() => new GetInviteTextConverter();
        public override TLObject CreateObjectInstance() => new GetInviteText();
    }

    [TLType("getDeepLinkInfo")]
    partial class GetDeepLinkInfoConverter : TLObjectConverter<GetDeepLinkInfo>
    {
        public static BaseConverter CreateConverterInstance() => new GetDeepLinkInfoConverter();
        public override TLObject CreateObjectInstance() => new GetDeepLinkInfo();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetDeepLinkInfo)tlobj;
            if (name.SequenceEqual(propName_link))
            {
                obj.Link = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("getApplicationConfig")]
    partial class GetApplicationConfigConverter : TLObjectConverter<GetApplicationConfig>
    {
        public static BaseConverter CreateConverterInstance() => new GetApplicationConfigConverter();
        public override TLObject CreateObjectInstance() => new GetApplicationConfig();
    }

    [TLType("saveApplicationLogEvent")]
    partial class SaveApplicationLogEventConverter : TLObjectConverter<SaveApplicationLogEvent>
    {
        public static BaseConverter CreateConverterInstance() => new SaveApplicationLogEventConverter();
        public override TLObject CreateObjectInstance() => new SaveApplicationLogEvent();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SaveApplicationLogEvent)tlobj;
            if (name.SequenceEqual(propName_type))
            {
                obj.Type = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_chat_id))
            {
                obj.ChatId = reader.ReadLong();
                return true;
            }
            if (name.SequenceEqual(propName_data))
            {
                obj.Data = reader.ReadTLObject<JsonValue>();
                return true;
            }
            return false;
        }
    }

    [TLType("addProxy")]
    partial class AddProxyConverter : TLObjectConverter<AddProxy>
    {
        public static BaseConverter CreateConverterInstance() => new AddProxyConverter();
        public override TLObject CreateObjectInstance() => new AddProxy();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddProxy)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x40AC3DD2u when name.SequenceEqual(propName_server):
                    obj.Server = reader.ReadString();
                    return true;
                case 0x7BE412A6u when name.SequenceEqual(propName_port):
                    obj.Port = reader.ReadInt();
                    return true;
                case 0xAF8BB8CEu when name.SequenceEqual(propName_enable):
                    obj.Enable = reader.ReadBool();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<ProxyType>();
                    return true;
            }
            return false;
        }
    }

    [TLType("editProxy")]
    partial class EditProxyConverter : TLObjectConverter<EditProxy>
    {
        public static BaseConverter CreateConverterInstance() => new EditProxyConverter();
        public override TLObject CreateObjectInstance() => new EditProxy();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EditProxy)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0xC9E41541u when name.SequenceEqual(propName_proxy_id):
                    obj.ProxyId = reader.ReadInt();
                    return true;
                case 0x40AC3DD2u when name.SequenceEqual(propName_server):
                    obj.Server = reader.ReadString();
                    return true;
                case 0x7BE412A6u when name.SequenceEqual(propName_port):
                    obj.Port = reader.ReadInt();
                    return true;
                case 0xAF8BB8CEu when name.SequenceEqual(propName_enable):
                    obj.Enable = reader.ReadBool();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<ProxyType>();
                    return true;
            }
            return false;
        }
    }

    [TLType("enableProxy")]
    partial class EnableProxyConverter : TLObjectConverter<EnableProxy>
    {
        public static BaseConverter CreateConverterInstance() => new EnableProxyConverter();
        public override TLObject CreateObjectInstance() => new EnableProxy();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (EnableProxy)tlobj;
            if (name.SequenceEqual(propName_proxy_id))
            {
                obj.ProxyId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("disableProxy")]
    partial class DisableProxyConverter : TLObjectConverter<DisableProxy>
    {
        public static BaseConverter CreateConverterInstance() => new DisableProxyConverter();
        public override TLObject CreateObjectInstance() => new DisableProxy();
    }

    [TLType("removeProxy")]
    partial class RemoveProxyConverter : TLObjectConverter<RemoveProxy>
    {
        public static BaseConverter CreateConverterInstance() => new RemoveProxyConverter();
        public override TLObject CreateObjectInstance() => new RemoveProxy();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (RemoveProxy)tlobj;
            if (name.SequenceEqual(propName_proxy_id))
            {
                obj.ProxyId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getProxies")]
    partial class GetProxiesConverter : TLObjectConverter<GetProxies>
    {
        public static BaseConverter CreateConverterInstance() => new GetProxiesConverter();
        public override TLObject CreateObjectInstance() => new GetProxies();
    }

    [TLType("getProxyLink")]
    partial class GetProxyLinkConverter : TLObjectConverter<GetProxyLink>
    {
        public static BaseConverter CreateConverterInstance() => new GetProxyLinkConverter();
        public override TLObject CreateObjectInstance() => new GetProxyLink();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetProxyLink)tlobj;
            if (name.SequenceEqual(propName_proxy_id))
            {
                obj.ProxyId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("pingProxy")]
    partial class PingProxyConverter : TLObjectConverter<PingProxy>
    {
        public static BaseConverter CreateConverterInstance() => new PingProxyConverter();
        public override TLObject CreateObjectInstance() => new PingProxy();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (PingProxy)tlobj;
            if (name.SequenceEqual(propName_proxy_id))
            {
                obj.ProxyId = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("setLogStream")]
    partial class SetLogStreamConverter : TLObjectConverter<SetLogStream>
    {
        public static BaseConverter CreateConverterInstance() => new SetLogStreamConverter();
        public override TLObject CreateObjectInstance() => new SetLogStream();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetLogStream)tlobj;
            if (name.SequenceEqual(propName_log_stream))
            {
                obj.LogStream = reader.ReadTLObject<LogStream>();
                return true;
            }
            return false;
        }
    }

    [TLType("getLogStream")]
    partial class GetLogStreamConverter : TLObjectConverter<GetLogStream>
    {
        public static BaseConverter CreateConverterInstance() => new GetLogStreamConverter();
        public override TLObject CreateObjectInstance() => new GetLogStream();
    }

    [TLType("setLogVerbosityLevel")]
    partial class SetLogVerbosityLevelConverter : TLObjectConverter<SetLogVerbosityLevel>
    {
        public static BaseConverter CreateConverterInstance() => new SetLogVerbosityLevelConverter();
        public override TLObject CreateObjectInstance() => new SetLogVerbosityLevel();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetLogVerbosityLevel)tlobj;
            if (name.SequenceEqual(propName_new_verbosity_level))
            {
                obj.NewVerbosityLevel = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getLogVerbosityLevel")]
    partial class GetLogVerbosityLevelConverter : TLObjectConverter<GetLogVerbosityLevel>
    {
        public static BaseConverter CreateConverterInstance() => new GetLogVerbosityLevelConverter();
        public override TLObject CreateObjectInstance() => new GetLogVerbosityLevel();
    }

    [TLType("getLogTags")]
    partial class GetLogTagsConverter : TLObjectConverter<GetLogTags>
    {
        public static BaseConverter CreateConverterInstance() => new GetLogTagsConverter();
        public override TLObject CreateObjectInstance() => new GetLogTags();
    }

    [TLType("setLogTagVerbosityLevel")]
    partial class SetLogTagVerbosityLevelConverter : TLObjectConverter<SetLogTagVerbosityLevel>
    {
        public static BaseConverter CreateConverterInstance() => new SetLogTagVerbosityLevelConverter();
        public override TLObject CreateObjectInstance() => new SetLogTagVerbosityLevel();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (SetLogTagVerbosityLevel)tlobj;
            if (name.SequenceEqual(propName_tag))
            {
                obj.Tag = reader.ReadString();
                return true;
            }
            if (name.SequenceEqual(propName_new_verbosity_level))
            {
                obj.NewVerbosityLevel = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("getLogTagVerbosityLevel")]
    partial class GetLogTagVerbosityLevelConverter : TLObjectConverter<GetLogTagVerbosityLevel>
    {
        public static BaseConverter CreateConverterInstance() => new GetLogTagVerbosityLevelConverter();
        public override TLObject CreateObjectInstance() => new GetLogTagVerbosityLevel();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (GetLogTagVerbosityLevel)tlobj;
            if (name.SequenceEqual(propName_tag))
            {
                obj.Tag = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("addLogMessage")]
    partial class AddLogMessageConverter : TLObjectConverter<AddLogMessage>
    {
        public static BaseConverter CreateConverterInstance() => new AddLogMessageConverter();
        public override TLObject CreateObjectInstance() => new AddLogMessage();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (AddLogMessage)tlobj;
            if (name.SequenceEqual(propName_verbosity_level))
            {
                obj.VerbosityLevel = reader.ReadInt();
                return true;
            }
            if (name.SequenceEqual(propName_text))
            {
                obj.Text = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("testCallEmpty")]
    partial class TestCallEmptyConverter : TLObjectConverter<TestCallEmpty>
    {
        public static BaseConverter CreateConverterInstance() => new TestCallEmptyConverter();
        public override TLObject CreateObjectInstance() => new TestCallEmpty();
    }

    [TLType("testCallString")]
    partial class TestCallStringConverter : TLObjectConverter<TestCallString>
    {
        public static BaseConverter CreateConverterInstance() => new TestCallStringConverter();
        public override TLObject CreateObjectInstance() => new TestCallString();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestCallString)tlobj;
            if (name.SequenceEqual(propName_x))
            {
                obj.X = reader.ReadString();
                return true;
            }
            return false;
        }
    }

    [TLType("testCallBytes")]
    partial class TestCallBytesConverter : TLObjectConverter<TestCallBytes>
    {
        public static BaseConverter CreateConverterInstance() => new TestCallBytesConverter();
        public override TLObject CreateObjectInstance() => new TestCallBytes();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestCallBytes)tlobj;
            if (name.SequenceEqual(propName_x))
            {
                obj.X = reader.ReadBase64String();
                return true;
            }
            return false;
        }
    }

    [TLType("testCallVectorInt")]
    partial class TestCallVectorIntConverter : TLObjectConverter<TestCallVectorInt>
    {
        public static BaseConverter CreateConverterInstance() => new TestCallVectorIntConverter();
        public override TLObject CreateObjectInstance() => new TestCallVectorInt();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestCallVectorInt)tlobj;
            if (name.SequenceEqual(propName_x))
            {
                obj.X = reader.ReadInt32Array();
                return true;
            }
            return false;
        }
    }

    [TLType("testCallVectorIntObject")]
    partial class TestCallVectorIntObjectConverter : TLObjectConverter<TestCallVectorIntObject>
    {
        public static BaseConverter CreateConverterInstance() => new TestCallVectorIntObjectConverter();
        public override TLObject CreateObjectInstance() => new TestCallVectorIntObject();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestCallVectorIntObject)tlobj;
            if (name.SequenceEqual(propName_x))
            {
                obj.X = reader.ReadObjectArray<TestInt>();
                return true;
            }
            return false;
        }
    }

    [TLType("testCallVectorString")]
    partial class TestCallVectorStringConverter : TLObjectConverter<TestCallVectorString>
    {
        public static BaseConverter CreateConverterInstance() => new TestCallVectorStringConverter();
        public override TLObject CreateObjectInstance() => new TestCallVectorString();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestCallVectorString)tlobj;
            if (name.SequenceEqual(propName_x))
            {
                obj.X = reader.ReadStringArray();
                return true;
            }
            return false;
        }
    }

    [TLType("testCallVectorStringObject")]
    partial class TestCallVectorStringObjectConverter : TLObjectConverter<TestCallVectorStringObject>
    {
        public static BaseConverter CreateConverterInstance() => new TestCallVectorStringObjectConverter();
        public override TLObject CreateObjectInstance() => new TestCallVectorStringObject();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestCallVectorStringObject)tlobj;
            if (name.SequenceEqual(propName_x))
            {
                obj.X = reader.ReadObjectArray<TestString>();
                return true;
            }
            return false;
        }
    }

    [TLType("testSquareInt")]
    partial class TestSquareIntConverter : TLObjectConverter<TestSquareInt>
    {
        public static BaseConverter CreateConverterInstance() => new TestSquareIntConverter();
        public override TLObject CreateObjectInstance() => new TestSquareInt();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestSquareInt)tlobj;
            if (name.SequenceEqual(propName_x))
            {
                obj.X = reader.ReadInt();
                return true;
            }
            return false;
        }
    }

    [TLType("testNetwork")]
    partial class TestNetworkConverter : TLObjectConverter<TestNetwork>
    {
        public static BaseConverter CreateConverterInstance() => new TestNetworkConverter();
        public override TLObject CreateObjectInstance() => new TestNetwork();
    }

    [TLType("testProxy")]
    partial class TestProxyConverter : TLObjectConverter<TestProxy>
    {
        public static BaseConverter CreateConverterInstance() => new TestProxyConverter();
        public override TLObject CreateObjectInstance() => new TestProxy();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestProxy)tlobj;
            var keyhash = BaseConverter.GetHashCodeForPropertyName(name);
            switch (keyhash)
            {
                case 0x40AC3DD2u when name.SequenceEqual(propName_server):
                    obj.Server = reader.ReadString();
                    return true;
                case 0x7BE412A6u when name.SequenceEqual(propName_port):
                    obj.Port = reader.ReadInt();
                    return true;
                case 0x5127F14Du when name.SequenceEqual(propName_type):
                    obj.Type = reader.ReadTLObject<ProxyType>();
                    return true;
                case 0x226DA008u when name.SequenceEqual(propName_dc_id):
                    obj.DcId = reader.ReadInt();
                    return true;
                case 0x97F68388u when name.SequenceEqual(propName_timeout):
                    obj.Timeout = reader.ReadDouble();
                    return true;
            }
            return false;
        }
    }

    [TLType("testGetDifference")]
    partial class TestGetDifferenceConverter : TLObjectConverter<TestGetDifference>
    {
        public static BaseConverter CreateConverterInstance() => new TestGetDifferenceConverter();
        public override TLObject CreateObjectInstance() => new TestGetDifference();
    }

    [TLType("testUseUpdate")]
    partial class TestUseUpdateConverter : TLObjectConverter<TestUseUpdate>
    {
        public static BaseConverter CreateConverterInstance() => new TestUseUpdateConverter();
        public override TLObject CreateObjectInstance() => new TestUseUpdate();
    }

    [TLType("testReturnError")]
    partial class TestReturnErrorConverter : TLObjectConverter<TestReturnError>
    {
        public static BaseConverter CreateConverterInstance() => new TestReturnErrorConverter();
        public override TLObject CreateObjectInstance() => new TestReturnError();
        public override bool TdJsonReadItem(ref TdJsonReader reader, TLObject tlobj, ReadOnlySpan<byte> name)
        {
            var obj = (TestReturnError)tlobj;
            if (name.SequenceEqual(propName_error))
            {
                obj.Error = reader.ReadTLObject<Error>();
                return true;
            }
            return false;
        }
    }

}
