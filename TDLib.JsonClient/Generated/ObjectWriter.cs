// generated by codegen/genwriter.rb
using System;
using System.Text.Json;
using TDLib.Api;

namespace TDLib.JsonClient
{
    namespace ObjectConverter
    {
        partial class ErrorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("error");
            private static readonly JsonEncodedText PropName_code = JsonEncodedText.Encode("code");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Error)tlobj;
                writer.WritePropertyName(PropName_code);
                writer.WriteNumberValue(obj.Code);
                writer.WritePropertyName(PropName_message);
                writer.WriteStringValue(obj.Message);
            }
        }

        partial class OkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("ok");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TdlibParametersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("tdlibParameters");
            private static readonly JsonEncodedText PropName_use_test_dc = JsonEncodedText.Encode("use_test_dc");
            private static readonly JsonEncodedText PropName_database_directory = JsonEncodedText.Encode("database_directory");
            private static readonly JsonEncodedText PropName_files_directory = JsonEncodedText.Encode("files_directory");
            private static readonly JsonEncodedText PropName_use_file_database = JsonEncodedText.Encode("use_file_database");
            private static readonly JsonEncodedText PropName_use_chat_info_database = JsonEncodedText.Encode("use_chat_info_database");
            private static readonly JsonEncodedText PropName_use_message_database = JsonEncodedText.Encode("use_message_database");
            private static readonly JsonEncodedText PropName_use_secret_chats = JsonEncodedText.Encode("use_secret_chats");
            private static readonly JsonEncodedText PropName_api_id = JsonEncodedText.Encode("api_id");
            private static readonly JsonEncodedText PropName_api_hash = JsonEncodedText.Encode("api_hash");
            private static readonly JsonEncodedText PropName_system_language_code = JsonEncodedText.Encode("system_language_code");
            private static readonly JsonEncodedText PropName_device_model = JsonEncodedText.Encode("device_model");
            private static readonly JsonEncodedText PropName_system_version = JsonEncodedText.Encode("system_version");
            private static readonly JsonEncodedText PropName_application_version = JsonEncodedText.Encode("application_version");
            private static readonly JsonEncodedText PropName_enable_storage_optimizer = JsonEncodedText.Encode("enable_storage_optimizer");
            private static readonly JsonEncodedText PropName_ignore_file_names = JsonEncodedText.Encode("ignore_file_names");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TdlibParameters)tlobj;
                writer.WritePropertyName(PropName_use_test_dc);
                writer.WriteBooleanValue(obj.UseTestDc);
                writer.WritePropertyName(PropName_database_directory);
                writer.WriteStringValue(obj.DatabaseDirectory);
                writer.WritePropertyName(PropName_files_directory);
                writer.WriteStringValue(obj.FilesDirectory);
                writer.WritePropertyName(PropName_use_file_database);
                writer.WriteBooleanValue(obj.UseFileDatabase);
                writer.WritePropertyName(PropName_use_chat_info_database);
                writer.WriteBooleanValue(obj.UseChatInfoDatabase);
                writer.WritePropertyName(PropName_use_message_database);
                writer.WriteBooleanValue(obj.UseMessageDatabase);
                writer.WritePropertyName(PropName_use_secret_chats);
                writer.WriteBooleanValue(obj.UseSecretChats);
                writer.WritePropertyName(PropName_api_id);
                writer.WriteNumberValue(obj.ApiId);
                writer.WritePropertyName(PropName_api_hash);
                writer.WriteStringValue(obj.ApiHash);
                writer.WritePropertyName(PropName_system_language_code);
                writer.WriteStringValue(obj.SystemLanguageCode);
                writer.WritePropertyName(PropName_device_model);
                writer.WriteStringValue(obj.DeviceModel);
                writer.WritePropertyName(PropName_system_version);
                writer.WriteStringValue(obj.SystemVersion);
                writer.WritePropertyName(PropName_application_version);
                writer.WriteStringValue(obj.ApplicationVersion);
                writer.WritePropertyName(PropName_enable_storage_optimizer);
                writer.WriteBooleanValue(obj.EnableStorageOptimizer);
                writer.WritePropertyName(PropName_ignore_file_names);
                writer.WriteBooleanValue(obj.IgnoreFileNames);
            }
        }

        partial class AuthenticationCodeTypeTelegramMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authenticationCodeTypeTelegramMessage");
            private static readonly JsonEncodedText PropName_length = JsonEncodedText.Encode("length");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AuthenticationCodeTypeTelegramMessage)tlobj;
                writer.WritePropertyName(PropName_length);
                writer.WriteNumberValue(obj.Length);
            }
        }

        partial class AuthenticationCodeTypeSmsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authenticationCodeTypeSms");
            private static readonly JsonEncodedText PropName_length = JsonEncodedText.Encode("length");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AuthenticationCodeTypeSms)tlobj;
                writer.WritePropertyName(PropName_length);
                writer.WriteNumberValue(obj.Length);
            }
        }

        partial class AuthenticationCodeTypeCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authenticationCodeTypeCall");
            private static readonly JsonEncodedText PropName_length = JsonEncodedText.Encode("length");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AuthenticationCodeTypeCall)tlobj;
                writer.WritePropertyName(PropName_length);
                writer.WriteNumberValue(obj.Length);
            }
        }

        partial class AuthenticationCodeTypeFlashCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authenticationCodeTypeFlashCall");
            private static readonly JsonEncodedText PropName_pattern = JsonEncodedText.Encode("pattern");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AuthenticationCodeTypeFlashCall)tlobj;
                writer.WritePropertyName(PropName_pattern);
                writer.WriteStringValue(obj.Pattern);
            }
        }

        partial class AuthenticationCodeInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authenticationCodeInfo");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_next_type = JsonEncodedText.Encode("next_type");
            private static readonly JsonEncodedText PropName_timeout = JsonEncodedText.Encode("timeout");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AuthenticationCodeInfo)tlobj;
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                if (obj.NextType != null)
                {
                    writer.WritePropertyName(PropName_next_type);
                    writer.WriteTLObjectValue(obj.NextType);
                }
                writer.WritePropertyName(PropName_timeout);
                writer.WriteNumberValue(obj.Timeout);
            }
        }

        partial class EmailAddressAuthenticationCodeInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("emailAddressAuthenticationCodeInfo");
            private static readonly JsonEncodedText PropName_email_address_pattern = JsonEncodedText.Encode("email_address_pattern");
            private static readonly JsonEncodedText PropName_length = JsonEncodedText.Encode("length");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EmailAddressAuthenticationCodeInfo)tlobj;
                writer.WritePropertyName(PropName_email_address_pattern);
                writer.WriteStringValue(obj.EmailAddressPattern);
                writer.WritePropertyName(PropName_length);
                writer.WriteNumberValue(obj.Length);
            }
        }

        partial class TextEntityConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntity");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_length = JsonEncodedText.Encode("length");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TextEntity)tlobj;
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_length);
                writer.WriteNumberValue(obj.Length);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class TextEntitiesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntities");
            private static readonly JsonEncodedText PropName_entities = JsonEncodedText.Encode("entities");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TextEntities)tlobj;
                if (obj.Entities != null)
                {
                    writer.WritePropertyName(PropName_entities);
                    writer.WriteArray(obj.Entities);
                }
            }
        }

        partial class FormattedTextConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("formattedText");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_entities = JsonEncodedText.Encode("entities");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (FormattedText)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
                if (obj.Entities != null)
                {
                    writer.WritePropertyName(PropName_entities);
                    writer.WriteArray(obj.Entities);
                }
            }
        }

        partial class TermsOfServiceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("termsOfService");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_min_user_age = JsonEncodedText.Encode("min_user_age");
            private static readonly JsonEncodedText PropName_show_popup = JsonEncodedText.Encode("show_popup");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TermsOfService)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                writer.WritePropertyName(PropName_min_user_age);
                writer.WriteNumberValue(obj.MinUserAge);
                writer.WritePropertyName(PropName_show_popup);
                writer.WriteBooleanValue(obj.ShowPopup);
            }
        }

        partial class AuthorizationStateWaitTdlibParametersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateWaitTdlibParameters");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class AuthorizationStateWaitEncryptionKeyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateWaitEncryptionKey");
            private static readonly JsonEncodedText PropName_is_encrypted = JsonEncodedText.Encode("is_encrypted");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AuthorizationStateWaitEncryptionKey)tlobj;
                writer.WritePropertyName(PropName_is_encrypted);
                writer.WriteBooleanValue(obj.IsEncrypted);
            }
        }

        partial class AuthorizationStateWaitPhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateWaitPhoneNumber");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class AuthorizationStateWaitCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateWaitCode");
            private static readonly JsonEncodedText PropName_code_info = JsonEncodedText.Encode("code_info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AuthorizationStateWaitCode)tlobj;
                if (obj.CodeInfo != null)
                {
                    writer.WritePropertyName(PropName_code_info);
                    writer.WriteTLObjectValue(obj.CodeInfo);
                }
            }
        }

        partial class AuthorizationStateWaitOtherDeviceConfirmationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateWaitOtherDeviceConfirmation");
            private static readonly JsonEncodedText PropName_link = JsonEncodedText.Encode("link");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AuthorizationStateWaitOtherDeviceConfirmation)tlobj;
                writer.WritePropertyName(PropName_link);
                writer.WriteStringValue(obj.Link);
            }
        }

        partial class AuthorizationStateWaitRegistrationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateWaitRegistration");
            private static readonly JsonEncodedText PropName_terms_of_service = JsonEncodedText.Encode("terms_of_service");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AuthorizationStateWaitRegistration)tlobj;
                if (obj.TermsOfService != null)
                {
                    writer.WritePropertyName(PropName_terms_of_service);
                    writer.WriteTLObjectValue(obj.TermsOfService);
                }
            }
        }

        partial class AuthorizationStateWaitPasswordConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateWaitPassword");
            private static readonly JsonEncodedText PropName_password_hint = JsonEncodedText.Encode("password_hint");
            private static readonly JsonEncodedText PropName_has_recovery_email_address = JsonEncodedText.Encode("has_recovery_email_address");
            private static readonly JsonEncodedText PropName_recovery_email_address_pattern = JsonEncodedText.Encode("recovery_email_address_pattern");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AuthorizationStateWaitPassword)tlobj;
                writer.WritePropertyName(PropName_password_hint);
                writer.WriteStringValue(obj.PasswordHint);
                writer.WritePropertyName(PropName_has_recovery_email_address);
                writer.WriteBooleanValue(obj.HasRecoveryEmailAddress);
                writer.WritePropertyName(PropName_recovery_email_address_pattern);
                writer.WriteStringValue(obj.RecoveryEmailAddressPattern);
            }
        }

        partial class AuthorizationStateReadyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateReady");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class AuthorizationStateLoggingOutConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateLoggingOut");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class AuthorizationStateClosingConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateClosing");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class AuthorizationStateClosedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("authorizationStateClosed");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PasswordStateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passwordState");
            private static readonly JsonEncodedText PropName_has_password = JsonEncodedText.Encode("has_password");
            private static readonly JsonEncodedText PropName_password_hint = JsonEncodedText.Encode("password_hint");
            private static readonly JsonEncodedText PropName_has_recovery_email_address = JsonEncodedText.Encode("has_recovery_email_address");
            private static readonly JsonEncodedText PropName_has_passport_data = JsonEncodedText.Encode("has_passport_data");
            private static readonly JsonEncodedText PropName_recovery_email_address_code_info = JsonEncodedText.Encode("recovery_email_address_code_info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PasswordState)tlobj;
                writer.WritePropertyName(PropName_has_password);
                writer.WriteBooleanValue(obj.HasPassword);
                writer.WritePropertyName(PropName_password_hint);
                writer.WriteStringValue(obj.PasswordHint);
                writer.WritePropertyName(PropName_has_recovery_email_address);
                writer.WriteBooleanValue(obj.HasRecoveryEmailAddress);
                writer.WritePropertyName(PropName_has_passport_data);
                writer.WriteBooleanValue(obj.HasPassportData);
                if (obj.RecoveryEmailAddressCodeInfo != null)
                {
                    writer.WritePropertyName(PropName_recovery_email_address_code_info);
                    writer.WriteTLObjectValue(obj.RecoveryEmailAddressCodeInfo);
                }
            }
        }

        partial class RecoveryEmailAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("recoveryEmailAddress");
            private static readonly JsonEncodedText PropName_recovery_email_address = JsonEncodedText.Encode("recovery_email_address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RecoveryEmailAddress)tlobj;
                writer.WritePropertyName(PropName_recovery_email_address);
                writer.WriteStringValue(obj.RecoveryEmailAddress_);
            }
        }

        partial class TemporaryPasswordStateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("temporaryPasswordState");
            private static readonly JsonEncodedText PropName_has_password = JsonEncodedText.Encode("has_password");
            private static readonly JsonEncodedText PropName_valid_for = JsonEncodedText.Encode("valid_for");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TemporaryPasswordState)tlobj;
                writer.WritePropertyName(PropName_has_password);
                writer.WriteBooleanValue(obj.HasPassword);
                writer.WritePropertyName(PropName_valid_for);
                writer.WriteNumberValue(obj.ValidFor);
            }
        }

        partial class LocalFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("localFile");
            private static readonly JsonEncodedText PropName_path = JsonEncodedText.Encode("path");
            private static readonly JsonEncodedText PropName_can_be_downloaded = JsonEncodedText.Encode("can_be_downloaded");
            private static readonly JsonEncodedText PropName_can_be_deleted = JsonEncodedText.Encode("can_be_deleted");
            private static readonly JsonEncodedText PropName_is_downloading_active = JsonEncodedText.Encode("is_downloading_active");
            private static readonly JsonEncodedText PropName_is_downloading_completed = JsonEncodedText.Encode("is_downloading_completed");
            private static readonly JsonEncodedText PropName_download_offset = JsonEncodedText.Encode("download_offset");
            private static readonly JsonEncodedText PropName_downloaded_prefix_size = JsonEncodedText.Encode("downloaded_prefix_size");
            private static readonly JsonEncodedText PropName_downloaded_size = JsonEncodedText.Encode("downloaded_size");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LocalFile)tlobj;
                writer.WritePropertyName(PropName_path);
                writer.WriteStringValue(obj.Path);
                writer.WritePropertyName(PropName_can_be_downloaded);
                writer.WriteBooleanValue(obj.CanBeDownloaded);
                writer.WritePropertyName(PropName_can_be_deleted);
                writer.WriteBooleanValue(obj.CanBeDeleted);
                writer.WritePropertyName(PropName_is_downloading_active);
                writer.WriteBooleanValue(obj.IsDownloadingActive);
                writer.WritePropertyName(PropName_is_downloading_completed);
                writer.WriteBooleanValue(obj.IsDownloadingCompleted);
                writer.WritePropertyName(PropName_download_offset);
                writer.WriteNumberValue(obj.DownloadOffset);
                writer.WritePropertyName(PropName_downloaded_prefix_size);
                writer.WriteNumberValue(obj.DownloadedPrefixSize);
                writer.WritePropertyName(PropName_downloaded_size);
                writer.WriteNumberValue(obj.DownloadedSize);
            }
        }

        partial class RemoteFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("remoteFile");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_unique_id = JsonEncodedText.Encode("unique_id");
            private static readonly JsonEncodedText PropName_is_uploading_active = JsonEncodedText.Encode("is_uploading_active");
            private static readonly JsonEncodedText PropName_is_uploading_completed = JsonEncodedText.Encode("is_uploading_completed");
            private static readonly JsonEncodedText PropName_uploaded_size = JsonEncodedText.Encode("uploaded_size");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoteFile)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_unique_id);
                writer.WriteStringValue(obj.UniqueId);
                writer.WritePropertyName(PropName_is_uploading_active);
                writer.WriteBooleanValue(obj.IsUploadingActive);
                writer.WritePropertyName(PropName_is_uploading_completed);
                writer.WriteBooleanValue(obj.IsUploadingCompleted);
                writer.WritePropertyName(PropName_uploaded_size);
                writer.WriteNumberValue(obj.UploadedSize);
            }
        }

        partial class FileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("file");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_size = JsonEncodedText.Encode("size");
            private static readonly JsonEncodedText PropName_expected_size = JsonEncodedText.Encode("expected_size");
            private static readonly JsonEncodedText PropName_local = JsonEncodedText.Encode("local");
            private static readonly JsonEncodedText PropName_remote = JsonEncodedText.Encode("remote");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (File)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_size);
                writer.WriteNumberValue(obj.Size);
                writer.WritePropertyName(PropName_expected_size);
                writer.WriteNumberValue(obj.ExpectedSize);
                if (obj.Local != null)
                {
                    writer.WritePropertyName(PropName_local);
                    writer.WriteTLObjectValue(obj.Local);
                }
                if (obj.Remote != null)
                {
                    writer.WritePropertyName(PropName_remote);
                    writer.WriteTLObjectValue(obj.Remote);
                }
            }
        }

        partial class InputFileIdConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputFileId");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputFileId)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
            }
        }

        partial class InputFileRemoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputFileRemote");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputFileRemote)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
            }
        }

        partial class InputFileLocalConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputFileLocal");
            private static readonly JsonEncodedText PropName_path = JsonEncodedText.Encode("path");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputFileLocal)tlobj;
                writer.WritePropertyName(PropName_path);
                writer.WriteStringValue(obj.Path);
            }
        }

        partial class InputFileGeneratedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputFileGenerated");
            private static readonly JsonEncodedText PropName_original_path = JsonEncodedText.Encode("original_path");
            private static readonly JsonEncodedText PropName_conversion = JsonEncodedText.Encode("conversion");
            private static readonly JsonEncodedText PropName_expected_size = JsonEncodedText.Encode("expected_size");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputFileGenerated)tlobj;
                writer.WritePropertyName(PropName_original_path);
                writer.WriteStringValue(obj.OriginalPath);
                writer.WritePropertyName(PropName_conversion);
                writer.WriteStringValue(obj.Conversion);
                writer.WritePropertyName(PropName_expected_size);
                writer.WriteNumberValue(obj.ExpectedSize);
            }
        }

        partial class PhotoSizeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("photoSize");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_progressive_sizes = JsonEncodedText.Encode("progressive_sizes");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PhotoSize)tlobj;
                writer.WritePropertyName(PropName_type);
                writer.WriteStringValue(obj.Type);
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                if (obj.ProgressiveSizes != null)
                {
                    writer.WritePropertyName(PropName_progressive_sizes);
                    writer.WriteArray(obj.ProgressiveSizes);
                }
            }
        }

        partial class MinithumbnailConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("minithumbnail");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Minithumbnail)tlobj;
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
            }
        }

        partial class ThumbnailFormatJpegConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("thumbnailFormatJpeg");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ThumbnailFormatPngConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("thumbnailFormatPng");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ThumbnailFormatWebpConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("thumbnailFormatWebp");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ThumbnailFormatGifConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("thumbnailFormatGif");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ThumbnailFormatTgsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("thumbnailFormatTgs");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ThumbnailFormatMpeg4Converter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("thumbnailFormatMpeg4");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ThumbnailConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_format = JsonEncodedText.Encode("format");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_file = JsonEncodedText.Encode("file");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Thumbnail)tlobj;
                if (obj.Format != null)
                {
                    writer.WritePropertyName(PropName_format);
                    writer.WriteTLObjectValue(obj.Format);
                }
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                if (obj.File != null)
                {
                    writer.WritePropertyName(PropName_file);
                    writer.WriteTLObjectValue(obj.File);
                }
            }
        }

        partial class MaskPointForeheadConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("maskPointForehead");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MaskPointEyesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("maskPointEyes");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MaskPointMouthConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("maskPointMouth");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MaskPointChinConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("maskPointChin");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MaskPositionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("maskPosition");
            private static readonly JsonEncodedText PropName_point = JsonEncodedText.Encode("point");
            private static readonly JsonEncodedText PropName_x_shift = JsonEncodedText.Encode("x_shift");
            private static readonly JsonEncodedText PropName_y_shift = JsonEncodedText.Encode("y_shift");
            private static readonly JsonEncodedText PropName_scale = JsonEncodedText.Encode("scale");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MaskPosition)tlobj;
                if (obj.Point != null)
                {
                    writer.WritePropertyName(PropName_point);
                    writer.WriteTLObjectValue(obj.Point);
                }
                writer.WritePropertyName(PropName_x_shift);
                writer.WriteNumberValue(obj.XShift);
                writer.WritePropertyName(PropName_y_shift);
                writer.WriteNumberValue(obj.YShift);
                writer.WritePropertyName(PropName_scale);
                writer.WriteNumberValue(obj.Scale);
            }
        }

        partial class PollOptionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pollOption");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_voter_count = JsonEncodedText.Encode("voter_count");
            private static readonly JsonEncodedText PropName_vote_percentage = JsonEncodedText.Encode("vote_percentage");
            private static readonly JsonEncodedText PropName_is_chosen = JsonEncodedText.Encode("is_chosen");
            private static readonly JsonEncodedText PropName_is_being_chosen = JsonEncodedText.Encode("is_being_chosen");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PollOption)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
                writer.WritePropertyName(PropName_voter_count);
                writer.WriteNumberValue(obj.VoterCount);
                writer.WritePropertyName(PropName_vote_percentage);
                writer.WriteNumberValue(obj.VotePercentage);
                writer.WritePropertyName(PropName_is_chosen);
                writer.WriteBooleanValue(obj.IsChosen);
                writer.WritePropertyName(PropName_is_being_chosen);
                writer.WriteBooleanValue(obj.IsBeingChosen);
            }
        }

        partial class PollTypeRegularConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pollTypeRegular");
            private static readonly JsonEncodedText PropName_allow_multiple_answers = JsonEncodedText.Encode("allow_multiple_answers");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PollTypeRegular)tlobj;
                writer.WritePropertyName(PropName_allow_multiple_answers);
                writer.WriteBooleanValue(obj.AllowMultipleAnswers);
            }
        }

        partial class PollTypeQuizConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pollTypeQuiz");
            private static readonly JsonEncodedText PropName_correct_option_id = JsonEncodedText.Encode("correct_option_id");
            private static readonly JsonEncodedText PropName_explanation = JsonEncodedText.Encode("explanation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PollTypeQuiz)tlobj;
                writer.WritePropertyName(PropName_correct_option_id);
                writer.WriteNumberValue(obj.CorrectOptionId);
                if (obj.Explanation != null)
                {
                    writer.WritePropertyName(PropName_explanation);
                    writer.WriteTLObjectValue(obj.Explanation);
                }
            }
        }

        partial class AnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("animation");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_file_name = JsonEncodedText.Encode("file_name");
            private static readonly JsonEncodedText PropName_mime_type = JsonEncodedText.Encode("mime_type");
            private static readonly JsonEncodedText PropName_has_stickers = JsonEncodedText.Encode("has_stickers");
            private static readonly JsonEncodedText PropName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Animation)tlobj;
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                writer.WritePropertyName(PropName_file_name);
                writer.WriteStringValue(obj.FileName);
                writer.WritePropertyName(PropName_mime_type);
                writer.WriteStringValue(obj.MimeType);
                writer.WritePropertyName(PropName_has_stickers);
                writer.WriteBooleanValue(obj.HasStickers);
                if (obj.Minithumbnail != null)
                {
                    writer.WritePropertyName(PropName_minithumbnail);
                    writer.WriteTLObjectValue(obj.Minithumbnail);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                if (obj.Animation_ != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation_);
                }
            }
        }

        partial class AudioConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("audio");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_performer = JsonEncodedText.Encode("performer");
            private static readonly JsonEncodedText PropName_file_name = JsonEncodedText.Encode("file_name");
            private static readonly JsonEncodedText PropName_mime_type = JsonEncodedText.Encode("mime_type");
            private static readonly JsonEncodedText PropName_album_cover_minithumbnail = JsonEncodedText.Encode("album_cover_minithumbnail");
            private static readonly JsonEncodedText PropName_album_cover_thumbnail = JsonEncodedText.Encode("album_cover_thumbnail");
            private static readonly JsonEncodedText PropName_audio = JsonEncodedText.Encode("audio");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Audio)tlobj;
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_performer);
                writer.WriteStringValue(obj.Performer);
                writer.WritePropertyName(PropName_file_name);
                writer.WriteStringValue(obj.FileName);
                writer.WritePropertyName(PropName_mime_type);
                writer.WriteStringValue(obj.MimeType);
                if (obj.AlbumCoverMinithumbnail != null)
                {
                    writer.WritePropertyName(PropName_album_cover_minithumbnail);
                    writer.WriteTLObjectValue(obj.AlbumCoverMinithumbnail);
                }
                if (obj.AlbumCoverThumbnail != null)
                {
                    writer.WritePropertyName(PropName_album_cover_thumbnail);
                    writer.WriteTLObjectValue(obj.AlbumCoverThumbnail);
                }
                if (obj.Audio_ != null)
                {
                    writer.WritePropertyName(PropName_audio);
                    writer.WriteTLObjectValue(obj.Audio_);
                }
            }
        }

        partial class DocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("document");
            private static readonly JsonEncodedText PropName_file_name = JsonEncodedText.Encode("file_name");
            private static readonly JsonEncodedText PropName_mime_type = JsonEncodedText.Encode("mime_type");
            private static readonly JsonEncodedText PropName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_document = JsonEncodedText.Encode("document");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Document)tlobj;
                writer.WritePropertyName(PropName_file_name);
                writer.WriteStringValue(obj.FileName);
                writer.WritePropertyName(PropName_mime_type);
                writer.WriteStringValue(obj.MimeType);
                if (obj.Minithumbnail != null)
                {
                    writer.WritePropertyName(PropName_minithumbnail);
                    writer.WriteTLObjectValue(obj.Minithumbnail);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                if (obj.Document_ != null)
                {
                    writer.WritePropertyName(PropName_document);
                    writer.WriteTLObjectValue(obj.Document_);
                }
            }
        }

        partial class PhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_has_stickers = JsonEncodedText.Encode("has_stickers");
            private static readonly JsonEncodedText PropName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
            private static readonly JsonEncodedText PropName_sizes = JsonEncodedText.Encode("sizes");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Photo)tlobj;
                writer.WritePropertyName(PropName_has_stickers);
                writer.WriteBooleanValue(obj.HasStickers);
                if (obj.Minithumbnail != null)
                {
                    writer.WritePropertyName(PropName_minithumbnail);
                    writer.WriteTLObjectValue(obj.Minithumbnail);
                }
                if (obj.Sizes != null)
                {
                    writer.WritePropertyName(PropName_sizes);
                    writer.WriteArray(obj.Sizes);
                }
            }
        }

        partial class StickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sticker");
            private static readonly JsonEncodedText PropName_set_id = JsonEncodedText.Encode("set_id");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_emoji = JsonEncodedText.Encode("emoji");
            private static readonly JsonEncodedText PropName_is_animated = JsonEncodedText.Encode("is_animated");
            private static readonly JsonEncodedText PropName_is_mask = JsonEncodedText.Encode("is_mask");
            private static readonly JsonEncodedText PropName_mask_position = JsonEncodedText.Encode("mask_position");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Sticker)tlobj;
                writer.WritePropertyName(PropName_set_id);
                writer.WriteInt64String(obj.SetId);
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                writer.WritePropertyName(PropName_emoji);
                writer.WriteStringValue(obj.Emoji);
                writer.WritePropertyName(PropName_is_animated);
                writer.WriteBooleanValue(obj.IsAnimated);
                writer.WritePropertyName(PropName_is_mask);
                writer.WriteBooleanValue(obj.IsMask);
                if (obj.MaskPosition != null)
                {
                    writer.WritePropertyName(PropName_mask_position);
                    writer.WriteTLObjectValue(obj.MaskPosition);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                if (obj.Sticker_ != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker_);
                }
            }
        }

        partial class VideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("video");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_file_name = JsonEncodedText.Encode("file_name");
            private static readonly JsonEncodedText PropName_mime_type = JsonEncodedText.Encode("mime_type");
            private static readonly JsonEncodedText PropName_has_stickers = JsonEncodedText.Encode("has_stickers");
            private static readonly JsonEncodedText PropName_supports_streaming = JsonEncodedText.Encode("supports_streaming");
            private static readonly JsonEncodedText PropName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_video = JsonEncodedText.Encode("video");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Video)tlobj;
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                writer.WritePropertyName(PropName_file_name);
                writer.WriteStringValue(obj.FileName);
                writer.WritePropertyName(PropName_mime_type);
                writer.WriteStringValue(obj.MimeType);
                writer.WritePropertyName(PropName_has_stickers);
                writer.WriteBooleanValue(obj.HasStickers);
                writer.WritePropertyName(PropName_supports_streaming);
                writer.WriteBooleanValue(obj.SupportsStreaming);
                if (obj.Minithumbnail != null)
                {
                    writer.WritePropertyName(PropName_minithumbnail);
                    writer.WriteTLObjectValue(obj.Minithumbnail);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                if (obj.Video_ != null)
                {
                    writer.WritePropertyName(PropName_video);
                    writer.WriteTLObjectValue(obj.Video_);
                }
            }
        }

        partial class VideoNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("videoNote");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_length = JsonEncodedText.Encode("length");
            private static readonly JsonEncodedText PropName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_video = JsonEncodedText.Encode("video");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (VideoNote)tlobj;
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                writer.WritePropertyName(PropName_length);
                writer.WriteNumberValue(obj.Length);
                if (obj.Minithumbnail != null)
                {
                    writer.WritePropertyName(PropName_minithumbnail);
                    writer.WriteTLObjectValue(obj.Minithumbnail);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                if (obj.Video != null)
                {
                    writer.WritePropertyName(PropName_video);
                    writer.WriteTLObjectValue(obj.Video);
                }
            }
        }

        partial class VoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("voiceNote");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_waveform = JsonEncodedText.Encode("waveform");
            private static readonly JsonEncodedText PropName_mime_type = JsonEncodedText.Encode("mime_type");
            private static readonly JsonEncodedText PropName_voice = JsonEncodedText.Encode("voice");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (VoiceNote)tlobj;
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                if (obj.Waveform != null)
                {
                    writer.WritePropertyName(PropName_waveform);
                    writer.WriteBase64StringValue(obj.Waveform);
                }
                writer.WritePropertyName(PropName_mime_type);
                writer.WriteStringValue(obj.MimeType);
                if (obj.Voice != null)
                {
                    writer.WritePropertyName(PropName_voice);
                    writer.WriteTLObjectValue(obj.Voice);
                }
            }
        }

        partial class ContactConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("contact");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            private static readonly JsonEncodedText PropName_first_name = JsonEncodedText.Encode("first_name");
            private static readonly JsonEncodedText PropName_last_name = JsonEncodedText.Encode("last_name");
            private static readonly JsonEncodedText PropName_vcard = JsonEncodedText.Encode("vcard");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Contact)tlobj;
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
                writer.WritePropertyName(PropName_first_name);
                writer.WriteStringValue(obj.FirstName);
                writer.WritePropertyName(PropName_last_name);
                writer.WriteStringValue(obj.LastName);
                writer.WritePropertyName(PropName_vcard);
                writer.WriteStringValue(obj.Vcard);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class LocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("location");
            private static readonly JsonEncodedText PropName_latitude = JsonEncodedText.Encode("latitude");
            private static readonly JsonEncodedText PropName_longitude = JsonEncodedText.Encode("longitude");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Location)tlobj;
                writer.WritePropertyName(PropName_latitude);
                writer.WriteNumberValue(obj.Latitude);
                writer.WritePropertyName(PropName_longitude);
                writer.WriteNumberValue(obj.Longitude);
            }
        }

        partial class VenueConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("venue");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_address = JsonEncodedText.Encode("address");
            private static readonly JsonEncodedText PropName_provider = JsonEncodedText.Encode("provider");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Venue)tlobj;
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_address);
                writer.WriteStringValue(obj.Address);
                writer.WritePropertyName(PropName_provider);
                writer.WriteStringValue(obj.Provider);
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_type);
                writer.WriteStringValue(obj.Type);
            }
        }

        partial class GameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("game");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_short_name = JsonEncodedText.Encode("short_name");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Game)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_short_name);
                writer.WriteStringValue(obj.ShortName);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
            }
        }

        partial class PollConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("poll");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_question = JsonEncodedText.Encode("question");
            private static readonly JsonEncodedText PropName_options = JsonEncodedText.Encode("options");
            private static readonly JsonEncodedText PropName_total_voter_count = JsonEncodedText.Encode("total_voter_count");
            private static readonly JsonEncodedText PropName_recent_voter_user_ids = JsonEncodedText.Encode("recent_voter_user_ids");
            private static readonly JsonEncodedText PropName_is_anonymous = JsonEncodedText.Encode("is_anonymous");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_open_period = JsonEncodedText.Encode("open_period");
            private static readonly JsonEncodedText PropName_close_date = JsonEncodedText.Encode("close_date");
            private static readonly JsonEncodedText PropName_is_closed = JsonEncodedText.Encode("is_closed");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Poll)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_question);
                writer.WriteStringValue(obj.Question);
                if (obj.Options != null)
                {
                    writer.WritePropertyName(PropName_options);
                    writer.WriteArray(obj.Options);
                }
                writer.WritePropertyName(PropName_total_voter_count);
                writer.WriteNumberValue(obj.TotalVoterCount);
                if (obj.RecentVoterUserIds != null)
                {
                    writer.WritePropertyName(PropName_recent_voter_user_ids);
                    writer.WriteArray(obj.RecentVoterUserIds);
                }
                writer.WritePropertyName(PropName_is_anonymous);
                writer.WriteBooleanValue(obj.IsAnonymous);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_open_period);
                writer.WriteNumberValue(obj.OpenPeriod);
                writer.WritePropertyName(PropName_close_date);
                writer.WriteNumberValue(obj.CloseDate);
                writer.WritePropertyName(PropName_is_closed);
                writer.WriteBooleanValue(obj.IsClosed);
            }
        }

        partial class ProfilePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("profilePhoto");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_small = JsonEncodedText.Encode("small");
            private static readonly JsonEncodedText PropName_big = JsonEncodedText.Encode("big");
            private static readonly JsonEncodedText PropName_has_animation = JsonEncodedText.Encode("has_animation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ProfilePhoto)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                if (obj.Small != null)
                {
                    writer.WritePropertyName(PropName_small);
                    writer.WriteTLObjectValue(obj.Small);
                }
                if (obj.Big != null)
                {
                    writer.WritePropertyName(PropName_big);
                    writer.WriteTLObjectValue(obj.Big);
                }
                writer.WritePropertyName(PropName_has_animation);
                writer.WriteBooleanValue(obj.HasAnimation);
            }
        }

        partial class ChatPhotoInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatPhotoInfo");
            private static readonly JsonEncodedText PropName_small = JsonEncodedText.Encode("small");
            private static readonly JsonEncodedText PropName_big = JsonEncodedText.Encode("big");
            private static readonly JsonEncodedText PropName_has_animation = JsonEncodedText.Encode("has_animation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatPhotoInfo)tlobj;
                if (obj.Small != null)
                {
                    writer.WritePropertyName(PropName_small);
                    writer.WriteTLObjectValue(obj.Small);
                }
                if (obj.Big != null)
                {
                    writer.WritePropertyName(PropName_big);
                    writer.WriteTLObjectValue(obj.Big);
                }
                writer.WritePropertyName(PropName_has_animation);
                writer.WriteBooleanValue(obj.HasAnimation);
            }
        }

        partial class UserTypeRegularConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userTypeRegular");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserTypeDeletedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userTypeDeleted");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserTypeBotConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userTypeBot");
            private static readonly JsonEncodedText PropName_can_join_groups = JsonEncodedText.Encode("can_join_groups");
            private static readonly JsonEncodedText PropName_can_read_all_group_messages = JsonEncodedText.Encode("can_read_all_group_messages");
            private static readonly JsonEncodedText PropName_is_inline = JsonEncodedText.Encode("is_inline");
            private static readonly JsonEncodedText PropName_inline_query_placeholder = JsonEncodedText.Encode("inline_query_placeholder");
            private static readonly JsonEncodedText PropName_need_location = JsonEncodedText.Encode("need_location");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UserTypeBot)tlobj;
                writer.WritePropertyName(PropName_can_join_groups);
                writer.WriteBooleanValue(obj.CanJoinGroups);
                writer.WritePropertyName(PropName_can_read_all_group_messages);
                writer.WriteBooleanValue(obj.CanReadAllGroupMessages);
                writer.WritePropertyName(PropName_is_inline);
                writer.WriteBooleanValue(obj.IsInline);
                writer.WritePropertyName(PropName_inline_query_placeholder);
                writer.WriteStringValue(obj.InlineQueryPlaceholder);
                writer.WritePropertyName(PropName_need_location);
                writer.WriteBooleanValue(obj.NeedLocation);
            }
        }

        partial class UserTypeUnknownConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userTypeUnknown");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class BotCommandConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("botCommand");
            private static readonly JsonEncodedText PropName_command = JsonEncodedText.Encode("command");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BotCommand)tlobj;
                writer.WritePropertyName(PropName_command);
                writer.WriteStringValue(obj.Command);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
            }
        }

        partial class BotInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("botInfo");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_commands = JsonEncodedText.Encode("commands");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BotInfo)tlobj;
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                if (obj.Commands != null)
                {
                    writer.WritePropertyName(PropName_commands);
                    writer.WriteArray(obj.Commands);
                }
            }
        }

        partial class ChatLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatLocation");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            private static readonly JsonEncodedText PropName_address = JsonEncodedText.Encode("address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatLocation)tlobj;
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
                writer.WritePropertyName(PropName_address);
                writer.WriteStringValue(obj.Address);
            }
        }

        partial class AnimatedChatPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("animatedChatPhoto");
            private static readonly JsonEncodedText PropName_length = JsonEncodedText.Encode("length");
            private static readonly JsonEncodedText PropName_file = JsonEncodedText.Encode("file");
            private static readonly JsonEncodedText PropName_main_frame_timestamp = JsonEncodedText.Encode("main_frame_timestamp");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AnimatedChatPhoto)tlobj;
                writer.WritePropertyName(PropName_length);
                writer.WriteNumberValue(obj.Length);
                if (obj.File != null)
                {
                    writer.WritePropertyName(PropName_file);
                    writer.WriteTLObjectValue(obj.File);
                }
                writer.WritePropertyName(PropName_main_frame_timestamp);
                writer.WriteNumberValue(obj.MainFrameTimestamp);
            }
        }

        partial class ChatPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatPhoto");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_added_date = JsonEncodedText.Encode("added_date");
            private static readonly JsonEncodedText PropName_minithumbnail = JsonEncodedText.Encode("minithumbnail");
            private static readonly JsonEncodedText PropName_sizes = JsonEncodedText.Encode("sizes");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatPhoto)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_added_date);
                writer.WriteNumberValue(obj.AddedDate);
                if (obj.Minithumbnail != null)
                {
                    writer.WritePropertyName(PropName_minithumbnail);
                    writer.WriteTLObjectValue(obj.Minithumbnail);
                }
                if (obj.Sizes != null)
                {
                    writer.WritePropertyName(PropName_sizes);
                    writer.WriteArray(obj.Sizes);
                }
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
            }
        }

        partial class ChatPhotosConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatPhotos");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_photos = JsonEncodedText.Encode("photos");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatPhotos)tlobj;
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                if (obj.Photos != null)
                {
                    writer.WritePropertyName(PropName_photos);
                    writer.WriteArray(obj.Photos);
                }
            }
        }

        partial class InputChatPhotoPreviousConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputChatPhotoPrevious");
            private static readonly JsonEncodedText PropName_chat_photo_id = JsonEncodedText.Encode("chat_photo_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputChatPhotoPrevious)tlobj;
                writer.WritePropertyName(PropName_chat_photo_id);
                writer.WriteInt64String(obj.ChatPhotoId);
            }
        }

        partial class InputChatPhotoStaticConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputChatPhotoStatic");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputChatPhotoStatic)tlobj;
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
            }
        }

        partial class InputChatPhotoAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputChatPhotoAnimation");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            private static readonly JsonEncodedText PropName_main_frame_timestamp = JsonEncodedText.Encode("main_frame_timestamp");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputChatPhotoAnimation)tlobj;
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
                writer.WritePropertyName(PropName_main_frame_timestamp);
                writer.WriteNumberValue(obj.MainFrameTimestamp);
            }
        }

        partial class UserConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("user");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_first_name = JsonEncodedText.Encode("first_name");
            private static readonly JsonEncodedText PropName_last_name = JsonEncodedText.Encode("last_name");
            private static readonly JsonEncodedText PropName_username = JsonEncodedText.Encode("username");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            private static readonly JsonEncodedText PropName_status = JsonEncodedText.Encode("status");
            private static readonly JsonEncodedText PropName_profile_photo = JsonEncodedText.Encode("profile_photo");
            private static readonly JsonEncodedText PropName_is_contact = JsonEncodedText.Encode("is_contact");
            private static readonly JsonEncodedText PropName_is_mutual_contact = JsonEncodedText.Encode("is_mutual_contact");
            private static readonly JsonEncodedText PropName_is_verified = JsonEncodedText.Encode("is_verified");
            private static readonly JsonEncodedText PropName_is_support = JsonEncodedText.Encode("is_support");
            private static readonly JsonEncodedText PropName_restriction_reason = JsonEncodedText.Encode("restriction_reason");
            private static readonly JsonEncodedText PropName_is_scam = JsonEncodedText.Encode("is_scam");
            private static readonly JsonEncodedText PropName_have_access = JsonEncodedText.Encode("have_access");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_language_code = JsonEncodedText.Encode("language_code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (User)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_first_name);
                writer.WriteStringValue(obj.FirstName);
                writer.WritePropertyName(PropName_last_name);
                writer.WriteStringValue(obj.LastName);
                writer.WritePropertyName(PropName_username);
                writer.WriteStringValue(obj.Username);
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
                if (obj.Status != null)
                {
                    writer.WritePropertyName(PropName_status);
                    writer.WriteTLObjectValue(obj.Status);
                }
                if (obj.ProfilePhoto != null)
                {
                    writer.WritePropertyName(PropName_profile_photo);
                    writer.WriteTLObjectValue(obj.ProfilePhoto);
                }
                writer.WritePropertyName(PropName_is_contact);
                writer.WriteBooleanValue(obj.IsContact);
                writer.WritePropertyName(PropName_is_mutual_contact);
                writer.WriteBooleanValue(obj.IsMutualContact);
                writer.WritePropertyName(PropName_is_verified);
                writer.WriteBooleanValue(obj.IsVerified);
                writer.WritePropertyName(PropName_is_support);
                writer.WriteBooleanValue(obj.IsSupport);
                writer.WritePropertyName(PropName_restriction_reason);
                writer.WriteStringValue(obj.RestrictionReason);
                writer.WritePropertyName(PropName_is_scam);
                writer.WriteBooleanValue(obj.IsScam);
                writer.WritePropertyName(PropName_have_access);
                writer.WriteBooleanValue(obj.HaveAccess);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_language_code);
                writer.WriteStringValue(obj.LanguageCode);
            }
        }

        partial class UserFullInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userFullInfo");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_can_be_called = JsonEncodedText.Encode("can_be_called");
            private static readonly JsonEncodedText PropName_supports_video_calls = JsonEncodedText.Encode("supports_video_calls");
            private static readonly JsonEncodedText PropName_has_private_calls = JsonEncodedText.Encode("has_private_calls");
            private static readonly JsonEncodedText PropName_need_phone_number_privacy_exception = JsonEncodedText.Encode("need_phone_number_privacy_exception");
            private static readonly JsonEncodedText PropName_bio = JsonEncodedText.Encode("bio");
            private static readonly JsonEncodedText PropName_share_text = JsonEncodedText.Encode("share_text");
            private static readonly JsonEncodedText PropName_group_in_common_count = JsonEncodedText.Encode("group_in_common_count");
            private static readonly JsonEncodedText PropName_bot_info = JsonEncodedText.Encode("bot_info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UserFullInfo)tlobj;
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_can_be_called);
                writer.WriteBooleanValue(obj.CanBeCalled);
                writer.WritePropertyName(PropName_supports_video_calls);
                writer.WriteBooleanValue(obj.SupportsVideoCalls);
                writer.WritePropertyName(PropName_has_private_calls);
                writer.WriteBooleanValue(obj.HasPrivateCalls);
                writer.WritePropertyName(PropName_need_phone_number_privacy_exception);
                writer.WriteBooleanValue(obj.NeedPhoneNumberPrivacyException);
                writer.WritePropertyName(PropName_bio);
                writer.WriteStringValue(obj.Bio);
                writer.WritePropertyName(PropName_share_text);
                writer.WriteStringValue(obj.ShareText);
                writer.WritePropertyName(PropName_group_in_common_count);
                writer.WriteNumberValue(obj.GroupInCommonCount);
                if (obj.BotInfo != null)
                {
                    writer.WritePropertyName(PropName_bot_info);
                    writer.WriteTLObjectValue(obj.BotInfo);
                }
            }
        }

        partial class UsersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("users");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_user_ids = JsonEncodedText.Encode("user_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Users)tlobj;
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                if (obj.UserIds != null)
                {
                    writer.WritePropertyName(PropName_user_ids);
                    writer.WriteArray(obj.UserIds);
                }
            }
        }

        partial class ChatAdministratorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatAdministrator");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_custom_title = JsonEncodedText.Encode("custom_title");
            private static readonly JsonEncodedText PropName_is_owner = JsonEncodedText.Encode("is_owner");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatAdministrator)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_custom_title);
                writer.WriteStringValue(obj.CustomTitle);
                writer.WritePropertyName(PropName_is_owner);
                writer.WriteBooleanValue(obj.IsOwner);
            }
        }

        partial class ChatAdministratorsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatAdministrators");
            private static readonly JsonEncodedText PropName_administrators = JsonEncodedText.Encode("administrators");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatAdministrators)tlobj;
                if (obj.Administrators != null)
                {
                    writer.WritePropertyName(PropName_administrators);
                    writer.WriteArray(obj.Administrators);
                }
            }
        }

        partial class ChatPermissionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatPermissions");
            private static readonly JsonEncodedText PropName_can_send_messages = JsonEncodedText.Encode("can_send_messages");
            private static readonly JsonEncodedText PropName_can_send_media_messages = JsonEncodedText.Encode("can_send_media_messages");
            private static readonly JsonEncodedText PropName_can_send_polls = JsonEncodedText.Encode("can_send_polls");
            private static readonly JsonEncodedText PropName_can_send_other_messages = JsonEncodedText.Encode("can_send_other_messages");
            private static readonly JsonEncodedText PropName_can_add_web_page_previews = JsonEncodedText.Encode("can_add_web_page_previews");
            private static readonly JsonEncodedText PropName_can_change_info = JsonEncodedText.Encode("can_change_info");
            private static readonly JsonEncodedText PropName_can_invite_users = JsonEncodedText.Encode("can_invite_users");
            private static readonly JsonEncodedText PropName_can_pin_messages = JsonEncodedText.Encode("can_pin_messages");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatPermissions)tlobj;
                writer.WritePropertyName(PropName_can_send_messages);
                writer.WriteBooleanValue(obj.CanSendMessages);
                writer.WritePropertyName(PropName_can_send_media_messages);
                writer.WriteBooleanValue(obj.CanSendMediaMessages);
                writer.WritePropertyName(PropName_can_send_polls);
                writer.WriteBooleanValue(obj.CanSendPolls);
                writer.WritePropertyName(PropName_can_send_other_messages);
                writer.WriteBooleanValue(obj.CanSendOtherMessages);
                writer.WritePropertyName(PropName_can_add_web_page_previews);
                writer.WriteBooleanValue(obj.CanAddWebPagePreviews);
                writer.WritePropertyName(PropName_can_change_info);
                writer.WriteBooleanValue(obj.CanChangeInfo);
                writer.WritePropertyName(PropName_can_invite_users);
                writer.WriteBooleanValue(obj.CanInviteUsers);
                writer.WritePropertyName(PropName_can_pin_messages);
                writer.WriteBooleanValue(obj.CanPinMessages);
            }
        }

        partial class ChatMemberStatusCreatorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMemberStatusCreator");
            private static readonly JsonEncodedText PropName_custom_title = JsonEncodedText.Encode("custom_title");
            private static readonly JsonEncodedText PropName_is_anonymous = JsonEncodedText.Encode("is_anonymous");
            private static readonly JsonEncodedText PropName_is_member = JsonEncodedText.Encode("is_member");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatMemberStatusCreator)tlobj;
                writer.WritePropertyName(PropName_custom_title);
                writer.WriteStringValue(obj.CustomTitle);
                writer.WritePropertyName(PropName_is_anonymous);
                writer.WriteBooleanValue(obj.IsAnonymous);
                writer.WritePropertyName(PropName_is_member);
                writer.WriteBooleanValue(obj.IsMember);
            }
        }

        partial class ChatMemberStatusAdministratorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMemberStatusAdministrator");
            private static readonly JsonEncodedText PropName_custom_title = JsonEncodedText.Encode("custom_title");
            private static readonly JsonEncodedText PropName_can_be_edited = JsonEncodedText.Encode("can_be_edited");
            private static readonly JsonEncodedText PropName_can_change_info = JsonEncodedText.Encode("can_change_info");
            private static readonly JsonEncodedText PropName_can_post_messages = JsonEncodedText.Encode("can_post_messages");
            private static readonly JsonEncodedText PropName_can_edit_messages = JsonEncodedText.Encode("can_edit_messages");
            private static readonly JsonEncodedText PropName_can_delete_messages = JsonEncodedText.Encode("can_delete_messages");
            private static readonly JsonEncodedText PropName_can_invite_users = JsonEncodedText.Encode("can_invite_users");
            private static readonly JsonEncodedText PropName_can_restrict_members = JsonEncodedText.Encode("can_restrict_members");
            private static readonly JsonEncodedText PropName_can_pin_messages = JsonEncodedText.Encode("can_pin_messages");
            private static readonly JsonEncodedText PropName_can_promote_members = JsonEncodedText.Encode("can_promote_members");
            private static readonly JsonEncodedText PropName_is_anonymous = JsonEncodedText.Encode("is_anonymous");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatMemberStatusAdministrator)tlobj;
                writer.WritePropertyName(PropName_custom_title);
                writer.WriteStringValue(obj.CustomTitle);
                writer.WritePropertyName(PropName_can_be_edited);
                writer.WriteBooleanValue(obj.CanBeEdited);
                writer.WritePropertyName(PropName_can_change_info);
                writer.WriteBooleanValue(obj.CanChangeInfo);
                writer.WritePropertyName(PropName_can_post_messages);
                writer.WriteBooleanValue(obj.CanPostMessages);
                writer.WritePropertyName(PropName_can_edit_messages);
                writer.WriteBooleanValue(obj.CanEditMessages);
                writer.WritePropertyName(PropName_can_delete_messages);
                writer.WriteBooleanValue(obj.CanDeleteMessages);
                writer.WritePropertyName(PropName_can_invite_users);
                writer.WriteBooleanValue(obj.CanInviteUsers);
                writer.WritePropertyName(PropName_can_restrict_members);
                writer.WriteBooleanValue(obj.CanRestrictMembers);
                writer.WritePropertyName(PropName_can_pin_messages);
                writer.WriteBooleanValue(obj.CanPinMessages);
                writer.WritePropertyName(PropName_can_promote_members);
                writer.WriteBooleanValue(obj.CanPromoteMembers);
                writer.WritePropertyName(PropName_is_anonymous);
                writer.WriteBooleanValue(obj.IsAnonymous);
            }
        }

        partial class ChatMemberStatusMemberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMemberStatusMember");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatMemberStatusRestrictedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMemberStatusRestricted");
            private static readonly JsonEncodedText PropName_is_member = JsonEncodedText.Encode("is_member");
            private static readonly JsonEncodedText PropName_restricted_until_date = JsonEncodedText.Encode("restricted_until_date");
            private static readonly JsonEncodedText PropName_permissions = JsonEncodedText.Encode("permissions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatMemberStatusRestricted)tlobj;
                writer.WritePropertyName(PropName_is_member);
                writer.WriteBooleanValue(obj.IsMember);
                writer.WritePropertyName(PropName_restricted_until_date);
                writer.WriteNumberValue(obj.RestrictedUntilDate);
                if (obj.Permissions != null)
                {
                    writer.WritePropertyName(PropName_permissions);
                    writer.WriteTLObjectValue(obj.Permissions);
                }
            }
        }

        partial class ChatMemberStatusLeftConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMemberStatusLeft");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatMemberStatusBannedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMemberStatusBanned");
            private static readonly JsonEncodedText PropName_banned_until_date = JsonEncodedText.Encode("banned_until_date");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatMemberStatusBanned)tlobj;
                writer.WritePropertyName(PropName_banned_until_date);
                writer.WriteNumberValue(obj.BannedUntilDate);
            }
        }

        partial class ChatMemberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMember");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_inviter_user_id = JsonEncodedText.Encode("inviter_user_id");
            private static readonly JsonEncodedText PropName_joined_chat_date = JsonEncodedText.Encode("joined_chat_date");
            private static readonly JsonEncodedText PropName_status = JsonEncodedText.Encode("status");
            private static readonly JsonEncodedText PropName_bot_info = JsonEncodedText.Encode("bot_info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatMember)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_inviter_user_id);
                writer.WriteNumberValue(obj.InviterUserId);
                writer.WritePropertyName(PropName_joined_chat_date);
                writer.WriteNumberValue(obj.JoinedChatDate);
                if (obj.Status != null)
                {
                    writer.WritePropertyName(PropName_status);
                    writer.WriteTLObjectValue(obj.Status);
                }
                if (obj.BotInfo != null)
                {
                    writer.WritePropertyName(PropName_bot_info);
                    writer.WriteTLObjectValue(obj.BotInfo);
                }
            }
        }

        partial class ChatMembersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMembers");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_members = JsonEncodedText.Encode("members");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatMembers)tlobj;
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                if (obj.Members != null)
                {
                    writer.WritePropertyName(PropName_members);
                    writer.WriteArray(obj.Members);
                }
            }
        }

        partial class ChatMembersFilterContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMembersFilterContacts");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatMembersFilterAdministratorsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMembersFilterAdministrators");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatMembersFilterMembersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMembersFilterMembers");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatMembersFilterRestrictedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMembersFilterRestricted");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatMembersFilterBannedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMembersFilterBanned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatMembersFilterBotsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatMembersFilterBots");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SupergroupMembersFilterRecentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterRecent");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SupergroupMembersFilterContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterContacts");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SupergroupMembersFilterContacts)tlobj;
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
            }
        }

        partial class SupergroupMembersFilterAdministratorsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterAdministrators");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SupergroupMembersFilterSearchConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterSearch");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SupergroupMembersFilterSearch)tlobj;
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
            }
        }

        partial class SupergroupMembersFilterRestrictedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterRestricted");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SupergroupMembersFilterRestricted)tlobj;
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
            }
        }

        partial class SupergroupMembersFilterBannedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterBanned");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SupergroupMembersFilterBanned)tlobj;
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
            }
        }

        partial class SupergroupMembersFilterBotsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("supergroupMembersFilterBots");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class BasicGroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("basicGroup");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_member_count = JsonEncodedText.Encode("member_count");
            private static readonly JsonEncodedText PropName_status = JsonEncodedText.Encode("status");
            private static readonly JsonEncodedText PropName_is_active = JsonEncodedText.Encode("is_active");
            private static readonly JsonEncodedText PropName_upgraded_to_supergroup_id = JsonEncodedText.Encode("upgraded_to_supergroup_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BasicGroup)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_member_count);
                writer.WriteNumberValue(obj.MemberCount);
                if (obj.Status != null)
                {
                    writer.WritePropertyName(PropName_status);
                    writer.WriteTLObjectValue(obj.Status);
                }
                writer.WritePropertyName(PropName_is_active);
                writer.WriteBooleanValue(obj.IsActive);
                writer.WritePropertyName(PropName_upgraded_to_supergroup_id);
                writer.WriteNumberValue(obj.UpgradedToSupergroupId);
            }
        }

        partial class BasicGroupFullInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("basicGroupFullInfo");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_creator_user_id = JsonEncodedText.Encode("creator_user_id");
            private static readonly JsonEncodedText PropName_members = JsonEncodedText.Encode("members");
            private static readonly JsonEncodedText PropName_invite_link = JsonEncodedText.Encode("invite_link");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BasicGroupFullInfo)tlobj;
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                writer.WritePropertyName(PropName_creator_user_id);
                writer.WriteNumberValue(obj.CreatorUserId);
                if (obj.Members != null)
                {
                    writer.WritePropertyName(PropName_members);
                    writer.WriteArray(obj.Members);
                }
                writer.WritePropertyName(PropName_invite_link);
                writer.WriteStringValue(obj.InviteLink);
            }
        }

        partial class SupergroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("supergroup");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_username = JsonEncodedText.Encode("username");
            private static readonly JsonEncodedText PropName_date = JsonEncodedText.Encode("date");
            private static readonly JsonEncodedText PropName_status = JsonEncodedText.Encode("status");
            private static readonly JsonEncodedText PropName_member_count = JsonEncodedText.Encode("member_count");
            private static readonly JsonEncodedText PropName_has_linked_chat = JsonEncodedText.Encode("has_linked_chat");
            private static readonly JsonEncodedText PropName_has_location = JsonEncodedText.Encode("has_location");
            private static readonly JsonEncodedText PropName_sign_messages = JsonEncodedText.Encode("sign_messages");
            private static readonly JsonEncodedText PropName_is_slow_mode_enabled = JsonEncodedText.Encode("is_slow_mode_enabled");
            private static readonly JsonEncodedText PropName_is_channel = JsonEncodedText.Encode("is_channel");
            private static readonly JsonEncodedText PropName_is_verified = JsonEncodedText.Encode("is_verified");
            private static readonly JsonEncodedText PropName_restriction_reason = JsonEncodedText.Encode("restriction_reason");
            private static readonly JsonEncodedText PropName_is_scam = JsonEncodedText.Encode("is_scam");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Supergroup)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_username);
                writer.WriteStringValue(obj.Username);
                writer.WritePropertyName(PropName_date);
                writer.WriteNumberValue(obj.Date);
                if (obj.Status != null)
                {
                    writer.WritePropertyName(PropName_status);
                    writer.WriteTLObjectValue(obj.Status);
                }
                writer.WritePropertyName(PropName_member_count);
                writer.WriteNumberValue(obj.MemberCount);
                writer.WritePropertyName(PropName_has_linked_chat);
                writer.WriteBooleanValue(obj.HasLinkedChat);
                writer.WritePropertyName(PropName_has_location);
                writer.WriteBooleanValue(obj.HasLocation);
                writer.WritePropertyName(PropName_sign_messages);
                writer.WriteBooleanValue(obj.SignMessages);
                writer.WritePropertyName(PropName_is_slow_mode_enabled);
                writer.WriteBooleanValue(obj.IsSlowModeEnabled);
                writer.WritePropertyName(PropName_is_channel);
                writer.WriteBooleanValue(obj.IsChannel);
                writer.WritePropertyName(PropName_is_verified);
                writer.WriteBooleanValue(obj.IsVerified);
                writer.WritePropertyName(PropName_restriction_reason);
                writer.WriteStringValue(obj.RestrictionReason);
                writer.WritePropertyName(PropName_is_scam);
                writer.WriteBooleanValue(obj.IsScam);
            }
        }

        partial class SupergroupFullInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("supergroupFullInfo");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_member_count = JsonEncodedText.Encode("member_count");
            private static readonly JsonEncodedText PropName_administrator_count = JsonEncodedText.Encode("administrator_count");
            private static readonly JsonEncodedText PropName_restricted_count = JsonEncodedText.Encode("restricted_count");
            private static readonly JsonEncodedText PropName_banned_count = JsonEncodedText.Encode("banned_count");
            private static readonly JsonEncodedText PropName_linked_chat_id = JsonEncodedText.Encode("linked_chat_id");
            private static readonly JsonEncodedText PropName_slow_mode_delay = JsonEncodedText.Encode("slow_mode_delay");
            private static readonly JsonEncodedText PropName_slow_mode_delay_expires_in = JsonEncodedText.Encode("slow_mode_delay_expires_in");
            private static readonly JsonEncodedText PropName_can_get_members = JsonEncodedText.Encode("can_get_members");
            private static readonly JsonEncodedText PropName_can_set_username = JsonEncodedText.Encode("can_set_username");
            private static readonly JsonEncodedText PropName_can_set_sticker_set = JsonEncodedText.Encode("can_set_sticker_set");
            private static readonly JsonEncodedText PropName_can_set_location = JsonEncodedText.Encode("can_set_location");
            private static readonly JsonEncodedText PropName_can_get_statistics = JsonEncodedText.Encode("can_get_statistics");
            private static readonly JsonEncodedText PropName_is_all_history_available = JsonEncodedText.Encode("is_all_history_available");
            private static readonly JsonEncodedText PropName_sticker_set_id = JsonEncodedText.Encode("sticker_set_id");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            private static readonly JsonEncodedText PropName_invite_link = JsonEncodedText.Encode("invite_link");
            private static readonly JsonEncodedText PropName_upgraded_from_basic_group_id = JsonEncodedText.Encode("upgraded_from_basic_group_id");
            private static readonly JsonEncodedText PropName_upgraded_from_max_message_id = JsonEncodedText.Encode("upgraded_from_max_message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SupergroupFullInfo)tlobj;
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                writer.WritePropertyName(PropName_member_count);
                writer.WriteNumberValue(obj.MemberCount);
                writer.WritePropertyName(PropName_administrator_count);
                writer.WriteNumberValue(obj.AdministratorCount);
                writer.WritePropertyName(PropName_restricted_count);
                writer.WriteNumberValue(obj.RestrictedCount);
                writer.WritePropertyName(PropName_banned_count);
                writer.WriteNumberValue(obj.BannedCount);
                writer.WritePropertyName(PropName_linked_chat_id);
                writer.WriteNumberValue(obj.LinkedChatId);
                writer.WritePropertyName(PropName_slow_mode_delay);
                writer.WriteNumberValue(obj.SlowModeDelay);
                writer.WritePropertyName(PropName_slow_mode_delay_expires_in);
                writer.WriteNumberValue(obj.SlowModeDelayExpiresIn);
                writer.WritePropertyName(PropName_can_get_members);
                writer.WriteBooleanValue(obj.CanGetMembers);
                writer.WritePropertyName(PropName_can_set_username);
                writer.WriteBooleanValue(obj.CanSetUsername);
                writer.WritePropertyName(PropName_can_set_sticker_set);
                writer.WriteBooleanValue(obj.CanSetStickerSet);
                writer.WritePropertyName(PropName_can_set_location);
                writer.WriteBooleanValue(obj.CanSetLocation);
                writer.WritePropertyName(PropName_can_get_statistics);
                writer.WriteBooleanValue(obj.CanGetStatistics);
                writer.WritePropertyName(PropName_is_all_history_available);
                writer.WriteBooleanValue(obj.IsAllHistoryAvailable);
                writer.WritePropertyName(PropName_sticker_set_id);
                writer.WriteInt64String(obj.StickerSetId);
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
                writer.WritePropertyName(PropName_invite_link);
                writer.WriteStringValue(obj.InviteLink);
                writer.WritePropertyName(PropName_upgraded_from_basic_group_id);
                writer.WriteNumberValue(obj.UpgradedFromBasicGroupId);
                writer.WritePropertyName(PropName_upgraded_from_max_message_id);
                writer.WriteNumberValue(obj.UpgradedFromMaxMessageId);
            }
        }

        partial class SecretChatStatePendingConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("secretChatStatePending");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SecretChatStateReadyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("secretChatStateReady");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SecretChatStateClosedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("secretChatStateClosed");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SecretChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("secretChat");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_state = JsonEncodedText.Encode("state");
            private static readonly JsonEncodedText PropName_is_outbound = JsonEncodedText.Encode("is_outbound");
            private static readonly JsonEncodedText PropName_ttl = JsonEncodedText.Encode("ttl");
            private static readonly JsonEncodedText PropName_key_hash = JsonEncodedText.Encode("key_hash");
            private static readonly JsonEncodedText PropName_layer = JsonEncodedText.Encode("layer");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SecretChat)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.State != null)
                {
                    writer.WritePropertyName(PropName_state);
                    writer.WriteTLObjectValue(obj.State);
                }
                writer.WritePropertyName(PropName_is_outbound);
                writer.WriteBooleanValue(obj.IsOutbound);
                writer.WritePropertyName(PropName_ttl);
                writer.WriteNumberValue(obj.Ttl);
                if (obj.KeyHash != null)
                {
                    writer.WritePropertyName(PropName_key_hash);
                    writer.WriteBase64StringValue(obj.KeyHash);
                }
                writer.WritePropertyName(PropName_layer);
                writer.WriteNumberValue(obj.Layer);
            }
        }

        partial class MessageForwardOriginUserConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageForwardOriginUser");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageForwardOriginUser)tlobj;
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
            }
        }

        partial class MessageForwardOriginChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageForwardOriginChat");
            private static readonly JsonEncodedText PropName_sender_chat_id = JsonEncodedText.Encode("sender_chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageForwardOriginChat)tlobj;
                writer.WritePropertyName(PropName_sender_chat_id);
                writer.WriteNumberValue(obj.SenderChatId);
            }
        }

        partial class MessageForwardOriginHiddenUserConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageForwardOriginHiddenUser");
            private static readonly JsonEncodedText PropName_sender_name = JsonEncodedText.Encode("sender_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageForwardOriginHiddenUser)tlobj;
                writer.WritePropertyName(PropName_sender_name);
                writer.WriteStringValue(obj.SenderName);
            }
        }

        partial class MessageForwardOriginChannelConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageForwardOriginChannel");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_author_signature = JsonEncodedText.Encode("author_signature");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageForwardOriginChannel)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_author_signature);
                writer.WriteStringValue(obj.AuthorSignature);
            }
        }

        partial class MessageForwardInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageForwardInfo");
            private static readonly JsonEncodedText PropName_origin = JsonEncodedText.Encode("origin");
            private static readonly JsonEncodedText PropName_date = JsonEncodedText.Encode("date");
            private static readonly JsonEncodedText PropName_public_service_announcement_type = JsonEncodedText.Encode("public_service_announcement_type");
            private static readonly JsonEncodedText PropName_from_chat_id = JsonEncodedText.Encode("from_chat_id");
            private static readonly JsonEncodedText PropName_from_message_id = JsonEncodedText.Encode("from_message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageForwardInfo)tlobj;
                if (obj.Origin != null)
                {
                    writer.WritePropertyName(PropName_origin);
                    writer.WriteTLObjectValue(obj.Origin);
                }
                writer.WritePropertyName(PropName_date);
                writer.WriteNumberValue(obj.Date);
                writer.WritePropertyName(PropName_public_service_announcement_type);
                writer.WriteStringValue(obj.PublicServiceAnnouncementType);
                writer.WritePropertyName(PropName_from_chat_id);
                writer.WriteNumberValue(obj.FromChatId);
                writer.WritePropertyName(PropName_from_message_id);
                writer.WriteNumberValue(obj.FromMessageId);
            }
        }

        partial class MessageReplyInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageReplyInfo");
            private static readonly JsonEncodedText PropName_reply_count = JsonEncodedText.Encode("reply_count");
            private static readonly JsonEncodedText PropName_recent_replier_user_ids = JsonEncodedText.Encode("recent_replier_user_ids");
            private static readonly JsonEncodedText PropName_last_read_inbox_message_id = JsonEncodedText.Encode("last_read_inbox_message_id");
            private static readonly JsonEncodedText PropName_last_read_outbox_message_id = JsonEncodedText.Encode("last_read_outbox_message_id");
            private static readonly JsonEncodedText PropName_last_message_id = JsonEncodedText.Encode("last_message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageReplyInfo)tlobj;
                writer.WritePropertyName(PropName_reply_count);
                writer.WriteNumberValue(obj.ReplyCount);
                if (obj.RecentReplierUserIds != null)
                {
                    writer.WritePropertyName(PropName_recent_replier_user_ids);
                    writer.WriteArray(obj.RecentReplierUserIds);
                }
                writer.WritePropertyName(PropName_last_read_inbox_message_id);
                writer.WriteNumberValue(obj.LastReadInboxMessageId);
                writer.WritePropertyName(PropName_last_read_outbox_message_id);
                writer.WriteNumberValue(obj.LastReadOutboxMessageId);
                writer.WritePropertyName(PropName_last_message_id);
                writer.WriteNumberValue(obj.LastMessageId);
            }
        }

        partial class MessageInteractionInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageInteractionInfo");
            private static readonly JsonEncodedText PropName_view_count = JsonEncodedText.Encode("view_count");
            private static readonly JsonEncodedText PropName_forward_count = JsonEncodedText.Encode("forward_count");
            private static readonly JsonEncodedText PropName_reply_info = JsonEncodedText.Encode("reply_info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageInteractionInfo)tlobj;
                writer.WritePropertyName(PropName_view_count);
                writer.WriteNumberValue(obj.ViewCount);
                writer.WritePropertyName(PropName_forward_count);
                writer.WriteNumberValue(obj.ForwardCount);
                if (obj.ReplyInfo != null)
                {
                    writer.WritePropertyName(PropName_reply_info);
                    writer.WriteTLObjectValue(obj.ReplyInfo);
                }
            }
        }

        partial class MessageSendingStatePendingConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageSendingStatePending");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MessageSendingStateFailedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageSendingStateFailed");
            private static readonly JsonEncodedText PropName_error_code = JsonEncodedText.Encode("error_code");
            private static readonly JsonEncodedText PropName_error_message = JsonEncodedText.Encode("error_message");
            private static readonly JsonEncodedText PropName_can_retry = JsonEncodedText.Encode("can_retry");
            private static readonly JsonEncodedText PropName_retry_after = JsonEncodedText.Encode("retry_after");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageSendingStateFailed)tlobj;
                writer.WritePropertyName(PropName_error_code);
                writer.WriteNumberValue(obj.ErrorCode);
                writer.WritePropertyName(PropName_error_message);
                writer.WriteStringValue(obj.ErrorMessage);
                writer.WritePropertyName(PropName_can_retry);
                writer.WriteBooleanValue(obj.CanRetry);
                writer.WritePropertyName(PropName_retry_after);
                writer.WriteNumberValue(obj.RetryAfter);
            }
        }

        partial class MessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("message");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            private static readonly JsonEncodedText PropName_sender_chat_id = JsonEncodedText.Encode("sender_chat_id");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_sending_state = JsonEncodedText.Encode("sending_state");
            private static readonly JsonEncodedText PropName_scheduling_state = JsonEncodedText.Encode("scheduling_state");
            private static readonly JsonEncodedText PropName_is_outgoing = JsonEncodedText.Encode("is_outgoing");
            private static readonly JsonEncodedText PropName_can_be_edited = JsonEncodedText.Encode("can_be_edited");
            private static readonly JsonEncodedText PropName_can_be_forwarded = JsonEncodedText.Encode("can_be_forwarded");
            private static readonly JsonEncodedText PropName_can_be_deleted_only_for_self = JsonEncodedText.Encode("can_be_deleted_only_for_self");
            private static readonly JsonEncodedText PropName_can_be_deleted_for_all_users = JsonEncodedText.Encode("can_be_deleted_for_all_users");
            private static readonly JsonEncodedText PropName_can_get_statistics = JsonEncodedText.Encode("can_get_statistics");
            private static readonly JsonEncodedText PropName_can_get_message_thread = JsonEncodedText.Encode("can_get_message_thread");
            private static readonly JsonEncodedText PropName_is_channel_post = JsonEncodedText.Encode("is_channel_post");
            private static readonly JsonEncodedText PropName_contains_unread_mention = JsonEncodedText.Encode("contains_unread_mention");
            private static readonly JsonEncodedText PropName_date = JsonEncodedText.Encode("date");
            private static readonly JsonEncodedText PropName_edit_date = JsonEncodedText.Encode("edit_date");
            private static readonly JsonEncodedText PropName_forward_info = JsonEncodedText.Encode("forward_info");
            private static readonly JsonEncodedText PropName_interaction_info = JsonEncodedText.Encode("interaction_info");
            private static readonly JsonEncodedText PropName_reply_in_chat_id = JsonEncodedText.Encode("reply_in_chat_id");
            private static readonly JsonEncodedText PropName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
            private static readonly JsonEncodedText PropName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
            private static readonly JsonEncodedText PropName_ttl = JsonEncodedText.Encode("ttl");
            private static readonly JsonEncodedText PropName_ttl_expires_in = JsonEncodedText.Encode("ttl_expires_in");
            private static readonly JsonEncodedText PropName_via_bot_user_id = JsonEncodedText.Encode("via_bot_user_id");
            private static readonly JsonEncodedText PropName_author_signature = JsonEncodedText.Encode("author_signature");
            private static readonly JsonEncodedText PropName_media_album_id = JsonEncodedText.Encode("media_album_id");
            private static readonly JsonEncodedText PropName_restriction_reason = JsonEncodedText.Encode("restriction_reason");
            private static readonly JsonEncodedText PropName_content = JsonEncodedText.Encode("content");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Message)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
                writer.WritePropertyName(PropName_sender_chat_id);
                writer.WriteNumberValue(obj.SenderChatId);
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.SendingState != null)
                {
                    writer.WritePropertyName(PropName_sending_state);
                    writer.WriteTLObjectValue(obj.SendingState);
                }
                if (obj.SchedulingState != null)
                {
                    writer.WritePropertyName(PropName_scheduling_state);
                    writer.WriteTLObjectValue(obj.SchedulingState);
                }
                writer.WritePropertyName(PropName_is_outgoing);
                writer.WriteBooleanValue(obj.IsOutgoing);
                writer.WritePropertyName(PropName_can_be_edited);
                writer.WriteBooleanValue(obj.CanBeEdited);
                writer.WritePropertyName(PropName_can_be_forwarded);
                writer.WriteBooleanValue(obj.CanBeForwarded);
                writer.WritePropertyName(PropName_can_be_deleted_only_for_self);
                writer.WriteBooleanValue(obj.CanBeDeletedOnlyForSelf);
                writer.WritePropertyName(PropName_can_be_deleted_for_all_users);
                writer.WriteBooleanValue(obj.CanBeDeletedForAllUsers);
                writer.WritePropertyName(PropName_can_get_statistics);
                writer.WriteBooleanValue(obj.CanGetStatistics);
                writer.WritePropertyName(PropName_can_get_message_thread);
                writer.WriteBooleanValue(obj.CanGetMessageThread);
                writer.WritePropertyName(PropName_is_channel_post);
                writer.WriteBooleanValue(obj.IsChannelPost);
                writer.WritePropertyName(PropName_contains_unread_mention);
                writer.WriteBooleanValue(obj.ContainsUnreadMention);
                writer.WritePropertyName(PropName_date);
                writer.WriteNumberValue(obj.Date);
                writer.WritePropertyName(PropName_edit_date);
                writer.WriteNumberValue(obj.EditDate);
                if (obj.ForwardInfo != null)
                {
                    writer.WritePropertyName(PropName_forward_info);
                    writer.WriteTLObjectValue(obj.ForwardInfo);
                }
                if (obj.InteractionInfo != null)
                {
                    writer.WritePropertyName(PropName_interaction_info);
                    writer.WriteTLObjectValue(obj.InteractionInfo);
                }
                writer.WritePropertyName(PropName_reply_in_chat_id);
                writer.WriteNumberValue(obj.ReplyInChatId);
                writer.WritePropertyName(PropName_reply_to_message_id);
                writer.WriteNumberValue(obj.ReplyToMessageId);
                writer.WritePropertyName(PropName_message_thread_id);
                writer.WriteNumberValue(obj.MessageThreadId);
                writer.WritePropertyName(PropName_ttl);
                writer.WriteNumberValue(obj.Ttl);
                writer.WritePropertyName(PropName_ttl_expires_in);
                writer.WriteNumberValue(obj.TtlExpiresIn);
                writer.WritePropertyName(PropName_via_bot_user_id);
                writer.WriteNumberValue(obj.ViaBotUserId);
                writer.WritePropertyName(PropName_author_signature);
                writer.WriteStringValue(obj.AuthorSignature);
                writer.WritePropertyName(PropName_media_album_id);
                writer.WriteInt64String(obj.MediaAlbumId);
                writer.WritePropertyName(PropName_restriction_reason);
                writer.WriteStringValue(obj.RestrictionReason);
                if (obj.Content != null)
                {
                    writer.WritePropertyName(PropName_content);
                    writer.WriteTLObjectValue(obj.Content);
                }
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
            }
        }

        partial class MessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messages");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_messages = JsonEncodedText.Encode("messages");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Messages)tlobj;
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                if (obj.Messages_ != null)
                {
                    writer.WritePropertyName(PropName_messages);
                    writer.WriteArray(obj.Messages_);
                }
            }
        }

        partial class FoundMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("foundMessages");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_messages = JsonEncodedText.Encode("messages");
            private static readonly JsonEncodedText PropName_next_offset = JsonEncodedText.Encode("next_offset");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (FoundMessages)tlobj;
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                if (obj.Messages != null)
                {
                    writer.WritePropertyName(PropName_messages);
                    writer.WriteArray(obj.Messages);
                }
                writer.WritePropertyName(PropName_next_offset);
                writer.WriteStringValue(obj.NextOffset);
            }
        }

        partial class NotificationSettingsScopePrivateChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationSettingsScopePrivateChats");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NotificationSettingsScopeGroupChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationSettingsScopeGroupChats");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NotificationSettingsScopeChannelChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationSettingsScopeChannelChats");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatNotificationSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatNotificationSettings");
            private static readonly JsonEncodedText PropName_use_default_mute_for = JsonEncodedText.Encode("use_default_mute_for");
            private static readonly JsonEncodedText PropName_mute_for = JsonEncodedText.Encode("mute_for");
            private static readonly JsonEncodedText PropName_use_default_sound = JsonEncodedText.Encode("use_default_sound");
            private static readonly JsonEncodedText PropName_sound = JsonEncodedText.Encode("sound");
            private static readonly JsonEncodedText PropName_use_default_show_preview = JsonEncodedText.Encode("use_default_show_preview");
            private static readonly JsonEncodedText PropName_show_preview = JsonEncodedText.Encode("show_preview");
            private static readonly JsonEncodedText PropName_use_default_disable_pinned_message_notifications = JsonEncodedText.Encode("use_default_disable_pinned_message_notifications");
            private static readonly JsonEncodedText PropName_disable_pinned_message_notifications = JsonEncodedText.Encode("disable_pinned_message_notifications");
            private static readonly JsonEncodedText PropName_use_default_disable_mention_notifications = JsonEncodedText.Encode("use_default_disable_mention_notifications");
            private static readonly JsonEncodedText PropName_disable_mention_notifications = JsonEncodedText.Encode("disable_mention_notifications");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatNotificationSettings)tlobj;
                writer.WritePropertyName(PropName_use_default_mute_for);
                writer.WriteBooleanValue(obj.UseDefaultMuteFor);
                writer.WritePropertyName(PropName_mute_for);
                writer.WriteNumberValue(obj.MuteFor);
                writer.WritePropertyName(PropName_use_default_sound);
                writer.WriteBooleanValue(obj.UseDefaultSound);
                writer.WritePropertyName(PropName_sound);
                writer.WriteStringValue(obj.Sound);
                writer.WritePropertyName(PropName_use_default_show_preview);
                writer.WriteBooleanValue(obj.UseDefaultShowPreview);
                writer.WritePropertyName(PropName_show_preview);
                writer.WriteBooleanValue(obj.ShowPreview);
                writer.WritePropertyName(PropName_use_default_disable_pinned_message_notifications);
                writer.WriteBooleanValue(obj.UseDefaultDisablePinnedMessageNotifications);
                writer.WritePropertyName(PropName_disable_pinned_message_notifications);
                writer.WriteBooleanValue(obj.DisablePinnedMessageNotifications);
                writer.WritePropertyName(PropName_use_default_disable_mention_notifications);
                writer.WriteBooleanValue(obj.UseDefaultDisableMentionNotifications);
                writer.WritePropertyName(PropName_disable_mention_notifications);
                writer.WriteBooleanValue(obj.DisableMentionNotifications);
            }
        }

        partial class ScopeNotificationSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("scopeNotificationSettings");
            private static readonly JsonEncodedText PropName_mute_for = JsonEncodedText.Encode("mute_for");
            private static readonly JsonEncodedText PropName_sound = JsonEncodedText.Encode("sound");
            private static readonly JsonEncodedText PropName_show_preview = JsonEncodedText.Encode("show_preview");
            private static readonly JsonEncodedText PropName_disable_pinned_message_notifications = JsonEncodedText.Encode("disable_pinned_message_notifications");
            private static readonly JsonEncodedText PropName_disable_mention_notifications = JsonEncodedText.Encode("disable_mention_notifications");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ScopeNotificationSettings)tlobj;
                writer.WritePropertyName(PropName_mute_for);
                writer.WriteNumberValue(obj.MuteFor);
                writer.WritePropertyName(PropName_sound);
                writer.WriteStringValue(obj.Sound);
                writer.WritePropertyName(PropName_show_preview);
                writer.WriteBooleanValue(obj.ShowPreview);
                writer.WritePropertyName(PropName_disable_pinned_message_notifications);
                writer.WriteBooleanValue(obj.DisablePinnedMessageNotifications);
                writer.WritePropertyName(PropName_disable_mention_notifications);
                writer.WriteBooleanValue(obj.DisableMentionNotifications);
            }
        }

        partial class DraftMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("draftMessage");
            private static readonly JsonEncodedText PropName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
            private static readonly JsonEncodedText PropName_date = JsonEncodedText.Encode("date");
            private static readonly JsonEncodedText PropName_input_message_text = JsonEncodedText.Encode("input_message_text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DraftMessage)tlobj;
                writer.WritePropertyName(PropName_reply_to_message_id);
                writer.WriteNumberValue(obj.ReplyToMessageId);
                writer.WritePropertyName(PropName_date);
                writer.WriteNumberValue(obj.Date);
                if (obj.InputMessageText != null)
                {
                    writer.WritePropertyName(PropName_input_message_text);
                    writer.WriteTLObjectValue(obj.InputMessageText);
                }
            }
        }

        partial class ChatTypePrivateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatTypePrivate");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatTypePrivate)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class ChatTypeBasicGroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatTypeBasicGroup");
            private static readonly JsonEncodedText PropName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatTypeBasicGroup)tlobj;
                writer.WritePropertyName(PropName_basic_group_id);
                writer.WriteNumberValue(obj.BasicGroupId);
            }
        }

        partial class ChatTypeSupergroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatTypeSupergroup");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            private static readonly JsonEncodedText PropName_is_channel = JsonEncodedText.Encode("is_channel");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatTypeSupergroup)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
                writer.WritePropertyName(PropName_is_channel);
                writer.WriteBooleanValue(obj.IsChannel);
            }
        }

        partial class ChatTypeSecretConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatTypeSecret");
            private static readonly JsonEncodedText PropName_secret_chat_id = JsonEncodedText.Encode("secret_chat_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatTypeSecret)tlobj;
                writer.WritePropertyName(PropName_secret_chat_id);
                writer.WriteNumberValue(obj.SecretChatId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class ChatFilterConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatFilter");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_icon_name = JsonEncodedText.Encode("icon_name");
            private static readonly JsonEncodedText PropName_pinned_chat_ids = JsonEncodedText.Encode("pinned_chat_ids");
            private static readonly JsonEncodedText PropName_included_chat_ids = JsonEncodedText.Encode("included_chat_ids");
            private static readonly JsonEncodedText PropName_excluded_chat_ids = JsonEncodedText.Encode("excluded_chat_ids");
            private static readonly JsonEncodedText PropName_exclude_muted = JsonEncodedText.Encode("exclude_muted");
            private static readonly JsonEncodedText PropName_exclude_read = JsonEncodedText.Encode("exclude_read");
            private static readonly JsonEncodedText PropName_exclude_archived = JsonEncodedText.Encode("exclude_archived");
            private static readonly JsonEncodedText PropName_include_contacts = JsonEncodedText.Encode("include_contacts");
            private static readonly JsonEncodedText PropName_include_non_contacts = JsonEncodedText.Encode("include_non_contacts");
            private static readonly JsonEncodedText PropName_include_bots = JsonEncodedText.Encode("include_bots");
            private static readonly JsonEncodedText PropName_include_groups = JsonEncodedText.Encode("include_groups");
            private static readonly JsonEncodedText PropName_include_channels = JsonEncodedText.Encode("include_channels");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatFilter)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_icon_name);
                writer.WriteStringValue(obj.IconName);
                if (obj.PinnedChatIds != null)
                {
                    writer.WritePropertyName(PropName_pinned_chat_ids);
                    writer.WriteArray(obj.PinnedChatIds);
                }
                if (obj.IncludedChatIds != null)
                {
                    writer.WritePropertyName(PropName_included_chat_ids);
                    writer.WriteArray(obj.IncludedChatIds);
                }
                if (obj.ExcludedChatIds != null)
                {
                    writer.WritePropertyName(PropName_excluded_chat_ids);
                    writer.WriteArray(obj.ExcludedChatIds);
                }
                writer.WritePropertyName(PropName_exclude_muted);
                writer.WriteBooleanValue(obj.ExcludeMuted);
                writer.WritePropertyName(PropName_exclude_read);
                writer.WriteBooleanValue(obj.ExcludeRead);
                writer.WritePropertyName(PropName_exclude_archived);
                writer.WriteBooleanValue(obj.ExcludeArchived);
                writer.WritePropertyName(PropName_include_contacts);
                writer.WriteBooleanValue(obj.IncludeContacts);
                writer.WritePropertyName(PropName_include_non_contacts);
                writer.WriteBooleanValue(obj.IncludeNonContacts);
                writer.WritePropertyName(PropName_include_bots);
                writer.WriteBooleanValue(obj.IncludeBots);
                writer.WritePropertyName(PropName_include_groups);
                writer.WriteBooleanValue(obj.IncludeGroups);
                writer.WritePropertyName(PropName_include_channels);
                writer.WriteBooleanValue(obj.IncludeChannels);
            }
        }

        partial class ChatFilterInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatFilterInfo");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_icon_name = JsonEncodedText.Encode("icon_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatFilterInfo)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_icon_name);
                writer.WriteStringValue(obj.IconName);
            }
        }

        partial class RecommendedChatFilterConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("recommendedChatFilter");
            private static readonly JsonEncodedText PropName_filter = JsonEncodedText.Encode("filter");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RecommendedChatFilter)tlobj;
                if (obj.Filter != null)
                {
                    writer.WritePropertyName(PropName_filter);
                    writer.WriteTLObjectValue(obj.Filter);
                }
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
            }
        }

        partial class RecommendedChatFiltersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("recommendedChatFilters");
            private static readonly JsonEncodedText PropName_chat_filters = JsonEncodedText.Encode("chat_filters");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RecommendedChatFilters)tlobj;
                if (obj.ChatFilters != null)
                {
                    writer.WritePropertyName(PropName_chat_filters);
                    writer.WriteArray(obj.ChatFilters);
                }
            }
        }

        partial class ChatListMainConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatListMain");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatListArchiveConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatListArchive");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatListFilterConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatListFilter");
            private static readonly JsonEncodedText PropName_chat_filter_id = JsonEncodedText.Encode("chat_filter_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatListFilter)tlobj;
                writer.WritePropertyName(PropName_chat_filter_id);
                writer.WriteNumberValue(obj.ChatFilterId);
            }
        }

        partial class ChatListsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatLists");
            private static readonly JsonEncodedText PropName_chat_lists = JsonEncodedText.Encode("chat_lists");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatLists)tlobj;
                if (obj.ChatLists_ != null)
                {
                    writer.WritePropertyName(PropName_chat_lists);
                    writer.WriteArray(obj.ChatLists_);
                }
            }
        }

        partial class ChatSourceMtprotoProxyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatSourceMtprotoProxy");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatSourcePublicServiceAnnouncementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatSourcePublicServiceAnnouncement");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatSourcePublicServiceAnnouncement)tlobj;
                writer.WritePropertyName(PropName_type);
                writer.WriteStringValue(obj.Type);
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
            }
        }

        partial class ChatPositionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatPosition");
            private static readonly JsonEncodedText PropName_list = JsonEncodedText.Encode("list");
            private static readonly JsonEncodedText PropName_order = JsonEncodedText.Encode("order");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            private static readonly JsonEncodedText PropName_source = JsonEncodedText.Encode("source");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatPosition)tlobj;
                if (obj.List != null)
                {
                    writer.WritePropertyName(PropName_list);
                    writer.WriteTLObjectValue(obj.List);
                }
                writer.WritePropertyName(PropName_order);
                writer.WriteInt64String(obj.Order);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
                if (obj.Source != null)
                {
                    writer.WritePropertyName(PropName_source);
                    writer.WriteTLObjectValue(obj.Source);
                }
            }
        }

        partial class ChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chat");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_permissions = JsonEncodedText.Encode("permissions");
            private static readonly JsonEncodedText PropName_last_message = JsonEncodedText.Encode("last_message");
            private static readonly JsonEncodedText PropName_positions = JsonEncodedText.Encode("positions");
            private static readonly JsonEncodedText PropName_is_marked_as_unread = JsonEncodedText.Encode("is_marked_as_unread");
            private static readonly JsonEncodedText PropName_is_blocked = JsonEncodedText.Encode("is_blocked");
            private static readonly JsonEncodedText PropName_has_scheduled_messages = JsonEncodedText.Encode("has_scheduled_messages");
            private static readonly JsonEncodedText PropName_can_be_deleted_only_for_self = JsonEncodedText.Encode("can_be_deleted_only_for_self");
            private static readonly JsonEncodedText PropName_can_be_deleted_for_all_users = JsonEncodedText.Encode("can_be_deleted_for_all_users");
            private static readonly JsonEncodedText PropName_can_be_reported = JsonEncodedText.Encode("can_be_reported");
            private static readonly JsonEncodedText PropName_default_disable_notification = JsonEncodedText.Encode("default_disable_notification");
            private static readonly JsonEncodedText PropName_unread_count = JsonEncodedText.Encode("unread_count");
            private static readonly JsonEncodedText PropName_last_read_inbox_message_id = JsonEncodedText.Encode("last_read_inbox_message_id");
            private static readonly JsonEncodedText PropName_last_read_outbox_message_id = JsonEncodedText.Encode("last_read_outbox_message_id");
            private static readonly JsonEncodedText PropName_unread_mention_count = JsonEncodedText.Encode("unread_mention_count");
            private static readonly JsonEncodedText PropName_notification_settings = JsonEncodedText.Encode("notification_settings");
            private static readonly JsonEncodedText PropName_action_bar = JsonEncodedText.Encode("action_bar");
            private static readonly JsonEncodedText PropName_pinned_message_id = JsonEncodedText.Encode("pinned_message_id");
            private static readonly JsonEncodedText PropName_reply_markup_message_id = JsonEncodedText.Encode("reply_markup_message_id");
            private static readonly JsonEncodedText PropName_draft_message = JsonEncodedText.Encode("draft_message");
            private static readonly JsonEncodedText PropName_client_data = JsonEncodedText.Encode("client_data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Chat)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                if (obj.Permissions != null)
                {
                    writer.WritePropertyName(PropName_permissions);
                    writer.WriteTLObjectValue(obj.Permissions);
                }
                if (obj.LastMessage != null)
                {
                    writer.WritePropertyName(PropName_last_message);
                    writer.WriteTLObjectValue(obj.LastMessage);
                }
                if (obj.Positions != null)
                {
                    writer.WritePropertyName(PropName_positions);
                    writer.WriteArray(obj.Positions);
                }
                writer.WritePropertyName(PropName_is_marked_as_unread);
                writer.WriteBooleanValue(obj.IsMarkedAsUnread);
                writer.WritePropertyName(PropName_is_blocked);
                writer.WriteBooleanValue(obj.IsBlocked);
                writer.WritePropertyName(PropName_has_scheduled_messages);
                writer.WriteBooleanValue(obj.HasScheduledMessages);
                writer.WritePropertyName(PropName_can_be_deleted_only_for_self);
                writer.WriteBooleanValue(obj.CanBeDeletedOnlyForSelf);
                writer.WritePropertyName(PropName_can_be_deleted_for_all_users);
                writer.WriteBooleanValue(obj.CanBeDeletedForAllUsers);
                writer.WritePropertyName(PropName_can_be_reported);
                writer.WriteBooleanValue(obj.CanBeReported);
                writer.WritePropertyName(PropName_default_disable_notification);
                writer.WriteBooleanValue(obj.DefaultDisableNotification);
                writer.WritePropertyName(PropName_unread_count);
                writer.WriteNumberValue(obj.UnreadCount);
                writer.WritePropertyName(PropName_last_read_inbox_message_id);
                writer.WriteNumberValue(obj.LastReadInboxMessageId);
                writer.WritePropertyName(PropName_last_read_outbox_message_id);
                writer.WriteNumberValue(obj.LastReadOutboxMessageId);
                writer.WritePropertyName(PropName_unread_mention_count);
                writer.WriteNumberValue(obj.UnreadMentionCount);
                if (obj.NotificationSettings != null)
                {
                    writer.WritePropertyName(PropName_notification_settings);
                    writer.WriteTLObjectValue(obj.NotificationSettings);
                }
                if (obj.ActionBar != null)
                {
                    writer.WritePropertyName(PropName_action_bar);
                    writer.WriteTLObjectValue(obj.ActionBar);
                }
                writer.WritePropertyName(PropName_pinned_message_id);
                writer.WriteNumberValue(obj.PinnedMessageId);
                writer.WritePropertyName(PropName_reply_markup_message_id);
                writer.WriteNumberValue(obj.ReplyMarkupMessageId);
                if (obj.DraftMessage != null)
                {
                    writer.WritePropertyName(PropName_draft_message);
                    writer.WriteTLObjectValue(obj.DraftMessage);
                }
                writer.WritePropertyName(PropName_client_data);
                writer.WriteStringValue(obj.ClientData);
            }
        }

        partial class ChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chats");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_chat_ids = JsonEncodedText.Encode("chat_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Chats)tlobj;
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                if (obj.ChatIds != null)
                {
                    writer.WritePropertyName(PropName_chat_ids);
                    writer.WriteArray(obj.ChatIds);
                }
            }
        }

        partial class ChatNearbyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatNearby");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_distance = JsonEncodedText.Encode("distance");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatNearby)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_distance);
                writer.WriteNumberValue(obj.Distance);
            }
        }

        partial class ChatsNearbyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatsNearby");
            private static readonly JsonEncodedText PropName_users_nearby = JsonEncodedText.Encode("users_nearby");
            private static readonly JsonEncodedText PropName_supergroups_nearby = JsonEncodedText.Encode("supergroups_nearby");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatsNearby)tlobj;
                if (obj.UsersNearby != null)
                {
                    writer.WritePropertyName(PropName_users_nearby);
                    writer.WriteArray(obj.UsersNearby);
                }
                if (obj.SupergroupsNearby != null)
                {
                    writer.WritePropertyName(PropName_supergroups_nearby);
                    writer.WriteArray(obj.SupergroupsNearby);
                }
            }
        }

        partial class ChatInviteLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatInviteLink");
            private static readonly JsonEncodedText PropName_invite_link = JsonEncodedText.Encode("invite_link");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatInviteLink)tlobj;
                writer.WritePropertyName(PropName_invite_link);
                writer.WriteStringValue(obj.InviteLink);
            }
        }

        partial class ChatInviteLinkInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatInviteLinkInfo");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_accessible_for = JsonEncodedText.Encode("accessible_for");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_member_count = JsonEncodedText.Encode("member_count");
            private static readonly JsonEncodedText PropName_member_user_ids = JsonEncodedText.Encode("member_user_ids");
            private static readonly JsonEncodedText PropName_is_public = JsonEncodedText.Encode("is_public");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatInviteLinkInfo)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_accessible_for);
                writer.WriteNumberValue(obj.AccessibleFor);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_member_count);
                writer.WriteNumberValue(obj.MemberCount);
                if (obj.MemberUserIds != null)
                {
                    writer.WritePropertyName(PropName_member_user_ids);
                    writer.WriteArray(obj.MemberUserIds);
                }
                writer.WritePropertyName(PropName_is_public);
                writer.WriteBooleanValue(obj.IsPublic);
            }
        }

        partial class PublicChatTypeHasUsernameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("publicChatTypeHasUsername");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PublicChatTypeIsLocationBasedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("publicChatTypeIsLocationBased");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionBarReportSpamConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionBarReportSpam");
            private static readonly JsonEncodedText PropName_can_unarchive = JsonEncodedText.Encode("can_unarchive");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatActionBarReportSpam)tlobj;
                writer.WritePropertyName(PropName_can_unarchive);
                writer.WriteBooleanValue(obj.CanUnarchive);
            }
        }

        partial class ChatActionBarReportUnrelatedLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionBarReportUnrelatedLocation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionBarReportAddBlockConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionBarReportAddBlock");
            private static readonly JsonEncodedText PropName_can_unarchive = JsonEncodedText.Encode("can_unarchive");
            private static readonly JsonEncodedText PropName_distance = JsonEncodedText.Encode("distance");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatActionBarReportAddBlock)tlobj;
                writer.WritePropertyName(PropName_can_unarchive);
                writer.WriteBooleanValue(obj.CanUnarchive);
                writer.WritePropertyName(PropName_distance);
                writer.WriteNumberValue(obj.Distance);
            }
        }

        partial class ChatActionBarAddContactConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionBarAddContact");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionBarSharePhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionBarSharePhoneNumber");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class KeyboardButtonTypeTextConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("keyboardButtonTypeText");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class KeyboardButtonTypeRequestPhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("keyboardButtonTypeRequestPhoneNumber");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class KeyboardButtonTypeRequestLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("keyboardButtonTypeRequestLocation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class KeyboardButtonTypeRequestPollConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("keyboardButtonTypeRequestPoll");
            private static readonly JsonEncodedText PropName_force_regular = JsonEncodedText.Encode("force_regular");
            private static readonly JsonEncodedText PropName_force_quiz = JsonEncodedText.Encode("force_quiz");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (KeyboardButtonTypeRequestPoll)tlobj;
                writer.WritePropertyName(PropName_force_regular);
                writer.WriteBooleanValue(obj.ForceRegular);
                writer.WritePropertyName(PropName_force_quiz);
                writer.WriteBooleanValue(obj.ForceQuiz);
            }
        }

        partial class KeyboardButtonConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("keyboardButton");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (KeyboardButton)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class InlineKeyboardButtonTypeUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeUrl");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineKeyboardButtonTypeUrl)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
            }
        }

        partial class InlineKeyboardButtonTypeLoginUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeLoginUrl");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_forward_text = JsonEncodedText.Encode("forward_text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineKeyboardButtonTypeLoginUrl)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_forward_text);
                writer.WriteStringValue(obj.ForwardText);
            }
        }

        partial class InlineKeyboardButtonTypeCallbackConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeCallback");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineKeyboardButtonTypeCallback)tlobj;
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
            }
        }

        partial class InlineKeyboardButtonTypeCallbackWithPasswordConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeCallbackWithPassword");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineKeyboardButtonTypeCallbackWithPassword)tlobj;
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
            }
        }

        partial class InlineKeyboardButtonTypeCallbackGameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeCallbackGame");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class InlineKeyboardButtonTypeSwitchInlineConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeSwitchInline");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_in_current_chat = JsonEncodedText.Encode("in_current_chat");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineKeyboardButtonTypeSwitchInline)tlobj;
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_in_current_chat);
                writer.WriteBooleanValue(obj.InCurrentChat);
            }
        }

        partial class InlineKeyboardButtonTypeBuyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineKeyboardButtonTypeBuy");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class InlineKeyboardButtonConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineKeyboardButton");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineKeyboardButton)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class ReplyMarkupRemoveKeyboardConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("replyMarkupRemoveKeyboard");
            private static readonly JsonEncodedText PropName_is_personal = JsonEncodedText.Encode("is_personal");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ReplyMarkupRemoveKeyboard)tlobj;
                writer.WritePropertyName(PropName_is_personal);
                writer.WriteBooleanValue(obj.IsPersonal);
            }
        }

        partial class ReplyMarkupForceReplyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("replyMarkupForceReply");
            private static readonly JsonEncodedText PropName_is_personal = JsonEncodedText.Encode("is_personal");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ReplyMarkupForceReply)tlobj;
                writer.WritePropertyName(PropName_is_personal);
                writer.WriteBooleanValue(obj.IsPersonal);
            }
        }

        partial class ReplyMarkupShowKeyboardConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("replyMarkupShowKeyboard");
            private static readonly JsonEncodedText PropName_rows = JsonEncodedText.Encode("rows");
            private static readonly JsonEncodedText PropName_resize_keyboard = JsonEncodedText.Encode("resize_keyboard");
            private static readonly JsonEncodedText PropName_one_time = JsonEncodedText.Encode("one_time");
            private static readonly JsonEncodedText PropName_is_personal = JsonEncodedText.Encode("is_personal");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ReplyMarkupShowKeyboard)tlobj;
                if (obj.Rows != null)
                {
                    writer.WritePropertyName(PropName_rows);
                    writer.WriteArray(obj.Rows);
                }
                writer.WritePropertyName(PropName_resize_keyboard);
                writer.WriteBooleanValue(obj.ResizeKeyboard);
                writer.WritePropertyName(PropName_one_time);
                writer.WriteBooleanValue(obj.OneTime);
                writer.WritePropertyName(PropName_is_personal);
                writer.WriteBooleanValue(obj.IsPersonal);
            }
        }

        partial class ReplyMarkupInlineKeyboardConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("replyMarkupInlineKeyboard");
            private static readonly JsonEncodedText PropName_rows = JsonEncodedText.Encode("rows");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ReplyMarkupInlineKeyboard)tlobj;
                if (obj.Rows != null)
                {
                    writer.WritePropertyName(PropName_rows);
                    writer.WriteArray(obj.Rows);
                }
            }
        }

        partial class LoginUrlInfoOpenConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("loginUrlInfoOpen");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_skip_confirm = JsonEncodedText.Encode("skip_confirm");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LoginUrlInfoOpen)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_skip_confirm);
                writer.WriteBooleanValue(obj.SkipConfirm);
            }
        }

        partial class LoginUrlInfoRequestConfirmationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("loginUrlInfoRequestConfirmation");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_domain = JsonEncodedText.Encode("domain");
            private static readonly JsonEncodedText PropName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
            private static readonly JsonEncodedText PropName_request_write_access = JsonEncodedText.Encode("request_write_access");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LoginUrlInfoRequestConfirmation)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_domain);
                writer.WriteStringValue(obj.Domain);
                writer.WritePropertyName(PropName_bot_user_id);
                writer.WriteNumberValue(obj.BotUserId);
                writer.WritePropertyName(PropName_request_write_access);
                writer.WriteBooleanValue(obj.RequestWriteAccess);
            }
        }

        partial class MessageThreadInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageThreadInfo");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
            private static readonly JsonEncodedText PropName_messages = JsonEncodedText.Encode("messages");
            private static readonly JsonEncodedText PropName_draft_message = JsonEncodedText.Encode("draft_message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageThreadInfo)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_thread_id);
                writer.WriteNumberValue(obj.MessageThreadId);
                if (obj.Messages != null)
                {
                    writer.WritePropertyName(PropName_messages);
                    writer.WriteArray(obj.Messages);
                }
                if (obj.DraftMessage != null)
                {
                    writer.WritePropertyName(PropName_draft_message);
                    writer.WriteTLObjectValue(obj.DraftMessage);
                }
            }
        }

        partial class RichTextPlainConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextPlain");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextPlain)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
            }
        }

        partial class RichTextBoldConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextBold");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextBold)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class RichTextItalicConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextItalic");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextItalic)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class RichTextUnderlineConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextUnderline");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextUnderline)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class RichTextStrikethroughConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextStrikethrough");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextStrikethrough)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class RichTextFixedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextFixed");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextFixed)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class RichTextUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextUrl");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_is_cached = JsonEncodedText.Encode("is_cached");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextUrl)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_is_cached);
                writer.WriteBooleanValue(obj.IsCached);
            }
        }

        partial class RichTextEmailAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextEmailAddress");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_email_address = JsonEncodedText.Encode("email_address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextEmailAddress)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                writer.WritePropertyName(PropName_email_address);
                writer.WriteStringValue(obj.EmailAddress);
            }
        }

        partial class RichTextSubscriptConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextSubscript");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextSubscript)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class RichTextSuperscriptConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextSuperscript");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextSuperscript)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class RichTextMarkedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextMarked");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextMarked)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class RichTextPhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextPhoneNumber");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextPhoneNumber)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
            }
        }

        partial class RichTextIconConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextIcon");
            private static readonly JsonEncodedText PropName_document = JsonEncodedText.Encode("document");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextIcon)tlobj;
                if (obj.Document != null)
                {
                    writer.WritePropertyName(PropName_document);
                    writer.WriteTLObjectValue(obj.Document);
                }
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
            }
        }

        partial class RichTextReferenceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextReference");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_reference_text = JsonEncodedText.Encode("reference_text");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextReference)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                if (obj.ReferenceText != null)
                {
                    writer.WritePropertyName(PropName_reference_text);
                    writer.WriteTLObjectValue(obj.ReferenceText);
                }
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
            }
        }

        partial class RichTextAnchorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextAnchor");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextAnchor)tlobj;
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
            }
        }

        partial class RichTextAnchorLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTextAnchorLink");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTextAnchorLink)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
            }
        }

        partial class RichTextsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("richTexts");
            private static readonly JsonEncodedText PropName_texts = JsonEncodedText.Encode("texts");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RichTexts)tlobj;
                if (obj.Texts != null)
                {
                    writer.WritePropertyName(PropName_texts);
                    writer.WriteArray(obj.Texts);
                }
            }
        }

        partial class PageBlockCaptionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockCaption");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_credit = JsonEncodedText.Encode("credit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockCaption)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                if (obj.Credit != null)
                {
                    writer.WritePropertyName(PropName_credit);
                    writer.WriteTLObjectValue(obj.Credit);
                }
            }
        }

        partial class PageBlockListItemConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockListItem");
            private static readonly JsonEncodedText PropName_label = JsonEncodedText.Encode("label");
            private static readonly JsonEncodedText PropName_page_blocks = JsonEncodedText.Encode("page_blocks");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockListItem)tlobj;
                writer.WritePropertyName(PropName_label);
                writer.WriteStringValue(obj.Label);
                if (obj.PageBlocks != null)
                {
                    writer.WritePropertyName(PropName_page_blocks);
                    writer.WriteArray(obj.PageBlocks);
                }
            }
        }

        partial class PageBlockHorizontalAlignmentLeftConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockHorizontalAlignmentLeft");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PageBlockHorizontalAlignmentCenterConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockHorizontalAlignmentCenter");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PageBlockHorizontalAlignmentRightConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockHorizontalAlignmentRight");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PageBlockVerticalAlignmentTopConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockVerticalAlignmentTop");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PageBlockVerticalAlignmentMiddleConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockVerticalAlignmentMiddle");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PageBlockVerticalAlignmentBottomConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockVerticalAlignmentBottom");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PageBlockTableCellConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockTableCell");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_is_header = JsonEncodedText.Encode("is_header");
            private static readonly JsonEncodedText PropName_colspan = JsonEncodedText.Encode("colspan");
            private static readonly JsonEncodedText PropName_rowspan = JsonEncodedText.Encode("rowspan");
            private static readonly JsonEncodedText PropName_align = JsonEncodedText.Encode("align");
            private static readonly JsonEncodedText PropName_valign = JsonEncodedText.Encode("valign");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockTableCell)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                writer.WritePropertyName(PropName_is_header);
                writer.WriteBooleanValue(obj.IsHeader);
                writer.WritePropertyName(PropName_colspan);
                writer.WriteNumberValue(obj.Colspan);
                writer.WritePropertyName(PropName_rowspan);
                writer.WriteNumberValue(obj.Rowspan);
                if (obj.Align != null)
                {
                    writer.WritePropertyName(PropName_align);
                    writer.WriteTLObjectValue(obj.Align);
                }
                if (obj.Valign != null)
                {
                    writer.WritePropertyName(PropName_valign);
                    writer.WriteTLObjectValue(obj.Valign);
                }
            }
        }

        partial class PageBlockRelatedArticleConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockRelatedArticle");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_author = JsonEncodedText.Encode("author");
            private static readonly JsonEncodedText PropName_publish_date = JsonEncodedText.Encode("publish_date");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockRelatedArticle)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_author);
                writer.WriteStringValue(obj.Author);
                writer.WritePropertyName(PropName_publish_date);
                writer.WriteNumberValue(obj.PublishDate);
            }
        }

        partial class PageBlockTitleConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockTitle");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockTitle)tlobj;
                if (obj.Title != null)
                {
                    writer.WritePropertyName(PropName_title);
                    writer.WriteTLObjectValue(obj.Title);
                }
            }
        }

        partial class PageBlockSubtitleConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockSubtitle");
            private static readonly JsonEncodedText PropName_subtitle = JsonEncodedText.Encode("subtitle");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockSubtitle)tlobj;
                if (obj.Subtitle != null)
                {
                    writer.WritePropertyName(PropName_subtitle);
                    writer.WriteTLObjectValue(obj.Subtitle);
                }
            }
        }

        partial class PageBlockAuthorDateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockAuthorDate");
            private static readonly JsonEncodedText PropName_author = JsonEncodedText.Encode("author");
            private static readonly JsonEncodedText PropName_publish_date = JsonEncodedText.Encode("publish_date");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockAuthorDate)tlobj;
                if (obj.Author != null)
                {
                    writer.WritePropertyName(PropName_author);
                    writer.WriteTLObjectValue(obj.Author);
                }
                writer.WritePropertyName(PropName_publish_date);
                writer.WriteNumberValue(obj.PublishDate);
            }
        }

        partial class PageBlockHeaderConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockHeader");
            private static readonly JsonEncodedText PropName_header = JsonEncodedText.Encode("header");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockHeader)tlobj;
                if (obj.Header != null)
                {
                    writer.WritePropertyName(PropName_header);
                    writer.WriteTLObjectValue(obj.Header);
                }
            }
        }

        partial class PageBlockSubheaderConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockSubheader");
            private static readonly JsonEncodedText PropName_subheader = JsonEncodedText.Encode("subheader");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockSubheader)tlobj;
                if (obj.Subheader != null)
                {
                    writer.WritePropertyName(PropName_subheader);
                    writer.WriteTLObjectValue(obj.Subheader);
                }
            }
        }

        partial class PageBlockKickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockKicker");
            private static readonly JsonEncodedText PropName_kicker = JsonEncodedText.Encode("kicker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockKicker)tlobj;
                if (obj.Kicker != null)
                {
                    writer.WritePropertyName(PropName_kicker);
                    writer.WriteTLObjectValue(obj.Kicker);
                }
            }
        }

        partial class PageBlockParagraphConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockParagraph");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockParagraph)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class PageBlockPreformattedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockPreformatted");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_language = JsonEncodedText.Encode("language");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockPreformatted)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                writer.WritePropertyName(PropName_language);
                writer.WriteStringValue(obj.Language);
            }
        }

        partial class PageBlockFooterConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockFooter");
            private static readonly JsonEncodedText PropName_footer = JsonEncodedText.Encode("footer");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockFooter)tlobj;
                if (obj.Footer != null)
                {
                    writer.WritePropertyName(PropName_footer);
                    writer.WriteTLObjectValue(obj.Footer);
                }
            }
        }

        partial class PageBlockDividerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockDivider");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PageBlockAnchorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockAnchor");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockAnchor)tlobj;
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
            }
        }

        partial class PageBlockListConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockList");
            private static readonly JsonEncodedText PropName_items = JsonEncodedText.Encode("items");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockList)tlobj;
                if (obj.Items != null)
                {
                    writer.WritePropertyName(PropName_items);
                    writer.WriteArray(obj.Items);
                }
            }
        }

        partial class PageBlockBlockQuoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockBlockQuote");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_credit = JsonEncodedText.Encode("credit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockBlockQuote)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                if (obj.Credit != null)
                {
                    writer.WritePropertyName(PropName_credit);
                    writer.WriteTLObjectValue(obj.Credit);
                }
            }
        }

        partial class PageBlockPullQuoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockPullQuote");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_credit = JsonEncodedText.Encode("credit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockPullQuote)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                if (obj.Credit != null)
                {
                    writer.WritePropertyName(PropName_credit);
                    writer.WriteTLObjectValue(obj.Credit);
                }
            }
        }

        partial class PageBlockAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockAnimation");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_need_autoplay = JsonEncodedText.Encode("need_autoplay");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockAnimation)tlobj;
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                writer.WritePropertyName(PropName_need_autoplay);
                writer.WriteBooleanValue(obj.NeedAutoplay);
            }
        }

        partial class PageBlockAudioConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockAudio");
            private static readonly JsonEncodedText PropName_audio = JsonEncodedText.Encode("audio");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockAudio)tlobj;
                if (obj.Audio != null)
                {
                    writer.WritePropertyName(PropName_audio);
                    writer.WriteTLObjectValue(obj.Audio);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class PageBlockPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockPhoto");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockPhoto)tlobj;
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
            }
        }

        partial class PageBlockVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockVideo");
            private static readonly JsonEncodedText PropName_video = JsonEncodedText.Encode("video");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_need_autoplay = JsonEncodedText.Encode("need_autoplay");
            private static readonly JsonEncodedText PropName_is_looped = JsonEncodedText.Encode("is_looped");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockVideo)tlobj;
                if (obj.Video != null)
                {
                    writer.WritePropertyName(PropName_video);
                    writer.WriteTLObjectValue(obj.Video);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                writer.WritePropertyName(PropName_need_autoplay);
                writer.WriteBooleanValue(obj.NeedAutoplay);
                writer.WritePropertyName(PropName_is_looped);
                writer.WriteBooleanValue(obj.IsLooped);
            }
        }

        partial class PageBlockVoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockVoiceNote");
            private static readonly JsonEncodedText PropName_voice_note = JsonEncodedText.Encode("voice_note");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockVoiceNote)tlobj;
                if (obj.VoiceNote != null)
                {
                    writer.WritePropertyName(PropName_voice_note);
                    writer.WriteTLObjectValue(obj.VoiceNote);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class PageBlockCoverConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockCover");
            private static readonly JsonEncodedText PropName_cover = JsonEncodedText.Encode("cover");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockCover)tlobj;
                if (obj.Cover != null)
                {
                    writer.WritePropertyName(PropName_cover);
                    writer.WriteTLObjectValue(obj.Cover);
                }
            }
        }

        partial class PageBlockEmbeddedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockEmbedded");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_html = JsonEncodedText.Encode("html");
            private static readonly JsonEncodedText PropName_poster_photo = JsonEncodedText.Encode("poster_photo");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_is_full_width = JsonEncodedText.Encode("is_full_width");
            private static readonly JsonEncodedText PropName_allow_scrolling = JsonEncodedText.Encode("allow_scrolling");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockEmbedded)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_html);
                writer.WriteStringValue(obj.Html);
                if (obj.PosterPhoto != null)
                {
                    writer.WritePropertyName(PropName_poster_photo);
                    writer.WriteTLObjectValue(obj.PosterPhoto);
                }
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                writer.WritePropertyName(PropName_is_full_width);
                writer.WriteBooleanValue(obj.IsFullWidth);
                writer.WritePropertyName(PropName_allow_scrolling);
                writer.WriteBooleanValue(obj.AllowScrolling);
            }
        }

        partial class PageBlockEmbeddedPostConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockEmbeddedPost");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_author = JsonEncodedText.Encode("author");
            private static readonly JsonEncodedText PropName_author_photo = JsonEncodedText.Encode("author_photo");
            private static readonly JsonEncodedText PropName_date = JsonEncodedText.Encode("date");
            private static readonly JsonEncodedText PropName_page_blocks = JsonEncodedText.Encode("page_blocks");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockEmbeddedPost)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_author);
                writer.WriteStringValue(obj.Author);
                if (obj.AuthorPhoto != null)
                {
                    writer.WritePropertyName(PropName_author_photo);
                    writer.WriteTLObjectValue(obj.AuthorPhoto);
                }
                writer.WritePropertyName(PropName_date);
                writer.WriteNumberValue(obj.Date);
                if (obj.PageBlocks != null)
                {
                    writer.WritePropertyName(PropName_page_blocks);
                    writer.WriteArray(obj.PageBlocks);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class PageBlockCollageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockCollage");
            private static readonly JsonEncodedText PropName_page_blocks = JsonEncodedText.Encode("page_blocks");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockCollage)tlobj;
                if (obj.PageBlocks != null)
                {
                    writer.WritePropertyName(PropName_page_blocks);
                    writer.WriteArray(obj.PageBlocks);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class PageBlockSlideshowConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockSlideshow");
            private static readonly JsonEncodedText PropName_page_blocks = JsonEncodedText.Encode("page_blocks");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockSlideshow)tlobj;
                if (obj.PageBlocks != null)
                {
                    writer.WritePropertyName(PropName_page_blocks);
                    writer.WriteArray(obj.PageBlocks);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class PageBlockChatLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockChatLink");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_username = JsonEncodedText.Encode("username");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockChatLink)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_username);
                writer.WriteStringValue(obj.Username);
            }
        }

        partial class PageBlockTableConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockTable");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_cells = JsonEncodedText.Encode("cells");
            private static readonly JsonEncodedText PropName_is_bordered = JsonEncodedText.Encode("is_bordered");
            private static readonly JsonEncodedText PropName_is_striped = JsonEncodedText.Encode("is_striped");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockTable)tlobj;
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                if (obj.Cells != null)
                {
                    writer.WritePropertyName(PropName_cells);
                    writer.WriteArray(obj.Cells);
                }
                writer.WritePropertyName(PropName_is_bordered);
                writer.WriteBooleanValue(obj.IsBordered);
                writer.WritePropertyName(PropName_is_striped);
                writer.WriteBooleanValue(obj.IsStriped);
            }
        }

        partial class PageBlockDetailsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockDetails");
            private static readonly JsonEncodedText PropName_header = JsonEncodedText.Encode("header");
            private static readonly JsonEncodedText PropName_page_blocks = JsonEncodedText.Encode("page_blocks");
            private static readonly JsonEncodedText PropName_is_open = JsonEncodedText.Encode("is_open");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockDetails)tlobj;
                if (obj.Header != null)
                {
                    writer.WritePropertyName(PropName_header);
                    writer.WriteTLObjectValue(obj.Header);
                }
                if (obj.PageBlocks != null)
                {
                    writer.WritePropertyName(PropName_page_blocks);
                    writer.WriteArray(obj.PageBlocks);
                }
                writer.WritePropertyName(PropName_is_open);
                writer.WriteBooleanValue(obj.IsOpen);
            }
        }

        partial class PageBlockRelatedArticlesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockRelatedArticles");
            private static readonly JsonEncodedText PropName_header = JsonEncodedText.Encode("header");
            private static readonly JsonEncodedText PropName_articles = JsonEncodedText.Encode("articles");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockRelatedArticles)tlobj;
                if (obj.Header != null)
                {
                    writer.WritePropertyName(PropName_header);
                    writer.WriteTLObjectValue(obj.Header);
                }
                if (obj.Articles != null)
                {
                    writer.WritePropertyName(PropName_articles);
                    writer.WriteArray(obj.Articles);
                }
            }
        }

        partial class PageBlockMapConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pageBlockMap");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            private static readonly JsonEncodedText PropName_zoom = JsonEncodedText.Encode("zoom");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PageBlockMap)tlobj;
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
                writer.WritePropertyName(PropName_zoom);
                writer.WriteNumberValue(obj.Zoom);
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class WebPageInstantViewConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("webPageInstantView");
            private static readonly JsonEncodedText PropName_page_blocks = JsonEncodedText.Encode("page_blocks");
            private static readonly JsonEncodedText PropName_view_count = JsonEncodedText.Encode("view_count");
            private static readonly JsonEncodedText PropName_version = JsonEncodedText.Encode("version");
            private static readonly JsonEncodedText PropName_is_rtl = JsonEncodedText.Encode("is_rtl");
            private static readonly JsonEncodedText PropName_is_full = JsonEncodedText.Encode("is_full");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (WebPageInstantView)tlobj;
                if (obj.PageBlocks != null)
                {
                    writer.WritePropertyName(PropName_page_blocks);
                    writer.WriteArray(obj.PageBlocks);
                }
                writer.WritePropertyName(PropName_view_count);
                writer.WriteNumberValue(obj.ViewCount);
                writer.WritePropertyName(PropName_version);
                writer.WriteNumberValue(obj.Version);
                writer.WritePropertyName(PropName_is_rtl);
                writer.WriteBooleanValue(obj.IsRtl);
                writer.WritePropertyName(PropName_is_full);
                writer.WriteBooleanValue(obj.IsFull);
            }
        }

        partial class WebPageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("webPage");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_display_url = JsonEncodedText.Encode("display_url");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_site_name = JsonEncodedText.Encode("site_name");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_embed_url = JsonEncodedText.Encode("embed_url");
            private static readonly JsonEncodedText PropName_embed_type = JsonEncodedText.Encode("embed_type");
            private static readonly JsonEncodedText PropName_embed_width = JsonEncodedText.Encode("embed_width");
            private static readonly JsonEncodedText PropName_embed_height = JsonEncodedText.Encode("embed_height");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_author = JsonEncodedText.Encode("author");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            private static readonly JsonEncodedText PropName_audio = JsonEncodedText.Encode("audio");
            private static readonly JsonEncodedText PropName_document = JsonEncodedText.Encode("document");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            private static readonly JsonEncodedText PropName_video = JsonEncodedText.Encode("video");
            private static readonly JsonEncodedText PropName_video_note = JsonEncodedText.Encode("video_note");
            private static readonly JsonEncodedText PropName_voice_note = JsonEncodedText.Encode("voice_note");
            private static readonly JsonEncodedText PropName_instant_view_version = JsonEncodedText.Encode("instant_view_version");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (WebPage)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_display_url);
                writer.WriteStringValue(obj.DisplayUrl);
                writer.WritePropertyName(PropName_type);
                writer.WriteStringValue(obj.Type);
                writer.WritePropertyName(PropName_site_name);
                writer.WriteStringValue(obj.SiteName);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                if (obj.Description != null)
                {
                    writer.WritePropertyName(PropName_description);
                    writer.WriteTLObjectValue(obj.Description);
                }
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_embed_url);
                writer.WriteStringValue(obj.EmbedUrl);
                writer.WritePropertyName(PropName_embed_type);
                writer.WriteStringValue(obj.EmbedType);
                writer.WritePropertyName(PropName_embed_width);
                writer.WriteNumberValue(obj.EmbedWidth);
                writer.WritePropertyName(PropName_embed_height);
                writer.WriteNumberValue(obj.EmbedHeight);
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                writer.WritePropertyName(PropName_author);
                writer.WriteStringValue(obj.Author);
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
                if (obj.Audio != null)
                {
                    writer.WritePropertyName(PropName_audio);
                    writer.WriteTLObjectValue(obj.Audio);
                }
                if (obj.Document != null)
                {
                    writer.WritePropertyName(PropName_document);
                    writer.WriteTLObjectValue(obj.Document);
                }
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
                if (obj.Video != null)
                {
                    writer.WritePropertyName(PropName_video);
                    writer.WriteTLObjectValue(obj.Video);
                }
                if (obj.VideoNote != null)
                {
                    writer.WritePropertyName(PropName_video_note);
                    writer.WriteTLObjectValue(obj.VideoNote);
                }
                if (obj.VoiceNote != null)
                {
                    writer.WritePropertyName(PropName_voice_note);
                    writer.WriteTLObjectValue(obj.VoiceNote);
                }
                writer.WritePropertyName(PropName_instant_view_version);
                writer.WriteNumberValue(obj.InstantViewVersion);
            }
        }

        partial class CountryInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("countryInfo");
            private static readonly JsonEncodedText PropName_country_code = JsonEncodedText.Encode("country_code");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_english_name = JsonEncodedText.Encode("english_name");
            private static readonly JsonEncodedText PropName_is_hidden = JsonEncodedText.Encode("is_hidden");
            private static readonly JsonEncodedText PropName_calling_codes = JsonEncodedText.Encode("calling_codes");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CountryInfo)tlobj;
                writer.WritePropertyName(PropName_country_code);
                writer.WriteStringValue(obj.CountryCode);
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                writer.WritePropertyName(PropName_english_name);
                writer.WriteStringValue(obj.EnglishName);
                writer.WritePropertyName(PropName_is_hidden);
                writer.WriteBooleanValue(obj.IsHidden);
                if (obj.CallingCodes != null)
                {
                    writer.WritePropertyName(PropName_calling_codes);
                    writer.WriteArray(obj.CallingCodes);
                }
            }
        }

        partial class CountriesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("countries");
            private static readonly JsonEncodedText PropName_countries = JsonEncodedText.Encode("countries");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Countries)tlobj;
                if (obj.Countries_ != null)
                {
                    writer.WritePropertyName(PropName_countries);
                    writer.WriteArray(obj.Countries_);
                }
            }
        }

        partial class PhoneNumberInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("phoneNumberInfo");
            private static readonly JsonEncodedText PropName_country = JsonEncodedText.Encode("country");
            private static readonly JsonEncodedText PropName_country_calling_code = JsonEncodedText.Encode("country_calling_code");
            private static readonly JsonEncodedText PropName_formatted_phone_number = JsonEncodedText.Encode("formatted_phone_number");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PhoneNumberInfo)tlobj;
                if (obj.Country != null)
                {
                    writer.WritePropertyName(PropName_country);
                    writer.WriteTLObjectValue(obj.Country);
                }
                writer.WritePropertyName(PropName_country_calling_code);
                writer.WriteStringValue(obj.CountryCallingCode);
                writer.WritePropertyName(PropName_formatted_phone_number);
                writer.WriteStringValue(obj.FormattedPhoneNumber);
            }
        }

        partial class BankCardActionOpenUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("bankCardActionOpenUrl");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BankCardActionOpenUrl)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
            }
        }

        partial class BankCardInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("bankCardInfo");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_actions = JsonEncodedText.Encode("actions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BankCardInfo)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                if (obj.Actions != null)
                {
                    writer.WritePropertyName(PropName_actions);
                    writer.WriteArray(obj.Actions);
                }
            }
        }

        partial class AddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("address");
            private static readonly JsonEncodedText PropName_country_code = JsonEncodedText.Encode("country_code");
            private static readonly JsonEncodedText PropName_state = JsonEncodedText.Encode("state");
            private static readonly JsonEncodedText PropName_city = JsonEncodedText.Encode("city");
            private static readonly JsonEncodedText PropName_street_line1 = JsonEncodedText.Encode("street_line1");
            private static readonly JsonEncodedText PropName_street_line2 = JsonEncodedText.Encode("street_line2");
            private static readonly JsonEncodedText PropName_postal_code = JsonEncodedText.Encode("postal_code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Address)tlobj;
                writer.WritePropertyName(PropName_country_code);
                writer.WriteStringValue(obj.CountryCode);
                writer.WritePropertyName(PropName_state);
                writer.WriteStringValue(obj.State);
                writer.WritePropertyName(PropName_city);
                writer.WriteStringValue(obj.City);
                writer.WritePropertyName(PropName_street_line1);
                writer.WriteStringValue(obj.StreetLine1);
                writer.WritePropertyName(PropName_street_line2);
                writer.WriteStringValue(obj.StreetLine2);
                writer.WritePropertyName(PropName_postal_code);
                writer.WriteStringValue(obj.PostalCode);
            }
        }

        partial class LabeledPricePartConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("labeledPricePart");
            private static readonly JsonEncodedText PropName_label = JsonEncodedText.Encode("label");
            private static readonly JsonEncodedText PropName_amount = JsonEncodedText.Encode("amount");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LabeledPricePart)tlobj;
                writer.WritePropertyName(PropName_label);
                writer.WriteStringValue(obj.Label);
                writer.WritePropertyName(PropName_amount);
                writer.WriteNumberValue(obj.Amount);
            }
        }

        partial class InvoiceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("invoice");
            private static readonly JsonEncodedText PropName_currency = JsonEncodedText.Encode("currency");
            private static readonly JsonEncodedText PropName_price_parts = JsonEncodedText.Encode("price_parts");
            private static readonly JsonEncodedText PropName_is_test = JsonEncodedText.Encode("is_test");
            private static readonly JsonEncodedText PropName_need_name = JsonEncodedText.Encode("need_name");
            private static readonly JsonEncodedText PropName_need_phone_number = JsonEncodedText.Encode("need_phone_number");
            private static readonly JsonEncodedText PropName_need_email_address = JsonEncodedText.Encode("need_email_address");
            private static readonly JsonEncodedText PropName_need_shipping_address = JsonEncodedText.Encode("need_shipping_address");
            private static readonly JsonEncodedText PropName_send_phone_number_to_provider = JsonEncodedText.Encode("send_phone_number_to_provider");
            private static readonly JsonEncodedText PropName_send_email_address_to_provider = JsonEncodedText.Encode("send_email_address_to_provider");
            private static readonly JsonEncodedText PropName_is_flexible = JsonEncodedText.Encode("is_flexible");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Invoice)tlobj;
                writer.WritePropertyName(PropName_currency);
                writer.WriteStringValue(obj.Currency);
                if (obj.PriceParts != null)
                {
                    writer.WritePropertyName(PropName_price_parts);
                    writer.WriteArray(obj.PriceParts);
                }
                writer.WritePropertyName(PropName_is_test);
                writer.WriteBooleanValue(obj.IsTest);
                writer.WritePropertyName(PropName_need_name);
                writer.WriteBooleanValue(obj.NeedName);
                writer.WritePropertyName(PropName_need_phone_number);
                writer.WriteBooleanValue(obj.NeedPhoneNumber);
                writer.WritePropertyName(PropName_need_email_address);
                writer.WriteBooleanValue(obj.NeedEmailAddress);
                writer.WritePropertyName(PropName_need_shipping_address);
                writer.WriteBooleanValue(obj.NeedShippingAddress);
                writer.WritePropertyName(PropName_send_phone_number_to_provider);
                writer.WriteBooleanValue(obj.SendPhoneNumberToProvider);
                writer.WritePropertyName(PropName_send_email_address_to_provider);
                writer.WriteBooleanValue(obj.SendEmailAddressToProvider);
                writer.WritePropertyName(PropName_is_flexible);
                writer.WriteBooleanValue(obj.IsFlexible);
            }
        }

        partial class OrderInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("orderInfo");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            private static readonly JsonEncodedText PropName_email_address = JsonEncodedText.Encode("email_address");
            private static readonly JsonEncodedText PropName_shipping_address = JsonEncodedText.Encode("shipping_address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (OrderInfo)tlobj;
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
                writer.WritePropertyName(PropName_email_address);
                writer.WriteStringValue(obj.EmailAddress);
                if (obj.ShippingAddress != null)
                {
                    writer.WritePropertyName(PropName_shipping_address);
                    writer.WriteTLObjectValue(obj.ShippingAddress);
                }
            }
        }

        partial class ShippingOptionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("shippingOption");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_price_parts = JsonEncodedText.Encode("price_parts");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ShippingOption)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                if (obj.PriceParts != null)
                {
                    writer.WritePropertyName(PropName_price_parts);
                    writer.WriteArray(obj.PriceParts);
                }
            }
        }

        partial class SavedCredentialsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("savedCredentials");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SavedCredentials)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
            }
        }

        partial class InputCredentialsSavedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputCredentialsSaved");
            private static readonly JsonEncodedText PropName_saved_credentials_id = JsonEncodedText.Encode("saved_credentials_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputCredentialsSaved)tlobj;
                writer.WritePropertyName(PropName_saved_credentials_id);
                writer.WriteStringValue(obj.SavedCredentialsId);
            }
        }

        partial class InputCredentialsNewConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputCredentialsNew");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            private static readonly JsonEncodedText PropName_allow_save = JsonEncodedText.Encode("allow_save");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputCredentialsNew)tlobj;
                writer.WritePropertyName(PropName_data);
                writer.WriteStringValue(obj.Data);
                writer.WritePropertyName(PropName_allow_save);
                writer.WriteBooleanValue(obj.AllowSave);
            }
        }

        partial class InputCredentialsAndroidPayConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputCredentialsAndroidPay");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputCredentialsAndroidPay)tlobj;
                writer.WritePropertyName(PropName_data);
                writer.WriteStringValue(obj.Data);
            }
        }

        partial class InputCredentialsApplePayConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputCredentialsApplePay");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputCredentialsApplePay)tlobj;
                writer.WritePropertyName(PropName_data);
                writer.WriteStringValue(obj.Data);
            }
        }

        partial class PaymentsProviderStripeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("paymentsProviderStripe");
            private static readonly JsonEncodedText PropName_publishable_key = JsonEncodedText.Encode("publishable_key");
            private static readonly JsonEncodedText PropName_need_country = JsonEncodedText.Encode("need_country");
            private static readonly JsonEncodedText PropName_need_postal_code = JsonEncodedText.Encode("need_postal_code");
            private static readonly JsonEncodedText PropName_need_cardholder_name = JsonEncodedText.Encode("need_cardholder_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PaymentsProviderStripe)tlobj;
                writer.WritePropertyName(PropName_publishable_key);
                writer.WriteStringValue(obj.PublishableKey);
                writer.WritePropertyName(PropName_need_country);
                writer.WriteBooleanValue(obj.NeedCountry);
                writer.WritePropertyName(PropName_need_postal_code);
                writer.WriteBooleanValue(obj.NeedPostalCode);
                writer.WritePropertyName(PropName_need_cardholder_name);
                writer.WriteBooleanValue(obj.NeedCardholderName);
            }
        }

        partial class PaymentFormConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("paymentForm");
            private static readonly JsonEncodedText PropName_invoice = JsonEncodedText.Encode("invoice");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_payments_provider = JsonEncodedText.Encode("payments_provider");
            private static readonly JsonEncodedText PropName_saved_order_info = JsonEncodedText.Encode("saved_order_info");
            private static readonly JsonEncodedText PropName_saved_credentials = JsonEncodedText.Encode("saved_credentials");
            private static readonly JsonEncodedText PropName_can_save_credentials = JsonEncodedText.Encode("can_save_credentials");
            private static readonly JsonEncodedText PropName_need_password = JsonEncodedText.Encode("need_password");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PaymentForm)tlobj;
                if (obj.Invoice != null)
                {
                    writer.WritePropertyName(PropName_invoice);
                    writer.WriteTLObjectValue(obj.Invoice);
                }
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                if (obj.PaymentsProvider != null)
                {
                    writer.WritePropertyName(PropName_payments_provider);
                    writer.WriteTLObjectValue(obj.PaymentsProvider);
                }
                if (obj.SavedOrderInfo != null)
                {
                    writer.WritePropertyName(PropName_saved_order_info);
                    writer.WriteTLObjectValue(obj.SavedOrderInfo);
                }
                if (obj.SavedCredentials != null)
                {
                    writer.WritePropertyName(PropName_saved_credentials);
                    writer.WriteTLObjectValue(obj.SavedCredentials);
                }
                writer.WritePropertyName(PropName_can_save_credentials);
                writer.WriteBooleanValue(obj.CanSaveCredentials);
                writer.WritePropertyName(PropName_need_password);
                writer.WriteBooleanValue(obj.NeedPassword);
            }
        }

        partial class ValidatedOrderInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("validatedOrderInfo");
            private static readonly JsonEncodedText PropName_order_info_id = JsonEncodedText.Encode("order_info_id");
            private static readonly JsonEncodedText PropName_shipping_options = JsonEncodedText.Encode("shipping_options");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ValidatedOrderInfo)tlobj;
                writer.WritePropertyName(PropName_order_info_id);
                writer.WriteStringValue(obj.OrderInfoId);
                if (obj.ShippingOptions != null)
                {
                    writer.WritePropertyName(PropName_shipping_options);
                    writer.WriteArray(obj.ShippingOptions);
                }
            }
        }

        partial class PaymentResultConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("paymentResult");
            private static readonly JsonEncodedText PropName_success = JsonEncodedText.Encode("success");
            private static readonly JsonEncodedText PropName_verification_url = JsonEncodedText.Encode("verification_url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PaymentResult)tlobj;
                writer.WritePropertyName(PropName_success);
                writer.WriteBooleanValue(obj.Success);
                writer.WritePropertyName(PropName_verification_url);
                writer.WriteStringValue(obj.VerificationUrl);
            }
        }

        partial class PaymentReceiptConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("paymentReceipt");
            private static readonly JsonEncodedText PropName_date = JsonEncodedText.Encode("date");
            private static readonly JsonEncodedText PropName_payments_provider_user_id = JsonEncodedText.Encode("payments_provider_user_id");
            private static readonly JsonEncodedText PropName_invoice = JsonEncodedText.Encode("invoice");
            private static readonly JsonEncodedText PropName_order_info = JsonEncodedText.Encode("order_info");
            private static readonly JsonEncodedText PropName_shipping_option = JsonEncodedText.Encode("shipping_option");
            private static readonly JsonEncodedText PropName_credentials_title = JsonEncodedText.Encode("credentials_title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PaymentReceipt)tlobj;
                writer.WritePropertyName(PropName_date);
                writer.WriteNumberValue(obj.Date);
                writer.WritePropertyName(PropName_payments_provider_user_id);
                writer.WriteNumberValue(obj.PaymentsProviderUserId);
                if (obj.Invoice != null)
                {
                    writer.WritePropertyName(PropName_invoice);
                    writer.WriteTLObjectValue(obj.Invoice);
                }
                if (obj.OrderInfo != null)
                {
                    writer.WritePropertyName(PropName_order_info);
                    writer.WriteTLObjectValue(obj.OrderInfo);
                }
                if (obj.ShippingOption != null)
                {
                    writer.WritePropertyName(PropName_shipping_option);
                    writer.WriteTLObjectValue(obj.ShippingOption);
                }
                writer.WritePropertyName(PropName_credentials_title);
                writer.WriteStringValue(obj.CredentialsTitle);
            }
        }

        partial class DatedFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("datedFile");
            private static readonly JsonEncodedText PropName_file = JsonEncodedText.Encode("file");
            private static readonly JsonEncodedText PropName_date = JsonEncodedText.Encode("date");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DatedFile)tlobj;
                if (obj.File != null)
                {
                    writer.WritePropertyName(PropName_file);
                    writer.WriteTLObjectValue(obj.File);
                }
                writer.WritePropertyName(PropName_date);
                writer.WriteNumberValue(obj.Date);
            }
        }

        partial class PassportElementTypePersonalDetailsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypePersonalDetails");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypePassportConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypePassport");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypeDriverLicenseConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypeDriverLicense");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypeIdentityCardConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypeIdentityCard");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypeInternalPassportConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypeInternalPassport");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypeAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypeAddress");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypeUtilityBillConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypeUtilityBill");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypeBankStatementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypeBankStatement");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypeRentalAgreementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypeRentalAgreement");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypePassportRegistrationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypePassportRegistration");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypeTemporaryRegistrationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypeTemporaryRegistration");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypePhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypePhoneNumber");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementTypeEmailAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTypeEmailAddress");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class DateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("date");
            private static readonly JsonEncodedText PropName_day = JsonEncodedText.Encode("day");
            private static readonly JsonEncodedText PropName_month = JsonEncodedText.Encode("month");
            private static readonly JsonEncodedText PropName_year = JsonEncodedText.Encode("year");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Date)tlobj;
                writer.WritePropertyName(PropName_day);
                writer.WriteNumberValue(obj.Day);
                writer.WritePropertyName(PropName_month);
                writer.WriteNumberValue(obj.Month);
                writer.WritePropertyName(PropName_year);
                writer.WriteNumberValue(obj.Year);
            }
        }

        partial class PersonalDetailsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("personalDetails");
            private static readonly JsonEncodedText PropName_first_name = JsonEncodedText.Encode("first_name");
            private static readonly JsonEncodedText PropName_middle_name = JsonEncodedText.Encode("middle_name");
            private static readonly JsonEncodedText PropName_last_name = JsonEncodedText.Encode("last_name");
            private static readonly JsonEncodedText PropName_native_first_name = JsonEncodedText.Encode("native_first_name");
            private static readonly JsonEncodedText PropName_native_middle_name = JsonEncodedText.Encode("native_middle_name");
            private static readonly JsonEncodedText PropName_native_last_name = JsonEncodedText.Encode("native_last_name");
            private static readonly JsonEncodedText PropName_birthdate = JsonEncodedText.Encode("birthdate");
            private static readonly JsonEncodedText PropName_gender = JsonEncodedText.Encode("gender");
            private static readonly JsonEncodedText PropName_country_code = JsonEncodedText.Encode("country_code");
            private static readonly JsonEncodedText PropName_residence_country_code = JsonEncodedText.Encode("residence_country_code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PersonalDetails)tlobj;
                writer.WritePropertyName(PropName_first_name);
                writer.WriteStringValue(obj.FirstName);
                writer.WritePropertyName(PropName_middle_name);
                writer.WriteStringValue(obj.MiddleName);
                writer.WritePropertyName(PropName_last_name);
                writer.WriteStringValue(obj.LastName);
                writer.WritePropertyName(PropName_native_first_name);
                writer.WriteStringValue(obj.NativeFirstName);
                writer.WritePropertyName(PropName_native_middle_name);
                writer.WriteStringValue(obj.NativeMiddleName);
                writer.WritePropertyName(PropName_native_last_name);
                writer.WriteStringValue(obj.NativeLastName);
                if (obj.Birthdate != null)
                {
                    writer.WritePropertyName(PropName_birthdate);
                    writer.WriteTLObjectValue(obj.Birthdate);
                }
                writer.WritePropertyName(PropName_gender);
                writer.WriteStringValue(obj.Gender);
                writer.WritePropertyName(PropName_country_code);
                writer.WriteStringValue(obj.CountryCode);
                writer.WritePropertyName(PropName_residence_country_code);
                writer.WriteStringValue(obj.ResidenceCountryCode);
            }
        }

        partial class IdentityDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("identityDocument");
            private static readonly JsonEncodedText PropName_number = JsonEncodedText.Encode("number");
            private static readonly JsonEncodedText PropName_expiry_date = JsonEncodedText.Encode("expiry_date");
            private static readonly JsonEncodedText PropName_front_side = JsonEncodedText.Encode("front_side");
            private static readonly JsonEncodedText PropName_reverse_side = JsonEncodedText.Encode("reverse_side");
            private static readonly JsonEncodedText PropName_selfie = JsonEncodedText.Encode("selfie");
            private static readonly JsonEncodedText PropName_translation = JsonEncodedText.Encode("translation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (IdentityDocument)tlobj;
                writer.WritePropertyName(PropName_number);
                writer.WriteStringValue(obj.Number);
                if (obj.ExpiryDate != null)
                {
                    writer.WritePropertyName(PropName_expiry_date);
                    writer.WriteTLObjectValue(obj.ExpiryDate);
                }
                if (obj.FrontSide != null)
                {
                    writer.WritePropertyName(PropName_front_side);
                    writer.WriteTLObjectValue(obj.FrontSide);
                }
                if (obj.ReverseSide != null)
                {
                    writer.WritePropertyName(PropName_reverse_side);
                    writer.WriteTLObjectValue(obj.ReverseSide);
                }
                if (obj.Selfie != null)
                {
                    writer.WritePropertyName(PropName_selfie);
                    writer.WriteTLObjectValue(obj.Selfie);
                }
                if (obj.Translation != null)
                {
                    writer.WritePropertyName(PropName_translation);
                    writer.WriteArray(obj.Translation);
                }
            }
        }

        partial class InputIdentityDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputIdentityDocument");
            private static readonly JsonEncodedText PropName_number = JsonEncodedText.Encode("number");
            private static readonly JsonEncodedText PropName_expiry_date = JsonEncodedText.Encode("expiry_date");
            private static readonly JsonEncodedText PropName_front_side = JsonEncodedText.Encode("front_side");
            private static readonly JsonEncodedText PropName_reverse_side = JsonEncodedText.Encode("reverse_side");
            private static readonly JsonEncodedText PropName_selfie = JsonEncodedText.Encode("selfie");
            private static readonly JsonEncodedText PropName_translation = JsonEncodedText.Encode("translation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputIdentityDocument)tlobj;
                writer.WritePropertyName(PropName_number);
                writer.WriteStringValue(obj.Number);
                if (obj.ExpiryDate != null)
                {
                    writer.WritePropertyName(PropName_expiry_date);
                    writer.WriteTLObjectValue(obj.ExpiryDate);
                }
                if (obj.FrontSide != null)
                {
                    writer.WritePropertyName(PropName_front_side);
                    writer.WriteTLObjectValue(obj.FrontSide);
                }
                if (obj.ReverseSide != null)
                {
                    writer.WritePropertyName(PropName_reverse_side);
                    writer.WriteTLObjectValue(obj.ReverseSide);
                }
                if (obj.Selfie != null)
                {
                    writer.WritePropertyName(PropName_selfie);
                    writer.WriteTLObjectValue(obj.Selfie);
                }
                if (obj.Translation != null)
                {
                    writer.WritePropertyName(PropName_translation);
                    writer.WriteArray(obj.Translation);
                }
            }
        }

        partial class PersonalDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("personalDocument");
            private static readonly JsonEncodedText PropName_files = JsonEncodedText.Encode("files");
            private static readonly JsonEncodedText PropName_translation = JsonEncodedText.Encode("translation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PersonalDocument)tlobj;
                if (obj.Files != null)
                {
                    writer.WritePropertyName(PropName_files);
                    writer.WriteArray(obj.Files);
                }
                if (obj.Translation != null)
                {
                    writer.WritePropertyName(PropName_translation);
                    writer.WriteArray(obj.Translation);
                }
            }
        }

        partial class InputPersonalDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPersonalDocument");
            private static readonly JsonEncodedText PropName_files = JsonEncodedText.Encode("files");
            private static readonly JsonEncodedText PropName_translation = JsonEncodedText.Encode("translation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPersonalDocument)tlobj;
                if (obj.Files != null)
                {
                    writer.WritePropertyName(PropName_files);
                    writer.WriteArray(obj.Files);
                }
                if (obj.Translation != null)
                {
                    writer.WritePropertyName(PropName_translation);
                    writer.WriteArray(obj.Translation);
                }
            }
        }

        partial class PassportElementPersonalDetailsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementPersonalDetails");
            private static readonly JsonEncodedText PropName_personal_details = JsonEncodedText.Encode("personal_details");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementPersonalDetails)tlobj;
                if (obj.PersonalDetails != null)
                {
                    writer.WritePropertyName(PropName_personal_details);
                    writer.WriteTLObjectValue(obj.PersonalDetails);
                }
            }
        }

        partial class PassportElementPassportConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementPassport");
            private static readonly JsonEncodedText PropName_passport = JsonEncodedText.Encode("passport");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementPassport)tlobj;
                if (obj.Passport != null)
                {
                    writer.WritePropertyName(PropName_passport);
                    writer.WriteTLObjectValue(obj.Passport);
                }
            }
        }

        partial class PassportElementDriverLicenseConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementDriverLicense");
            private static readonly JsonEncodedText PropName_driver_license = JsonEncodedText.Encode("driver_license");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementDriverLicense)tlobj;
                if (obj.DriverLicense != null)
                {
                    writer.WritePropertyName(PropName_driver_license);
                    writer.WriteTLObjectValue(obj.DriverLicense);
                }
            }
        }

        partial class PassportElementIdentityCardConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementIdentityCard");
            private static readonly JsonEncodedText PropName_identity_card = JsonEncodedText.Encode("identity_card");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementIdentityCard)tlobj;
                if (obj.IdentityCard != null)
                {
                    writer.WritePropertyName(PropName_identity_card);
                    writer.WriteTLObjectValue(obj.IdentityCard);
                }
            }
        }

        partial class PassportElementInternalPassportConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementInternalPassport");
            private static readonly JsonEncodedText PropName_internal_passport = JsonEncodedText.Encode("internal_passport");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementInternalPassport)tlobj;
                if (obj.InternalPassport != null)
                {
                    writer.WritePropertyName(PropName_internal_passport);
                    writer.WriteTLObjectValue(obj.InternalPassport);
                }
            }
        }

        partial class PassportElementAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementAddress");
            private static readonly JsonEncodedText PropName_address = JsonEncodedText.Encode("address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementAddress)tlobj;
                if (obj.Address != null)
                {
                    writer.WritePropertyName(PropName_address);
                    writer.WriteTLObjectValue(obj.Address);
                }
            }
        }

        partial class PassportElementUtilityBillConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementUtilityBill");
            private static readonly JsonEncodedText PropName_utility_bill = JsonEncodedText.Encode("utility_bill");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementUtilityBill)tlobj;
                if (obj.UtilityBill != null)
                {
                    writer.WritePropertyName(PropName_utility_bill);
                    writer.WriteTLObjectValue(obj.UtilityBill);
                }
            }
        }

        partial class PassportElementBankStatementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementBankStatement");
            private static readonly JsonEncodedText PropName_bank_statement = JsonEncodedText.Encode("bank_statement");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementBankStatement)tlobj;
                if (obj.BankStatement != null)
                {
                    writer.WritePropertyName(PropName_bank_statement);
                    writer.WriteTLObjectValue(obj.BankStatement);
                }
            }
        }

        partial class PassportElementRentalAgreementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementRentalAgreement");
            private static readonly JsonEncodedText PropName_rental_agreement = JsonEncodedText.Encode("rental_agreement");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementRentalAgreement)tlobj;
                if (obj.RentalAgreement != null)
                {
                    writer.WritePropertyName(PropName_rental_agreement);
                    writer.WriteTLObjectValue(obj.RentalAgreement);
                }
            }
        }

        partial class PassportElementPassportRegistrationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementPassportRegistration");
            private static readonly JsonEncodedText PropName_passport_registration = JsonEncodedText.Encode("passport_registration");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementPassportRegistration)tlobj;
                if (obj.PassportRegistration != null)
                {
                    writer.WritePropertyName(PropName_passport_registration);
                    writer.WriteTLObjectValue(obj.PassportRegistration);
                }
            }
        }

        partial class PassportElementTemporaryRegistrationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementTemporaryRegistration");
            private static readonly JsonEncodedText PropName_temporary_registration = JsonEncodedText.Encode("temporary_registration");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementTemporaryRegistration)tlobj;
                if (obj.TemporaryRegistration != null)
                {
                    writer.WritePropertyName(PropName_temporary_registration);
                    writer.WriteTLObjectValue(obj.TemporaryRegistration);
                }
            }
        }

        partial class PassportElementPhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementPhoneNumber");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementPhoneNumber)tlobj;
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
            }
        }

        partial class PassportElementEmailAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementEmailAddress");
            private static readonly JsonEncodedText PropName_email_address = JsonEncodedText.Encode("email_address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementEmailAddress)tlobj;
                writer.WritePropertyName(PropName_email_address);
                writer.WriteStringValue(obj.EmailAddress);
            }
        }

        partial class InputPassportElementPersonalDetailsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementPersonalDetails");
            private static readonly JsonEncodedText PropName_personal_details = JsonEncodedText.Encode("personal_details");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementPersonalDetails)tlobj;
                if (obj.PersonalDetails != null)
                {
                    writer.WritePropertyName(PropName_personal_details);
                    writer.WriteTLObjectValue(obj.PersonalDetails);
                }
            }
        }

        partial class InputPassportElementPassportConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementPassport");
            private static readonly JsonEncodedText PropName_passport = JsonEncodedText.Encode("passport");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementPassport)tlobj;
                if (obj.Passport != null)
                {
                    writer.WritePropertyName(PropName_passport);
                    writer.WriteTLObjectValue(obj.Passport);
                }
            }
        }

        partial class InputPassportElementDriverLicenseConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementDriverLicense");
            private static readonly JsonEncodedText PropName_driver_license = JsonEncodedText.Encode("driver_license");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementDriverLicense)tlobj;
                if (obj.DriverLicense != null)
                {
                    writer.WritePropertyName(PropName_driver_license);
                    writer.WriteTLObjectValue(obj.DriverLicense);
                }
            }
        }

        partial class InputPassportElementIdentityCardConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementIdentityCard");
            private static readonly JsonEncodedText PropName_identity_card = JsonEncodedText.Encode("identity_card");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementIdentityCard)tlobj;
                if (obj.IdentityCard != null)
                {
                    writer.WritePropertyName(PropName_identity_card);
                    writer.WriteTLObjectValue(obj.IdentityCard);
                }
            }
        }

        partial class InputPassportElementInternalPassportConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementInternalPassport");
            private static readonly JsonEncodedText PropName_internal_passport = JsonEncodedText.Encode("internal_passport");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementInternalPassport)tlobj;
                if (obj.InternalPassport != null)
                {
                    writer.WritePropertyName(PropName_internal_passport);
                    writer.WriteTLObjectValue(obj.InternalPassport);
                }
            }
        }

        partial class InputPassportElementAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementAddress");
            private static readonly JsonEncodedText PropName_address = JsonEncodedText.Encode("address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementAddress)tlobj;
                if (obj.Address != null)
                {
                    writer.WritePropertyName(PropName_address);
                    writer.WriteTLObjectValue(obj.Address);
                }
            }
        }

        partial class InputPassportElementUtilityBillConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementUtilityBill");
            private static readonly JsonEncodedText PropName_utility_bill = JsonEncodedText.Encode("utility_bill");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementUtilityBill)tlobj;
                if (obj.UtilityBill != null)
                {
                    writer.WritePropertyName(PropName_utility_bill);
                    writer.WriteTLObjectValue(obj.UtilityBill);
                }
            }
        }

        partial class InputPassportElementBankStatementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementBankStatement");
            private static readonly JsonEncodedText PropName_bank_statement = JsonEncodedText.Encode("bank_statement");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementBankStatement)tlobj;
                if (obj.BankStatement != null)
                {
                    writer.WritePropertyName(PropName_bank_statement);
                    writer.WriteTLObjectValue(obj.BankStatement);
                }
            }
        }

        partial class InputPassportElementRentalAgreementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementRentalAgreement");
            private static readonly JsonEncodedText PropName_rental_agreement = JsonEncodedText.Encode("rental_agreement");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementRentalAgreement)tlobj;
                if (obj.RentalAgreement != null)
                {
                    writer.WritePropertyName(PropName_rental_agreement);
                    writer.WriteTLObjectValue(obj.RentalAgreement);
                }
            }
        }

        partial class InputPassportElementPassportRegistrationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementPassportRegistration");
            private static readonly JsonEncodedText PropName_passport_registration = JsonEncodedText.Encode("passport_registration");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementPassportRegistration)tlobj;
                if (obj.PassportRegistration != null)
                {
                    writer.WritePropertyName(PropName_passport_registration);
                    writer.WriteTLObjectValue(obj.PassportRegistration);
                }
            }
        }

        partial class InputPassportElementTemporaryRegistrationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementTemporaryRegistration");
            private static readonly JsonEncodedText PropName_temporary_registration = JsonEncodedText.Encode("temporary_registration");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementTemporaryRegistration)tlobj;
                if (obj.TemporaryRegistration != null)
                {
                    writer.WritePropertyName(PropName_temporary_registration);
                    writer.WriteTLObjectValue(obj.TemporaryRegistration);
                }
            }
        }

        partial class InputPassportElementPhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementPhoneNumber");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementPhoneNumber)tlobj;
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
            }
        }

        partial class InputPassportElementEmailAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementEmailAddress");
            private static readonly JsonEncodedText PropName_email_address = JsonEncodedText.Encode("email_address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementEmailAddress)tlobj;
                writer.WritePropertyName(PropName_email_address);
                writer.WriteStringValue(obj.EmailAddress);
            }
        }

        partial class PassportElementsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElements");
            private static readonly JsonEncodedText PropName_elements = JsonEncodedText.Encode("elements");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElements)tlobj;
                if (obj.Elements != null)
                {
                    writer.WritePropertyName(PropName_elements);
                    writer.WriteArray(obj.Elements);
                }
            }
        }

        partial class PassportElementErrorSourceUnspecifiedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceUnspecified");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementErrorSourceDataFieldConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceDataField");
            private static readonly JsonEncodedText PropName_field_name = JsonEncodedText.Encode("field_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementErrorSourceDataField)tlobj;
                writer.WritePropertyName(PropName_field_name);
                writer.WriteStringValue(obj.FieldName);
            }
        }

        partial class PassportElementErrorSourceFrontSideConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceFrontSide");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementErrorSourceReverseSideConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceReverseSide");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementErrorSourceSelfieConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceSelfie");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementErrorSourceTranslationFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceTranslationFile");
            private static readonly JsonEncodedText PropName_file_index = JsonEncodedText.Encode("file_index");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementErrorSourceTranslationFile)tlobj;
                writer.WritePropertyName(PropName_file_index);
                writer.WriteNumberValue(obj.FileIndex);
            }
        }

        partial class PassportElementErrorSourceTranslationFilesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceTranslationFiles");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementErrorSourceFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceFile");
            private static readonly JsonEncodedText PropName_file_index = JsonEncodedText.Encode("file_index");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementErrorSourceFile)tlobj;
                writer.WritePropertyName(PropName_file_index);
                writer.WriteNumberValue(obj.FileIndex);
            }
        }

        partial class PassportElementErrorSourceFilesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementErrorSourceFiles");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PassportElementErrorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementError");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            private static readonly JsonEncodedText PropName_source = JsonEncodedText.Encode("source");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementError)tlobj;
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_message);
                writer.WriteStringValue(obj.Message);
                if (obj.Source != null)
                {
                    writer.WritePropertyName(PropName_source);
                    writer.WriteTLObjectValue(obj.Source);
                }
            }
        }

        partial class PassportSuitableElementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportSuitableElement");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_is_selfie_required = JsonEncodedText.Encode("is_selfie_required");
            private static readonly JsonEncodedText PropName_is_translation_required = JsonEncodedText.Encode("is_translation_required");
            private static readonly JsonEncodedText PropName_is_native_name_required = JsonEncodedText.Encode("is_native_name_required");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportSuitableElement)tlobj;
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_is_selfie_required);
                writer.WriteBooleanValue(obj.IsSelfieRequired);
                writer.WritePropertyName(PropName_is_translation_required);
                writer.WriteBooleanValue(obj.IsTranslationRequired);
                writer.WritePropertyName(PropName_is_native_name_required);
                writer.WriteBooleanValue(obj.IsNativeNameRequired);
            }
        }

        partial class PassportRequiredElementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportRequiredElement");
            private static readonly JsonEncodedText PropName_suitable_elements = JsonEncodedText.Encode("suitable_elements");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportRequiredElement)tlobj;
                if (obj.SuitableElements != null)
                {
                    writer.WritePropertyName(PropName_suitable_elements);
                    writer.WriteArray(obj.SuitableElements);
                }
            }
        }

        partial class PassportAuthorizationFormConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportAuthorizationForm");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_required_elements = JsonEncodedText.Encode("required_elements");
            private static readonly JsonEncodedText PropName_privacy_policy_url = JsonEncodedText.Encode("privacy_policy_url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportAuthorizationForm)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                if (obj.RequiredElements != null)
                {
                    writer.WritePropertyName(PropName_required_elements);
                    writer.WriteArray(obj.RequiredElements);
                }
                writer.WritePropertyName(PropName_privacy_policy_url);
                writer.WriteStringValue(obj.PrivacyPolicyUrl);
            }
        }

        partial class PassportElementsWithErrorsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("passportElementsWithErrors");
            private static readonly JsonEncodedText PropName_elements = JsonEncodedText.Encode("elements");
            private static readonly JsonEncodedText PropName_errors = JsonEncodedText.Encode("errors");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PassportElementsWithErrors)tlobj;
                if (obj.Elements != null)
                {
                    writer.WritePropertyName(PropName_elements);
                    writer.WriteArray(obj.Elements);
                }
                if (obj.Errors != null)
                {
                    writer.WritePropertyName(PropName_errors);
                    writer.WriteArray(obj.Errors);
                }
            }
        }

        partial class EncryptedCredentialsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("encryptedCredentials");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            private static readonly JsonEncodedText PropName_hash = JsonEncodedText.Encode("hash");
            private static readonly JsonEncodedText PropName_secret = JsonEncodedText.Encode("secret");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EncryptedCredentials)tlobj;
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
                if (obj.Hash != null)
                {
                    writer.WritePropertyName(PropName_hash);
                    writer.WriteBase64StringValue(obj.Hash);
                }
                if (obj.Secret != null)
                {
                    writer.WritePropertyName(PropName_secret);
                    writer.WriteBase64StringValue(obj.Secret);
                }
            }
        }

        partial class EncryptedPassportElementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("encryptedPassportElement");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            private static readonly JsonEncodedText PropName_front_side = JsonEncodedText.Encode("front_side");
            private static readonly JsonEncodedText PropName_reverse_side = JsonEncodedText.Encode("reverse_side");
            private static readonly JsonEncodedText PropName_selfie = JsonEncodedText.Encode("selfie");
            private static readonly JsonEncodedText PropName_translation = JsonEncodedText.Encode("translation");
            private static readonly JsonEncodedText PropName_files = JsonEncodedText.Encode("files");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            private static readonly JsonEncodedText PropName_hash = JsonEncodedText.Encode("hash");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EncryptedPassportElement)tlobj;
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
                if (obj.FrontSide != null)
                {
                    writer.WritePropertyName(PropName_front_side);
                    writer.WriteTLObjectValue(obj.FrontSide);
                }
                if (obj.ReverseSide != null)
                {
                    writer.WritePropertyName(PropName_reverse_side);
                    writer.WriteTLObjectValue(obj.ReverseSide);
                }
                if (obj.Selfie != null)
                {
                    writer.WritePropertyName(PropName_selfie);
                    writer.WriteTLObjectValue(obj.Selfie);
                }
                if (obj.Translation != null)
                {
                    writer.WritePropertyName(PropName_translation);
                    writer.WriteArray(obj.Translation);
                }
                if (obj.Files != null)
                {
                    writer.WritePropertyName(PropName_files);
                    writer.WriteArray(obj.Files);
                }
                writer.WritePropertyName(PropName_value);
                writer.WriteStringValue(obj.Value);
                writer.WritePropertyName(PropName_hash);
                writer.WriteStringValue(obj.Hash);
            }
        }

        partial class InputPassportElementErrorSourceUnspecifiedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceUnspecified");
            private static readonly JsonEncodedText PropName_element_hash = JsonEncodedText.Encode("element_hash");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementErrorSourceUnspecified)tlobj;
                if (obj.ElementHash != null)
                {
                    writer.WritePropertyName(PropName_element_hash);
                    writer.WriteBase64StringValue(obj.ElementHash);
                }
            }
        }

        partial class InputPassportElementErrorSourceDataFieldConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceDataField");
            private static readonly JsonEncodedText PropName_field_name = JsonEncodedText.Encode("field_name");
            private static readonly JsonEncodedText PropName_data_hash = JsonEncodedText.Encode("data_hash");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementErrorSourceDataField)tlobj;
                writer.WritePropertyName(PropName_field_name);
                writer.WriteStringValue(obj.FieldName);
                if (obj.DataHash != null)
                {
                    writer.WritePropertyName(PropName_data_hash);
                    writer.WriteBase64StringValue(obj.DataHash);
                }
            }
        }

        partial class InputPassportElementErrorSourceFrontSideConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceFrontSide");
            private static readonly JsonEncodedText PropName_file_hash = JsonEncodedText.Encode("file_hash");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementErrorSourceFrontSide)tlobj;
                if (obj.FileHash != null)
                {
                    writer.WritePropertyName(PropName_file_hash);
                    writer.WriteBase64StringValue(obj.FileHash);
                }
            }
        }

        partial class InputPassportElementErrorSourceReverseSideConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceReverseSide");
            private static readonly JsonEncodedText PropName_file_hash = JsonEncodedText.Encode("file_hash");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementErrorSourceReverseSide)tlobj;
                if (obj.FileHash != null)
                {
                    writer.WritePropertyName(PropName_file_hash);
                    writer.WriteBase64StringValue(obj.FileHash);
                }
            }
        }

        partial class InputPassportElementErrorSourceSelfieConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceSelfie");
            private static readonly JsonEncodedText PropName_file_hash = JsonEncodedText.Encode("file_hash");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementErrorSourceSelfie)tlobj;
                if (obj.FileHash != null)
                {
                    writer.WritePropertyName(PropName_file_hash);
                    writer.WriteBase64StringValue(obj.FileHash);
                }
            }
        }

        partial class InputPassportElementErrorSourceTranslationFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceTranslationFile");
            private static readonly JsonEncodedText PropName_file_hash = JsonEncodedText.Encode("file_hash");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementErrorSourceTranslationFile)tlobj;
                if (obj.FileHash != null)
                {
                    writer.WritePropertyName(PropName_file_hash);
                    writer.WriteBase64StringValue(obj.FileHash);
                }
            }
        }

        partial class InputPassportElementErrorSourceTranslationFilesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceTranslationFiles");
            private static readonly JsonEncodedText PropName_file_hashes = JsonEncodedText.Encode("file_hashes");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementErrorSourceTranslationFiles)tlobj;
                if (obj.FileHashes != null)
                {
                    writer.WritePropertyName(PropName_file_hashes);
                    writer.WriteArray(obj.FileHashes);
                }
            }
        }

        partial class InputPassportElementErrorSourceFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceFile");
            private static readonly JsonEncodedText PropName_file_hash = JsonEncodedText.Encode("file_hash");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementErrorSourceFile)tlobj;
                if (obj.FileHash != null)
                {
                    writer.WritePropertyName(PropName_file_hash);
                    writer.WriteBase64StringValue(obj.FileHash);
                }
            }
        }

        partial class InputPassportElementErrorSourceFilesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementErrorSourceFiles");
            private static readonly JsonEncodedText PropName_file_hashes = JsonEncodedText.Encode("file_hashes");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementErrorSourceFiles)tlobj;
                if (obj.FileHashes != null)
                {
                    writer.WritePropertyName(PropName_file_hashes);
                    writer.WriteArray(obj.FileHashes);
                }
            }
        }

        partial class InputPassportElementErrorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputPassportElementError");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            private static readonly JsonEncodedText PropName_source = JsonEncodedText.Encode("source");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputPassportElementError)tlobj;
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_message);
                writer.WriteStringValue(obj.Message);
                if (obj.Source != null)
                {
                    writer.WritePropertyName(PropName_source);
                    writer.WriteTLObjectValue(obj.Source);
                }
            }
        }

        partial class MessageTextConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageText");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_web_page = JsonEncodedText.Encode("web_page");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageText)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                if (obj.WebPage != null)
                {
                    writer.WritePropertyName(PropName_web_page);
                    writer.WriteTLObjectValue(obj.WebPage);
                }
            }
        }

        partial class MessageAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageAnimation");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_is_secret = JsonEncodedText.Encode("is_secret");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageAnimation)tlobj;
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                writer.WritePropertyName(PropName_is_secret);
                writer.WriteBooleanValue(obj.IsSecret);
            }
        }

        partial class MessageAudioConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageAudio");
            private static readonly JsonEncodedText PropName_audio = JsonEncodedText.Encode("audio");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageAudio)tlobj;
                if (obj.Audio != null)
                {
                    writer.WritePropertyName(PropName_audio);
                    writer.WriteTLObjectValue(obj.Audio);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class MessageDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageDocument");
            private static readonly JsonEncodedText PropName_document = JsonEncodedText.Encode("document");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageDocument)tlobj;
                if (obj.Document != null)
                {
                    writer.WritePropertyName(PropName_document);
                    writer.WriteTLObjectValue(obj.Document);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class MessagePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messagePhoto");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_is_secret = JsonEncodedText.Encode("is_secret");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessagePhoto)tlobj;
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                writer.WritePropertyName(PropName_is_secret);
                writer.WriteBooleanValue(obj.IsSecret);
            }
        }

        partial class MessageExpiredPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageExpiredPhoto");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MessageStickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageSticker");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageSticker)tlobj;
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
            }
        }

        partial class MessageVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageVideo");
            private static readonly JsonEncodedText PropName_video = JsonEncodedText.Encode("video");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_is_secret = JsonEncodedText.Encode("is_secret");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageVideo)tlobj;
                if (obj.Video != null)
                {
                    writer.WritePropertyName(PropName_video);
                    writer.WriteTLObjectValue(obj.Video);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                writer.WritePropertyName(PropName_is_secret);
                writer.WriteBooleanValue(obj.IsSecret);
            }
        }

        partial class MessageExpiredVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageExpiredVideo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MessageVideoNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageVideoNote");
            private static readonly JsonEncodedText PropName_video_note = JsonEncodedText.Encode("video_note");
            private static readonly JsonEncodedText PropName_is_viewed = JsonEncodedText.Encode("is_viewed");
            private static readonly JsonEncodedText PropName_is_secret = JsonEncodedText.Encode("is_secret");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageVideoNote)tlobj;
                if (obj.VideoNote != null)
                {
                    writer.WritePropertyName(PropName_video_note);
                    writer.WriteTLObjectValue(obj.VideoNote);
                }
                writer.WritePropertyName(PropName_is_viewed);
                writer.WriteBooleanValue(obj.IsViewed);
                writer.WritePropertyName(PropName_is_secret);
                writer.WriteBooleanValue(obj.IsSecret);
            }
        }

        partial class MessageVoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageVoiceNote");
            private static readonly JsonEncodedText PropName_voice_note = JsonEncodedText.Encode("voice_note");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_is_listened = JsonEncodedText.Encode("is_listened");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageVoiceNote)tlobj;
                if (obj.VoiceNote != null)
                {
                    writer.WritePropertyName(PropName_voice_note);
                    writer.WriteTLObjectValue(obj.VoiceNote);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                writer.WritePropertyName(PropName_is_listened);
                writer.WriteBooleanValue(obj.IsListened);
            }
        }

        partial class MessageLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageLocation");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            private static readonly JsonEncodedText PropName_live_period = JsonEncodedText.Encode("live_period");
            private static readonly JsonEncodedText PropName_expires_in = JsonEncodedText.Encode("expires_in");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageLocation)tlobj;
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
                writer.WritePropertyName(PropName_live_period);
                writer.WriteNumberValue(obj.LivePeriod);
                writer.WritePropertyName(PropName_expires_in);
                writer.WriteNumberValue(obj.ExpiresIn);
            }
        }

        partial class MessageVenueConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageVenue");
            private static readonly JsonEncodedText PropName_venue = JsonEncodedText.Encode("venue");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageVenue)tlobj;
                if (obj.Venue != null)
                {
                    writer.WritePropertyName(PropName_venue);
                    writer.WriteTLObjectValue(obj.Venue);
                }
            }
        }

        partial class MessageContactConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageContact");
            private static readonly JsonEncodedText PropName_contact = JsonEncodedText.Encode("contact");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageContact)tlobj;
                if (obj.Contact != null)
                {
                    writer.WritePropertyName(PropName_contact);
                    writer.WriteTLObjectValue(obj.Contact);
                }
            }
        }

        partial class MessageDiceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageDice");
            private static readonly JsonEncodedText PropName_initial_state_sticker = JsonEncodedText.Encode("initial_state_sticker");
            private static readonly JsonEncodedText PropName_final_state_sticker = JsonEncodedText.Encode("final_state_sticker");
            private static readonly JsonEncodedText PropName_emoji = JsonEncodedText.Encode("emoji");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            private static readonly JsonEncodedText PropName_success_animation_frame_number = JsonEncodedText.Encode("success_animation_frame_number");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageDice)tlobj;
                if (obj.InitialStateSticker != null)
                {
                    writer.WritePropertyName(PropName_initial_state_sticker);
                    writer.WriteTLObjectValue(obj.InitialStateSticker);
                }
                if (obj.FinalStateSticker != null)
                {
                    writer.WritePropertyName(PropName_final_state_sticker);
                    writer.WriteTLObjectValue(obj.FinalStateSticker);
                }
                writer.WritePropertyName(PropName_emoji);
                writer.WriteStringValue(obj.Emoji);
                writer.WritePropertyName(PropName_value);
                writer.WriteNumberValue(obj.Value);
                writer.WritePropertyName(PropName_success_animation_frame_number);
                writer.WriteNumberValue(obj.SuccessAnimationFrameNumber);
            }
        }

        partial class MessageGameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageGame");
            private static readonly JsonEncodedText PropName_game = JsonEncodedText.Encode("game");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageGame)tlobj;
                if (obj.Game != null)
                {
                    writer.WritePropertyName(PropName_game);
                    writer.WriteTLObjectValue(obj.Game);
                }
            }
        }

        partial class MessagePollConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messagePoll");
            private static readonly JsonEncodedText PropName_poll = JsonEncodedText.Encode("poll");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessagePoll)tlobj;
                if (obj.Poll != null)
                {
                    writer.WritePropertyName(PropName_poll);
                    writer.WriteTLObjectValue(obj.Poll);
                }
            }
        }

        partial class MessageInvoiceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageInvoice");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_currency = JsonEncodedText.Encode("currency");
            private static readonly JsonEncodedText PropName_total_amount = JsonEncodedText.Encode("total_amount");
            private static readonly JsonEncodedText PropName_start_parameter = JsonEncodedText.Encode("start_parameter");
            private static readonly JsonEncodedText PropName_is_test = JsonEncodedText.Encode("is_test");
            private static readonly JsonEncodedText PropName_need_shipping_address = JsonEncodedText.Encode("need_shipping_address");
            private static readonly JsonEncodedText PropName_receipt_message_id = JsonEncodedText.Encode("receipt_message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageInvoice)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_currency);
                writer.WriteStringValue(obj.Currency);
                writer.WritePropertyName(PropName_total_amount);
                writer.WriteNumberValue(obj.TotalAmount);
                writer.WritePropertyName(PropName_start_parameter);
                writer.WriteStringValue(obj.StartParameter);
                writer.WritePropertyName(PropName_is_test);
                writer.WriteBooleanValue(obj.IsTest);
                writer.WritePropertyName(PropName_need_shipping_address);
                writer.WriteBooleanValue(obj.NeedShippingAddress);
                writer.WritePropertyName(PropName_receipt_message_id);
                writer.WriteNumberValue(obj.ReceiptMessageId);
            }
        }

        partial class MessageCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageCall");
            private static readonly JsonEncodedText PropName_is_video = JsonEncodedText.Encode("is_video");
            private static readonly JsonEncodedText PropName_discard_reason = JsonEncodedText.Encode("discard_reason");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageCall)tlobj;
                writer.WritePropertyName(PropName_is_video);
                writer.WriteBooleanValue(obj.IsVideo);
                if (obj.DiscardReason != null)
                {
                    writer.WritePropertyName(PropName_discard_reason);
                    writer.WriteTLObjectValue(obj.DiscardReason);
                }
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
            }
        }

        partial class MessageBasicGroupChatCreateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageBasicGroupChatCreate");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_member_user_ids = JsonEncodedText.Encode("member_user_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageBasicGroupChatCreate)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                if (obj.MemberUserIds != null)
                {
                    writer.WritePropertyName(PropName_member_user_ids);
                    writer.WriteArray(obj.MemberUserIds);
                }
            }
        }

        partial class MessageSupergroupChatCreateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageSupergroupChatCreate");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageSupergroupChatCreate)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
            }
        }

        partial class MessageChatChangeTitleConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageChatChangeTitle");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageChatChangeTitle)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
            }
        }

        partial class MessageChatChangePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageChatChangePhoto");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageChatChangePhoto)tlobj;
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
            }
        }

        partial class MessageChatDeletePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageChatDeletePhoto");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MessageChatAddMembersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageChatAddMembers");
            private static readonly JsonEncodedText PropName_member_user_ids = JsonEncodedText.Encode("member_user_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageChatAddMembers)tlobj;
                if (obj.MemberUserIds != null)
                {
                    writer.WritePropertyName(PropName_member_user_ids);
                    writer.WriteArray(obj.MemberUserIds);
                }
            }
        }

        partial class MessageChatJoinByLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageChatJoinByLink");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MessageChatDeleteMemberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageChatDeleteMember");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageChatDeleteMember)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class MessageChatUpgradeToConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageChatUpgradeTo");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageChatUpgradeTo)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
            }
        }

        partial class MessageChatUpgradeFromConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageChatUpgradeFrom");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageChatUpgradeFrom)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_basic_group_id);
                writer.WriteNumberValue(obj.BasicGroupId);
            }
        }

        partial class MessagePinMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messagePinMessage");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessagePinMessage)tlobj;
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class MessageScreenshotTakenConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageScreenshotTaken");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MessageChatSetTtlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageChatSetTtl");
            private static readonly JsonEncodedText PropName_ttl = JsonEncodedText.Encode("ttl");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageChatSetTtl)tlobj;
                writer.WritePropertyName(PropName_ttl);
                writer.WriteNumberValue(obj.Ttl);
            }
        }

        partial class MessageCustomServiceActionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageCustomServiceAction");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageCustomServiceAction)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
            }
        }

        partial class MessageGameScoreConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageGameScore");
            private static readonly JsonEncodedText PropName_game_message_id = JsonEncodedText.Encode("game_message_id");
            private static readonly JsonEncodedText PropName_game_id = JsonEncodedText.Encode("game_id");
            private static readonly JsonEncodedText PropName_score = JsonEncodedText.Encode("score");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageGameScore)tlobj;
                writer.WritePropertyName(PropName_game_message_id);
                writer.WriteNumberValue(obj.GameMessageId);
                writer.WritePropertyName(PropName_game_id);
                writer.WriteInt64String(obj.GameId);
                writer.WritePropertyName(PropName_score);
                writer.WriteNumberValue(obj.Score);
            }
        }

        partial class MessagePaymentSuccessfulConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messagePaymentSuccessful");
            private static readonly JsonEncodedText PropName_invoice_message_id = JsonEncodedText.Encode("invoice_message_id");
            private static readonly JsonEncodedText PropName_currency = JsonEncodedText.Encode("currency");
            private static readonly JsonEncodedText PropName_total_amount = JsonEncodedText.Encode("total_amount");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessagePaymentSuccessful)tlobj;
                writer.WritePropertyName(PropName_invoice_message_id);
                writer.WriteNumberValue(obj.InvoiceMessageId);
                writer.WritePropertyName(PropName_currency);
                writer.WriteStringValue(obj.Currency);
                writer.WritePropertyName(PropName_total_amount);
                writer.WriteNumberValue(obj.TotalAmount);
            }
        }

        partial class MessagePaymentSuccessfulBotConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messagePaymentSuccessfulBot");
            private static readonly JsonEncodedText PropName_invoice_message_id = JsonEncodedText.Encode("invoice_message_id");
            private static readonly JsonEncodedText PropName_currency = JsonEncodedText.Encode("currency");
            private static readonly JsonEncodedText PropName_total_amount = JsonEncodedText.Encode("total_amount");
            private static readonly JsonEncodedText PropName_invoice_payload = JsonEncodedText.Encode("invoice_payload");
            private static readonly JsonEncodedText PropName_shipping_option_id = JsonEncodedText.Encode("shipping_option_id");
            private static readonly JsonEncodedText PropName_order_info = JsonEncodedText.Encode("order_info");
            private static readonly JsonEncodedText PropName_telegram_payment_charge_id = JsonEncodedText.Encode("telegram_payment_charge_id");
            private static readonly JsonEncodedText PropName_provider_payment_charge_id = JsonEncodedText.Encode("provider_payment_charge_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessagePaymentSuccessfulBot)tlobj;
                writer.WritePropertyName(PropName_invoice_message_id);
                writer.WriteNumberValue(obj.InvoiceMessageId);
                writer.WritePropertyName(PropName_currency);
                writer.WriteStringValue(obj.Currency);
                writer.WritePropertyName(PropName_total_amount);
                writer.WriteNumberValue(obj.TotalAmount);
                if (obj.InvoicePayload != null)
                {
                    writer.WritePropertyName(PropName_invoice_payload);
                    writer.WriteBase64StringValue(obj.InvoicePayload);
                }
                writer.WritePropertyName(PropName_shipping_option_id);
                writer.WriteStringValue(obj.ShippingOptionId);
                if (obj.OrderInfo != null)
                {
                    writer.WritePropertyName(PropName_order_info);
                    writer.WriteTLObjectValue(obj.OrderInfo);
                }
                writer.WritePropertyName(PropName_telegram_payment_charge_id);
                writer.WriteStringValue(obj.TelegramPaymentChargeId);
                writer.WritePropertyName(PropName_provider_payment_charge_id);
                writer.WriteStringValue(obj.ProviderPaymentChargeId);
            }
        }

        partial class MessageContactRegisteredConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageContactRegistered");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MessageWebsiteConnectedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageWebsiteConnected");
            private static readonly JsonEncodedText PropName_domain_name = JsonEncodedText.Encode("domain_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageWebsiteConnected)tlobj;
                writer.WritePropertyName(PropName_domain_name);
                writer.WriteStringValue(obj.DomainName);
            }
        }

        partial class MessagePassportDataSentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messagePassportDataSent");
            private static readonly JsonEncodedText PropName_types = JsonEncodedText.Encode("types");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessagePassportDataSent)tlobj;
                if (obj.Types != null)
                {
                    writer.WritePropertyName(PropName_types);
                    writer.WriteArray(obj.Types);
                }
            }
        }

        partial class MessagePassportDataReceivedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messagePassportDataReceived");
            private static readonly JsonEncodedText PropName_elements = JsonEncodedText.Encode("elements");
            private static readonly JsonEncodedText PropName_credentials = JsonEncodedText.Encode("credentials");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessagePassportDataReceived)tlobj;
                if (obj.Elements != null)
                {
                    writer.WritePropertyName(PropName_elements);
                    writer.WriteArray(obj.Elements);
                }
                if (obj.Credentials != null)
                {
                    writer.WritePropertyName(PropName_credentials);
                    writer.WriteTLObjectValue(obj.Credentials);
                }
            }
        }

        partial class MessageUnsupportedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageUnsupported");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeMentionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeMention");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeHashtagConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeHashtag");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeCashtagConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeCashtag");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeBotCommandConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeBotCommand");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeUrl");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeEmailAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeEmailAddress");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypePhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypePhoneNumber");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeBankCardNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeBankCardNumber");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeBoldConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeBold");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeItalicConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeItalic");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeUnderlineConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeUnderline");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeStrikethroughConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeStrikethrough");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypeCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeCode");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypePreConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypePre");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TextEntityTypePreCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypePreCode");
            private static readonly JsonEncodedText PropName_language = JsonEncodedText.Encode("language");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TextEntityTypePreCode)tlobj;
                writer.WritePropertyName(PropName_language);
                writer.WriteStringValue(obj.Language);
            }
        }

        partial class TextEntityTypeTextUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeTextUrl");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TextEntityTypeTextUrl)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
            }
        }

        partial class TextEntityTypeMentionNameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textEntityTypeMentionName");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TextEntityTypeMentionName)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class InputThumbnailConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputThumbnail");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputThumbnail)tlobj;
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
            }
        }

        partial class MessageSchedulingStateSendAtDateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageSchedulingStateSendAtDate");
            private static readonly JsonEncodedText PropName_send_date = JsonEncodedText.Encode("send_date");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageSchedulingStateSendAtDate)tlobj;
                writer.WritePropertyName(PropName_send_date);
                writer.WriteNumberValue(obj.SendDate);
            }
        }

        partial class MessageSchedulingStateSendWhenOnlineConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageSchedulingStateSendWhenOnline");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class MessageSendOptionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageSendOptions");
            private static readonly JsonEncodedText PropName_disable_notification = JsonEncodedText.Encode("disable_notification");
            private static readonly JsonEncodedText PropName_from_background = JsonEncodedText.Encode("from_background");
            private static readonly JsonEncodedText PropName_scheduling_state = JsonEncodedText.Encode("scheduling_state");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageSendOptions)tlobj;
                writer.WritePropertyName(PropName_disable_notification);
                writer.WriteBooleanValue(obj.DisableNotification);
                writer.WritePropertyName(PropName_from_background);
                writer.WriteBooleanValue(obj.FromBackground);
                if (obj.SchedulingState != null)
                {
                    writer.WritePropertyName(PropName_scheduling_state);
                    writer.WriteTLObjectValue(obj.SchedulingState);
                }
            }
        }

        partial class MessageCopyOptionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageCopyOptions");
            private static readonly JsonEncodedText PropName_send_copy = JsonEncodedText.Encode("send_copy");
            private static readonly JsonEncodedText PropName_replace_caption = JsonEncodedText.Encode("replace_caption");
            private static readonly JsonEncodedText PropName_new_caption = JsonEncodedText.Encode("new_caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageCopyOptions)tlobj;
                writer.WritePropertyName(PropName_send_copy);
                writer.WriteBooleanValue(obj.SendCopy);
                writer.WritePropertyName(PropName_replace_caption);
                writer.WriteBooleanValue(obj.ReplaceCaption);
                if (obj.NewCaption != null)
                {
                    writer.WritePropertyName(PropName_new_caption);
                    writer.WriteTLObjectValue(obj.NewCaption);
                }
            }
        }

        partial class InputMessageTextConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageText");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_disable_web_page_preview = JsonEncodedText.Encode("disable_web_page_preview");
            private static readonly JsonEncodedText PropName_clear_draft = JsonEncodedText.Encode("clear_draft");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageText)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                writer.WritePropertyName(PropName_disable_web_page_preview);
                writer.WriteBooleanValue(obj.DisableWebPagePreview);
                writer.WritePropertyName(PropName_clear_draft);
                writer.WriteBooleanValue(obj.ClearDraft);
            }
        }

        partial class InputMessageAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageAnimation");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_added_sticker_file_ids = JsonEncodedText.Encode("added_sticker_file_ids");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageAnimation)tlobj;
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                if (obj.AddedStickerFileIds != null)
                {
                    writer.WritePropertyName(PropName_added_sticker_file_ids);
                    writer.WriteArray(obj.AddedStickerFileIds);
                }
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class InputMessageAudioConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageAudio");
            private static readonly JsonEncodedText PropName_audio = JsonEncodedText.Encode("audio");
            private static readonly JsonEncodedText PropName_album_cover_thumbnail = JsonEncodedText.Encode("album_cover_thumbnail");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_performer = JsonEncodedText.Encode("performer");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageAudio)tlobj;
                if (obj.Audio != null)
                {
                    writer.WritePropertyName(PropName_audio);
                    writer.WriteTLObjectValue(obj.Audio);
                }
                if (obj.AlbumCoverThumbnail != null)
                {
                    writer.WritePropertyName(PropName_album_cover_thumbnail);
                    writer.WriteTLObjectValue(obj.AlbumCoverThumbnail);
                }
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_performer);
                writer.WriteStringValue(obj.Performer);
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class InputMessageDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageDocument");
            private static readonly JsonEncodedText PropName_document = JsonEncodedText.Encode("document");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_disable_content_type_detection = JsonEncodedText.Encode("disable_content_type_detection");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageDocument)tlobj;
                if (obj.Document != null)
                {
                    writer.WritePropertyName(PropName_document);
                    writer.WriteTLObjectValue(obj.Document);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                writer.WritePropertyName(PropName_disable_content_type_detection);
                writer.WriteBooleanValue(obj.DisableContentTypeDetection);
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class InputMessagePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessagePhoto");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_added_sticker_file_ids = JsonEncodedText.Encode("added_sticker_file_ids");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_ttl = JsonEncodedText.Encode("ttl");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessagePhoto)tlobj;
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                if (obj.AddedStickerFileIds != null)
                {
                    writer.WritePropertyName(PropName_added_sticker_file_ids);
                    writer.WriteArray(obj.AddedStickerFileIds);
                }
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                writer.WritePropertyName(PropName_ttl);
                writer.WriteNumberValue(obj.Ttl);
            }
        }

        partial class InputMessageStickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageSticker");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageSticker)tlobj;
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
            }
        }

        partial class InputMessageVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageVideo");
            private static readonly JsonEncodedText PropName_video = JsonEncodedText.Encode("video");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_added_sticker_file_ids = JsonEncodedText.Encode("added_sticker_file_ids");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_supports_streaming = JsonEncodedText.Encode("supports_streaming");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_ttl = JsonEncodedText.Encode("ttl");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageVideo)tlobj;
                if (obj.Video != null)
                {
                    writer.WritePropertyName(PropName_video);
                    writer.WriteTLObjectValue(obj.Video);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                if (obj.AddedStickerFileIds != null)
                {
                    writer.WritePropertyName(PropName_added_sticker_file_ids);
                    writer.WriteArray(obj.AddedStickerFileIds);
                }
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                writer.WritePropertyName(PropName_supports_streaming);
                writer.WriteBooleanValue(obj.SupportsStreaming);
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
                writer.WritePropertyName(PropName_ttl);
                writer.WriteNumberValue(obj.Ttl);
            }
        }

        partial class InputMessageVideoNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageVideoNote");
            private static readonly JsonEncodedText PropName_video_note = JsonEncodedText.Encode("video_note");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_length = JsonEncodedText.Encode("length");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageVideoNote)tlobj;
                if (obj.VideoNote != null)
                {
                    writer.WritePropertyName(PropName_video_note);
                    writer.WriteTLObjectValue(obj.VideoNote);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                writer.WritePropertyName(PropName_length);
                writer.WriteNumberValue(obj.Length);
            }
        }

        partial class InputMessageVoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageVoiceNote");
            private static readonly JsonEncodedText PropName_voice_note = JsonEncodedText.Encode("voice_note");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_waveform = JsonEncodedText.Encode("waveform");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageVoiceNote)tlobj;
                if (obj.VoiceNote != null)
                {
                    writer.WritePropertyName(PropName_voice_note);
                    writer.WriteTLObjectValue(obj.VoiceNote);
                }
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                if (obj.Waveform != null)
                {
                    writer.WritePropertyName(PropName_waveform);
                    writer.WriteBase64StringValue(obj.Waveform);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class InputMessageLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageLocation");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            private static readonly JsonEncodedText PropName_live_period = JsonEncodedText.Encode("live_period");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageLocation)tlobj;
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
                writer.WritePropertyName(PropName_live_period);
                writer.WriteNumberValue(obj.LivePeriod);
            }
        }

        partial class InputMessageVenueConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageVenue");
            private static readonly JsonEncodedText PropName_venue = JsonEncodedText.Encode("venue");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageVenue)tlobj;
                if (obj.Venue != null)
                {
                    writer.WritePropertyName(PropName_venue);
                    writer.WriteTLObjectValue(obj.Venue);
                }
            }
        }

        partial class InputMessageContactConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageContact");
            private static readonly JsonEncodedText PropName_contact = JsonEncodedText.Encode("contact");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageContact)tlobj;
                if (obj.Contact != null)
                {
                    writer.WritePropertyName(PropName_contact);
                    writer.WriteTLObjectValue(obj.Contact);
                }
            }
        }

        partial class InputMessageDiceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageDice");
            private static readonly JsonEncodedText PropName_emoji = JsonEncodedText.Encode("emoji");
            private static readonly JsonEncodedText PropName_clear_draft = JsonEncodedText.Encode("clear_draft");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageDice)tlobj;
                writer.WritePropertyName(PropName_emoji);
                writer.WriteStringValue(obj.Emoji);
                writer.WritePropertyName(PropName_clear_draft);
                writer.WriteBooleanValue(obj.ClearDraft);
            }
        }

        partial class InputMessageGameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageGame");
            private static readonly JsonEncodedText PropName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
            private static readonly JsonEncodedText PropName_game_short_name = JsonEncodedText.Encode("game_short_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageGame)tlobj;
                writer.WritePropertyName(PropName_bot_user_id);
                writer.WriteNumberValue(obj.BotUserId);
                writer.WritePropertyName(PropName_game_short_name);
                writer.WriteStringValue(obj.GameShortName);
            }
        }

        partial class InputMessageInvoiceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageInvoice");
            private static readonly JsonEncodedText PropName_invoice = JsonEncodedText.Encode("invoice");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_photo_url = JsonEncodedText.Encode("photo_url");
            private static readonly JsonEncodedText PropName_photo_size = JsonEncodedText.Encode("photo_size");
            private static readonly JsonEncodedText PropName_photo_width = JsonEncodedText.Encode("photo_width");
            private static readonly JsonEncodedText PropName_photo_height = JsonEncodedText.Encode("photo_height");
            private static readonly JsonEncodedText PropName_payload = JsonEncodedText.Encode("payload");
            private static readonly JsonEncodedText PropName_provider_token = JsonEncodedText.Encode("provider_token");
            private static readonly JsonEncodedText PropName_provider_data = JsonEncodedText.Encode("provider_data");
            private static readonly JsonEncodedText PropName_start_parameter = JsonEncodedText.Encode("start_parameter");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageInvoice)tlobj;
                if (obj.Invoice != null)
                {
                    writer.WritePropertyName(PropName_invoice);
                    writer.WriteTLObjectValue(obj.Invoice);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                writer.WritePropertyName(PropName_photo_url);
                writer.WriteStringValue(obj.PhotoUrl);
                writer.WritePropertyName(PropName_photo_size);
                writer.WriteNumberValue(obj.PhotoSize);
                writer.WritePropertyName(PropName_photo_width);
                writer.WriteNumberValue(obj.PhotoWidth);
                writer.WritePropertyName(PropName_photo_height);
                writer.WriteNumberValue(obj.PhotoHeight);
                if (obj.Payload != null)
                {
                    writer.WritePropertyName(PropName_payload);
                    writer.WriteBase64StringValue(obj.Payload);
                }
                writer.WritePropertyName(PropName_provider_token);
                writer.WriteStringValue(obj.ProviderToken);
                writer.WritePropertyName(PropName_provider_data);
                writer.WriteStringValue(obj.ProviderData);
                writer.WritePropertyName(PropName_start_parameter);
                writer.WriteStringValue(obj.StartParameter);
            }
        }

        partial class InputMessagePollConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessagePoll");
            private static readonly JsonEncodedText PropName_question = JsonEncodedText.Encode("question");
            private static readonly JsonEncodedText PropName_options = JsonEncodedText.Encode("options");
            private static readonly JsonEncodedText PropName_is_anonymous = JsonEncodedText.Encode("is_anonymous");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_open_period = JsonEncodedText.Encode("open_period");
            private static readonly JsonEncodedText PropName_close_date = JsonEncodedText.Encode("close_date");
            private static readonly JsonEncodedText PropName_is_closed = JsonEncodedText.Encode("is_closed");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessagePoll)tlobj;
                writer.WritePropertyName(PropName_question);
                writer.WriteStringValue(obj.Question);
                if (obj.Options != null)
                {
                    writer.WritePropertyName(PropName_options);
                    writer.WriteArray(obj.Options);
                }
                writer.WritePropertyName(PropName_is_anonymous);
                writer.WriteBooleanValue(obj.IsAnonymous);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_open_period);
                writer.WriteNumberValue(obj.OpenPeriod);
                writer.WritePropertyName(PropName_close_date);
                writer.WriteNumberValue(obj.CloseDate);
                writer.WritePropertyName(PropName_is_closed);
                writer.WriteBooleanValue(obj.IsClosed);
            }
        }

        partial class InputMessageForwardedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputMessageForwarded");
            private static readonly JsonEncodedText PropName_from_chat_id = JsonEncodedText.Encode("from_chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_in_game_share = JsonEncodedText.Encode("in_game_share");
            private static readonly JsonEncodedText PropName_copy_options = JsonEncodedText.Encode("copy_options");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputMessageForwarded)tlobj;
                writer.WritePropertyName(PropName_from_chat_id);
                writer.WriteNumberValue(obj.FromChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_in_game_share);
                writer.WriteBooleanValue(obj.InGameShare);
                if (obj.CopyOptions != null)
                {
                    writer.WritePropertyName(PropName_copy_options);
                    writer.WriteTLObjectValue(obj.CopyOptions);
                }
            }
        }

        partial class SearchMessagesFilterEmptyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterEmpty");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterAnimation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterAudioConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterAudio");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterDocument");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterPhoto");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterVideo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterVoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterVoiceNote");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterPhotoAndVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterPhotoAndVideo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterUrl");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterChatPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterChatPhoto");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterCall");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterMissedCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterMissedCall");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterVideoNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterVideoNote");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterVoiceAndVideoNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterVoiceAndVideoNote");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterMentionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterMention");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterUnreadMentionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterUnreadMention");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchMessagesFilterFailedToSendConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessagesFilterFailedToSend");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionTypingConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionTyping");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionRecordingVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionRecordingVideo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionUploadingVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionUploadingVideo");
            private static readonly JsonEncodedText PropName_progress = JsonEncodedText.Encode("progress");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatActionUploadingVideo)tlobj;
                writer.WritePropertyName(PropName_progress);
                writer.WriteNumberValue(obj.Progress);
            }
        }

        partial class ChatActionRecordingVoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionRecordingVoiceNote");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionUploadingVoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionUploadingVoiceNote");
            private static readonly JsonEncodedText PropName_progress = JsonEncodedText.Encode("progress");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatActionUploadingVoiceNote)tlobj;
                writer.WritePropertyName(PropName_progress);
                writer.WriteNumberValue(obj.Progress);
            }
        }

        partial class ChatActionUploadingPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionUploadingPhoto");
            private static readonly JsonEncodedText PropName_progress = JsonEncodedText.Encode("progress");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatActionUploadingPhoto)tlobj;
                writer.WritePropertyName(PropName_progress);
                writer.WriteNumberValue(obj.Progress);
            }
        }

        partial class ChatActionUploadingDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionUploadingDocument");
            private static readonly JsonEncodedText PropName_progress = JsonEncodedText.Encode("progress");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatActionUploadingDocument)tlobj;
                writer.WritePropertyName(PropName_progress);
                writer.WriteNumberValue(obj.Progress);
            }
        }

        partial class ChatActionChoosingLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionChoosingLocation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionChoosingContactConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionChoosingContact");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionStartPlayingGameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionStartPlayingGame");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionRecordingVideoNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionRecordingVideoNote");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatActionUploadingVideoNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionUploadingVideoNote");
            private static readonly JsonEncodedText PropName_progress = JsonEncodedText.Encode("progress");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatActionUploadingVideoNote)tlobj;
                writer.WritePropertyName(PropName_progress);
                writer.WriteNumberValue(obj.Progress);
            }
        }

        partial class ChatActionCancelConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatActionCancel");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserStatusEmptyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userStatusEmpty");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserStatusOnlineConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userStatusOnline");
            private static readonly JsonEncodedText PropName_expires = JsonEncodedText.Encode("expires");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UserStatusOnline)tlobj;
                writer.WritePropertyName(PropName_expires);
                writer.WriteNumberValue(obj.Expires);
            }
        }

        partial class UserStatusOfflineConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userStatusOffline");
            private static readonly JsonEncodedText PropName_was_online = JsonEncodedText.Encode("was_online");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UserStatusOffline)tlobj;
                writer.WritePropertyName(PropName_was_online);
                writer.WriteNumberValue(obj.WasOnline);
            }
        }

        partial class UserStatusRecentlyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userStatusRecently");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserStatusLastWeekConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userStatusLastWeek");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserStatusLastMonthConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userStatusLastMonth");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class StickersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("stickers");
            private static readonly JsonEncodedText PropName_stickers = JsonEncodedText.Encode("stickers");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Stickers)tlobj;
                if (obj.Stickers_ != null)
                {
                    writer.WritePropertyName(PropName_stickers);
                    writer.WriteArray(obj.Stickers_);
                }
            }
        }

        partial class EmojisConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("emojis");
            private static readonly JsonEncodedText PropName_emojis = JsonEncodedText.Encode("emojis");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Emojis)tlobj;
                if (obj.Emojis_ != null)
                {
                    writer.WritePropertyName(PropName_emojis);
                    writer.WriteArray(obj.Emojis_);
                }
            }
        }

        partial class StickerSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("stickerSet");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_is_installed = JsonEncodedText.Encode("is_installed");
            private static readonly JsonEncodedText PropName_is_archived = JsonEncodedText.Encode("is_archived");
            private static readonly JsonEncodedText PropName_is_official = JsonEncodedText.Encode("is_official");
            private static readonly JsonEncodedText PropName_is_animated = JsonEncodedText.Encode("is_animated");
            private static readonly JsonEncodedText PropName_is_masks = JsonEncodedText.Encode("is_masks");
            private static readonly JsonEncodedText PropName_is_viewed = JsonEncodedText.Encode("is_viewed");
            private static readonly JsonEncodedText PropName_stickers = JsonEncodedText.Encode("stickers");
            private static readonly JsonEncodedText PropName_emojis = JsonEncodedText.Encode("emojis");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StickerSet)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                writer.WritePropertyName(PropName_is_installed);
                writer.WriteBooleanValue(obj.IsInstalled);
                writer.WritePropertyName(PropName_is_archived);
                writer.WriteBooleanValue(obj.IsArchived);
                writer.WritePropertyName(PropName_is_official);
                writer.WriteBooleanValue(obj.IsOfficial);
                writer.WritePropertyName(PropName_is_animated);
                writer.WriteBooleanValue(obj.IsAnimated);
                writer.WritePropertyName(PropName_is_masks);
                writer.WriteBooleanValue(obj.IsMasks);
                writer.WritePropertyName(PropName_is_viewed);
                writer.WriteBooleanValue(obj.IsViewed);
                if (obj.Stickers != null)
                {
                    writer.WritePropertyName(PropName_stickers);
                    writer.WriteArray(obj.Stickers);
                }
                if (obj.Emojis != null)
                {
                    writer.WritePropertyName(PropName_emojis);
                    writer.WriteArray(obj.Emojis);
                }
            }
        }

        partial class StickerSetInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("stickerSetInfo");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            private static readonly JsonEncodedText PropName_is_installed = JsonEncodedText.Encode("is_installed");
            private static readonly JsonEncodedText PropName_is_archived = JsonEncodedText.Encode("is_archived");
            private static readonly JsonEncodedText PropName_is_official = JsonEncodedText.Encode("is_official");
            private static readonly JsonEncodedText PropName_is_animated = JsonEncodedText.Encode("is_animated");
            private static readonly JsonEncodedText PropName_is_masks = JsonEncodedText.Encode("is_masks");
            private static readonly JsonEncodedText PropName_is_viewed = JsonEncodedText.Encode("is_viewed");
            private static readonly JsonEncodedText PropName_size = JsonEncodedText.Encode("size");
            private static readonly JsonEncodedText PropName_covers = JsonEncodedText.Encode("covers");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StickerSetInfo)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
                writer.WritePropertyName(PropName_is_installed);
                writer.WriteBooleanValue(obj.IsInstalled);
                writer.WritePropertyName(PropName_is_archived);
                writer.WriteBooleanValue(obj.IsArchived);
                writer.WritePropertyName(PropName_is_official);
                writer.WriteBooleanValue(obj.IsOfficial);
                writer.WritePropertyName(PropName_is_animated);
                writer.WriteBooleanValue(obj.IsAnimated);
                writer.WritePropertyName(PropName_is_masks);
                writer.WriteBooleanValue(obj.IsMasks);
                writer.WritePropertyName(PropName_is_viewed);
                writer.WriteBooleanValue(obj.IsViewed);
                writer.WritePropertyName(PropName_size);
                writer.WriteNumberValue(obj.Size);
                if (obj.Covers != null)
                {
                    writer.WritePropertyName(PropName_covers);
                    writer.WriteArray(obj.Covers);
                }
            }
        }

        partial class StickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("stickerSets");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_sets = JsonEncodedText.Encode("sets");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StickerSets)tlobj;
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                if (obj.Sets != null)
                {
                    writer.WritePropertyName(PropName_sets);
                    writer.WriteArray(obj.Sets);
                }
            }
        }

        partial class CallDiscardReasonEmptyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callDiscardReasonEmpty");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallDiscardReasonMissedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callDiscardReasonMissed");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallDiscardReasonDeclinedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callDiscardReasonDeclined");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallDiscardReasonDisconnectedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callDiscardReasonDisconnected");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallDiscardReasonHungUpConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callDiscardReasonHungUp");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallProtocolConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callProtocol");
            private static readonly JsonEncodedText PropName_udp_p2p = JsonEncodedText.Encode("udp_p2p");
            private static readonly JsonEncodedText PropName_udp_reflector = JsonEncodedText.Encode("udp_reflector");
            private static readonly JsonEncodedText PropName_min_layer = JsonEncodedText.Encode("min_layer");
            private static readonly JsonEncodedText PropName_max_layer = JsonEncodedText.Encode("max_layer");
            private static readonly JsonEncodedText PropName_library_versions = JsonEncodedText.Encode("library_versions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallProtocol)tlobj;
                writer.WritePropertyName(PropName_udp_p2p);
                writer.WriteBooleanValue(obj.UdpP2p);
                writer.WritePropertyName(PropName_udp_reflector);
                writer.WriteBooleanValue(obj.UdpReflector);
                writer.WritePropertyName(PropName_min_layer);
                writer.WriteNumberValue(obj.MinLayer);
                writer.WritePropertyName(PropName_max_layer);
                writer.WriteNumberValue(obj.MaxLayer);
                if (obj.LibraryVersions != null)
                {
                    writer.WritePropertyName(PropName_library_versions);
                    writer.WriteArray(obj.LibraryVersions);
                }
            }
        }

        partial class CallServerTypeTelegramReflectorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callServerTypeTelegramReflector");
            private static readonly JsonEncodedText PropName_peer_tag = JsonEncodedText.Encode("peer_tag");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallServerTypeTelegramReflector)tlobj;
                if (obj.PeerTag != null)
                {
                    writer.WritePropertyName(PropName_peer_tag);
                    writer.WriteBase64StringValue(obj.PeerTag);
                }
            }
        }

        partial class CallServerTypeWebrtcConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callServerTypeWebrtc");
            private static readonly JsonEncodedText PropName_username = JsonEncodedText.Encode("username");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            private static readonly JsonEncodedText PropName_supports_turn = JsonEncodedText.Encode("supports_turn");
            private static readonly JsonEncodedText PropName_supports_stun = JsonEncodedText.Encode("supports_stun");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallServerTypeWebrtc)tlobj;
                writer.WritePropertyName(PropName_username);
                writer.WriteStringValue(obj.Username);
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
                writer.WritePropertyName(PropName_supports_turn);
                writer.WriteBooleanValue(obj.SupportsTurn);
                writer.WritePropertyName(PropName_supports_stun);
                writer.WriteBooleanValue(obj.SupportsStun);
            }
        }

        partial class CallServerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callServer");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_ip_address = JsonEncodedText.Encode("ip_address");
            private static readonly JsonEncodedText PropName_ipv6_address = JsonEncodedText.Encode("ipv6_address");
            private static readonly JsonEncodedText PropName_port = JsonEncodedText.Encode("port");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallServer)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_ip_address);
                writer.WriteStringValue(obj.IpAddress);
                writer.WritePropertyName(PropName_ipv6_address);
                writer.WriteStringValue(obj.Ipv6Address);
                writer.WritePropertyName(PropName_port);
                writer.WriteNumberValue(obj.Port);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class CallIdConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callId");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallId)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
            }
        }

        partial class CallStatePendingConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callStatePending");
            private static readonly JsonEncodedText PropName_is_created = JsonEncodedText.Encode("is_created");
            private static readonly JsonEncodedText PropName_is_received = JsonEncodedText.Encode("is_received");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallStatePending)tlobj;
                writer.WritePropertyName(PropName_is_created);
                writer.WriteBooleanValue(obj.IsCreated);
                writer.WritePropertyName(PropName_is_received);
                writer.WriteBooleanValue(obj.IsReceived);
            }
        }

        partial class CallStateExchangingKeysConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callStateExchangingKeys");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallStateReadyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callStateReady");
            private static readonly JsonEncodedText PropName_protocol = JsonEncodedText.Encode("protocol");
            private static readonly JsonEncodedText PropName_servers = JsonEncodedText.Encode("servers");
            private static readonly JsonEncodedText PropName_config = JsonEncodedText.Encode("config");
            private static readonly JsonEncodedText PropName_encryption_key = JsonEncodedText.Encode("encryption_key");
            private static readonly JsonEncodedText PropName_emojis = JsonEncodedText.Encode("emojis");
            private static readonly JsonEncodedText PropName_allow_p2p = JsonEncodedText.Encode("allow_p2p");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallStateReady)tlobj;
                if (obj.Protocol != null)
                {
                    writer.WritePropertyName(PropName_protocol);
                    writer.WriteTLObjectValue(obj.Protocol);
                }
                if (obj.Servers != null)
                {
                    writer.WritePropertyName(PropName_servers);
                    writer.WriteArray(obj.Servers);
                }
                writer.WritePropertyName(PropName_config);
                writer.WriteStringValue(obj.Config);
                if (obj.EncryptionKey != null)
                {
                    writer.WritePropertyName(PropName_encryption_key);
                    writer.WriteBase64StringValue(obj.EncryptionKey);
                }
                if (obj.Emojis != null)
                {
                    writer.WritePropertyName(PropName_emojis);
                    writer.WriteArray(obj.Emojis);
                }
                writer.WritePropertyName(PropName_allow_p2p);
                writer.WriteBooleanValue(obj.AllowP2p);
            }
        }

        partial class CallStateHangingUpConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callStateHangingUp");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallStateDiscardedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callStateDiscarded");
            private static readonly JsonEncodedText PropName_reason = JsonEncodedText.Encode("reason");
            private static readonly JsonEncodedText PropName_need_rating = JsonEncodedText.Encode("need_rating");
            private static readonly JsonEncodedText PropName_need_debug_information = JsonEncodedText.Encode("need_debug_information");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallStateDiscarded)tlobj;
                if (obj.Reason != null)
                {
                    writer.WritePropertyName(PropName_reason);
                    writer.WriteTLObjectValue(obj.Reason);
                }
                writer.WritePropertyName(PropName_need_rating);
                writer.WriteBooleanValue(obj.NeedRating);
                writer.WritePropertyName(PropName_need_debug_information);
                writer.WriteBooleanValue(obj.NeedDebugInformation);
            }
        }

        partial class CallStateErrorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callStateError");
            private static readonly JsonEncodedText PropName_error = JsonEncodedText.Encode("error");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallStateError)tlobj;
                if (obj.Error != null)
                {
                    writer.WritePropertyName(PropName_error);
                    writer.WriteTLObjectValue(obj.Error);
                }
            }
        }

        partial class CallProblemEchoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callProblemEcho");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallProblemNoiseConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callProblemNoise");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallProblemInterruptionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callProblemInterruptions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallProblemDistortedSpeechConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callProblemDistortedSpeech");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallProblemSilentLocalConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callProblemSilentLocal");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallProblemSilentRemoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callProblemSilentRemote");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallProblemDroppedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callProblemDropped");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallProblemDistortedVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callProblemDistortedVideo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallProblemPixelatedVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callProblemPixelatedVideo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("call");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_is_outgoing = JsonEncodedText.Encode("is_outgoing");
            private static readonly JsonEncodedText PropName_is_video = JsonEncodedText.Encode("is_video");
            private static readonly JsonEncodedText PropName_state = JsonEncodedText.Encode("state");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Call)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_is_outgoing);
                writer.WriteBooleanValue(obj.IsOutgoing);
                writer.WritePropertyName(PropName_is_video);
                writer.WriteBooleanValue(obj.IsVideo);
                if (obj.State != null)
                {
                    writer.WritePropertyName(PropName_state);
                    writer.WriteTLObjectValue(obj.State);
                }
            }
        }

        partial class PhoneNumberAuthenticationSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("phoneNumberAuthenticationSettings");
            private static readonly JsonEncodedText PropName_allow_flash_call = JsonEncodedText.Encode("allow_flash_call");
            private static readonly JsonEncodedText PropName_is_current_phone_number = JsonEncodedText.Encode("is_current_phone_number");
            private static readonly JsonEncodedText PropName_allow_sms_retriever_api = JsonEncodedText.Encode("allow_sms_retriever_api");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PhoneNumberAuthenticationSettings)tlobj;
                writer.WritePropertyName(PropName_allow_flash_call);
                writer.WriteBooleanValue(obj.AllowFlashCall);
                writer.WritePropertyName(PropName_is_current_phone_number);
                writer.WriteBooleanValue(obj.IsCurrentPhoneNumber);
                writer.WritePropertyName(PropName_allow_sms_retriever_api);
                writer.WriteBooleanValue(obj.AllowSmsRetrieverApi);
            }
        }

        partial class AnimationsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("animations");
            private static readonly JsonEncodedText PropName_animations = JsonEncodedText.Encode("animations");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Animations)tlobj;
                if (obj.Animations_ != null)
                {
                    writer.WritePropertyName(PropName_animations);
                    writer.WriteArray(obj.Animations_);
                }
            }
        }

        partial class ImportedContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("importedContacts");
            private static readonly JsonEncodedText PropName_user_ids = JsonEncodedText.Encode("user_ids");
            private static readonly JsonEncodedText PropName_importer_count = JsonEncodedText.Encode("importer_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ImportedContacts)tlobj;
                if (obj.UserIds != null)
                {
                    writer.WritePropertyName(PropName_user_ids);
                    writer.WriteArray(obj.UserIds);
                }
                if (obj.ImporterCount != null)
                {
                    writer.WritePropertyName(PropName_importer_count);
                    writer.WriteArray(obj.ImporterCount);
                }
            }
        }

        partial class HttpUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("httpUrl");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (HttpUrl)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
            }
        }

        partial class InputInlineQueryResultAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultAnimation");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
            private static readonly JsonEncodedText PropName_thumbnail_mime_type = JsonEncodedText.Encode("thumbnail_mime_type");
            private static readonly JsonEncodedText PropName_video_url = JsonEncodedText.Encode("video_url");
            private static readonly JsonEncodedText PropName_video_mime_type = JsonEncodedText.Encode("video_mime_type");
            private static readonly JsonEncodedText PropName_video_duration = JsonEncodedText.Encode("video_duration");
            private static readonly JsonEncodedText PropName_video_width = JsonEncodedText.Encode("video_width");
            private static readonly JsonEncodedText PropName_video_height = JsonEncodedText.Encode("video_height");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultAnimation)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_thumbnail_url);
                writer.WriteStringValue(obj.ThumbnailUrl);
                writer.WritePropertyName(PropName_thumbnail_mime_type);
                writer.WriteStringValue(obj.ThumbnailMimeType);
                writer.WritePropertyName(PropName_video_url);
                writer.WriteStringValue(obj.VideoUrl);
                writer.WritePropertyName(PropName_video_mime_type);
                writer.WriteStringValue(obj.VideoMimeType);
                writer.WritePropertyName(PropName_video_duration);
                writer.WriteNumberValue(obj.VideoDuration);
                writer.WritePropertyName(PropName_video_width);
                writer.WriteNumberValue(obj.VideoWidth);
                writer.WritePropertyName(PropName_video_height);
                writer.WriteNumberValue(obj.VideoHeight);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InputInlineQueryResultArticleConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultArticle");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_hide_url = JsonEncodedText.Encode("hide_url");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
            private static readonly JsonEncodedText PropName_thumbnail_width = JsonEncodedText.Encode("thumbnail_width");
            private static readonly JsonEncodedText PropName_thumbnail_height = JsonEncodedText.Encode("thumbnail_height");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultArticle)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_hide_url);
                writer.WriteBooleanValue(obj.HideUrl);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                writer.WritePropertyName(PropName_thumbnail_url);
                writer.WriteStringValue(obj.ThumbnailUrl);
                writer.WritePropertyName(PropName_thumbnail_width);
                writer.WriteNumberValue(obj.ThumbnailWidth);
                writer.WritePropertyName(PropName_thumbnail_height);
                writer.WriteNumberValue(obj.ThumbnailHeight);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InputInlineQueryResultAudioConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultAudio");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_performer = JsonEncodedText.Encode("performer");
            private static readonly JsonEncodedText PropName_audio_url = JsonEncodedText.Encode("audio_url");
            private static readonly JsonEncodedText PropName_audio_duration = JsonEncodedText.Encode("audio_duration");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultAudio)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_performer);
                writer.WriteStringValue(obj.Performer);
                writer.WritePropertyName(PropName_audio_url);
                writer.WriteStringValue(obj.AudioUrl);
                writer.WritePropertyName(PropName_audio_duration);
                writer.WriteNumberValue(obj.AudioDuration);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InputInlineQueryResultContactConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultContact");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_contact = JsonEncodedText.Encode("contact");
            private static readonly JsonEncodedText PropName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
            private static readonly JsonEncodedText PropName_thumbnail_width = JsonEncodedText.Encode("thumbnail_width");
            private static readonly JsonEncodedText PropName_thumbnail_height = JsonEncodedText.Encode("thumbnail_height");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultContact)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Contact != null)
                {
                    writer.WritePropertyName(PropName_contact);
                    writer.WriteTLObjectValue(obj.Contact);
                }
                writer.WritePropertyName(PropName_thumbnail_url);
                writer.WriteStringValue(obj.ThumbnailUrl);
                writer.WritePropertyName(PropName_thumbnail_width);
                writer.WriteNumberValue(obj.ThumbnailWidth);
                writer.WritePropertyName(PropName_thumbnail_height);
                writer.WriteNumberValue(obj.ThumbnailHeight);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InputInlineQueryResultDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultDocument");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_document_url = JsonEncodedText.Encode("document_url");
            private static readonly JsonEncodedText PropName_mime_type = JsonEncodedText.Encode("mime_type");
            private static readonly JsonEncodedText PropName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
            private static readonly JsonEncodedText PropName_thumbnail_width = JsonEncodedText.Encode("thumbnail_width");
            private static readonly JsonEncodedText PropName_thumbnail_height = JsonEncodedText.Encode("thumbnail_height");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultDocument)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                writer.WritePropertyName(PropName_document_url);
                writer.WriteStringValue(obj.DocumentUrl);
                writer.WritePropertyName(PropName_mime_type);
                writer.WriteStringValue(obj.MimeType);
                writer.WritePropertyName(PropName_thumbnail_url);
                writer.WriteStringValue(obj.ThumbnailUrl);
                writer.WritePropertyName(PropName_thumbnail_width);
                writer.WriteNumberValue(obj.ThumbnailWidth);
                writer.WritePropertyName(PropName_thumbnail_height);
                writer.WriteNumberValue(obj.ThumbnailHeight);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InputInlineQueryResultGameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultGame");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_game_short_name = JsonEncodedText.Encode("game_short_name");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultGame)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_game_short_name);
                writer.WriteStringValue(obj.GameShortName);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
            }
        }

        partial class InputInlineQueryResultLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultLocation");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            private static readonly JsonEncodedText PropName_live_period = JsonEncodedText.Encode("live_period");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
            private static readonly JsonEncodedText PropName_thumbnail_width = JsonEncodedText.Encode("thumbnail_width");
            private static readonly JsonEncodedText PropName_thumbnail_height = JsonEncodedText.Encode("thumbnail_height");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultLocation)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
                writer.WritePropertyName(PropName_live_period);
                writer.WriteNumberValue(obj.LivePeriod);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_thumbnail_url);
                writer.WriteStringValue(obj.ThumbnailUrl);
                writer.WritePropertyName(PropName_thumbnail_width);
                writer.WriteNumberValue(obj.ThumbnailWidth);
                writer.WritePropertyName(PropName_thumbnail_height);
                writer.WriteNumberValue(obj.ThumbnailHeight);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InputInlineQueryResultPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultPhoto");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
            private static readonly JsonEncodedText PropName_photo_url = JsonEncodedText.Encode("photo_url");
            private static readonly JsonEncodedText PropName_photo_width = JsonEncodedText.Encode("photo_width");
            private static readonly JsonEncodedText PropName_photo_height = JsonEncodedText.Encode("photo_height");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultPhoto)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                writer.WritePropertyName(PropName_thumbnail_url);
                writer.WriteStringValue(obj.ThumbnailUrl);
                writer.WritePropertyName(PropName_photo_url);
                writer.WriteStringValue(obj.PhotoUrl);
                writer.WritePropertyName(PropName_photo_width);
                writer.WriteNumberValue(obj.PhotoWidth);
                writer.WritePropertyName(PropName_photo_height);
                writer.WriteNumberValue(obj.PhotoHeight);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InputInlineQueryResultStickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultSticker");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
            private static readonly JsonEncodedText PropName_sticker_url = JsonEncodedText.Encode("sticker_url");
            private static readonly JsonEncodedText PropName_sticker_width = JsonEncodedText.Encode("sticker_width");
            private static readonly JsonEncodedText PropName_sticker_height = JsonEncodedText.Encode("sticker_height");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultSticker)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_thumbnail_url);
                writer.WriteStringValue(obj.ThumbnailUrl);
                writer.WritePropertyName(PropName_sticker_url);
                writer.WriteStringValue(obj.StickerUrl);
                writer.WritePropertyName(PropName_sticker_width);
                writer.WriteNumberValue(obj.StickerWidth);
                writer.WritePropertyName(PropName_sticker_height);
                writer.WriteNumberValue(obj.StickerHeight);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InputInlineQueryResultVenueConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultVenue");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_venue = JsonEncodedText.Encode("venue");
            private static readonly JsonEncodedText PropName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
            private static readonly JsonEncodedText PropName_thumbnail_width = JsonEncodedText.Encode("thumbnail_width");
            private static readonly JsonEncodedText PropName_thumbnail_height = JsonEncodedText.Encode("thumbnail_height");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultVenue)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Venue != null)
                {
                    writer.WritePropertyName(PropName_venue);
                    writer.WriteTLObjectValue(obj.Venue);
                }
                writer.WritePropertyName(PropName_thumbnail_url);
                writer.WriteStringValue(obj.ThumbnailUrl);
                writer.WritePropertyName(PropName_thumbnail_width);
                writer.WriteNumberValue(obj.ThumbnailWidth);
                writer.WritePropertyName(PropName_thumbnail_height);
                writer.WriteNumberValue(obj.ThumbnailHeight);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InputInlineQueryResultVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultVideo");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_thumbnail_url = JsonEncodedText.Encode("thumbnail_url");
            private static readonly JsonEncodedText PropName_video_url = JsonEncodedText.Encode("video_url");
            private static readonly JsonEncodedText PropName_mime_type = JsonEncodedText.Encode("mime_type");
            private static readonly JsonEncodedText PropName_video_width = JsonEncodedText.Encode("video_width");
            private static readonly JsonEncodedText PropName_video_height = JsonEncodedText.Encode("video_height");
            private static readonly JsonEncodedText PropName_video_duration = JsonEncodedText.Encode("video_duration");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultVideo)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                writer.WritePropertyName(PropName_thumbnail_url);
                writer.WriteStringValue(obj.ThumbnailUrl);
                writer.WritePropertyName(PropName_video_url);
                writer.WriteStringValue(obj.VideoUrl);
                writer.WritePropertyName(PropName_mime_type);
                writer.WriteStringValue(obj.MimeType);
                writer.WritePropertyName(PropName_video_width);
                writer.WriteNumberValue(obj.VideoWidth);
                writer.WritePropertyName(PropName_video_height);
                writer.WriteNumberValue(obj.VideoHeight);
                writer.WritePropertyName(PropName_video_duration);
                writer.WriteNumberValue(obj.VideoDuration);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InputInlineQueryResultVoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputInlineQueryResultVoiceNote");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_voice_note_url = JsonEncodedText.Encode("voice_note_url");
            private static readonly JsonEncodedText PropName_voice_note_duration = JsonEncodedText.Encode("voice_note_duration");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputInlineQueryResultVoiceNote)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_voice_note_url);
                writer.WriteStringValue(obj.VoiceNoteUrl);
                writer.WritePropertyName(PropName_voice_note_duration);
                writer.WriteNumberValue(obj.VoiceNoteDuration);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class InlineQueryResultArticleConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultArticle");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_hide_url = JsonEncodedText.Encode("hide_url");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultArticle)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_hide_url);
                writer.WriteBooleanValue(obj.HideUrl);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
            }
        }

        partial class InlineQueryResultContactConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultContact");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_contact = JsonEncodedText.Encode("contact");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultContact)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Contact != null)
                {
                    writer.WritePropertyName(PropName_contact);
                    writer.WriteTLObjectValue(obj.Contact);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
            }
        }

        partial class InlineQueryResultLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultLocation");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultLocation)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
            }
        }

        partial class InlineQueryResultVenueConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultVenue");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_venue = JsonEncodedText.Encode("venue");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultVenue)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Venue != null)
                {
                    writer.WritePropertyName(PropName_venue);
                    writer.WriteTLObjectValue(obj.Venue);
                }
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
            }
        }

        partial class InlineQueryResultGameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultGame");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_game = JsonEncodedText.Encode("game");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultGame)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Game != null)
                {
                    writer.WritePropertyName(PropName_game);
                    writer.WriteTLObjectValue(obj.Game);
                }
            }
        }

        partial class InlineQueryResultAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultAnimation");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultAnimation)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
            }
        }

        partial class InlineQueryResultAudioConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultAudio");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_audio = JsonEncodedText.Encode("audio");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultAudio)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Audio != null)
                {
                    writer.WritePropertyName(PropName_audio);
                    writer.WriteTLObjectValue(obj.Audio);
                }
            }
        }

        partial class InlineQueryResultDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultDocument");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_document = JsonEncodedText.Encode("document");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultDocument)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Document != null)
                {
                    writer.WritePropertyName(PropName_document);
                    writer.WriteTLObjectValue(obj.Document);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
            }
        }

        partial class InlineQueryResultPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultPhoto");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultPhoto)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
            }
        }

        partial class InlineQueryResultStickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultSticker");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultSticker)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
            }
        }

        partial class InlineQueryResultVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultVideo");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_video = JsonEncodedText.Encode("video");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultVideo)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.Video != null)
                {
                    writer.WritePropertyName(PropName_video);
                    writer.WriteTLObjectValue(obj.Video);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
            }
        }

        partial class InlineQueryResultVoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResultVoiceNote");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_voice_note = JsonEncodedText.Encode("voice_note");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResultVoiceNote)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                if (obj.VoiceNote != null)
                {
                    writer.WritePropertyName(PropName_voice_note);
                    writer.WriteTLObjectValue(obj.VoiceNote);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
            }
        }

        partial class InlineQueryResultsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inlineQueryResults");
            private static readonly JsonEncodedText PropName_inline_query_id = JsonEncodedText.Encode("inline_query_id");
            private static readonly JsonEncodedText PropName_next_offset = JsonEncodedText.Encode("next_offset");
            private static readonly JsonEncodedText PropName_results = JsonEncodedText.Encode("results");
            private static readonly JsonEncodedText PropName_switch_pm_text = JsonEncodedText.Encode("switch_pm_text");
            private static readonly JsonEncodedText PropName_switch_pm_parameter = JsonEncodedText.Encode("switch_pm_parameter");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InlineQueryResults)tlobj;
                writer.WritePropertyName(PropName_inline_query_id);
                writer.WriteInt64String(obj.InlineQueryId);
                writer.WritePropertyName(PropName_next_offset);
                writer.WriteStringValue(obj.NextOffset);
                if (obj.Results != null)
                {
                    writer.WritePropertyName(PropName_results);
                    writer.WriteArray(obj.Results);
                }
                writer.WritePropertyName(PropName_switch_pm_text);
                writer.WriteStringValue(obj.SwitchPmText);
                writer.WritePropertyName(PropName_switch_pm_parameter);
                writer.WriteStringValue(obj.SwitchPmParameter);
            }
        }

        partial class CallbackQueryPayloadDataConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callbackQueryPayloadData");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallbackQueryPayloadData)tlobj;
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
            }
        }

        partial class CallbackQueryPayloadDataWithPasswordConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callbackQueryPayloadDataWithPassword");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallbackQueryPayloadDataWithPassword)tlobj;
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
            }
        }

        partial class CallbackQueryPayloadGameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callbackQueryPayloadGame");
            private static readonly JsonEncodedText PropName_game_short_name = JsonEncodedText.Encode("game_short_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallbackQueryPayloadGame)tlobj;
                writer.WritePropertyName(PropName_game_short_name);
                writer.WriteStringValue(obj.GameShortName);
            }
        }

        partial class CallbackQueryAnswerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("callbackQueryAnswer");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_show_alert = JsonEncodedText.Encode("show_alert");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CallbackQueryAnswer)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
                writer.WritePropertyName(PropName_show_alert);
                writer.WriteBooleanValue(obj.ShowAlert);
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
            }
        }

        partial class CustomRequestResultConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("customRequestResult");
            private static readonly JsonEncodedText PropName_result = JsonEncodedText.Encode("result");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CustomRequestResult)tlobj;
                writer.WritePropertyName(PropName_result);
                writer.WriteStringValue(obj.Result);
            }
        }

        partial class GameHighScoreConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("gameHighScore");
            private static readonly JsonEncodedText PropName_position = JsonEncodedText.Encode("position");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_score = JsonEncodedText.Encode("score");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GameHighScore)tlobj;
                writer.WritePropertyName(PropName_position);
                writer.WriteNumberValue(obj.Position);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_score);
                writer.WriteNumberValue(obj.Score);
            }
        }

        partial class GameHighScoresConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("gameHighScores");
            private static readonly JsonEncodedText PropName_scores = JsonEncodedText.Encode("scores");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GameHighScores)tlobj;
                if (obj.Scores != null)
                {
                    writer.WritePropertyName(PropName_scores);
                    writer.WriteArray(obj.Scores);
                }
            }
        }

        partial class ChatEventMessageEditedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventMessageEdited");
            private static readonly JsonEncodedText PropName_old_message = JsonEncodedText.Encode("old_message");
            private static readonly JsonEncodedText PropName_new_message = JsonEncodedText.Encode("new_message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventMessageEdited)tlobj;
                if (obj.OldMessage != null)
                {
                    writer.WritePropertyName(PropName_old_message);
                    writer.WriteTLObjectValue(obj.OldMessage);
                }
                if (obj.NewMessage != null)
                {
                    writer.WritePropertyName(PropName_new_message);
                    writer.WriteTLObjectValue(obj.NewMessage);
                }
            }
        }

        partial class ChatEventMessageDeletedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventMessageDeleted");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventMessageDeleted)tlobj;
                if (obj.Message != null)
                {
                    writer.WritePropertyName(PropName_message);
                    writer.WriteTLObjectValue(obj.Message);
                }
            }
        }

        partial class ChatEventPollStoppedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventPollStopped");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventPollStopped)tlobj;
                if (obj.Message != null)
                {
                    writer.WritePropertyName(PropName_message);
                    writer.WriteTLObjectValue(obj.Message);
                }
            }
        }

        partial class ChatEventMessagePinnedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventMessagePinned");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventMessagePinned)tlobj;
                if (obj.Message != null)
                {
                    writer.WritePropertyName(PropName_message);
                    writer.WriteTLObjectValue(obj.Message);
                }
            }
        }

        partial class ChatEventMessageUnpinnedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventMessageUnpinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatEventMemberJoinedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventMemberJoined");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatEventMemberLeftConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventMemberLeft");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatEventMemberInvitedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventMemberInvited");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_status = JsonEncodedText.Encode("status");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventMemberInvited)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.Status != null)
                {
                    writer.WritePropertyName(PropName_status);
                    writer.WriteTLObjectValue(obj.Status);
                }
            }
        }

        partial class ChatEventMemberPromotedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventMemberPromoted");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_old_status = JsonEncodedText.Encode("old_status");
            private static readonly JsonEncodedText PropName_new_status = JsonEncodedText.Encode("new_status");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventMemberPromoted)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.OldStatus != null)
                {
                    writer.WritePropertyName(PropName_old_status);
                    writer.WriteTLObjectValue(obj.OldStatus);
                }
                if (obj.NewStatus != null)
                {
                    writer.WritePropertyName(PropName_new_status);
                    writer.WriteTLObjectValue(obj.NewStatus);
                }
            }
        }

        partial class ChatEventMemberRestrictedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventMemberRestricted");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_old_status = JsonEncodedText.Encode("old_status");
            private static readonly JsonEncodedText PropName_new_status = JsonEncodedText.Encode("new_status");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventMemberRestricted)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.OldStatus != null)
                {
                    writer.WritePropertyName(PropName_old_status);
                    writer.WriteTLObjectValue(obj.OldStatus);
                }
                if (obj.NewStatus != null)
                {
                    writer.WritePropertyName(PropName_new_status);
                    writer.WriteTLObjectValue(obj.NewStatus);
                }
            }
        }

        partial class ChatEventTitleChangedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventTitleChanged");
            private static readonly JsonEncodedText PropName_old_title = JsonEncodedText.Encode("old_title");
            private static readonly JsonEncodedText PropName_new_title = JsonEncodedText.Encode("new_title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventTitleChanged)tlobj;
                writer.WritePropertyName(PropName_old_title);
                writer.WriteStringValue(obj.OldTitle);
                writer.WritePropertyName(PropName_new_title);
                writer.WriteStringValue(obj.NewTitle);
            }
        }

        partial class ChatEventPermissionsChangedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventPermissionsChanged");
            private static readonly JsonEncodedText PropName_old_permissions = JsonEncodedText.Encode("old_permissions");
            private static readonly JsonEncodedText PropName_new_permissions = JsonEncodedText.Encode("new_permissions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventPermissionsChanged)tlobj;
                if (obj.OldPermissions != null)
                {
                    writer.WritePropertyName(PropName_old_permissions);
                    writer.WriteTLObjectValue(obj.OldPermissions);
                }
                if (obj.NewPermissions != null)
                {
                    writer.WritePropertyName(PropName_new_permissions);
                    writer.WriteTLObjectValue(obj.NewPermissions);
                }
            }
        }

        partial class ChatEventDescriptionChangedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventDescriptionChanged");
            private static readonly JsonEncodedText PropName_old_description = JsonEncodedText.Encode("old_description");
            private static readonly JsonEncodedText PropName_new_description = JsonEncodedText.Encode("new_description");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventDescriptionChanged)tlobj;
                writer.WritePropertyName(PropName_old_description);
                writer.WriteStringValue(obj.OldDescription);
                writer.WritePropertyName(PropName_new_description);
                writer.WriteStringValue(obj.NewDescription);
            }
        }

        partial class ChatEventUsernameChangedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventUsernameChanged");
            private static readonly JsonEncodedText PropName_old_username = JsonEncodedText.Encode("old_username");
            private static readonly JsonEncodedText PropName_new_username = JsonEncodedText.Encode("new_username");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventUsernameChanged)tlobj;
                writer.WritePropertyName(PropName_old_username);
                writer.WriteStringValue(obj.OldUsername);
                writer.WritePropertyName(PropName_new_username);
                writer.WriteStringValue(obj.NewUsername);
            }
        }

        partial class ChatEventPhotoChangedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventPhotoChanged");
            private static readonly JsonEncodedText PropName_old_photo = JsonEncodedText.Encode("old_photo");
            private static readonly JsonEncodedText PropName_new_photo = JsonEncodedText.Encode("new_photo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventPhotoChanged)tlobj;
                if (obj.OldPhoto != null)
                {
                    writer.WritePropertyName(PropName_old_photo);
                    writer.WriteTLObjectValue(obj.OldPhoto);
                }
                if (obj.NewPhoto != null)
                {
                    writer.WritePropertyName(PropName_new_photo);
                    writer.WriteTLObjectValue(obj.NewPhoto);
                }
            }
        }

        partial class ChatEventInvitesToggledConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventInvitesToggled");
            private static readonly JsonEncodedText PropName_can_invite_users = JsonEncodedText.Encode("can_invite_users");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventInvitesToggled)tlobj;
                writer.WritePropertyName(PropName_can_invite_users);
                writer.WriteBooleanValue(obj.CanInviteUsers);
            }
        }

        partial class ChatEventLinkedChatChangedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventLinkedChatChanged");
            private static readonly JsonEncodedText PropName_old_linked_chat_id = JsonEncodedText.Encode("old_linked_chat_id");
            private static readonly JsonEncodedText PropName_new_linked_chat_id = JsonEncodedText.Encode("new_linked_chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventLinkedChatChanged)tlobj;
                writer.WritePropertyName(PropName_old_linked_chat_id);
                writer.WriteNumberValue(obj.OldLinkedChatId);
                writer.WritePropertyName(PropName_new_linked_chat_id);
                writer.WriteNumberValue(obj.NewLinkedChatId);
            }
        }

        partial class ChatEventSlowModeDelayChangedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventSlowModeDelayChanged");
            private static readonly JsonEncodedText PropName_old_slow_mode_delay = JsonEncodedText.Encode("old_slow_mode_delay");
            private static readonly JsonEncodedText PropName_new_slow_mode_delay = JsonEncodedText.Encode("new_slow_mode_delay");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventSlowModeDelayChanged)tlobj;
                writer.WritePropertyName(PropName_old_slow_mode_delay);
                writer.WriteNumberValue(obj.OldSlowModeDelay);
                writer.WritePropertyName(PropName_new_slow_mode_delay);
                writer.WriteNumberValue(obj.NewSlowModeDelay);
            }
        }

        partial class ChatEventSignMessagesToggledConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventSignMessagesToggled");
            private static readonly JsonEncodedText PropName_sign_messages = JsonEncodedText.Encode("sign_messages");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventSignMessagesToggled)tlobj;
                writer.WritePropertyName(PropName_sign_messages);
                writer.WriteBooleanValue(obj.SignMessages);
            }
        }

        partial class ChatEventStickerSetChangedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventStickerSetChanged");
            private static readonly JsonEncodedText PropName_old_sticker_set_id = JsonEncodedText.Encode("old_sticker_set_id");
            private static readonly JsonEncodedText PropName_new_sticker_set_id = JsonEncodedText.Encode("new_sticker_set_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventStickerSetChanged)tlobj;
                writer.WritePropertyName(PropName_old_sticker_set_id);
                writer.WriteInt64String(obj.OldStickerSetId);
                writer.WritePropertyName(PropName_new_sticker_set_id);
                writer.WriteInt64String(obj.NewStickerSetId);
            }
        }

        partial class ChatEventLocationChangedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventLocationChanged");
            private static readonly JsonEncodedText PropName_old_location = JsonEncodedText.Encode("old_location");
            private static readonly JsonEncodedText PropName_new_location = JsonEncodedText.Encode("new_location");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventLocationChanged)tlobj;
                if (obj.OldLocation != null)
                {
                    writer.WritePropertyName(PropName_old_location);
                    writer.WriteTLObjectValue(obj.OldLocation);
                }
                if (obj.NewLocation != null)
                {
                    writer.WritePropertyName(PropName_new_location);
                    writer.WriteTLObjectValue(obj.NewLocation);
                }
            }
        }

        partial class ChatEventIsAllHistoryAvailableToggledConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventIsAllHistoryAvailableToggled");
            private static readonly JsonEncodedText PropName_is_all_history_available = JsonEncodedText.Encode("is_all_history_available");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventIsAllHistoryAvailableToggled)tlobj;
                writer.WritePropertyName(PropName_is_all_history_available);
                writer.WriteBooleanValue(obj.IsAllHistoryAvailable);
            }
        }

        partial class ChatEventConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEvent");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_date = JsonEncodedText.Encode("date");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_action = JsonEncodedText.Encode("action");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEvent)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_date);
                writer.WriteNumberValue(obj.Date);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.Action != null)
                {
                    writer.WritePropertyName(PropName_action);
                    writer.WriteTLObjectValue(obj.Action);
                }
            }
        }

        partial class ChatEventsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEvents");
            private static readonly JsonEncodedText PropName_events = JsonEncodedText.Encode("events");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEvents)tlobj;
                if (obj.Events != null)
                {
                    writer.WritePropertyName(PropName_events);
                    writer.WriteArray(obj.Events);
                }
            }
        }

        partial class ChatEventLogFiltersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatEventLogFilters");
            private static readonly JsonEncodedText PropName_message_edits = JsonEncodedText.Encode("message_edits");
            private static readonly JsonEncodedText PropName_message_deletions = JsonEncodedText.Encode("message_deletions");
            private static readonly JsonEncodedText PropName_message_pins = JsonEncodedText.Encode("message_pins");
            private static readonly JsonEncodedText PropName_member_joins = JsonEncodedText.Encode("member_joins");
            private static readonly JsonEncodedText PropName_member_leaves = JsonEncodedText.Encode("member_leaves");
            private static readonly JsonEncodedText PropName_member_invites = JsonEncodedText.Encode("member_invites");
            private static readonly JsonEncodedText PropName_member_promotions = JsonEncodedText.Encode("member_promotions");
            private static readonly JsonEncodedText PropName_member_restrictions = JsonEncodedText.Encode("member_restrictions");
            private static readonly JsonEncodedText PropName_info_changes = JsonEncodedText.Encode("info_changes");
            private static readonly JsonEncodedText PropName_setting_changes = JsonEncodedText.Encode("setting_changes");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatEventLogFilters)tlobj;
                writer.WritePropertyName(PropName_message_edits);
                writer.WriteBooleanValue(obj.MessageEdits);
                writer.WritePropertyName(PropName_message_deletions);
                writer.WriteBooleanValue(obj.MessageDeletions);
                writer.WritePropertyName(PropName_message_pins);
                writer.WriteBooleanValue(obj.MessagePins);
                writer.WritePropertyName(PropName_member_joins);
                writer.WriteBooleanValue(obj.MemberJoins);
                writer.WritePropertyName(PropName_member_leaves);
                writer.WriteBooleanValue(obj.MemberLeaves);
                writer.WritePropertyName(PropName_member_invites);
                writer.WriteBooleanValue(obj.MemberInvites);
                writer.WritePropertyName(PropName_member_promotions);
                writer.WriteBooleanValue(obj.MemberPromotions);
                writer.WritePropertyName(PropName_member_restrictions);
                writer.WriteBooleanValue(obj.MemberRestrictions);
                writer.WritePropertyName(PropName_info_changes);
                writer.WriteBooleanValue(obj.InfoChanges);
                writer.WritePropertyName(PropName_setting_changes);
                writer.WriteBooleanValue(obj.SettingChanges);
            }
        }

        partial class LanguagePackStringValueOrdinaryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("languagePackStringValueOrdinary");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LanguagePackStringValueOrdinary)tlobj;
                writer.WritePropertyName(PropName_value);
                writer.WriteStringValue(obj.Value);
            }
        }

        partial class LanguagePackStringValuePluralizedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("languagePackStringValuePluralized");
            private static readonly JsonEncodedText PropName_zero_value = JsonEncodedText.Encode("zero_value");
            private static readonly JsonEncodedText PropName_one_value = JsonEncodedText.Encode("one_value");
            private static readonly JsonEncodedText PropName_two_value = JsonEncodedText.Encode("two_value");
            private static readonly JsonEncodedText PropName_few_value = JsonEncodedText.Encode("few_value");
            private static readonly JsonEncodedText PropName_many_value = JsonEncodedText.Encode("many_value");
            private static readonly JsonEncodedText PropName_other_value = JsonEncodedText.Encode("other_value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LanguagePackStringValuePluralized)tlobj;
                writer.WritePropertyName(PropName_zero_value);
                writer.WriteStringValue(obj.ZeroValue);
                writer.WritePropertyName(PropName_one_value);
                writer.WriteStringValue(obj.OneValue);
                writer.WritePropertyName(PropName_two_value);
                writer.WriteStringValue(obj.TwoValue);
                writer.WritePropertyName(PropName_few_value);
                writer.WriteStringValue(obj.FewValue);
                writer.WritePropertyName(PropName_many_value);
                writer.WriteStringValue(obj.ManyValue);
                writer.WritePropertyName(PropName_other_value);
                writer.WriteStringValue(obj.OtherValue);
            }
        }

        partial class LanguagePackStringValueDeletedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("languagePackStringValueDeleted");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class LanguagePackStringConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("languagePackString");
            private static readonly JsonEncodedText PropName_key = JsonEncodedText.Encode("key");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LanguagePackString)tlobj;
                writer.WritePropertyName(PropName_key);
                writer.WriteStringValue(obj.Key);
                if (obj.Value != null)
                {
                    writer.WritePropertyName(PropName_value);
                    writer.WriteTLObjectValue(obj.Value);
                }
            }
        }

        partial class LanguagePackStringsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("languagePackStrings");
            private static readonly JsonEncodedText PropName_strings = JsonEncodedText.Encode("strings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LanguagePackStrings)tlobj;
                if (obj.Strings != null)
                {
                    writer.WritePropertyName(PropName_strings);
                    writer.WriteArray(obj.Strings);
                }
            }
        }

        partial class LanguagePackInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("languagePackInfo");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_base_language_pack_id = JsonEncodedText.Encode("base_language_pack_id");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_native_name = JsonEncodedText.Encode("native_name");
            private static readonly JsonEncodedText PropName_plural_code = JsonEncodedText.Encode("plural_code");
            private static readonly JsonEncodedText PropName_is_official = JsonEncodedText.Encode("is_official");
            private static readonly JsonEncodedText PropName_is_rtl = JsonEncodedText.Encode("is_rtl");
            private static readonly JsonEncodedText PropName_is_beta = JsonEncodedText.Encode("is_beta");
            private static readonly JsonEncodedText PropName_is_installed = JsonEncodedText.Encode("is_installed");
            private static readonly JsonEncodedText PropName_total_string_count = JsonEncodedText.Encode("total_string_count");
            private static readonly JsonEncodedText PropName_translated_string_count = JsonEncodedText.Encode("translated_string_count");
            private static readonly JsonEncodedText PropName_local_string_count = JsonEncodedText.Encode("local_string_count");
            private static readonly JsonEncodedText PropName_translation_url = JsonEncodedText.Encode("translation_url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LanguagePackInfo)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteStringValue(obj.Id);
                writer.WritePropertyName(PropName_base_language_pack_id);
                writer.WriteStringValue(obj.BaseLanguagePackId);
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                writer.WritePropertyName(PropName_native_name);
                writer.WriteStringValue(obj.NativeName);
                writer.WritePropertyName(PropName_plural_code);
                writer.WriteStringValue(obj.PluralCode);
                writer.WritePropertyName(PropName_is_official);
                writer.WriteBooleanValue(obj.IsOfficial);
                writer.WritePropertyName(PropName_is_rtl);
                writer.WriteBooleanValue(obj.IsRtl);
                writer.WritePropertyName(PropName_is_beta);
                writer.WriteBooleanValue(obj.IsBeta);
                writer.WritePropertyName(PropName_is_installed);
                writer.WriteBooleanValue(obj.IsInstalled);
                writer.WritePropertyName(PropName_total_string_count);
                writer.WriteNumberValue(obj.TotalStringCount);
                writer.WritePropertyName(PropName_translated_string_count);
                writer.WriteNumberValue(obj.TranslatedStringCount);
                writer.WritePropertyName(PropName_local_string_count);
                writer.WriteNumberValue(obj.LocalStringCount);
                writer.WritePropertyName(PropName_translation_url);
                writer.WriteStringValue(obj.TranslationUrl);
            }
        }

        partial class LocalizationTargetInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("localizationTargetInfo");
            private static readonly JsonEncodedText PropName_language_packs = JsonEncodedText.Encode("language_packs");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LocalizationTargetInfo)tlobj;
                if (obj.LanguagePacks != null)
                {
                    writer.WritePropertyName(PropName_language_packs);
                    writer.WriteArray(obj.LanguagePacks);
                }
            }
        }

        partial class DeviceTokenFirebaseCloudMessagingConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenFirebaseCloudMessaging");
            private static readonly JsonEncodedText PropName_token = JsonEncodedText.Encode("token");
            private static readonly JsonEncodedText PropName_encrypt = JsonEncodedText.Encode("encrypt");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenFirebaseCloudMessaging)tlobj;
                writer.WritePropertyName(PropName_token);
                writer.WriteStringValue(obj.Token);
                writer.WritePropertyName(PropName_encrypt);
                writer.WriteBooleanValue(obj.Encrypt);
            }
        }

        partial class DeviceTokenApplePushConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenApplePush");
            private static readonly JsonEncodedText PropName_device_token = JsonEncodedText.Encode("device_token");
            private static readonly JsonEncodedText PropName_is_app_sandbox = JsonEncodedText.Encode("is_app_sandbox");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenApplePush)tlobj;
                writer.WritePropertyName(PropName_device_token);
                writer.WriteStringValue(obj.DeviceToken);
                writer.WritePropertyName(PropName_is_app_sandbox);
                writer.WriteBooleanValue(obj.IsAppSandbox);
            }
        }

        partial class DeviceTokenApplePushVoIPConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenApplePushVoIP");
            private static readonly JsonEncodedText PropName_device_token = JsonEncodedText.Encode("device_token");
            private static readonly JsonEncodedText PropName_is_app_sandbox = JsonEncodedText.Encode("is_app_sandbox");
            private static readonly JsonEncodedText PropName_encrypt = JsonEncodedText.Encode("encrypt");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenApplePushVoIP)tlobj;
                writer.WritePropertyName(PropName_device_token);
                writer.WriteStringValue(obj.DeviceToken);
                writer.WritePropertyName(PropName_is_app_sandbox);
                writer.WriteBooleanValue(obj.IsAppSandbox);
                writer.WritePropertyName(PropName_encrypt);
                writer.WriteBooleanValue(obj.Encrypt);
            }
        }

        partial class DeviceTokenWindowsPushConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenWindowsPush");
            private static readonly JsonEncodedText PropName_access_token = JsonEncodedText.Encode("access_token");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenWindowsPush)tlobj;
                writer.WritePropertyName(PropName_access_token);
                writer.WriteStringValue(obj.AccessToken);
            }
        }

        partial class DeviceTokenMicrosoftPushConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenMicrosoftPush");
            private static readonly JsonEncodedText PropName_channel_uri = JsonEncodedText.Encode("channel_uri");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenMicrosoftPush)tlobj;
                writer.WritePropertyName(PropName_channel_uri);
                writer.WriteStringValue(obj.ChannelUri);
            }
        }

        partial class DeviceTokenMicrosoftPushVoIPConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenMicrosoftPushVoIP");
            private static readonly JsonEncodedText PropName_channel_uri = JsonEncodedText.Encode("channel_uri");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenMicrosoftPushVoIP)tlobj;
                writer.WritePropertyName(PropName_channel_uri);
                writer.WriteStringValue(obj.ChannelUri);
            }
        }

        partial class DeviceTokenWebPushConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenWebPush");
            private static readonly JsonEncodedText PropName_endpoint = JsonEncodedText.Encode("endpoint");
            private static readonly JsonEncodedText PropName_p256dh_base64url = JsonEncodedText.Encode("p256dh_base64url");
            private static readonly JsonEncodedText PropName_auth_base64url = JsonEncodedText.Encode("auth_base64url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenWebPush)tlobj;
                writer.WritePropertyName(PropName_endpoint);
                writer.WriteStringValue(obj.Endpoint);
                writer.WritePropertyName(PropName_p256dh_base64url);
                writer.WriteStringValue(obj.P256dhBase64url);
                writer.WritePropertyName(PropName_auth_base64url);
                writer.WriteStringValue(obj.AuthBase64url);
            }
        }

        partial class DeviceTokenSimplePushConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenSimplePush");
            private static readonly JsonEncodedText PropName_endpoint = JsonEncodedText.Encode("endpoint");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenSimplePush)tlobj;
                writer.WritePropertyName(PropName_endpoint);
                writer.WriteStringValue(obj.Endpoint);
            }
        }

        partial class DeviceTokenUbuntuPushConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenUbuntuPush");
            private static readonly JsonEncodedText PropName_token = JsonEncodedText.Encode("token");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenUbuntuPush)tlobj;
                writer.WritePropertyName(PropName_token);
                writer.WriteStringValue(obj.Token);
            }
        }

        partial class DeviceTokenBlackBerryPushConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenBlackBerryPush");
            private static readonly JsonEncodedText PropName_token = JsonEncodedText.Encode("token");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenBlackBerryPush)tlobj;
                writer.WritePropertyName(PropName_token);
                writer.WriteStringValue(obj.Token);
            }
        }

        partial class DeviceTokenTizenPushConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deviceTokenTizenPush");
            private static readonly JsonEncodedText PropName_reg_id = JsonEncodedText.Encode("reg_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeviceTokenTizenPush)tlobj;
                writer.WritePropertyName(PropName_reg_id);
                writer.WriteStringValue(obj.RegId);
            }
        }

        partial class PushReceiverIdConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushReceiverId");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushReceiverId)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
            }
        }

        partial class BackgroundFillSolidConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("backgroundFillSolid");
            private static readonly JsonEncodedText PropName_color = JsonEncodedText.Encode("color");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BackgroundFillSolid)tlobj;
                writer.WritePropertyName(PropName_color);
                writer.WriteNumberValue(obj.Color);
            }
        }

        partial class BackgroundFillGradientConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("backgroundFillGradient");
            private static readonly JsonEncodedText PropName_top_color = JsonEncodedText.Encode("top_color");
            private static readonly JsonEncodedText PropName_bottom_color = JsonEncodedText.Encode("bottom_color");
            private static readonly JsonEncodedText PropName_rotation_angle = JsonEncodedText.Encode("rotation_angle");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BackgroundFillGradient)tlobj;
                writer.WritePropertyName(PropName_top_color);
                writer.WriteNumberValue(obj.TopColor);
                writer.WritePropertyName(PropName_bottom_color);
                writer.WriteNumberValue(obj.BottomColor);
                writer.WritePropertyName(PropName_rotation_angle);
                writer.WriteNumberValue(obj.RotationAngle);
            }
        }

        partial class BackgroundTypeWallpaperConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("backgroundTypeWallpaper");
            private static readonly JsonEncodedText PropName_is_blurred = JsonEncodedText.Encode("is_blurred");
            private static readonly JsonEncodedText PropName_is_moving = JsonEncodedText.Encode("is_moving");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BackgroundTypeWallpaper)tlobj;
                writer.WritePropertyName(PropName_is_blurred);
                writer.WriteBooleanValue(obj.IsBlurred);
                writer.WritePropertyName(PropName_is_moving);
                writer.WriteBooleanValue(obj.IsMoving);
            }
        }

        partial class BackgroundTypePatternConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("backgroundTypePattern");
            private static readonly JsonEncodedText PropName_fill = JsonEncodedText.Encode("fill");
            private static readonly JsonEncodedText PropName_intensity = JsonEncodedText.Encode("intensity");
            private static readonly JsonEncodedText PropName_is_moving = JsonEncodedText.Encode("is_moving");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BackgroundTypePattern)tlobj;
                if (obj.Fill != null)
                {
                    writer.WritePropertyName(PropName_fill);
                    writer.WriteTLObjectValue(obj.Fill);
                }
                writer.WritePropertyName(PropName_intensity);
                writer.WriteNumberValue(obj.Intensity);
                writer.WritePropertyName(PropName_is_moving);
                writer.WriteBooleanValue(obj.IsMoving);
            }
        }

        partial class BackgroundTypeFillConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("backgroundTypeFill");
            private static readonly JsonEncodedText PropName_fill = JsonEncodedText.Encode("fill");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BackgroundTypeFill)tlobj;
                if (obj.Fill != null)
                {
                    writer.WritePropertyName(PropName_fill);
                    writer.WriteTLObjectValue(obj.Fill);
                }
            }
        }

        partial class BackgroundConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("background");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_is_default = JsonEncodedText.Encode("is_default");
            private static readonly JsonEncodedText PropName_is_dark = JsonEncodedText.Encode("is_dark");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_document = JsonEncodedText.Encode("document");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Background)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_is_default);
                writer.WriteBooleanValue(obj.IsDefault);
                writer.WritePropertyName(PropName_is_dark);
                writer.WriteBooleanValue(obj.IsDark);
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                if (obj.Document != null)
                {
                    writer.WritePropertyName(PropName_document);
                    writer.WriteTLObjectValue(obj.Document);
                }
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class BackgroundsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("backgrounds");
            private static readonly JsonEncodedText PropName_backgrounds = JsonEncodedText.Encode("backgrounds");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Backgrounds)tlobj;
                if (obj.Backgrounds_ != null)
                {
                    writer.WritePropertyName(PropName_backgrounds);
                    writer.WriteArray(obj.Backgrounds_);
                }
            }
        }

        partial class InputBackgroundLocalConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputBackgroundLocal");
            private static readonly JsonEncodedText PropName_background = JsonEncodedText.Encode("background");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputBackgroundLocal)tlobj;
                if (obj.Background != null)
                {
                    writer.WritePropertyName(PropName_background);
                    writer.WriteTLObjectValue(obj.Background);
                }
            }
        }

        partial class InputBackgroundRemoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputBackgroundRemote");
            private static readonly JsonEncodedText PropName_background_id = JsonEncodedText.Encode("background_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputBackgroundRemote)tlobj;
                writer.WritePropertyName(PropName_background_id);
                writer.WriteInt64String(obj.BackgroundId);
            }
        }

        partial class HashtagsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("hashtags");
            private static readonly JsonEncodedText PropName_hashtags = JsonEncodedText.Encode("hashtags");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Hashtags)tlobj;
                if (obj.Hashtags_ != null)
                {
                    writer.WritePropertyName(PropName_hashtags);
                    writer.WriteArray(obj.Hashtags_);
                }
            }
        }

        partial class CanTransferOwnershipResultOkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("canTransferOwnershipResultOk");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CanTransferOwnershipResultPasswordNeededConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("canTransferOwnershipResultPasswordNeeded");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CanTransferOwnershipResultPasswordTooFreshConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("canTransferOwnershipResultPasswordTooFresh");
            private static readonly JsonEncodedText PropName_retry_after = JsonEncodedText.Encode("retry_after");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CanTransferOwnershipResultPasswordTooFresh)tlobj;
                writer.WritePropertyName(PropName_retry_after);
                writer.WriteNumberValue(obj.RetryAfter);
            }
        }

        partial class CanTransferOwnershipResultSessionTooFreshConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("canTransferOwnershipResultSessionTooFresh");
            private static readonly JsonEncodedText PropName_retry_after = JsonEncodedText.Encode("retry_after");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CanTransferOwnershipResultSessionTooFresh)tlobj;
                writer.WritePropertyName(PropName_retry_after);
                writer.WriteNumberValue(obj.RetryAfter);
            }
        }

        partial class CheckChatUsernameResultOkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkChatUsernameResultOk");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CheckChatUsernameResultUsernameInvalidConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkChatUsernameResultUsernameInvalid");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CheckChatUsernameResultUsernameOccupiedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkChatUsernameResultUsernameOccupied");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CheckChatUsernameResultPublicChatsTooMuchConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkChatUsernameResultPublicChatsTooMuch");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CheckChatUsernameResultPublicGroupsUnavailableConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkChatUsernameResultPublicGroupsUnavailable");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PushMessageContentHiddenConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentHidden");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentHidden)tlobj;
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentAnimation");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentAnimation)tlobj;
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
                writer.WritePropertyName(PropName_caption);
                writer.WriteStringValue(obj.Caption);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentAudioConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentAudio");
            private static readonly JsonEncodedText PropName_audio = JsonEncodedText.Encode("audio");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentAudio)tlobj;
                if (obj.Audio != null)
                {
                    writer.WritePropertyName(PropName_audio);
                    writer.WriteTLObjectValue(obj.Audio);
                }
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentContactConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentContact");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentContact)tlobj;
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentContactRegisteredConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentContactRegistered");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PushMessageContentDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentDocument");
            private static readonly JsonEncodedText PropName_document = JsonEncodedText.Encode("document");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentDocument)tlobj;
                if (obj.Document != null)
                {
                    writer.WritePropertyName(PropName_document);
                    writer.WriteTLObjectValue(obj.Document);
                }
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentGameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentGame");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentGame)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentGameScoreConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentGameScore");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_score = JsonEncodedText.Encode("score");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentGameScore)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_score);
                writer.WriteNumberValue(obj.Score);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentInvoiceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentInvoice");
            private static readonly JsonEncodedText PropName_price = JsonEncodedText.Encode("price");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentInvoice)tlobj;
                writer.WritePropertyName(PropName_price);
                writer.WriteStringValue(obj.Price);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentLocation");
            private static readonly JsonEncodedText PropName_is_live = JsonEncodedText.Encode("is_live");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentLocation)tlobj;
                writer.WritePropertyName(PropName_is_live);
                writer.WriteBooleanValue(obj.IsLive);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentPhoto");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_is_secret = JsonEncodedText.Encode("is_secret");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentPhoto)tlobj;
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
                writer.WritePropertyName(PropName_caption);
                writer.WriteStringValue(obj.Caption);
                writer.WritePropertyName(PropName_is_secret);
                writer.WriteBooleanValue(obj.IsSecret);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentPollConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentPoll");
            private static readonly JsonEncodedText PropName_question = JsonEncodedText.Encode("question");
            private static readonly JsonEncodedText PropName_is_regular = JsonEncodedText.Encode("is_regular");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentPoll)tlobj;
                writer.WritePropertyName(PropName_question);
                writer.WriteStringValue(obj.Question);
                writer.WritePropertyName(PropName_is_regular);
                writer.WriteBooleanValue(obj.IsRegular);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentScreenshotTakenConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentScreenshotTaken");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PushMessageContentStickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentSticker");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            private static readonly JsonEncodedText PropName_emoji = JsonEncodedText.Encode("emoji");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentSticker)tlobj;
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
                writer.WritePropertyName(PropName_emoji);
                writer.WriteStringValue(obj.Emoji);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentTextConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentText");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentText)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentVideo");
            private static readonly JsonEncodedText PropName_video = JsonEncodedText.Encode("video");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            private static readonly JsonEncodedText PropName_is_secret = JsonEncodedText.Encode("is_secret");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentVideo)tlobj;
                if (obj.Video != null)
                {
                    writer.WritePropertyName(PropName_video);
                    writer.WriteTLObjectValue(obj.Video);
                }
                writer.WritePropertyName(PropName_caption);
                writer.WriteStringValue(obj.Caption);
                writer.WritePropertyName(PropName_is_secret);
                writer.WriteBooleanValue(obj.IsSecret);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentVideoNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentVideoNote");
            private static readonly JsonEncodedText PropName_video_note = JsonEncodedText.Encode("video_note");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentVideoNote)tlobj;
                if (obj.VideoNote != null)
                {
                    writer.WritePropertyName(PropName_video_note);
                    writer.WriteTLObjectValue(obj.VideoNote);
                }
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentVoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentVoiceNote");
            private static readonly JsonEncodedText PropName_voice_note = JsonEncodedText.Encode("voice_note");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentVoiceNote)tlobj;
                if (obj.VoiceNote != null)
                {
                    writer.WritePropertyName(PropName_voice_note);
                    writer.WriteTLObjectValue(obj.VoiceNote);
                }
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class PushMessageContentBasicGroupChatCreateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentBasicGroupChatCreate");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PushMessageContentChatAddMembersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentChatAddMembers");
            private static readonly JsonEncodedText PropName_member_name = JsonEncodedText.Encode("member_name");
            private static readonly JsonEncodedText PropName_is_current_user = JsonEncodedText.Encode("is_current_user");
            private static readonly JsonEncodedText PropName_is_returned = JsonEncodedText.Encode("is_returned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentChatAddMembers)tlobj;
                writer.WritePropertyName(PropName_member_name);
                writer.WriteStringValue(obj.MemberName);
                writer.WritePropertyName(PropName_is_current_user);
                writer.WriteBooleanValue(obj.IsCurrentUser);
                writer.WritePropertyName(PropName_is_returned);
                writer.WriteBooleanValue(obj.IsReturned);
            }
        }

        partial class PushMessageContentChatChangePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentChatChangePhoto");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PushMessageContentChatChangeTitleConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentChatChangeTitle");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentChatChangeTitle)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
            }
        }

        partial class PushMessageContentChatDeleteMemberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentChatDeleteMember");
            private static readonly JsonEncodedText PropName_member_name = JsonEncodedText.Encode("member_name");
            private static readonly JsonEncodedText PropName_is_current_user = JsonEncodedText.Encode("is_current_user");
            private static readonly JsonEncodedText PropName_is_left = JsonEncodedText.Encode("is_left");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentChatDeleteMember)tlobj;
                writer.WritePropertyName(PropName_member_name);
                writer.WriteStringValue(obj.MemberName);
                writer.WritePropertyName(PropName_is_current_user);
                writer.WriteBooleanValue(obj.IsCurrentUser);
                writer.WritePropertyName(PropName_is_left);
                writer.WriteBooleanValue(obj.IsLeft);
            }
        }

        partial class PushMessageContentChatJoinByLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentChatJoinByLink");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class PushMessageContentMessageForwardsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentMessageForwards");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentMessageForwards)tlobj;
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
            }
        }

        partial class PushMessageContentMediaAlbumConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pushMessageContentMediaAlbum");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_has_photos = JsonEncodedText.Encode("has_photos");
            private static readonly JsonEncodedText PropName_has_videos = JsonEncodedText.Encode("has_videos");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PushMessageContentMediaAlbum)tlobj;
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                writer.WritePropertyName(PropName_has_photos);
                writer.WriteBooleanValue(obj.HasPhotos);
                writer.WritePropertyName(PropName_has_videos);
                writer.WriteBooleanValue(obj.HasVideos);
            }
        }

        partial class NotificationTypeNewMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationTypeNewMessage");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (NotificationTypeNewMessage)tlobj;
                if (obj.Message != null)
                {
                    writer.WritePropertyName(PropName_message);
                    writer.WriteTLObjectValue(obj.Message);
                }
            }
        }

        partial class NotificationTypeNewSecretChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationTypeNewSecretChat");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NotificationTypeNewCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationTypeNewCall");
            private static readonly JsonEncodedText PropName_call_id = JsonEncodedText.Encode("call_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (NotificationTypeNewCall)tlobj;
                writer.WritePropertyName(PropName_call_id);
                writer.WriteNumberValue(obj.CallId);
            }
        }

        partial class NotificationTypeNewPushMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationTypeNewPushMessage");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            private static readonly JsonEncodedText PropName_sender_chat_id = JsonEncodedText.Encode("sender_chat_id");
            private static readonly JsonEncodedText PropName_sender_name = JsonEncodedText.Encode("sender_name");
            private static readonly JsonEncodedText PropName_is_outgoing = JsonEncodedText.Encode("is_outgoing");
            private static readonly JsonEncodedText PropName_content = JsonEncodedText.Encode("content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (NotificationTypeNewPushMessage)tlobj;
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
                writer.WritePropertyName(PropName_sender_chat_id);
                writer.WriteNumberValue(obj.SenderChatId);
                writer.WritePropertyName(PropName_sender_name);
                writer.WriteStringValue(obj.SenderName);
                writer.WritePropertyName(PropName_is_outgoing);
                writer.WriteBooleanValue(obj.IsOutgoing);
                if (obj.Content != null)
                {
                    writer.WritePropertyName(PropName_content);
                    writer.WriteTLObjectValue(obj.Content);
                }
            }
        }

        partial class NotificationGroupTypeMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationGroupTypeMessages");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NotificationGroupTypeMentionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationGroupTypeMentions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NotificationGroupTypeSecretChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationGroupTypeSecretChat");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NotificationGroupTypeCallsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationGroupTypeCalls");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NotificationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notification");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_date = JsonEncodedText.Encode("date");
            private static readonly JsonEncodedText PropName_is_silent = JsonEncodedText.Encode("is_silent");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Notification)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_date);
                writer.WriteNumberValue(obj.Date);
                writer.WritePropertyName(PropName_is_silent);
                writer.WriteBooleanValue(obj.IsSilent);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class NotificationGroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("notificationGroup");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_notifications = JsonEncodedText.Encode("notifications");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (NotificationGroup)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                if (obj.Notifications != null)
                {
                    writer.WritePropertyName(PropName_notifications);
                    writer.WriteArray(obj.Notifications);
                }
            }
        }

        partial class OptionValueBooleanConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("optionValueBoolean");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (OptionValueBoolean)tlobj;
                writer.WritePropertyName(PropName_value);
                writer.WriteBooleanValue(obj.Value);
            }
        }

        partial class OptionValueEmptyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("optionValueEmpty");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class OptionValueIntegerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("optionValueInteger");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (OptionValueInteger)tlobj;
                writer.WritePropertyName(PropName_value);
                writer.WriteInt64String(obj.Value);
            }
        }

        partial class OptionValueStringConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("optionValueString");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (OptionValueString)tlobj;
                writer.WritePropertyName(PropName_value);
                writer.WriteStringValue(obj.Value);
            }
        }

        partial class JsonObjectMemberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("jsonObjectMember");
            private static readonly JsonEncodedText PropName_key = JsonEncodedText.Encode("key");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (JsonObjectMember)tlobj;
                writer.WritePropertyName(PropName_key);
                writer.WriteStringValue(obj.Key);
                if (obj.Value != null)
                {
                    writer.WritePropertyName(PropName_value);
                    writer.WriteTLObjectValue(obj.Value);
                }
            }
        }

        partial class JsonValueNullConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("jsonValueNull");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class JsonValueBooleanConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("jsonValueBoolean");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (JsonValueBoolean)tlobj;
                writer.WritePropertyName(PropName_value);
                writer.WriteBooleanValue(obj.Value);
            }
        }

        partial class JsonValueNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("jsonValueNumber");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (JsonValueNumber)tlobj;
                writer.WritePropertyName(PropName_value);
                writer.WriteNumberValue(obj.Value);
            }
        }

        partial class JsonValueStringConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("jsonValueString");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (JsonValueString)tlobj;
                writer.WritePropertyName(PropName_value);
                writer.WriteStringValue(obj.Value);
            }
        }

        partial class JsonValueArrayConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("jsonValueArray");
            private static readonly JsonEncodedText PropName_values = JsonEncodedText.Encode("values");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (JsonValueArray)tlobj;
                if (obj.Values != null)
                {
                    writer.WritePropertyName(PropName_values);
                    writer.WriteArray(obj.Values);
                }
            }
        }

        partial class JsonValueObjectConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("jsonValueObject");
            private static readonly JsonEncodedText PropName_members = JsonEncodedText.Encode("members");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (JsonValueObject)tlobj;
                if (obj.Members != null)
                {
                    writer.WritePropertyName(PropName_members);
                    writer.WriteArray(obj.Members);
                }
            }
        }

        partial class UserPrivacySettingRuleAllowAllConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleAllowAll");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingRuleAllowContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleAllowContacts");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingRuleAllowUsersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleAllowUsers");
            private static readonly JsonEncodedText PropName_user_ids = JsonEncodedText.Encode("user_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UserPrivacySettingRuleAllowUsers)tlobj;
                if (obj.UserIds != null)
                {
                    writer.WritePropertyName(PropName_user_ids);
                    writer.WriteArray(obj.UserIds);
                }
            }
        }

        partial class UserPrivacySettingRuleAllowChatMembersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleAllowChatMembers");
            private static readonly JsonEncodedText PropName_chat_ids = JsonEncodedText.Encode("chat_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UserPrivacySettingRuleAllowChatMembers)tlobj;
                if (obj.ChatIds != null)
                {
                    writer.WritePropertyName(PropName_chat_ids);
                    writer.WriteArray(obj.ChatIds);
                }
            }
        }

        partial class UserPrivacySettingRuleRestrictAllConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleRestrictAll");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingRuleRestrictContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleRestrictContacts");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingRuleRestrictUsersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleRestrictUsers");
            private static readonly JsonEncodedText PropName_user_ids = JsonEncodedText.Encode("user_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UserPrivacySettingRuleRestrictUsers)tlobj;
                if (obj.UserIds != null)
                {
                    writer.WritePropertyName(PropName_user_ids);
                    writer.WriteArray(obj.UserIds);
                }
            }
        }

        partial class UserPrivacySettingRuleRestrictChatMembersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingRuleRestrictChatMembers");
            private static readonly JsonEncodedText PropName_chat_ids = JsonEncodedText.Encode("chat_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UserPrivacySettingRuleRestrictChatMembers)tlobj;
                if (obj.ChatIds != null)
                {
                    writer.WritePropertyName(PropName_chat_ids);
                    writer.WriteArray(obj.ChatIds);
                }
            }
        }

        partial class UserPrivacySettingRulesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingRules");
            private static readonly JsonEncodedText PropName_rules = JsonEncodedText.Encode("rules");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UserPrivacySettingRules)tlobj;
                if (obj.Rules != null)
                {
                    writer.WritePropertyName(PropName_rules);
                    writer.WriteArray(obj.Rules);
                }
            }
        }

        partial class UserPrivacySettingShowStatusConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingShowStatus");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingShowProfilePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingShowProfilePhoto");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingShowLinkInForwardedMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingShowLinkInForwardedMessages");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingShowPhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingShowPhoneNumber");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingAllowChatInvitesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingAllowChatInvites");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingAllowCallsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingAllowCalls");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingAllowPeerToPeerCallsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingAllowPeerToPeerCalls");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class UserPrivacySettingAllowFindingByPhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("userPrivacySettingAllowFindingByPhoneNumber");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class AccountTtlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("accountTtl");
            private static readonly JsonEncodedText PropName_days = JsonEncodedText.Encode("days");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AccountTtl)tlobj;
                writer.WritePropertyName(PropName_days);
                writer.WriteNumberValue(obj.Days);
            }
        }

        partial class SessionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("session");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_is_current = JsonEncodedText.Encode("is_current");
            private static readonly JsonEncodedText PropName_is_password_pending = JsonEncodedText.Encode("is_password_pending");
            private static readonly JsonEncodedText PropName_api_id = JsonEncodedText.Encode("api_id");
            private static readonly JsonEncodedText PropName_application_name = JsonEncodedText.Encode("application_name");
            private static readonly JsonEncodedText PropName_application_version = JsonEncodedText.Encode("application_version");
            private static readonly JsonEncodedText PropName_is_official_application = JsonEncodedText.Encode("is_official_application");
            private static readonly JsonEncodedText PropName_device_model = JsonEncodedText.Encode("device_model");
            private static readonly JsonEncodedText PropName_platform = JsonEncodedText.Encode("platform");
            private static readonly JsonEncodedText PropName_system_version = JsonEncodedText.Encode("system_version");
            private static readonly JsonEncodedText PropName_log_in_date = JsonEncodedText.Encode("log_in_date");
            private static readonly JsonEncodedText PropName_last_active_date = JsonEncodedText.Encode("last_active_date");
            private static readonly JsonEncodedText PropName_ip = JsonEncodedText.Encode("ip");
            private static readonly JsonEncodedText PropName_country = JsonEncodedText.Encode("country");
            private static readonly JsonEncodedText PropName_region = JsonEncodedText.Encode("region");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Session)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_is_current);
                writer.WriteBooleanValue(obj.IsCurrent);
                writer.WritePropertyName(PropName_is_password_pending);
                writer.WriteBooleanValue(obj.IsPasswordPending);
                writer.WritePropertyName(PropName_api_id);
                writer.WriteNumberValue(obj.ApiId);
                writer.WritePropertyName(PropName_application_name);
                writer.WriteStringValue(obj.ApplicationName);
                writer.WritePropertyName(PropName_application_version);
                writer.WriteStringValue(obj.ApplicationVersion);
                writer.WritePropertyName(PropName_is_official_application);
                writer.WriteBooleanValue(obj.IsOfficialApplication);
                writer.WritePropertyName(PropName_device_model);
                writer.WriteStringValue(obj.DeviceModel);
                writer.WritePropertyName(PropName_platform);
                writer.WriteStringValue(obj.Platform);
                writer.WritePropertyName(PropName_system_version);
                writer.WriteStringValue(obj.SystemVersion);
                writer.WritePropertyName(PropName_log_in_date);
                writer.WriteNumberValue(obj.LogInDate);
                writer.WritePropertyName(PropName_last_active_date);
                writer.WriteNumberValue(obj.LastActiveDate);
                writer.WritePropertyName(PropName_ip);
                writer.WriteStringValue(obj.Ip);
                writer.WritePropertyName(PropName_country);
                writer.WriteStringValue(obj.Country);
                writer.WritePropertyName(PropName_region);
                writer.WriteStringValue(obj.Region);
            }
        }

        partial class SessionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sessions");
            private static readonly JsonEncodedText PropName_sessions = JsonEncodedText.Encode("sessions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Sessions)tlobj;
                if (obj.Sessions_ != null)
                {
                    writer.WritePropertyName(PropName_sessions);
                    writer.WriteArray(obj.Sessions_);
                }
            }
        }

        partial class ConnectedWebsiteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("connectedWebsite");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_domain_name = JsonEncodedText.Encode("domain_name");
            private static readonly JsonEncodedText PropName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
            private static readonly JsonEncodedText PropName_browser = JsonEncodedText.Encode("browser");
            private static readonly JsonEncodedText PropName_platform = JsonEncodedText.Encode("platform");
            private static readonly JsonEncodedText PropName_log_in_date = JsonEncodedText.Encode("log_in_date");
            private static readonly JsonEncodedText PropName_last_active_date = JsonEncodedText.Encode("last_active_date");
            private static readonly JsonEncodedText PropName_ip = JsonEncodedText.Encode("ip");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ConnectedWebsite)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_domain_name);
                writer.WriteStringValue(obj.DomainName);
                writer.WritePropertyName(PropName_bot_user_id);
                writer.WriteNumberValue(obj.BotUserId);
                writer.WritePropertyName(PropName_browser);
                writer.WriteStringValue(obj.Browser);
                writer.WritePropertyName(PropName_platform);
                writer.WriteStringValue(obj.Platform);
                writer.WritePropertyName(PropName_log_in_date);
                writer.WriteNumberValue(obj.LogInDate);
                writer.WritePropertyName(PropName_last_active_date);
                writer.WriteNumberValue(obj.LastActiveDate);
                writer.WritePropertyName(PropName_ip);
                writer.WriteStringValue(obj.Ip);
                writer.WritePropertyName(PropName_location);
                writer.WriteStringValue(obj.Location);
            }
        }

        partial class ConnectedWebsitesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("connectedWebsites");
            private static readonly JsonEncodedText PropName_websites = JsonEncodedText.Encode("websites");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ConnectedWebsites)tlobj;
                if (obj.Websites != null)
                {
                    writer.WritePropertyName(PropName_websites);
                    writer.WriteArray(obj.Websites);
                }
            }
        }

        partial class ChatReportReasonSpamConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatReportReasonSpam");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatReportReasonViolenceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatReportReasonViolence");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatReportReasonPornographyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatReportReasonPornography");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatReportReasonChildAbuseConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatReportReasonChildAbuse");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatReportReasonCopyrightConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatReportReasonCopyright");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatReportReasonUnrelatedLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatReportReasonUnrelatedLocation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChatReportReasonCustomConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatReportReasonCustom");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatReportReasonCustom)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
            }
        }

        partial class MessageLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageLink");
            private static readonly JsonEncodedText PropName_link = JsonEncodedText.Encode("link");
            private static readonly JsonEncodedText PropName_is_public = JsonEncodedText.Encode("is_public");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageLink)tlobj;
                writer.WritePropertyName(PropName_link);
                writer.WriteStringValue(obj.Link);
                writer.WritePropertyName(PropName_is_public);
                writer.WriteBooleanValue(obj.IsPublic);
            }
        }

        partial class MessageLinkInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageLinkInfo");
            private static readonly JsonEncodedText PropName_is_public = JsonEncodedText.Encode("is_public");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            private static readonly JsonEncodedText PropName_for_album = JsonEncodedText.Encode("for_album");
            private static readonly JsonEncodedText PropName_for_comment = JsonEncodedText.Encode("for_comment");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageLinkInfo)tlobj;
                writer.WritePropertyName(PropName_is_public);
                writer.WriteBooleanValue(obj.IsPublic);
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.Message != null)
                {
                    writer.WritePropertyName(PropName_message);
                    writer.WriteTLObjectValue(obj.Message);
                }
                writer.WritePropertyName(PropName_for_album);
                writer.WriteBooleanValue(obj.ForAlbum);
                writer.WritePropertyName(PropName_for_comment);
                writer.WriteBooleanValue(obj.ForComment);
            }
        }

        partial class FilePartConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("filePart");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (FilePart)tlobj;
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
            }
        }

        partial class FileTypeNoneConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeNone");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeAnimation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeAudioConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeAudio");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeDocumentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeDocument");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypePhoto");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeProfilePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeProfilePhoto");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeSecretConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeSecret");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeSecretThumbnailConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeSecretThumbnail");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeSecureConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeSecure");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeStickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeSticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeThumbnailConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeThumbnail");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeUnknownConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeUnknown");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeVideoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeVideo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeVideoNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeVideoNote");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeVoiceNoteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeVoiceNote");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class FileTypeWallpaperConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("fileTypeWallpaper");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class StorageStatisticsByFileTypeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("storageStatisticsByFileType");
            private static readonly JsonEncodedText PropName_file_type = JsonEncodedText.Encode("file_type");
            private static readonly JsonEncodedText PropName_size = JsonEncodedText.Encode("size");
            private static readonly JsonEncodedText PropName_count = JsonEncodedText.Encode("count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StorageStatisticsByFileType)tlobj;
                if (obj.FileType != null)
                {
                    writer.WritePropertyName(PropName_file_type);
                    writer.WriteTLObjectValue(obj.FileType);
                }
                writer.WritePropertyName(PropName_size);
                writer.WriteNumberValue(obj.Size);
                writer.WritePropertyName(PropName_count);
                writer.WriteNumberValue(obj.Count);
            }
        }

        partial class StorageStatisticsByChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("storageStatisticsByChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_size = JsonEncodedText.Encode("size");
            private static readonly JsonEncodedText PropName_count = JsonEncodedText.Encode("count");
            private static readonly JsonEncodedText PropName_by_file_type = JsonEncodedText.Encode("by_file_type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StorageStatisticsByChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_size);
                writer.WriteNumberValue(obj.Size);
                writer.WritePropertyName(PropName_count);
                writer.WriteNumberValue(obj.Count);
                if (obj.ByFileType != null)
                {
                    writer.WritePropertyName(PropName_by_file_type);
                    writer.WriteArray(obj.ByFileType);
                }
            }
        }

        partial class StorageStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("storageStatistics");
            private static readonly JsonEncodedText PropName_size = JsonEncodedText.Encode("size");
            private static readonly JsonEncodedText PropName_count = JsonEncodedText.Encode("count");
            private static readonly JsonEncodedText PropName_by_chat = JsonEncodedText.Encode("by_chat");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StorageStatistics)tlobj;
                writer.WritePropertyName(PropName_size);
                writer.WriteNumberValue(obj.Size);
                writer.WritePropertyName(PropName_count);
                writer.WriteNumberValue(obj.Count);
                if (obj.ByChat != null)
                {
                    writer.WritePropertyName(PropName_by_chat);
                    writer.WriteArray(obj.ByChat);
                }
            }
        }

        partial class StorageStatisticsFastConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("storageStatisticsFast");
            private static readonly JsonEncodedText PropName_files_size = JsonEncodedText.Encode("files_size");
            private static readonly JsonEncodedText PropName_file_count = JsonEncodedText.Encode("file_count");
            private static readonly JsonEncodedText PropName_database_size = JsonEncodedText.Encode("database_size");
            private static readonly JsonEncodedText PropName_language_pack_database_size = JsonEncodedText.Encode("language_pack_database_size");
            private static readonly JsonEncodedText PropName_log_size = JsonEncodedText.Encode("log_size");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StorageStatisticsFast)tlobj;
                writer.WritePropertyName(PropName_files_size);
                writer.WriteNumberValue(obj.FilesSize);
                writer.WritePropertyName(PropName_file_count);
                writer.WriteNumberValue(obj.FileCount);
                writer.WritePropertyName(PropName_database_size);
                writer.WriteNumberValue(obj.DatabaseSize);
                writer.WritePropertyName(PropName_language_pack_database_size);
                writer.WriteNumberValue(obj.LanguagePackDatabaseSize);
                writer.WritePropertyName(PropName_log_size);
                writer.WriteNumberValue(obj.LogSize);
            }
        }

        partial class DatabaseStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("databaseStatistics");
            private static readonly JsonEncodedText PropName_statistics = JsonEncodedText.Encode("statistics");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DatabaseStatistics)tlobj;
                writer.WritePropertyName(PropName_statistics);
                writer.WriteStringValue(obj.Statistics);
            }
        }

        partial class NetworkTypeNoneConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("networkTypeNone");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NetworkTypeMobileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("networkTypeMobile");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NetworkTypeMobileRoamingConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("networkTypeMobileRoaming");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NetworkTypeWiFiConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("networkTypeWiFi");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NetworkTypeOtherConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("networkTypeOther");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class NetworkStatisticsEntryFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("networkStatisticsEntryFile");
            private static readonly JsonEncodedText PropName_file_type = JsonEncodedText.Encode("file_type");
            private static readonly JsonEncodedText PropName_network_type = JsonEncodedText.Encode("network_type");
            private static readonly JsonEncodedText PropName_sent_bytes = JsonEncodedText.Encode("sent_bytes");
            private static readonly JsonEncodedText PropName_received_bytes = JsonEncodedText.Encode("received_bytes");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (NetworkStatisticsEntryFile)tlobj;
                if (obj.FileType != null)
                {
                    writer.WritePropertyName(PropName_file_type);
                    writer.WriteTLObjectValue(obj.FileType);
                }
                if (obj.NetworkType != null)
                {
                    writer.WritePropertyName(PropName_network_type);
                    writer.WriteTLObjectValue(obj.NetworkType);
                }
                writer.WritePropertyName(PropName_sent_bytes);
                writer.WriteNumberValue(obj.SentBytes);
                writer.WritePropertyName(PropName_received_bytes);
                writer.WriteNumberValue(obj.ReceivedBytes);
            }
        }

        partial class NetworkStatisticsEntryCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("networkStatisticsEntryCall");
            private static readonly JsonEncodedText PropName_network_type = JsonEncodedText.Encode("network_type");
            private static readonly JsonEncodedText PropName_sent_bytes = JsonEncodedText.Encode("sent_bytes");
            private static readonly JsonEncodedText PropName_received_bytes = JsonEncodedText.Encode("received_bytes");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (NetworkStatisticsEntryCall)tlobj;
                if (obj.NetworkType != null)
                {
                    writer.WritePropertyName(PropName_network_type);
                    writer.WriteTLObjectValue(obj.NetworkType);
                }
                writer.WritePropertyName(PropName_sent_bytes);
                writer.WriteNumberValue(obj.SentBytes);
                writer.WritePropertyName(PropName_received_bytes);
                writer.WriteNumberValue(obj.ReceivedBytes);
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
            }
        }

        partial class NetworkStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("networkStatistics");
            private static readonly JsonEncodedText PropName_since_date = JsonEncodedText.Encode("since_date");
            private static readonly JsonEncodedText PropName_entries = JsonEncodedText.Encode("entries");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (NetworkStatistics)tlobj;
                writer.WritePropertyName(PropName_since_date);
                writer.WriteNumberValue(obj.SinceDate);
                if (obj.Entries != null)
                {
                    writer.WritePropertyName(PropName_entries);
                    writer.WriteArray(obj.Entries);
                }
            }
        }

        partial class AutoDownloadSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("autoDownloadSettings");
            private static readonly JsonEncodedText PropName_is_auto_download_enabled = JsonEncodedText.Encode("is_auto_download_enabled");
            private static readonly JsonEncodedText PropName_max_photo_file_size = JsonEncodedText.Encode("max_photo_file_size");
            private static readonly JsonEncodedText PropName_max_video_file_size = JsonEncodedText.Encode("max_video_file_size");
            private static readonly JsonEncodedText PropName_max_other_file_size = JsonEncodedText.Encode("max_other_file_size");
            private static readonly JsonEncodedText PropName_video_upload_bitrate = JsonEncodedText.Encode("video_upload_bitrate");
            private static readonly JsonEncodedText PropName_preload_large_videos = JsonEncodedText.Encode("preload_large_videos");
            private static readonly JsonEncodedText PropName_preload_next_audio = JsonEncodedText.Encode("preload_next_audio");
            private static readonly JsonEncodedText PropName_use_less_data_for_calls = JsonEncodedText.Encode("use_less_data_for_calls");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AutoDownloadSettings)tlobj;
                writer.WritePropertyName(PropName_is_auto_download_enabled);
                writer.WriteBooleanValue(obj.IsAutoDownloadEnabled);
                writer.WritePropertyName(PropName_max_photo_file_size);
                writer.WriteNumberValue(obj.MaxPhotoFileSize);
                writer.WritePropertyName(PropName_max_video_file_size);
                writer.WriteNumberValue(obj.MaxVideoFileSize);
                writer.WritePropertyName(PropName_max_other_file_size);
                writer.WriteNumberValue(obj.MaxOtherFileSize);
                writer.WritePropertyName(PropName_video_upload_bitrate);
                writer.WriteNumberValue(obj.VideoUploadBitrate);
                writer.WritePropertyName(PropName_preload_large_videos);
                writer.WriteBooleanValue(obj.PreloadLargeVideos);
                writer.WritePropertyName(PropName_preload_next_audio);
                writer.WriteBooleanValue(obj.PreloadNextAudio);
                writer.WritePropertyName(PropName_use_less_data_for_calls);
                writer.WriteBooleanValue(obj.UseLessDataForCalls);
            }
        }

        partial class AutoDownloadSettingsPresetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("autoDownloadSettingsPresets");
            private static readonly JsonEncodedText PropName_low = JsonEncodedText.Encode("low");
            private static readonly JsonEncodedText PropName_medium = JsonEncodedText.Encode("medium");
            private static readonly JsonEncodedText PropName_high = JsonEncodedText.Encode("high");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AutoDownloadSettingsPresets)tlobj;
                if (obj.Low != null)
                {
                    writer.WritePropertyName(PropName_low);
                    writer.WriteTLObjectValue(obj.Low);
                }
                if (obj.Medium != null)
                {
                    writer.WritePropertyName(PropName_medium);
                    writer.WriteTLObjectValue(obj.Medium);
                }
                if (obj.High != null)
                {
                    writer.WritePropertyName(PropName_high);
                    writer.WriteTLObjectValue(obj.High);
                }
            }
        }

        partial class ConnectionStateWaitingForNetworkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("connectionStateWaitingForNetwork");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ConnectionStateConnectingToProxyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("connectionStateConnectingToProxy");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ConnectionStateConnectingConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("connectionStateConnecting");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ConnectionStateUpdatingConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("connectionStateUpdating");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ConnectionStateReadyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("connectionStateReady");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TopChatCategoryUsersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("topChatCategoryUsers");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TopChatCategoryBotsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("topChatCategoryBots");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TopChatCategoryGroupsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("topChatCategoryGroups");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TopChatCategoryChannelsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("topChatCategoryChannels");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TopChatCategoryInlineBotsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("topChatCategoryInlineBots");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TopChatCategoryCallsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("topChatCategoryCalls");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TopChatCategoryForwardChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("topChatCategoryForwardChats");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TMeUrlTypeUserConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("tMeUrlTypeUser");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TMeUrlTypeUser)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class TMeUrlTypeSupergroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("tMeUrlTypeSupergroup");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TMeUrlTypeSupergroup)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
            }
        }

        partial class TMeUrlTypeChatInviteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("tMeUrlTypeChatInvite");
            private static readonly JsonEncodedText PropName_info = JsonEncodedText.Encode("info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TMeUrlTypeChatInvite)tlobj;
                if (obj.Info != null)
                {
                    writer.WritePropertyName(PropName_info);
                    writer.WriteTLObjectValue(obj.Info);
                }
            }
        }

        partial class TMeUrlTypeStickerSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("tMeUrlTypeStickerSet");
            private static readonly JsonEncodedText PropName_sticker_set_id = JsonEncodedText.Encode("sticker_set_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TMeUrlTypeStickerSet)tlobj;
                writer.WritePropertyName(PropName_sticker_set_id);
                writer.WriteInt64String(obj.StickerSetId);
            }
        }

        partial class TMeUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("tMeUrl");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TMeUrl)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class TMeUrlsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("tMeUrls");
            private static readonly JsonEncodedText PropName_urls = JsonEncodedText.Encode("urls");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TMeUrls)tlobj;
                if (obj.Urls != null)
                {
                    writer.WritePropertyName(PropName_urls);
                    writer.WriteArray(obj.Urls);
                }
            }
        }

        partial class SuggestedActionEnableArchiveAndMuteNewChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("suggestedActionEnableArchiveAndMuteNewChats");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SuggestedActionCheckPhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("suggestedActionCheckPhoneNumber");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CountConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("count");
            private static readonly JsonEncodedText PropName_count = JsonEncodedText.Encode("count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Count)tlobj;
                writer.WritePropertyName(PropName_count);
                writer.WriteNumberValue(obj.Count_);
            }
        }

        partial class TextConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Text)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text_);
            }
        }

        partial class SecondsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("seconds");
            private static readonly JsonEncodedText PropName_seconds = JsonEncodedText.Encode("seconds");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Seconds)tlobj;
                writer.WritePropertyName(PropName_seconds);
                writer.WriteNumberValue(obj.Seconds_);
            }
        }

        partial class DeepLinkInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deepLinkInfo");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_need_update_application = JsonEncodedText.Encode("need_update_application");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeepLinkInfo)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
                writer.WritePropertyName(PropName_need_update_application);
                writer.WriteBooleanValue(obj.NeedUpdateApplication);
            }
        }

        partial class TextParseModeMarkdownConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textParseModeMarkdown");
            private static readonly JsonEncodedText PropName_version = JsonEncodedText.Encode("version");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TextParseModeMarkdown)tlobj;
                writer.WritePropertyName(PropName_version);
                writer.WriteNumberValue(obj.Version);
            }
        }

        partial class TextParseModeHTMLConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("textParseModeHTML");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ProxyTypeSocks5Converter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("proxyTypeSocks5");
            private static readonly JsonEncodedText PropName_username = JsonEncodedText.Encode("username");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ProxyTypeSocks5)tlobj;
                writer.WritePropertyName(PropName_username);
                writer.WriteStringValue(obj.Username);
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
            }
        }

        partial class ProxyTypeHttpConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("proxyTypeHttp");
            private static readonly JsonEncodedText PropName_username = JsonEncodedText.Encode("username");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            private static readonly JsonEncodedText PropName_http_only = JsonEncodedText.Encode("http_only");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ProxyTypeHttp)tlobj;
                writer.WritePropertyName(PropName_username);
                writer.WriteStringValue(obj.Username);
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
                writer.WritePropertyName(PropName_http_only);
                writer.WriteBooleanValue(obj.HttpOnly);
            }
        }

        partial class ProxyTypeMtprotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("proxyTypeMtproto");
            private static readonly JsonEncodedText PropName_secret = JsonEncodedText.Encode("secret");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ProxyTypeMtproto)tlobj;
                writer.WritePropertyName(PropName_secret);
                writer.WriteStringValue(obj.Secret);
            }
        }

        partial class ProxyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("proxy");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_server = JsonEncodedText.Encode("server");
            private static readonly JsonEncodedText PropName_port = JsonEncodedText.Encode("port");
            private static readonly JsonEncodedText PropName_last_used_date = JsonEncodedText.Encode("last_used_date");
            private static readonly JsonEncodedText PropName_is_enabled = JsonEncodedText.Encode("is_enabled");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Proxy)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteNumberValue(obj.Id);
                writer.WritePropertyName(PropName_server);
                writer.WriteStringValue(obj.Server);
                writer.WritePropertyName(PropName_port);
                writer.WriteNumberValue(obj.Port);
                writer.WritePropertyName(PropName_last_used_date);
                writer.WriteNumberValue(obj.LastUsedDate);
                writer.WritePropertyName(PropName_is_enabled);
                writer.WriteBooleanValue(obj.IsEnabled);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class ProxiesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("proxies");
            private static readonly JsonEncodedText PropName_proxies = JsonEncodedText.Encode("proxies");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Proxies)tlobj;
                if (obj.Proxies_ != null)
                {
                    writer.WritePropertyName(PropName_proxies);
                    writer.WriteArray(obj.Proxies_);
                }
            }
        }

        partial class InputStickerStaticConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputStickerStatic");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            private static readonly JsonEncodedText PropName_emojis = JsonEncodedText.Encode("emojis");
            private static readonly JsonEncodedText PropName_mask_position = JsonEncodedText.Encode("mask_position");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputStickerStatic)tlobj;
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
                writer.WritePropertyName(PropName_emojis);
                writer.WriteStringValue(obj.Emojis);
                if (obj.MaskPosition != null)
                {
                    writer.WritePropertyName(PropName_mask_position);
                    writer.WriteTLObjectValue(obj.MaskPosition);
                }
            }
        }

        partial class InputStickerAnimatedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("inputStickerAnimated");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            private static readonly JsonEncodedText PropName_emojis = JsonEncodedText.Encode("emojis");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (InputStickerAnimated)tlobj;
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
                writer.WritePropertyName(PropName_emojis);
                writer.WriteStringValue(obj.Emojis);
            }
        }

        partial class DateRangeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("dateRange");
            private static readonly JsonEncodedText PropName_start_date = JsonEncodedText.Encode("start_date");
            private static readonly JsonEncodedText PropName_end_date = JsonEncodedText.Encode("end_date");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DateRange)tlobj;
                writer.WritePropertyName(PropName_start_date);
                writer.WriteNumberValue(obj.StartDate);
                writer.WritePropertyName(PropName_end_date);
                writer.WriteNumberValue(obj.EndDate);
            }
        }

        partial class StatisticsValueConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("statisticsValue");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            private static readonly JsonEncodedText PropName_previous_value = JsonEncodedText.Encode("previous_value");
            private static readonly JsonEncodedText PropName_growth_rate_percentage = JsonEncodedText.Encode("growth_rate_percentage");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StatisticsValue)tlobj;
                writer.WritePropertyName(PropName_value);
                writer.WriteNumberValue(obj.Value);
                writer.WritePropertyName(PropName_previous_value);
                writer.WriteNumberValue(obj.PreviousValue);
                writer.WritePropertyName(PropName_growth_rate_percentage);
                writer.WriteNumberValue(obj.GrowthRatePercentage);
            }
        }

        partial class StatisticsGraphDataConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("statisticsGraphData");
            private static readonly JsonEncodedText PropName_json_data = JsonEncodedText.Encode("json_data");
            private static readonly JsonEncodedText PropName_zoom_token = JsonEncodedText.Encode("zoom_token");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StatisticsGraphData)tlobj;
                writer.WritePropertyName(PropName_json_data);
                writer.WriteStringValue(obj.JsonData);
                writer.WritePropertyName(PropName_zoom_token);
                writer.WriteStringValue(obj.ZoomToken);
            }
        }

        partial class StatisticsGraphAsyncConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("statisticsGraphAsync");
            private static readonly JsonEncodedText PropName_token = JsonEncodedText.Encode("token");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StatisticsGraphAsync)tlobj;
                writer.WritePropertyName(PropName_token);
                writer.WriteStringValue(obj.Token);
            }
        }

        partial class StatisticsGraphErrorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("statisticsGraphError");
            private static readonly JsonEncodedText PropName_error_message = JsonEncodedText.Encode("error_message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StatisticsGraphError)tlobj;
                writer.WritePropertyName(PropName_error_message);
                writer.WriteStringValue(obj.ErrorMessage);
            }
        }

        partial class ChatStatisticsMessageInteractionInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatStatisticsMessageInteractionInfo");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_view_count = JsonEncodedText.Encode("view_count");
            private static readonly JsonEncodedText PropName_forward_count = JsonEncodedText.Encode("forward_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatStatisticsMessageInteractionInfo)tlobj;
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_view_count);
                writer.WriteNumberValue(obj.ViewCount);
                writer.WritePropertyName(PropName_forward_count);
                writer.WriteNumberValue(obj.ForwardCount);
            }
        }

        partial class ChatStatisticsMessageSenderInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatStatisticsMessageSenderInfo");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_sent_message_count = JsonEncodedText.Encode("sent_message_count");
            private static readonly JsonEncodedText PropName_average_character_count = JsonEncodedText.Encode("average_character_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatStatisticsMessageSenderInfo)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_sent_message_count);
                writer.WriteNumberValue(obj.SentMessageCount);
                writer.WritePropertyName(PropName_average_character_count);
                writer.WriteNumberValue(obj.AverageCharacterCount);
            }
        }

        partial class ChatStatisticsAdministratorActionsInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatStatisticsAdministratorActionsInfo");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_deleted_message_count = JsonEncodedText.Encode("deleted_message_count");
            private static readonly JsonEncodedText PropName_banned_user_count = JsonEncodedText.Encode("banned_user_count");
            private static readonly JsonEncodedText PropName_restricted_user_count = JsonEncodedText.Encode("restricted_user_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatStatisticsAdministratorActionsInfo)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_deleted_message_count);
                writer.WriteNumberValue(obj.DeletedMessageCount);
                writer.WritePropertyName(PropName_banned_user_count);
                writer.WriteNumberValue(obj.BannedUserCount);
                writer.WritePropertyName(PropName_restricted_user_count);
                writer.WriteNumberValue(obj.RestrictedUserCount);
            }
        }

        partial class ChatStatisticsInviterInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatStatisticsInviterInfo");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_added_member_count = JsonEncodedText.Encode("added_member_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatStatisticsInviterInfo)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_added_member_count);
                writer.WriteNumberValue(obj.AddedMemberCount);
            }
        }

        partial class ChatStatisticsSupergroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatStatisticsSupergroup");
            private static readonly JsonEncodedText PropName_period = JsonEncodedText.Encode("period");
            private static readonly JsonEncodedText PropName_member_count = JsonEncodedText.Encode("member_count");
            private static readonly JsonEncodedText PropName_message_count = JsonEncodedText.Encode("message_count");
            private static readonly JsonEncodedText PropName_viewer_count = JsonEncodedText.Encode("viewer_count");
            private static readonly JsonEncodedText PropName_sender_count = JsonEncodedText.Encode("sender_count");
            private static readonly JsonEncodedText PropName_member_count_graph = JsonEncodedText.Encode("member_count_graph");
            private static readonly JsonEncodedText PropName_join_graph = JsonEncodedText.Encode("join_graph");
            private static readonly JsonEncodedText PropName_join_by_source_graph = JsonEncodedText.Encode("join_by_source_graph");
            private static readonly JsonEncodedText PropName_language_graph = JsonEncodedText.Encode("language_graph");
            private static readonly JsonEncodedText PropName_message_content_graph = JsonEncodedText.Encode("message_content_graph");
            private static readonly JsonEncodedText PropName_action_graph = JsonEncodedText.Encode("action_graph");
            private static readonly JsonEncodedText PropName_day_graph = JsonEncodedText.Encode("day_graph");
            private static readonly JsonEncodedText PropName_week_graph = JsonEncodedText.Encode("week_graph");
            private static readonly JsonEncodedText PropName_top_senders = JsonEncodedText.Encode("top_senders");
            private static readonly JsonEncodedText PropName_top_administrators = JsonEncodedText.Encode("top_administrators");
            private static readonly JsonEncodedText PropName_top_inviters = JsonEncodedText.Encode("top_inviters");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatStatisticsSupergroup)tlobj;
                if (obj.Period != null)
                {
                    writer.WritePropertyName(PropName_period);
                    writer.WriteTLObjectValue(obj.Period);
                }
                if (obj.MemberCount != null)
                {
                    writer.WritePropertyName(PropName_member_count);
                    writer.WriteTLObjectValue(obj.MemberCount);
                }
                if (obj.MessageCount != null)
                {
                    writer.WritePropertyName(PropName_message_count);
                    writer.WriteTLObjectValue(obj.MessageCount);
                }
                if (obj.ViewerCount != null)
                {
                    writer.WritePropertyName(PropName_viewer_count);
                    writer.WriteTLObjectValue(obj.ViewerCount);
                }
                if (obj.SenderCount != null)
                {
                    writer.WritePropertyName(PropName_sender_count);
                    writer.WriteTLObjectValue(obj.SenderCount);
                }
                if (obj.MemberCountGraph != null)
                {
                    writer.WritePropertyName(PropName_member_count_graph);
                    writer.WriteTLObjectValue(obj.MemberCountGraph);
                }
                if (obj.JoinGraph != null)
                {
                    writer.WritePropertyName(PropName_join_graph);
                    writer.WriteTLObjectValue(obj.JoinGraph);
                }
                if (obj.JoinBySourceGraph != null)
                {
                    writer.WritePropertyName(PropName_join_by_source_graph);
                    writer.WriteTLObjectValue(obj.JoinBySourceGraph);
                }
                if (obj.LanguageGraph != null)
                {
                    writer.WritePropertyName(PropName_language_graph);
                    writer.WriteTLObjectValue(obj.LanguageGraph);
                }
                if (obj.MessageContentGraph != null)
                {
                    writer.WritePropertyName(PropName_message_content_graph);
                    writer.WriteTLObjectValue(obj.MessageContentGraph);
                }
                if (obj.ActionGraph != null)
                {
                    writer.WritePropertyName(PropName_action_graph);
                    writer.WriteTLObjectValue(obj.ActionGraph);
                }
                if (obj.DayGraph != null)
                {
                    writer.WritePropertyName(PropName_day_graph);
                    writer.WriteTLObjectValue(obj.DayGraph);
                }
                if (obj.WeekGraph != null)
                {
                    writer.WritePropertyName(PropName_week_graph);
                    writer.WriteTLObjectValue(obj.WeekGraph);
                }
                if (obj.TopSenders != null)
                {
                    writer.WritePropertyName(PropName_top_senders);
                    writer.WriteArray(obj.TopSenders);
                }
                if (obj.TopAdministrators != null)
                {
                    writer.WritePropertyName(PropName_top_administrators);
                    writer.WriteArray(obj.TopAdministrators);
                }
                if (obj.TopInviters != null)
                {
                    writer.WritePropertyName(PropName_top_inviters);
                    writer.WriteArray(obj.TopInviters);
                }
            }
        }

        partial class ChatStatisticsChannelConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("chatStatisticsChannel");
            private static readonly JsonEncodedText PropName_period = JsonEncodedText.Encode("period");
            private static readonly JsonEncodedText PropName_member_count = JsonEncodedText.Encode("member_count");
            private static readonly JsonEncodedText PropName_mean_view_count = JsonEncodedText.Encode("mean_view_count");
            private static readonly JsonEncodedText PropName_mean_share_count = JsonEncodedText.Encode("mean_share_count");
            private static readonly JsonEncodedText PropName_enabled_notifications_percentage = JsonEncodedText.Encode("enabled_notifications_percentage");
            private static readonly JsonEncodedText PropName_member_count_graph = JsonEncodedText.Encode("member_count_graph");
            private static readonly JsonEncodedText PropName_join_graph = JsonEncodedText.Encode("join_graph");
            private static readonly JsonEncodedText PropName_mute_graph = JsonEncodedText.Encode("mute_graph");
            private static readonly JsonEncodedText PropName_view_count_by_hour_graph = JsonEncodedText.Encode("view_count_by_hour_graph");
            private static readonly JsonEncodedText PropName_view_count_by_source_graph = JsonEncodedText.Encode("view_count_by_source_graph");
            private static readonly JsonEncodedText PropName_join_by_source_graph = JsonEncodedText.Encode("join_by_source_graph");
            private static readonly JsonEncodedText PropName_language_graph = JsonEncodedText.Encode("language_graph");
            private static readonly JsonEncodedText PropName_message_interaction_graph = JsonEncodedText.Encode("message_interaction_graph");
            private static readonly JsonEncodedText PropName_instant_view_interaction_graph = JsonEncodedText.Encode("instant_view_interaction_graph");
            private static readonly JsonEncodedText PropName_recent_message_interactions = JsonEncodedText.Encode("recent_message_interactions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChatStatisticsChannel)tlobj;
                if (obj.Period != null)
                {
                    writer.WritePropertyName(PropName_period);
                    writer.WriteTLObjectValue(obj.Period);
                }
                if (obj.MemberCount != null)
                {
                    writer.WritePropertyName(PropName_member_count);
                    writer.WriteTLObjectValue(obj.MemberCount);
                }
                if (obj.MeanViewCount != null)
                {
                    writer.WritePropertyName(PropName_mean_view_count);
                    writer.WriteTLObjectValue(obj.MeanViewCount);
                }
                if (obj.MeanShareCount != null)
                {
                    writer.WritePropertyName(PropName_mean_share_count);
                    writer.WriteTLObjectValue(obj.MeanShareCount);
                }
                writer.WritePropertyName(PropName_enabled_notifications_percentage);
                writer.WriteNumberValue(obj.EnabledNotificationsPercentage);
                if (obj.MemberCountGraph != null)
                {
                    writer.WritePropertyName(PropName_member_count_graph);
                    writer.WriteTLObjectValue(obj.MemberCountGraph);
                }
                if (obj.JoinGraph != null)
                {
                    writer.WritePropertyName(PropName_join_graph);
                    writer.WriteTLObjectValue(obj.JoinGraph);
                }
                if (obj.MuteGraph != null)
                {
                    writer.WritePropertyName(PropName_mute_graph);
                    writer.WriteTLObjectValue(obj.MuteGraph);
                }
                if (obj.ViewCountByHourGraph != null)
                {
                    writer.WritePropertyName(PropName_view_count_by_hour_graph);
                    writer.WriteTLObjectValue(obj.ViewCountByHourGraph);
                }
                if (obj.ViewCountBySourceGraph != null)
                {
                    writer.WritePropertyName(PropName_view_count_by_source_graph);
                    writer.WriteTLObjectValue(obj.ViewCountBySourceGraph);
                }
                if (obj.JoinBySourceGraph != null)
                {
                    writer.WritePropertyName(PropName_join_by_source_graph);
                    writer.WriteTLObjectValue(obj.JoinBySourceGraph);
                }
                if (obj.LanguageGraph != null)
                {
                    writer.WritePropertyName(PropName_language_graph);
                    writer.WriteTLObjectValue(obj.LanguageGraph);
                }
                if (obj.MessageInteractionGraph != null)
                {
                    writer.WritePropertyName(PropName_message_interaction_graph);
                    writer.WriteTLObjectValue(obj.MessageInteractionGraph);
                }
                if (obj.InstantViewInteractionGraph != null)
                {
                    writer.WritePropertyName(PropName_instant_view_interaction_graph);
                    writer.WriteTLObjectValue(obj.InstantViewInteractionGraph);
                }
                if (obj.RecentMessageInteractions != null)
                {
                    writer.WritePropertyName(PropName_recent_message_interactions);
                    writer.WriteArray(obj.RecentMessageInteractions);
                }
            }
        }

        partial class MessageStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("messageStatistics");
            private static readonly JsonEncodedText PropName_message_interaction_graph = JsonEncodedText.Encode("message_interaction_graph");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (MessageStatistics)tlobj;
                if (obj.MessageInteractionGraph != null)
                {
                    writer.WritePropertyName(PropName_message_interaction_graph);
                    writer.WriteTLObjectValue(obj.MessageInteractionGraph);
                }
            }
        }

        partial class UpdateAuthorizationStateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateAuthorizationState");
            private static readonly JsonEncodedText PropName_authorization_state = JsonEncodedText.Encode("authorization_state");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateAuthorizationState)tlobj;
                if (obj.AuthorizationState != null)
                {
                    writer.WritePropertyName(PropName_authorization_state);
                    writer.WriteTLObjectValue(obj.AuthorizationState);
                }
            }
        }

        partial class UpdateNewMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewMessage");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewMessage)tlobj;
                if (obj.Message != null)
                {
                    writer.WritePropertyName(PropName_message);
                    writer.WriteTLObjectValue(obj.Message);
                }
            }
        }

        partial class UpdateMessageSendAcknowledgedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateMessageSendAcknowledged");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateMessageSendAcknowledged)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class UpdateMessageSendSucceededConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateMessageSendSucceeded");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            private static readonly JsonEncodedText PropName_old_message_id = JsonEncodedText.Encode("old_message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateMessageSendSucceeded)tlobj;
                if (obj.Message != null)
                {
                    writer.WritePropertyName(PropName_message);
                    writer.WriteTLObjectValue(obj.Message);
                }
                writer.WritePropertyName(PropName_old_message_id);
                writer.WriteNumberValue(obj.OldMessageId);
            }
        }

        partial class UpdateMessageSendFailedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateMessageSendFailed");
            private static readonly JsonEncodedText PropName_message = JsonEncodedText.Encode("message");
            private static readonly JsonEncodedText PropName_old_message_id = JsonEncodedText.Encode("old_message_id");
            private static readonly JsonEncodedText PropName_error_code = JsonEncodedText.Encode("error_code");
            private static readonly JsonEncodedText PropName_error_message = JsonEncodedText.Encode("error_message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateMessageSendFailed)tlobj;
                if (obj.Message != null)
                {
                    writer.WritePropertyName(PropName_message);
                    writer.WriteTLObjectValue(obj.Message);
                }
                writer.WritePropertyName(PropName_old_message_id);
                writer.WriteNumberValue(obj.OldMessageId);
                writer.WritePropertyName(PropName_error_code);
                writer.WriteNumberValue(obj.ErrorCode);
                writer.WritePropertyName(PropName_error_message);
                writer.WriteStringValue(obj.ErrorMessage);
            }
        }

        partial class UpdateMessageContentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateMessageContent");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_new_content = JsonEncodedText.Encode("new_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateMessageContent)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.NewContent != null)
                {
                    writer.WritePropertyName(PropName_new_content);
                    writer.WriteTLObjectValue(obj.NewContent);
                }
            }
        }

        partial class UpdateMessageEditedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateMessageEdited");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_edit_date = JsonEncodedText.Encode("edit_date");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateMessageEdited)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_edit_date);
                writer.WriteNumberValue(obj.EditDate);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
            }
        }

        partial class UpdateMessageInteractionInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateMessageInteractionInfo");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_interaction_info = JsonEncodedText.Encode("interaction_info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateMessageInteractionInfo)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.InteractionInfo != null)
                {
                    writer.WritePropertyName(PropName_interaction_info);
                    writer.WriteTLObjectValue(obj.InteractionInfo);
                }
            }
        }

        partial class UpdateMessageContentOpenedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateMessageContentOpened");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateMessageContentOpened)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class UpdateMessageMentionReadConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateMessageMentionRead");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_unread_mention_count = JsonEncodedText.Encode("unread_mention_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateMessageMentionRead)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_unread_mention_count);
                writer.WriteNumberValue(obj.UnreadMentionCount);
            }
        }

        partial class UpdateMessageLiveLocationViewedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateMessageLiveLocationViewed");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateMessageLiveLocationViewed)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class UpdateNewChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewChat");
            private static readonly JsonEncodedText PropName_chat = JsonEncodedText.Encode("chat");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewChat)tlobj;
                if (obj.Chat != null)
                {
                    writer.WritePropertyName(PropName_chat);
                    writer.WriteTLObjectValue(obj.Chat);
                }
            }
        }

        partial class UpdateChatTitleConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatTitle");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatTitle)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
            }
        }

        partial class UpdateChatPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatPhoto");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatPhoto)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
            }
        }

        partial class UpdateChatPermissionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatPermissions");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_permissions = JsonEncodedText.Encode("permissions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatPermissions)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.Permissions != null)
                {
                    writer.WritePropertyName(PropName_permissions);
                    writer.WriteTLObjectValue(obj.Permissions);
                }
            }
        }

        partial class UpdateChatLastMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatLastMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_last_message = JsonEncodedText.Encode("last_message");
            private static readonly JsonEncodedText PropName_positions = JsonEncodedText.Encode("positions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatLastMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.LastMessage != null)
                {
                    writer.WritePropertyName(PropName_last_message);
                    writer.WriteTLObjectValue(obj.LastMessage);
                }
                if (obj.Positions != null)
                {
                    writer.WritePropertyName(PropName_positions);
                    writer.WriteArray(obj.Positions);
                }
            }
        }

        partial class UpdateChatPositionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatPosition");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_position = JsonEncodedText.Encode("position");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatPosition)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.Position != null)
                {
                    writer.WritePropertyName(PropName_position);
                    writer.WriteTLObjectValue(obj.Position);
                }
            }
        }

        partial class UpdateChatIsMarkedAsUnreadConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatIsMarkedAsUnread");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_is_marked_as_unread = JsonEncodedText.Encode("is_marked_as_unread");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatIsMarkedAsUnread)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_is_marked_as_unread);
                writer.WriteBooleanValue(obj.IsMarkedAsUnread);
            }
        }

        partial class UpdateChatIsBlockedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatIsBlocked");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_is_blocked = JsonEncodedText.Encode("is_blocked");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatIsBlocked)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_is_blocked);
                writer.WriteBooleanValue(obj.IsBlocked);
            }
        }

        partial class UpdateChatHasScheduledMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatHasScheduledMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_has_scheduled_messages = JsonEncodedText.Encode("has_scheduled_messages");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatHasScheduledMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_has_scheduled_messages);
                writer.WriteBooleanValue(obj.HasScheduledMessages);
            }
        }

        partial class UpdateChatDefaultDisableNotificationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatDefaultDisableNotification");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_default_disable_notification = JsonEncodedText.Encode("default_disable_notification");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatDefaultDisableNotification)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_default_disable_notification);
                writer.WriteBooleanValue(obj.DefaultDisableNotification);
            }
        }

        partial class UpdateChatReadInboxConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatReadInbox");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_last_read_inbox_message_id = JsonEncodedText.Encode("last_read_inbox_message_id");
            private static readonly JsonEncodedText PropName_unread_count = JsonEncodedText.Encode("unread_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatReadInbox)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_last_read_inbox_message_id);
                writer.WriteNumberValue(obj.LastReadInboxMessageId);
                writer.WritePropertyName(PropName_unread_count);
                writer.WriteNumberValue(obj.UnreadCount);
            }
        }

        partial class UpdateChatReadOutboxConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatReadOutbox");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_last_read_outbox_message_id = JsonEncodedText.Encode("last_read_outbox_message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatReadOutbox)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_last_read_outbox_message_id);
                writer.WriteNumberValue(obj.LastReadOutboxMessageId);
            }
        }

        partial class UpdateChatUnreadMentionCountConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatUnreadMentionCount");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_unread_mention_count = JsonEncodedText.Encode("unread_mention_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatUnreadMentionCount)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_unread_mention_count);
                writer.WriteNumberValue(obj.UnreadMentionCount);
            }
        }

        partial class UpdateChatNotificationSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatNotificationSettings");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_notification_settings = JsonEncodedText.Encode("notification_settings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatNotificationSettings)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.NotificationSettings != null)
                {
                    writer.WritePropertyName(PropName_notification_settings);
                    writer.WriteTLObjectValue(obj.NotificationSettings);
                }
            }
        }

        partial class UpdateScopeNotificationSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateScopeNotificationSettings");
            private static readonly JsonEncodedText PropName_scope = JsonEncodedText.Encode("scope");
            private static readonly JsonEncodedText PropName_notification_settings = JsonEncodedText.Encode("notification_settings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateScopeNotificationSettings)tlobj;
                if (obj.Scope != null)
                {
                    writer.WritePropertyName(PropName_scope);
                    writer.WriteTLObjectValue(obj.Scope);
                }
                if (obj.NotificationSettings != null)
                {
                    writer.WritePropertyName(PropName_notification_settings);
                    writer.WriteTLObjectValue(obj.NotificationSettings);
                }
            }
        }

        partial class UpdateChatActionBarConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatActionBar");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_action_bar = JsonEncodedText.Encode("action_bar");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatActionBar)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.ActionBar != null)
                {
                    writer.WritePropertyName(PropName_action_bar);
                    writer.WriteTLObjectValue(obj.ActionBar);
                }
            }
        }

        partial class UpdateChatPinnedMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatPinnedMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_pinned_message_id = JsonEncodedText.Encode("pinned_message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatPinnedMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_pinned_message_id);
                writer.WriteNumberValue(obj.PinnedMessageId);
            }
        }

        partial class UpdateChatReplyMarkupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatReplyMarkup");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_reply_markup_message_id = JsonEncodedText.Encode("reply_markup_message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatReplyMarkup)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_reply_markup_message_id);
                writer.WriteNumberValue(obj.ReplyMarkupMessageId);
            }
        }

        partial class UpdateChatDraftMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatDraftMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_draft_message = JsonEncodedText.Encode("draft_message");
            private static readonly JsonEncodedText PropName_positions = JsonEncodedText.Encode("positions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatDraftMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.DraftMessage != null)
                {
                    writer.WritePropertyName(PropName_draft_message);
                    writer.WriteTLObjectValue(obj.DraftMessage);
                }
                if (obj.Positions != null)
                {
                    writer.WritePropertyName(PropName_positions);
                    writer.WriteArray(obj.Positions);
                }
            }
        }

        partial class UpdateChatFiltersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatFilters");
            private static readonly JsonEncodedText PropName_chat_filters = JsonEncodedText.Encode("chat_filters");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatFilters)tlobj;
                if (obj.ChatFilters != null)
                {
                    writer.WritePropertyName(PropName_chat_filters);
                    writer.WriteArray(obj.ChatFilters);
                }
            }
        }

        partial class UpdateChatOnlineMemberCountConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateChatOnlineMemberCount");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_online_member_count = JsonEncodedText.Encode("online_member_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateChatOnlineMemberCount)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_online_member_count);
                writer.WriteNumberValue(obj.OnlineMemberCount);
            }
        }

        partial class UpdateNotificationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNotification");
            private static readonly JsonEncodedText PropName_notification_group_id = JsonEncodedText.Encode("notification_group_id");
            private static readonly JsonEncodedText PropName_notification = JsonEncodedText.Encode("notification");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNotification)tlobj;
                writer.WritePropertyName(PropName_notification_group_id);
                writer.WriteNumberValue(obj.NotificationGroupId);
                if (obj.Notification != null)
                {
                    writer.WritePropertyName(PropName_notification);
                    writer.WriteTLObjectValue(obj.Notification);
                }
            }
        }

        partial class UpdateNotificationGroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNotificationGroup");
            private static readonly JsonEncodedText PropName_notification_group_id = JsonEncodedText.Encode("notification_group_id");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_notification_settings_chat_id = JsonEncodedText.Encode("notification_settings_chat_id");
            private static readonly JsonEncodedText PropName_is_silent = JsonEncodedText.Encode("is_silent");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_added_notifications = JsonEncodedText.Encode("added_notifications");
            private static readonly JsonEncodedText PropName_removed_notification_ids = JsonEncodedText.Encode("removed_notification_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNotificationGroup)tlobj;
                writer.WritePropertyName(PropName_notification_group_id);
                writer.WriteNumberValue(obj.NotificationGroupId);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_notification_settings_chat_id);
                writer.WriteNumberValue(obj.NotificationSettingsChatId);
                writer.WritePropertyName(PropName_is_silent);
                writer.WriteBooleanValue(obj.IsSilent);
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                if (obj.AddedNotifications != null)
                {
                    writer.WritePropertyName(PropName_added_notifications);
                    writer.WriteArray(obj.AddedNotifications);
                }
                if (obj.RemovedNotificationIds != null)
                {
                    writer.WritePropertyName(PropName_removed_notification_ids);
                    writer.WriteArray(obj.RemovedNotificationIds);
                }
            }
        }

        partial class UpdateActiveNotificationsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateActiveNotifications");
            private static readonly JsonEncodedText PropName_groups = JsonEncodedText.Encode("groups");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateActiveNotifications)tlobj;
                if (obj.Groups != null)
                {
                    writer.WritePropertyName(PropName_groups);
                    writer.WriteArray(obj.Groups);
                }
            }
        }

        partial class UpdateHavePendingNotificationsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateHavePendingNotifications");
            private static readonly JsonEncodedText PropName_have_delayed_notifications = JsonEncodedText.Encode("have_delayed_notifications");
            private static readonly JsonEncodedText PropName_have_unreceived_notifications = JsonEncodedText.Encode("have_unreceived_notifications");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateHavePendingNotifications)tlobj;
                writer.WritePropertyName(PropName_have_delayed_notifications);
                writer.WriteBooleanValue(obj.HaveDelayedNotifications);
                writer.WritePropertyName(PropName_have_unreceived_notifications);
                writer.WriteBooleanValue(obj.HaveUnreceivedNotifications);
            }
        }

        partial class UpdateDeleteMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateDeleteMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_ids = JsonEncodedText.Encode("message_ids");
            private static readonly JsonEncodedText PropName_is_permanent = JsonEncodedText.Encode("is_permanent");
            private static readonly JsonEncodedText PropName_from_cache = JsonEncodedText.Encode("from_cache");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateDeleteMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.MessageIds != null)
                {
                    writer.WritePropertyName(PropName_message_ids);
                    writer.WriteArray(obj.MessageIds);
                }
                writer.WritePropertyName(PropName_is_permanent);
                writer.WriteBooleanValue(obj.IsPermanent);
                writer.WritePropertyName(PropName_from_cache);
                writer.WriteBooleanValue(obj.FromCache);
            }
        }

        partial class UpdateUserChatActionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateUserChatAction");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_action = JsonEncodedText.Encode("action");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateUserChatAction)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_thread_id);
                writer.WriteNumberValue(obj.MessageThreadId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.Action != null)
                {
                    writer.WritePropertyName(PropName_action);
                    writer.WriteTLObjectValue(obj.Action);
                }
            }
        }

        partial class UpdateUserStatusConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateUserStatus");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_status = JsonEncodedText.Encode("status");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateUserStatus)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.Status != null)
                {
                    writer.WritePropertyName(PropName_status);
                    writer.WriteTLObjectValue(obj.Status);
                }
            }
        }

        partial class UpdateUserConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateUser");
            private static readonly JsonEncodedText PropName_user = JsonEncodedText.Encode("user");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateUser)tlobj;
                if (obj.User != null)
                {
                    writer.WritePropertyName(PropName_user);
                    writer.WriteTLObjectValue(obj.User);
                }
            }
        }

        partial class UpdateBasicGroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateBasicGroup");
            private static readonly JsonEncodedText PropName_basic_group = JsonEncodedText.Encode("basic_group");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateBasicGroup)tlobj;
                if (obj.BasicGroup != null)
                {
                    writer.WritePropertyName(PropName_basic_group);
                    writer.WriteTLObjectValue(obj.BasicGroup);
                }
            }
        }

        partial class UpdateSupergroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateSupergroup");
            private static readonly JsonEncodedText PropName_supergroup = JsonEncodedText.Encode("supergroup");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateSupergroup)tlobj;
                if (obj.Supergroup != null)
                {
                    writer.WritePropertyName(PropName_supergroup);
                    writer.WriteTLObjectValue(obj.Supergroup);
                }
            }
        }

        partial class UpdateSecretChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateSecretChat");
            private static readonly JsonEncodedText PropName_secret_chat = JsonEncodedText.Encode("secret_chat");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateSecretChat)tlobj;
                if (obj.SecretChat != null)
                {
                    writer.WritePropertyName(PropName_secret_chat);
                    writer.WriteTLObjectValue(obj.SecretChat);
                }
            }
        }

        partial class UpdateUserFullInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateUserFullInfo");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_user_full_info = JsonEncodedText.Encode("user_full_info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateUserFullInfo)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.UserFullInfo != null)
                {
                    writer.WritePropertyName(PropName_user_full_info);
                    writer.WriteTLObjectValue(obj.UserFullInfo);
                }
            }
        }

        partial class UpdateBasicGroupFullInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateBasicGroupFullInfo");
            private static readonly JsonEncodedText PropName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
            private static readonly JsonEncodedText PropName_basic_group_full_info = JsonEncodedText.Encode("basic_group_full_info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateBasicGroupFullInfo)tlobj;
                writer.WritePropertyName(PropName_basic_group_id);
                writer.WriteNumberValue(obj.BasicGroupId);
                if (obj.BasicGroupFullInfo != null)
                {
                    writer.WritePropertyName(PropName_basic_group_full_info);
                    writer.WriteTLObjectValue(obj.BasicGroupFullInfo);
                }
            }
        }

        partial class UpdateSupergroupFullInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateSupergroupFullInfo");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            private static readonly JsonEncodedText PropName_supergroup_full_info = JsonEncodedText.Encode("supergroup_full_info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateSupergroupFullInfo)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
                if (obj.SupergroupFullInfo != null)
                {
                    writer.WritePropertyName(PropName_supergroup_full_info);
                    writer.WriteTLObjectValue(obj.SupergroupFullInfo);
                }
            }
        }

        partial class UpdateServiceNotificationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateServiceNotification");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_content = JsonEncodedText.Encode("content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateServiceNotification)tlobj;
                writer.WritePropertyName(PropName_type);
                writer.WriteStringValue(obj.Type);
                if (obj.Content != null)
                {
                    writer.WritePropertyName(PropName_content);
                    writer.WriteTLObjectValue(obj.Content);
                }
            }
        }

        partial class UpdateFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateFile");
            private static readonly JsonEncodedText PropName_file = JsonEncodedText.Encode("file");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateFile)tlobj;
                if (obj.File != null)
                {
                    writer.WritePropertyName(PropName_file);
                    writer.WriteTLObjectValue(obj.File);
                }
            }
        }

        partial class UpdateFileGenerationStartConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateFileGenerationStart");
            private static readonly JsonEncodedText PropName_generation_id = JsonEncodedText.Encode("generation_id");
            private static readonly JsonEncodedText PropName_original_path = JsonEncodedText.Encode("original_path");
            private static readonly JsonEncodedText PropName_destination_path = JsonEncodedText.Encode("destination_path");
            private static readonly JsonEncodedText PropName_conversion = JsonEncodedText.Encode("conversion");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateFileGenerationStart)tlobj;
                writer.WritePropertyName(PropName_generation_id);
                writer.WriteInt64String(obj.GenerationId);
                writer.WritePropertyName(PropName_original_path);
                writer.WriteStringValue(obj.OriginalPath);
                writer.WritePropertyName(PropName_destination_path);
                writer.WriteStringValue(obj.DestinationPath);
                writer.WritePropertyName(PropName_conversion);
                writer.WriteStringValue(obj.Conversion);
            }
        }

        partial class UpdateFileGenerationStopConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateFileGenerationStop");
            private static readonly JsonEncodedText PropName_generation_id = JsonEncodedText.Encode("generation_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateFileGenerationStop)tlobj;
                writer.WritePropertyName(PropName_generation_id);
                writer.WriteInt64String(obj.GenerationId);
            }
        }

        partial class UpdateCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateCall");
            private static readonly JsonEncodedText PropName_call = JsonEncodedText.Encode("call");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateCall)tlobj;
                if (obj.Call != null)
                {
                    writer.WritePropertyName(PropName_call);
                    writer.WriteTLObjectValue(obj.Call);
                }
            }
        }

        partial class UpdateNewCallSignalingDataConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewCallSignalingData");
            private static readonly JsonEncodedText PropName_call_id = JsonEncodedText.Encode("call_id");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewCallSignalingData)tlobj;
                writer.WritePropertyName(PropName_call_id);
                writer.WriteNumberValue(obj.CallId);
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
            }
        }

        partial class UpdateUserPrivacySettingRulesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateUserPrivacySettingRules");
            private static readonly JsonEncodedText PropName_setting = JsonEncodedText.Encode("setting");
            private static readonly JsonEncodedText PropName_rules = JsonEncodedText.Encode("rules");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateUserPrivacySettingRules)tlobj;
                if (obj.Setting != null)
                {
                    writer.WritePropertyName(PropName_setting);
                    writer.WriteTLObjectValue(obj.Setting);
                }
                if (obj.Rules != null)
                {
                    writer.WritePropertyName(PropName_rules);
                    writer.WriteTLObjectValue(obj.Rules);
                }
            }
        }

        partial class UpdateUnreadMessageCountConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateUnreadMessageCount");
            private static readonly JsonEncodedText PropName_chat_list = JsonEncodedText.Encode("chat_list");
            private static readonly JsonEncodedText PropName_unread_count = JsonEncodedText.Encode("unread_count");
            private static readonly JsonEncodedText PropName_unread_unmuted_count = JsonEncodedText.Encode("unread_unmuted_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateUnreadMessageCount)tlobj;
                if (obj.ChatList != null)
                {
                    writer.WritePropertyName(PropName_chat_list);
                    writer.WriteTLObjectValue(obj.ChatList);
                }
                writer.WritePropertyName(PropName_unread_count);
                writer.WriteNumberValue(obj.UnreadCount);
                writer.WritePropertyName(PropName_unread_unmuted_count);
                writer.WriteNumberValue(obj.UnreadUnmutedCount);
            }
        }

        partial class UpdateUnreadChatCountConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateUnreadChatCount");
            private static readonly JsonEncodedText PropName_chat_list = JsonEncodedText.Encode("chat_list");
            private static readonly JsonEncodedText PropName_total_count = JsonEncodedText.Encode("total_count");
            private static readonly JsonEncodedText PropName_unread_count = JsonEncodedText.Encode("unread_count");
            private static readonly JsonEncodedText PropName_unread_unmuted_count = JsonEncodedText.Encode("unread_unmuted_count");
            private static readonly JsonEncodedText PropName_marked_as_unread_count = JsonEncodedText.Encode("marked_as_unread_count");
            private static readonly JsonEncodedText PropName_marked_as_unread_unmuted_count = JsonEncodedText.Encode("marked_as_unread_unmuted_count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateUnreadChatCount)tlobj;
                if (obj.ChatList != null)
                {
                    writer.WritePropertyName(PropName_chat_list);
                    writer.WriteTLObjectValue(obj.ChatList);
                }
                writer.WritePropertyName(PropName_total_count);
                writer.WriteNumberValue(obj.TotalCount);
                writer.WritePropertyName(PropName_unread_count);
                writer.WriteNumberValue(obj.UnreadCount);
                writer.WritePropertyName(PropName_unread_unmuted_count);
                writer.WriteNumberValue(obj.UnreadUnmutedCount);
                writer.WritePropertyName(PropName_marked_as_unread_count);
                writer.WriteNumberValue(obj.MarkedAsUnreadCount);
                writer.WritePropertyName(PropName_marked_as_unread_unmuted_count);
                writer.WriteNumberValue(obj.MarkedAsUnreadUnmutedCount);
            }
        }

        partial class UpdateOptionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateOption");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateOption)tlobj;
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                if (obj.Value != null)
                {
                    writer.WritePropertyName(PropName_value);
                    writer.WriteTLObjectValue(obj.Value);
                }
            }
        }

        partial class UpdateStickerSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateStickerSet");
            private static readonly JsonEncodedText PropName_sticker_set = JsonEncodedText.Encode("sticker_set");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateStickerSet)tlobj;
                if (obj.StickerSet != null)
                {
                    writer.WritePropertyName(PropName_sticker_set);
                    writer.WriteTLObjectValue(obj.StickerSet);
                }
            }
        }

        partial class UpdateInstalledStickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateInstalledStickerSets");
            private static readonly JsonEncodedText PropName_is_masks = JsonEncodedText.Encode("is_masks");
            private static readonly JsonEncodedText PropName_sticker_set_ids = JsonEncodedText.Encode("sticker_set_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateInstalledStickerSets)tlobj;
                writer.WritePropertyName(PropName_is_masks);
                writer.WriteBooleanValue(obj.IsMasks);
                if (obj.StickerSetIds != null)
                {
                    writer.WritePropertyName(PropName_sticker_set_ids);
                    writer.WriteInt64Array(obj.StickerSetIds);
                }
            }
        }

        partial class UpdateTrendingStickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateTrendingStickerSets");
            private static readonly JsonEncodedText PropName_sticker_sets = JsonEncodedText.Encode("sticker_sets");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateTrendingStickerSets)tlobj;
                if (obj.StickerSets != null)
                {
                    writer.WritePropertyName(PropName_sticker_sets);
                    writer.WriteTLObjectValue(obj.StickerSets);
                }
            }
        }

        partial class UpdateRecentStickersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateRecentStickers");
            private static readonly JsonEncodedText PropName_is_attached = JsonEncodedText.Encode("is_attached");
            private static readonly JsonEncodedText PropName_sticker_ids = JsonEncodedText.Encode("sticker_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateRecentStickers)tlobj;
                writer.WritePropertyName(PropName_is_attached);
                writer.WriteBooleanValue(obj.IsAttached);
                if (obj.StickerIds != null)
                {
                    writer.WritePropertyName(PropName_sticker_ids);
                    writer.WriteArray(obj.StickerIds);
                }
            }
        }

        partial class UpdateFavoriteStickersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateFavoriteStickers");
            private static readonly JsonEncodedText PropName_sticker_ids = JsonEncodedText.Encode("sticker_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateFavoriteStickers)tlobj;
                if (obj.StickerIds != null)
                {
                    writer.WritePropertyName(PropName_sticker_ids);
                    writer.WriteArray(obj.StickerIds);
                }
            }
        }

        partial class UpdateSavedAnimationsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateSavedAnimations");
            private static readonly JsonEncodedText PropName_animation_ids = JsonEncodedText.Encode("animation_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateSavedAnimations)tlobj;
                if (obj.AnimationIds != null)
                {
                    writer.WritePropertyName(PropName_animation_ids);
                    writer.WriteArray(obj.AnimationIds);
                }
            }
        }

        partial class UpdateSelectedBackgroundConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateSelectedBackground");
            private static readonly JsonEncodedText PropName_for_dark_theme = JsonEncodedText.Encode("for_dark_theme");
            private static readonly JsonEncodedText PropName_background = JsonEncodedText.Encode("background");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateSelectedBackground)tlobj;
                writer.WritePropertyName(PropName_for_dark_theme);
                writer.WriteBooleanValue(obj.ForDarkTheme);
                if (obj.Background != null)
                {
                    writer.WritePropertyName(PropName_background);
                    writer.WriteTLObjectValue(obj.Background);
                }
            }
        }

        partial class UpdateLanguagePackStringsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateLanguagePackStrings");
            private static readonly JsonEncodedText PropName_localization_target = JsonEncodedText.Encode("localization_target");
            private static readonly JsonEncodedText PropName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
            private static readonly JsonEncodedText PropName_strings = JsonEncodedText.Encode("strings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateLanguagePackStrings)tlobj;
                writer.WritePropertyName(PropName_localization_target);
                writer.WriteStringValue(obj.LocalizationTarget);
                writer.WritePropertyName(PropName_language_pack_id);
                writer.WriteStringValue(obj.LanguagePackId);
                if (obj.Strings != null)
                {
                    writer.WritePropertyName(PropName_strings);
                    writer.WriteArray(obj.Strings);
                }
            }
        }

        partial class UpdateConnectionStateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateConnectionState");
            private static readonly JsonEncodedText PropName_state = JsonEncodedText.Encode("state");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateConnectionState)tlobj;
                if (obj.State != null)
                {
                    writer.WritePropertyName(PropName_state);
                    writer.WriteTLObjectValue(obj.State);
                }
            }
        }

        partial class UpdateTermsOfServiceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateTermsOfService");
            private static readonly JsonEncodedText PropName_terms_of_service_id = JsonEncodedText.Encode("terms_of_service_id");
            private static readonly JsonEncodedText PropName_terms_of_service = JsonEncodedText.Encode("terms_of_service");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateTermsOfService)tlobj;
                writer.WritePropertyName(PropName_terms_of_service_id);
                writer.WriteStringValue(obj.TermsOfServiceId);
                if (obj.TermsOfService != null)
                {
                    writer.WritePropertyName(PropName_terms_of_service);
                    writer.WriteTLObjectValue(obj.TermsOfService);
                }
            }
        }

        partial class UpdateUsersNearbyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateUsersNearby");
            private static readonly JsonEncodedText PropName_users_nearby = JsonEncodedText.Encode("users_nearby");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateUsersNearby)tlobj;
                if (obj.UsersNearby != null)
                {
                    writer.WritePropertyName(PropName_users_nearby);
                    writer.WriteArray(obj.UsersNearby);
                }
            }
        }

        partial class UpdateDiceEmojisConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateDiceEmojis");
            private static readonly JsonEncodedText PropName_emojis = JsonEncodedText.Encode("emojis");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateDiceEmojis)tlobj;
                if (obj.Emojis != null)
                {
                    writer.WritePropertyName(PropName_emojis);
                    writer.WriteArray(obj.Emojis);
                }
            }
        }

        partial class UpdateAnimationSearchParametersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateAnimationSearchParameters");
            private static readonly JsonEncodedText PropName_provider = JsonEncodedText.Encode("provider");
            private static readonly JsonEncodedText PropName_emojis = JsonEncodedText.Encode("emojis");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateAnimationSearchParameters)tlobj;
                writer.WritePropertyName(PropName_provider);
                writer.WriteStringValue(obj.Provider);
                if (obj.Emojis != null)
                {
                    writer.WritePropertyName(PropName_emojis);
                    writer.WriteArray(obj.Emojis);
                }
            }
        }

        partial class UpdateSuggestedActionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateSuggestedActions");
            private static readonly JsonEncodedText PropName_added_actions = JsonEncodedText.Encode("added_actions");
            private static readonly JsonEncodedText PropName_removed_actions = JsonEncodedText.Encode("removed_actions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateSuggestedActions)tlobj;
                if (obj.AddedActions != null)
                {
                    writer.WritePropertyName(PropName_added_actions);
                    writer.WriteArray(obj.AddedActions);
                }
                if (obj.RemovedActions != null)
                {
                    writer.WritePropertyName(PropName_removed_actions);
                    writer.WriteArray(obj.RemovedActions);
                }
            }
        }

        partial class UpdateNewInlineQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewInlineQuery");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            private static readonly JsonEncodedText PropName_user_location = JsonEncodedText.Encode("user_location");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewInlineQuery)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
                if (obj.UserLocation != null)
                {
                    writer.WritePropertyName(PropName_user_location);
                    writer.WriteTLObjectValue(obj.UserLocation);
                }
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_offset);
                writer.WriteStringValue(obj.Offset);
            }
        }

        partial class UpdateNewChosenInlineResultConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewChosenInlineResult");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            private static readonly JsonEncodedText PropName_user_location = JsonEncodedText.Encode("user_location");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_result_id = JsonEncodedText.Encode("result_id");
            private static readonly JsonEncodedText PropName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewChosenInlineResult)tlobj;
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
                if (obj.UserLocation != null)
                {
                    writer.WritePropertyName(PropName_user_location);
                    writer.WriteTLObjectValue(obj.UserLocation);
                }
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_result_id);
                writer.WriteStringValue(obj.ResultId);
                writer.WritePropertyName(PropName_inline_message_id);
                writer.WriteStringValue(obj.InlineMessageId);
            }
        }

        partial class UpdateNewCallbackQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewCallbackQuery");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_chat_instance = JsonEncodedText.Encode("chat_instance");
            private static readonly JsonEncodedText PropName_payload = JsonEncodedText.Encode("payload");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewCallbackQuery)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_chat_instance);
                writer.WriteInt64String(obj.ChatInstance);
                if (obj.Payload != null)
                {
                    writer.WritePropertyName(PropName_payload);
                    writer.WriteTLObjectValue(obj.Payload);
                }
            }
        }

        partial class UpdateNewInlineCallbackQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewInlineCallbackQuery");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            private static readonly JsonEncodedText PropName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
            private static readonly JsonEncodedText PropName_chat_instance = JsonEncodedText.Encode("chat_instance");
            private static readonly JsonEncodedText PropName_payload = JsonEncodedText.Encode("payload");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewInlineCallbackQuery)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
                writer.WritePropertyName(PropName_inline_message_id);
                writer.WriteStringValue(obj.InlineMessageId);
                writer.WritePropertyName(PropName_chat_instance);
                writer.WriteInt64String(obj.ChatInstance);
                if (obj.Payload != null)
                {
                    writer.WritePropertyName(PropName_payload);
                    writer.WriteTLObjectValue(obj.Payload);
                }
            }
        }

        partial class UpdateNewShippingQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewShippingQuery");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            private static readonly JsonEncodedText PropName_invoice_payload = JsonEncodedText.Encode("invoice_payload");
            private static readonly JsonEncodedText PropName_shipping_address = JsonEncodedText.Encode("shipping_address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewShippingQuery)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
                writer.WritePropertyName(PropName_invoice_payload);
                writer.WriteStringValue(obj.InvoicePayload);
                if (obj.ShippingAddress != null)
                {
                    writer.WritePropertyName(PropName_shipping_address);
                    writer.WriteTLObjectValue(obj.ShippingAddress);
                }
            }
        }

        partial class UpdateNewPreCheckoutQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewPreCheckoutQuery");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            private static readonly JsonEncodedText PropName_currency = JsonEncodedText.Encode("currency");
            private static readonly JsonEncodedText PropName_total_amount = JsonEncodedText.Encode("total_amount");
            private static readonly JsonEncodedText PropName_invoice_payload = JsonEncodedText.Encode("invoice_payload");
            private static readonly JsonEncodedText PropName_shipping_option_id = JsonEncodedText.Encode("shipping_option_id");
            private static readonly JsonEncodedText PropName_order_info = JsonEncodedText.Encode("order_info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewPreCheckoutQuery)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
                writer.WritePropertyName(PropName_currency);
                writer.WriteStringValue(obj.Currency);
                writer.WritePropertyName(PropName_total_amount);
                writer.WriteNumberValue(obj.TotalAmount);
                if (obj.InvoicePayload != null)
                {
                    writer.WritePropertyName(PropName_invoice_payload);
                    writer.WriteBase64StringValue(obj.InvoicePayload);
                }
                writer.WritePropertyName(PropName_shipping_option_id);
                writer.WriteStringValue(obj.ShippingOptionId);
                if (obj.OrderInfo != null)
                {
                    writer.WritePropertyName(PropName_order_info);
                    writer.WriteTLObjectValue(obj.OrderInfo);
                }
            }
        }

        partial class UpdateNewCustomEventConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewCustomEvent");
            private static readonly JsonEncodedText PropName_event = JsonEncodedText.Encode("event");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewCustomEvent)tlobj;
                writer.WritePropertyName(PropName_event);
                writer.WriteStringValue(obj.Event);
            }
        }

        partial class UpdateNewCustomQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updateNewCustomQuery");
            private static readonly JsonEncodedText PropName_id = JsonEncodedText.Encode("id");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            private static readonly JsonEncodedText PropName_timeout = JsonEncodedText.Encode("timeout");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdateNewCustomQuery)tlobj;
                writer.WritePropertyName(PropName_id);
                writer.WriteInt64String(obj.Id);
                writer.WritePropertyName(PropName_data);
                writer.WriteStringValue(obj.Data);
                writer.WritePropertyName(PropName_timeout);
                writer.WriteNumberValue(obj.Timeout);
            }
        }

        partial class UpdatePollConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updatePoll");
            private static readonly JsonEncodedText PropName_poll = JsonEncodedText.Encode("poll");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdatePoll)tlobj;
                if (obj.Poll != null)
                {
                    writer.WritePropertyName(PropName_poll);
                    writer.WriteTLObjectValue(obj.Poll);
                }
            }
        }

        partial class UpdatePollAnswerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updatePollAnswer");
            private static readonly JsonEncodedText PropName_poll_id = JsonEncodedText.Encode("poll_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_option_ids = JsonEncodedText.Encode("option_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpdatePollAnswer)tlobj;
                writer.WritePropertyName(PropName_poll_id);
                writer.WriteInt64String(obj.PollId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.OptionIds != null)
                {
                    writer.WritePropertyName(PropName_option_ids);
                    writer.WriteArray(obj.OptionIds);
                }
            }
        }

        partial class UpdatesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("updates");
            private static readonly JsonEncodedText PropName_updates = JsonEncodedText.Encode("updates");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (Updates)tlobj;
                if (obj.Updates_ != null)
                {
                    writer.WritePropertyName(PropName_updates);
                    writer.WriteArray(obj.Updates_);
                }
            }
        }

        partial class LogStreamDefaultConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("logStreamDefault");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class LogStreamFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("logStreamFile");
            private static readonly JsonEncodedText PropName_path = JsonEncodedText.Encode("path");
            private static readonly JsonEncodedText PropName_max_file_size = JsonEncodedText.Encode("max_file_size");
            private static readonly JsonEncodedText PropName_redirect_stderr = JsonEncodedText.Encode("redirect_stderr");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LogStreamFile)tlobj;
                writer.WritePropertyName(PropName_path);
                writer.WriteStringValue(obj.Path);
                writer.WritePropertyName(PropName_max_file_size);
                writer.WriteNumberValue(obj.MaxFileSize);
                writer.WritePropertyName(PropName_redirect_stderr);
                writer.WriteBooleanValue(obj.RedirectStderr);
            }
        }

        partial class LogStreamEmptyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("logStreamEmpty");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class LogVerbosityLevelConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("logVerbosityLevel");
            private static readonly JsonEncodedText PropName_verbosity_level = JsonEncodedText.Encode("verbosity_level");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LogVerbosityLevel)tlobj;
                writer.WritePropertyName(PropName_verbosity_level);
                writer.WriteNumberValue(obj.VerbosityLevel);
            }
        }

        partial class LogTagsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("logTags");
            private static readonly JsonEncodedText PropName_tags = JsonEncodedText.Encode("tags");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LogTags)tlobj;
                if (obj.Tags != null)
                {
                    writer.WritePropertyName(PropName_tags);
                    writer.WriteArray(obj.Tags);
                }
            }
        }

        partial class TestIntConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testInt");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestInt)tlobj;
                writer.WritePropertyName(PropName_value);
                writer.WriteNumberValue(obj.Value);
            }
        }

        partial class TestStringConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testString");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestString)tlobj;
                writer.WritePropertyName(PropName_value);
                writer.WriteStringValue(obj.Value);
            }
        }

        partial class TestBytesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testBytes");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestBytes)tlobj;
                if (obj.Value != null)
                {
                    writer.WritePropertyName(PropName_value);
                    writer.WriteBase64StringValue(obj.Value);
                }
            }
        }

        partial class TestVectorIntConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testVectorInt");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestVectorInt)tlobj;
                if (obj.Value != null)
                {
                    writer.WritePropertyName(PropName_value);
                    writer.WriteArray(obj.Value);
                }
            }
        }

        partial class TestVectorIntObjectConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testVectorIntObject");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestVectorIntObject)tlobj;
                if (obj.Value != null)
                {
                    writer.WritePropertyName(PropName_value);
                    writer.WriteArray(obj.Value);
                }
            }
        }

        partial class TestVectorStringConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testVectorString");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestVectorString)tlobj;
                if (obj.Value != null)
                {
                    writer.WritePropertyName(PropName_value);
                    writer.WriteArray(obj.Value);
                }
            }
        }

        partial class TestVectorStringObjectConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testVectorStringObject");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestVectorStringObject)tlobj;
                if (obj.Value != null)
                {
                    writer.WritePropertyName(PropName_value);
                    writer.WriteArray(obj.Value);
                }
            }
        }

        partial class GetAuthorizationStateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getAuthorizationState");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SetTdlibParametersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setTdlibParameters");
            private static readonly JsonEncodedText PropName_parameters = JsonEncodedText.Encode("parameters");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetTdlibParameters)tlobj;
                if (obj.Parameters != null)
                {
                    writer.WritePropertyName(PropName_parameters);
                    writer.WriteTLObjectValue(obj.Parameters);
                }
            }
        }

        partial class CheckDatabaseEncryptionKeyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkDatabaseEncryptionKey");
            private static readonly JsonEncodedText PropName_encryption_key = JsonEncodedText.Encode("encryption_key");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckDatabaseEncryptionKey)tlobj;
                if (obj.EncryptionKey != null)
                {
                    writer.WritePropertyName(PropName_encryption_key);
                    writer.WriteBase64StringValue(obj.EncryptionKey);
                }
            }
        }

        partial class SetAuthenticationPhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setAuthenticationPhoneNumber");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            private static readonly JsonEncodedText PropName_settings = JsonEncodedText.Encode("settings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetAuthenticationPhoneNumber)tlobj;
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
                if (obj.Settings != null)
                {
                    writer.WritePropertyName(PropName_settings);
                    writer.WriteTLObjectValue(obj.Settings);
                }
            }
        }

        partial class ResendAuthenticationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("resendAuthenticationCode");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CheckAuthenticationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkAuthenticationCode");
            private static readonly JsonEncodedText PropName_code = JsonEncodedText.Encode("code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckAuthenticationCode)tlobj;
                writer.WritePropertyName(PropName_code);
                writer.WriteStringValue(obj.Code);
            }
        }

        partial class RequestQrCodeAuthenticationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("requestQrCodeAuthentication");
            private static readonly JsonEncodedText PropName_other_user_ids = JsonEncodedText.Encode("other_user_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RequestQrCodeAuthentication)tlobj;
                if (obj.OtherUserIds != null)
                {
                    writer.WritePropertyName(PropName_other_user_ids);
                    writer.WriteArray(obj.OtherUserIds);
                }
            }
        }

        partial class RegisterUserConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("registerUser");
            private static readonly JsonEncodedText PropName_first_name = JsonEncodedText.Encode("first_name");
            private static readonly JsonEncodedText PropName_last_name = JsonEncodedText.Encode("last_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RegisterUser)tlobj;
                writer.WritePropertyName(PropName_first_name);
                writer.WriteStringValue(obj.FirstName);
                writer.WritePropertyName(PropName_last_name);
                writer.WriteStringValue(obj.LastName);
            }
        }

        partial class CheckAuthenticationPasswordConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkAuthenticationPassword");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckAuthenticationPassword)tlobj;
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
            }
        }

        partial class RequestAuthenticationPasswordRecoveryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("requestAuthenticationPasswordRecovery");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class RecoverAuthenticationPasswordConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("recoverAuthenticationPassword");
            private static readonly JsonEncodedText PropName_recovery_code = JsonEncodedText.Encode("recovery_code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RecoverAuthenticationPassword)tlobj;
                writer.WritePropertyName(PropName_recovery_code);
                writer.WriteStringValue(obj.RecoveryCode);
            }
        }

        partial class CheckAuthenticationBotTokenConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkAuthenticationBotToken");
            private static readonly JsonEncodedText PropName_token = JsonEncodedText.Encode("token");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckAuthenticationBotToken)tlobj;
                writer.WritePropertyName(PropName_token);
                writer.WriteStringValue(obj.Token);
            }
        }

        partial class LogOutConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("logOut");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CloseConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("close");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class DestroyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("destroy");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ConfirmQrCodeAuthenticationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("confirmQrCodeAuthentication");
            private static readonly JsonEncodedText PropName_link = JsonEncodedText.Encode("link");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ConfirmQrCodeAuthentication)tlobj;
                writer.WritePropertyName(PropName_link);
                writer.WriteStringValue(obj.Link);
            }
        }

        partial class GetCurrentStateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getCurrentState");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SetDatabaseEncryptionKeyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setDatabaseEncryptionKey");
            private static readonly JsonEncodedText PropName_new_encryption_key = JsonEncodedText.Encode("new_encryption_key");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetDatabaseEncryptionKey)tlobj;
                if (obj.NewEncryptionKey != null)
                {
                    writer.WritePropertyName(PropName_new_encryption_key);
                    writer.WriteBase64StringValue(obj.NewEncryptionKey);
                }
            }
        }

        partial class GetPasswordStateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getPasswordState");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SetPasswordConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setPassword");
            private static readonly JsonEncodedText PropName_old_password = JsonEncodedText.Encode("old_password");
            private static readonly JsonEncodedText PropName_new_password = JsonEncodedText.Encode("new_password");
            private static readonly JsonEncodedText PropName_new_hint = JsonEncodedText.Encode("new_hint");
            private static readonly JsonEncodedText PropName_set_recovery_email_address = JsonEncodedText.Encode("set_recovery_email_address");
            private static readonly JsonEncodedText PropName_new_recovery_email_address = JsonEncodedText.Encode("new_recovery_email_address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetPassword)tlobj;
                writer.WritePropertyName(PropName_old_password);
                writer.WriteStringValue(obj.OldPassword);
                writer.WritePropertyName(PropName_new_password);
                writer.WriteStringValue(obj.NewPassword);
                writer.WritePropertyName(PropName_new_hint);
                writer.WriteStringValue(obj.NewHint);
                writer.WritePropertyName(PropName_set_recovery_email_address);
                writer.WriteBooleanValue(obj.SetRecoveryEmailAddress);
                writer.WritePropertyName(PropName_new_recovery_email_address);
                writer.WriteStringValue(obj.NewRecoveryEmailAddress);
            }
        }

        partial class GetRecoveryEmailAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getRecoveryEmailAddress");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetRecoveryEmailAddress)tlobj;
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
            }
        }

        partial class SetRecoveryEmailAddressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setRecoveryEmailAddress");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            private static readonly JsonEncodedText PropName_new_recovery_email_address = JsonEncodedText.Encode("new_recovery_email_address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetRecoveryEmailAddress)tlobj;
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
                writer.WritePropertyName(PropName_new_recovery_email_address);
                writer.WriteStringValue(obj.NewRecoveryEmailAddress);
            }
        }

        partial class CheckRecoveryEmailAddressCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkRecoveryEmailAddressCode");
            private static readonly JsonEncodedText PropName_code = JsonEncodedText.Encode("code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckRecoveryEmailAddressCode)tlobj;
                writer.WritePropertyName(PropName_code);
                writer.WriteStringValue(obj.Code);
            }
        }

        partial class ResendRecoveryEmailAddressCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("resendRecoveryEmailAddressCode");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class RequestPasswordRecoveryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("requestPasswordRecovery");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class RecoverPasswordConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("recoverPassword");
            private static readonly JsonEncodedText PropName_recovery_code = JsonEncodedText.Encode("recovery_code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RecoverPassword)tlobj;
                writer.WritePropertyName(PropName_recovery_code);
                writer.WriteStringValue(obj.RecoveryCode);
            }
        }

        partial class CreateTemporaryPasswordConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createTemporaryPassword");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            private static readonly JsonEncodedText PropName_valid_for = JsonEncodedText.Encode("valid_for");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreateTemporaryPassword)tlobj;
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
                writer.WritePropertyName(PropName_valid_for);
                writer.WriteNumberValue(obj.ValidFor);
            }
        }

        partial class GetTemporaryPasswordStateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getTemporaryPasswordState");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetMeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMe");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetUserConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getUser");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetUser)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class GetUserFullInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getUserFullInfo");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetUserFullInfo)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class GetBasicGroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getBasicGroup");
            private static readonly JsonEncodedText PropName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetBasicGroup)tlobj;
                writer.WritePropertyName(PropName_basic_group_id);
                writer.WriteNumberValue(obj.BasicGroupId);
            }
        }

        partial class GetBasicGroupFullInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getBasicGroupFullInfo");
            private static readonly JsonEncodedText PropName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetBasicGroupFullInfo)tlobj;
                writer.WritePropertyName(PropName_basic_group_id);
                writer.WriteNumberValue(obj.BasicGroupId);
            }
        }

        partial class GetSupergroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getSupergroup");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetSupergroup)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
            }
        }

        partial class GetSupergroupFullInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getSupergroupFullInfo");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetSupergroupFullInfo)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
            }
        }

        partial class GetSecretChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getSecretChat");
            private static readonly JsonEncodedText PropName_secret_chat_id = JsonEncodedText.Encode("secret_chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetSecretChat)tlobj;
                writer.WritePropertyName(PropName_secret_chat_id);
                writer.WriteNumberValue(obj.SecretChatId);
            }
        }

        partial class GetChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class GetMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class GetMessageLocallyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMessageLocally");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMessageLocally)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class GetRepliedMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getRepliedMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetRepliedMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class GetChatPinnedMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatPinnedMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatPinnedMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class GetMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_ids = JsonEncodedText.Encode("message_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.MessageIds != null)
                {
                    writer.WritePropertyName(PropName_message_ids);
                    writer.WriteArray(obj.MessageIds);
                }
            }
        }

        partial class GetMessageThreadConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMessageThread");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMessageThread)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class GetFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getFile");
            private static readonly JsonEncodedText PropName_file_id = JsonEncodedText.Encode("file_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetFile)tlobj;
                writer.WritePropertyName(PropName_file_id);
                writer.WriteNumberValue(obj.FileId);
            }
        }

        partial class GetRemoteFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getRemoteFile");
            private static readonly JsonEncodedText PropName_remote_file_id = JsonEncodedText.Encode("remote_file_id");
            private static readonly JsonEncodedText PropName_file_type = JsonEncodedText.Encode("file_type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetRemoteFile)tlobj;
                writer.WritePropertyName(PropName_remote_file_id);
                writer.WriteStringValue(obj.RemoteFileId);
                if (obj.FileType != null)
                {
                    writer.WritePropertyName(PropName_file_type);
                    writer.WriteTLObjectValue(obj.FileType);
                }
            }
        }

        partial class GetChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChats");
            private static readonly JsonEncodedText PropName_chat_list = JsonEncodedText.Encode("chat_list");
            private static readonly JsonEncodedText PropName_offset_order = JsonEncodedText.Encode("offset_order");
            private static readonly JsonEncodedText PropName_offset_chat_id = JsonEncodedText.Encode("offset_chat_id");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChats)tlobj;
                if (obj.ChatList != null)
                {
                    writer.WritePropertyName(PropName_chat_list);
                    writer.WriteTLObjectValue(obj.ChatList);
                }
                writer.WritePropertyName(PropName_offset_order);
                writer.WriteInt64String(obj.OffsetOrder);
                writer.WritePropertyName(PropName_offset_chat_id);
                writer.WriteNumberValue(obj.OffsetChatId);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class SearchPublicChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchPublicChat");
            private static readonly JsonEncodedText PropName_username = JsonEncodedText.Encode("username");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchPublicChat)tlobj;
                writer.WritePropertyName(PropName_username);
                writer.WriteStringValue(obj.Username);
            }
        }

        partial class SearchPublicChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchPublicChats");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchPublicChats)tlobj;
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
            }
        }

        partial class SearchChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchChats");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchChats)tlobj;
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class SearchChatsOnServerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchChatsOnServer");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchChatsOnServer)tlobj;
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class SearchChatsNearbyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchChatsNearby");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchChatsNearby)tlobj;
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
            }
        }

        partial class GetTopChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getTopChats");
            private static readonly JsonEncodedText PropName_category = JsonEncodedText.Encode("category");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetTopChats)tlobj;
                if (obj.Category != null)
                {
                    writer.WritePropertyName(PropName_category);
                    writer.WriteTLObjectValue(obj.Category);
                }
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class RemoveTopChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeTopChat");
            private static readonly JsonEncodedText PropName_category = JsonEncodedText.Encode("category");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveTopChat)tlobj;
                if (obj.Category != null)
                {
                    writer.WritePropertyName(PropName_category);
                    writer.WriteTLObjectValue(obj.Category);
                }
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class AddRecentlyFoundChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addRecentlyFoundChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddRecentlyFoundChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class RemoveRecentlyFoundChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeRecentlyFoundChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveRecentlyFoundChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class ClearRecentlyFoundChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("clearRecentlyFoundChats");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CheckChatUsernameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkChatUsername");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_username = JsonEncodedText.Encode("username");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckChatUsername)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_username);
                writer.WriteStringValue(obj.Username);
            }
        }

        partial class GetCreatedPublicChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getCreatedPublicChats");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetCreatedPublicChats)tlobj;
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class CheckCreatedPublicChatsLimitConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkCreatedPublicChatsLimit");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckCreatedPublicChatsLimit)tlobj;
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class GetSuitableDiscussionChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getSuitableDiscussionChats");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetInactiveSupergroupChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getInactiveSupergroupChats");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetGroupsInCommonConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getGroupsInCommon");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_offset_chat_id = JsonEncodedText.Encode("offset_chat_id");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetGroupsInCommon)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_offset_chat_id);
                writer.WriteNumberValue(obj.OffsetChatId);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class GetChatHistoryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatHistory");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_from_message_id = JsonEncodedText.Encode("from_message_id");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            private static readonly JsonEncodedText PropName_only_local = JsonEncodedText.Encode("only_local");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatHistory)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_from_message_id);
                writer.WriteNumberValue(obj.FromMessageId);
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
                writer.WritePropertyName(PropName_only_local);
                writer.WriteBooleanValue(obj.OnlyLocal);
            }
        }

        partial class GetMessageThreadHistoryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMessageThreadHistory");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_from_message_id = JsonEncodedText.Encode("from_message_id");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMessageThreadHistory)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_from_message_id);
                writer.WriteNumberValue(obj.FromMessageId);
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class DeleteChatHistoryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteChatHistory");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_remove_from_chat_list = JsonEncodedText.Encode("remove_from_chat_list");
            private static readonly JsonEncodedText PropName_revoke = JsonEncodedText.Encode("revoke");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeleteChatHistory)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_remove_from_chat_list);
                writer.WriteBooleanValue(obj.RemoveFromChatList);
                writer.WritePropertyName(PropName_revoke);
                writer.WriteBooleanValue(obj.Revoke);
            }
        }

        partial class SearchChatMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchChatMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            private static readonly JsonEncodedText PropName_from_message_id = JsonEncodedText.Encode("from_message_id");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            private static readonly JsonEncodedText PropName_filter = JsonEncodedText.Encode("filter");
            private static readonly JsonEncodedText PropName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchChatMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
                writer.WritePropertyName(PropName_from_message_id);
                writer.WriteNumberValue(obj.FromMessageId);
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
                if (obj.Filter != null)
                {
                    writer.WritePropertyName(PropName_filter);
                    writer.WriteTLObjectValue(obj.Filter);
                }
                writer.WritePropertyName(PropName_message_thread_id);
                writer.WriteNumberValue(obj.MessageThreadId);
            }
        }

        partial class SearchMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchMessages");
            private static readonly JsonEncodedText PropName_chat_list = JsonEncodedText.Encode("chat_list");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_offset_date = JsonEncodedText.Encode("offset_date");
            private static readonly JsonEncodedText PropName_offset_chat_id = JsonEncodedText.Encode("offset_chat_id");
            private static readonly JsonEncodedText PropName_offset_message_id = JsonEncodedText.Encode("offset_message_id");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            private static readonly JsonEncodedText PropName_filter = JsonEncodedText.Encode("filter");
            private static readonly JsonEncodedText PropName_min_date = JsonEncodedText.Encode("min_date");
            private static readonly JsonEncodedText PropName_max_date = JsonEncodedText.Encode("max_date");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchMessages)tlobj;
                if (obj.ChatList != null)
                {
                    writer.WritePropertyName(PropName_chat_list);
                    writer.WriteTLObjectValue(obj.ChatList);
                }
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_offset_date);
                writer.WriteNumberValue(obj.OffsetDate);
                writer.WritePropertyName(PropName_offset_chat_id);
                writer.WriteNumberValue(obj.OffsetChatId);
                writer.WritePropertyName(PropName_offset_message_id);
                writer.WriteNumberValue(obj.OffsetMessageId);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
                if (obj.Filter != null)
                {
                    writer.WritePropertyName(PropName_filter);
                    writer.WriteTLObjectValue(obj.Filter);
                }
                writer.WritePropertyName(PropName_min_date);
                writer.WriteNumberValue(obj.MinDate);
                writer.WritePropertyName(PropName_max_date);
                writer.WriteNumberValue(obj.MaxDate);
            }
        }

        partial class SearchSecretMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchSecretMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            private static readonly JsonEncodedText PropName_filter = JsonEncodedText.Encode("filter");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchSecretMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_offset);
                writer.WriteStringValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
                if (obj.Filter != null)
                {
                    writer.WritePropertyName(PropName_filter);
                    writer.WriteTLObjectValue(obj.Filter);
                }
            }
        }

        partial class SearchCallMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchCallMessages");
            private static readonly JsonEncodedText PropName_from_message_id = JsonEncodedText.Encode("from_message_id");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            private static readonly JsonEncodedText PropName_only_missed = JsonEncodedText.Encode("only_missed");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchCallMessages)tlobj;
                writer.WritePropertyName(PropName_from_message_id);
                writer.WriteNumberValue(obj.FromMessageId);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
                writer.WritePropertyName(PropName_only_missed);
                writer.WriteBooleanValue(obj.OnlyMissed);
            }
        }

        partial class SearchChatRecentLocationMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchChatRecentLocationMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchChatRecentLocationMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class GetActiveLiveLocationMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getActiveLiveLocationMessages");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetChatMessageByDateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatMessageByDate");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_date = JsonEncodedText.Encode("date");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatMessageByDate)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_date);
                writer.WriteNumberValue(obj.Date);
            }
        }

        partial class GetChatMessageCountConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatMessageCount");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_filter = JsonEncodedText.Encode("filter");
            private static readonly JsonEncodedText PropName_return_local = JsonEncodedText.Encode("return_local");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatMessageCount)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.Filter != null)
                {
                    writer.WritePropertyName(PropName_filter);
                    writer.WriteTLObjectValue(obj.Filter);
                }
                writer.WritePropertyName(PropName_return_local);
                writer.WriteBooleanValue(obj.ReturnLocal);
            }
        }

        partial class GetChatScheduledMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatScheduledMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatScheduledMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class GetMessagePublicForwardsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMessagePublicForwards");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMessagePublicForwards)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_offset);
                writer.WriteStringValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class RemoveNotificationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeNotification");
            private static readonly JsonEncodedText PropName_notification_group_id = JsonEncodedText.Encode("notification_group_id");
            private static readonly JsonEncodedText PropName_notification_id = JsonEncodedText.Encode("notification_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveNotification)tlobj;
                writer.WritePropertyName(PropName_notification_group_id);
                writer.WriteNumberValue(obj.NotificationGroupId);
                writer.WritePropertyName(PropName_notification_id);
                writer.WriteNumberValue(obj.NotificationId);
            }
        }

        partial class RemoveNotificationGroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeNotificationGroup");
            private static readonly JsonEncodedText PropName_notification_group_id = JsonEncodedText.Encode("notification_group_id");
            private static readonly JsonEncodedText PropName_max_notification_id = JsonEncodedText.Encode("max_notification_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveNotificationGroup)tlobj;
                writer.WritePropertyName(PropName_notification_group_id);
                writer.WriteNumberValue(obj.NotificationGroupId);
                writer.WritePropertyName(PropName_max_notification_id);
                writer.WriteNumberValue(obj.MaxNotificationId);
            }
        }

        partial class GetMessageLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMessageLink");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_for_album = JsonEncodedText.Encode("for_album");
            private static readonly JsonEncodedText PropName_for_comment = JsonEncodedText.Encode("for_comment");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMessageLink)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_for_album);
                writer.WriteBooleanValue(obj.ForAlbum);
                writer.WritePropertyName(PropName_for_comment);
                writer.WriteBooleanValue(obj.ForComment);
            }
        }

        partial class GetMessageEmbeddingCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMessageEmbeddingCode");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_for_album = JsonEncodedText.Encode("for_album");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMessageEmbeddingCode)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_for_album);
                writer.WriteBooleanValue(obj.ForAlbum);
            }
        }

        partial class GetMessageLinkInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMessageLinkInfo");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMessageLinkInfo)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
            }
        }

        partial class SendMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
            private static readonly JsonEncodedText PropName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
            private static readonly JsonEncodedText PropName_options = JsonEncodedText.Encode("options");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_thread_id);
                writer.WriteNumberValue(obj.MessageThreadId);
                writer.WritePropertyName(PropName_reply_to_message_id);
                writer.WriteNumberValue(obj.ReplyToMessageId);
                if (obj.Options != null)
                {
                    writer.WritePropertyName(PropName_options);
                    writer.WriteTLObjectValue(obj.Options);
                }
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class SendMessageAlbumConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendMessageAlbum");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
            private static readonly JsonEncodedText PropName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
            private static readonly JsonEncodedText PropName_options = JsonEncodedText.Encode("options");
            private static readonly JsonEncodedText PropName_input_message_contents = JsonEncodedText.Encode("input_message_contents");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendMessageAlbum)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_thread_id);
                writer.WriteNumberValue(obj.MessageThreadId);
                writer.WritePropertyName(PropName_reply_to_message_id);
                writer.WriteNumberValue(obj.ReplyToMessageId);
                if (obj.Options != null)
                {
                    writer.WritePropertyName(PropName_options);
                    writer.WriteTLObjectValue(obj.Options);
                }
                if (obj.InputMessageContents != null)
                {
                    writer.WritePropertyName(PropName_input_message_contents);
                    writer.WriteArray(obj.InputMessageContents);
                }
            }
        }

        partial class SendBotStartMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendBotStartMessage");
            private static readonly JsonEncodedText PropName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_parameter = JsonEncodedText.Encode("parameter");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendBotStartMessage)tlobj;
                writer.WritePropertyName(PropName_bot_user_id);
                writer.WriteNumberValue(obj.BotUserId);
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_parameter);
                writer.WriteStringValue(obj.Parameter);
            }
        }

        partial class SendInlineQueryResultMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendInlineQueryResultMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
            private static readonly JsonEncodedText PropName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
            private static readonly JsonEncodedText PropName_options = JsonEncodedText.Encode("options");
            private static readonly JsonEncodedText PropName_query_id = JsonEncodedText.Encode("query_id");
            private static readonly JsonEncodedText PropName_result_id = JsonEncodedText.Encode("result_id");
            private static readonly JsonEncodedText PropName_hide_via_bot = JsonEncodedText.Encode("hide_via_bot");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendInlineQueryResultMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_thread_id);
                writer.WriteNumberValue(obj.MessageThreadId);
                writer.WritePropertyName(PropName_reply_to_message_id);
                writer.WriteNumberValue(obj.ReplyToMessageId);
                if (obj.Options != null)
                {
                    writer.WritePropertyName(PropName_options);
                    writer.WriteTLObjectValue(obj.Options);
                }
                writer.WritePropertyName(PropName_query_id);
                writer.WriteInt64String(obj.QueryId);
                writer.WritePropertyName(PropName_result_id);
                writer.WriteStringValue(obj.ResultId);
                writer.WritePropertyName(PropName_hide_via_bot);
                writer.WriteBooleanValue(obj.HideViaBot);
            }
        }

        partial class ForwardMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("forwardMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_from_chat_id = JsonEncodedText.Encode("from_chat_id");
            private static readonly JsonEncodedText PropName_message_ids = JsonEncodedText.Encode("message_ids");
            private static readonly JsonEncodedText PropName_options = JsonEncodedText.Encode("options");
            private static readonly JsonEncodedText PropName_send_copy = JsonEncodedText.Encode("send_copy");
            private static readonly JsonEncodedText PropName_remove_caption = JsonEncodedText.Encode("remove_caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ForwardMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_from_chat_id);
                writer.WriteNumberValue(obj.FromChatId);
                if (obj.MessageIds != null)
                {
                    writer.WritePropertyName(PropName_message_ids);
                    writer.WriteArray(obj.MessageIds);
                }
                if (obj.Options != null)
                {
                    writer.WritePropertyName(PropName_options);
                    writer.WriteTLObjectValue(obj.Options);
                }
                writer.WritePropertyName(PropName_send_copy);
                writer.WriteBooleanValue(obj.SendCopy);
                writer.WritePropertyName(PropName_remove_caption);
                writer.WriteBooleanValue(obj.RemoveCaption);
            }
        }

        partial class ResendMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("resendMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_ids = JsonEncodedText.Encode("message_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ResendMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.MessageIds != null)
                {
                    writer.WritePropertyName(PropName_message_ids);
                    writer.WriteArray(obj.MessageIds);
                }
            }
        }

        partial class SendChatSetTtlMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendChatSetTtlMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_ttl = JsonEncodedText.Encode("ttl");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendChatSetTtlMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_ttl);
                writer.WriteNumberValue(obj.Ttl);
            }
        }

        partial class SendChatScreenshotTakenNotificationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendChatScreenshotTakenNotification");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendChatScreenshotTakenNotification)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class AddLocalMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addLocalMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_sender_user_id = JsonEncodedText.Encode("sender_user_id");
            private static readonly JsonEncodedText PropName_reply_to_message_id = JsonEncodedText.Encode("reply_to_message_id");
            private static readonly JsonEncodedText PropName_disable_notification = JsonEncodedText.Encode("disable_notification");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddLocalMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_sender_user_id);
                writer.WriteNumberValue(obj.SenderUserId);
                writer.WritePropertyName(PropName_reply_to_message_id);
                writer.WriteNumberValue(obj.ReplyToMessageId);
                writer.WritePropertyName(PropName_disable_notification);
                writer.WriteBooleanValue(obj.DisableNotification);
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class DeleteMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_ids = JsonEncodedText.Encode("message_ids");
            private static readonly JsonEncodedText PropName_revoke = JsonEncodedText.Encode("revoke");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeleteMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.MessageIds != null)
                {
                    writer.WritePropertyName(PropName_message_ids);
                    writer.WriteArray(obj.MessageIds);
                }
                writer.WritePropertyName(PropName_revoke);
                writer.WriteBooleanValue(obj.Revoke);
            }
        }

        partial class DeleteChatMessagesFromUserConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteChatMessagesFromUser");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeleteChatMessagesFromUser)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class EditMessageTextConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editMessageText");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditMessageText)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class EditMessageLiveLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editMessageLiveLocation");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditMessageLiveLocation)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
            }
        }

        partial class EditMessageMediaConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editMessageMedia");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditMessageMedia)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class EditMessageCaptionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editMessageCaption");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditMessageCaption)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class EditMessageReplyMarkupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editMessageReplyMarkup");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditMessageReplyMarkup)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
            }
        }

        partial class EditInlineMessageTextConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editInlineMessageText");
            private static readonly JsonEncodedText PropName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditInlineMessageText)tlobj;
                writer.WritePropertyName(PropName_inline_message_id);
                writer.WriteStringValue(obj.InlineMessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class EditInlineMessageLiveLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editInlineMessageLiveLocation");
            private static readonly JsonEncodedText PropName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditInlineMessageLiveLocation)tlobj;
                writer.WritePropertyName(PropName_inline_message_id);
                writer.WriteStringValue(obj.InlineMessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
            }
        }

        partial class EditInlineMessageMediaConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editInlineMessageMedia");
            private static readonly JsonEncodedText PropName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_input_message_content = JsonEncodedText.Encode("input_message_content");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditInlineMessageMedia)tlobj;
                writer.WritePropertyName(PropName_inline_message_id);
                writer.WriteStringValue(obj.InlineMessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.InputMessageContent != null)
                {
                    writer.WritePropertyName(PropName_input_message_content);
                    writer.WriteTLObjectValue(obj.InputMessageContent);
                }
            }
        }

        partial class EditInlineMessageCaptionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editInlineMessageCaption");
            private static readonly JsonEncodedText PropName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            private static readonly JsonEncodedText PropName_caption = JsonEncodedText.Encode("caption");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditInlineMessageCaption)tlobj;
                writer.WritePropertyName(PropName_inline_message_id);
                writer.WriteStringValue(obj.InlineMessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
                if (obj.Caption != null)
                {
                    writer.WritePropertyName(PropName_caption);
                    writer.WriteTLObjectValue(obj.Caption);
                }
            }
        }

        partial class EditInlineMessageReplyMarkupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editInlineMessageReplyMarkup");
            private static readonly JsonEncodedText PropName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditInlineMessageReplyMarkup)tlobj;
                writer.WritePropertyName(PropName_inline_message_id);
                writer.WriteStringValue(obj.InlineMessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
            }
        }

        partial class EditMessageSchedulingStateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editMessageSchedulingState");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_scheduling_state = JsonEncodedText.Encode("scheduling_state");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditMessageSchedulingState)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.SchedulingState != null)
                {
                    writer.WritePropertyName(PropName_scheduling_state);
                    writer.WriteTLObjectValue(obj.SchedulingState);
                }
            }
        }

        partial class GetTextEntitiesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getTextEntities");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetTextEntities)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
            }
        }

        partial class ParseTextEntitiesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("parseTextEntities");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_parse_mode = JsonEncodedText.Encode("parse_mode");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ParseTextEntities)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
                if (obj.ParseMode != null)
                {
                    writer.WritePropertyName(PropName_parse_mode);
                    writer.WriteTLObjectValue(obj.ParseMode);
                }
            }
        }

        partial class ParseMarkdownConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("parseMarkdown");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ParseMarkdown)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class GetMarkdownTextConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMarkdownText");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMarkdownText)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class GetFileMimeTypeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getFileMimeType");
            private static readonly JsonEncodedText PropName_file_name = JsonEncodedText.Encode("file_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetFileMimeType)tlobj;
                writer.WritePropertyName(PropName_file_name);
                writer.WriteStringValue(obj.FileName);
            }
        }

        partial class GetFileExtensionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getFileExtension");
            private static readonly JsonEncodedText PropName_mime_type = JsonEncodedText.Encode("mime_type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetFileExtension)tlobj;
                writer.WritePropertyName(PropName_mime_type);
                writer.WriteStringValue(obj.MimeType);
            }
        }

        partial class CleanFileNameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("cleanFileName");
            private static readonly JsonEncodedText PropName_file_name = JsonEncodedText.Encode("file_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CleanFileName)tlobj;
                writer.WritePropertyName(PropName_file_name);
                writer.WriteStringValue(obj.FileName);
            }
        }

        partial class GetLanguagePackStringConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getLanguagePackString");
            private static readonly JsonEncodedText PropName_language_pack_database_path = JsonEncodedText.Encode("language_pack_database_path");
            private static readonly JsonEncodedText PropName_localization_target = JsonEncodedText.Encode("localization_target");
            private static readonly JsonEncodedText PropName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
            private static readonly JsonEncodedText PropName_key = JsonEncodedText.Encode("key");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetLanguagePackString)tlobj;
                writer.WritePropertyName(PropName_language_pack_database_path);
                writer.WriteStringValue(obj.LanguagePackDatabasePath);
                writer.WritePropertyName(PropName_localization_target);
                writer.WriteStringValue(obj.LocalizationTarget);
                writer.WritePropertyName(PropName_language_pack_id);
                writer.WriteStringValue(obj.LanguagePackId);
                writer.WritePropertyName(PropName_key);
                writer.WriteStringValue(obj.Key);
            }
        }

        partial class GetJsonValueConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getJsonValue");
            private static readonly JsonEncodedText PropName_json = JsonEncodedText.Encode("json");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetJsonValue)tlobj;
                writer.WritePropertyName(PropName_json);
                writer.WriteStringValue(obj.Json);
            }
        }

        partial class GetJsonStringConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getJsonString");
            private static readonly JsonEncodedText PropName_json_value = JsonEncodedText.Encode("json_value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetJsonString)tlobj;
                if (obj.JsonValue != null)
                {
                    writer.WritePropertyName(PropName_json_value);
                    writer.WriteTLObjectValue(obj.JsonValue);
                }
            }
        }

        partial class SetPollAnswerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setPollAnswer");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_option_ids = JsonEncodedText.Encode("option_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetPollAnswer)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.OptionIds != null)
                {
                    writer.WritePropertyName(PropName_option_ids);
                    writer.WriteArray(obj.OptionIds);
                }
            }
        }

        partial class GetPollVotersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getPollVoters");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_option_id = JsonEncodedText.Encode("option_id");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetPollVoters)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_option_id);
                writer.WriteNumberValue(obj.OptionId);
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class StopPollConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("stopPoll");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_reply_markup = JsonEncodedText.Encode("reply_markup");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (StopPoll)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.ReplyMarkup != null)
                {
                    writer.WritePropertyName(PropName_reply_markup);
                    writer.WriteTLObjectValue(obj.ReplyMarkup);
                }
            }
        }

        partial class HideSuggestedActionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("hideSuggestedAction");
            private static readonly JsonEncodedText PropName_action = JsonEncodedText.Encode("action");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (HideSuggestedAction)tlobj;
                if (obj.Action != null)
                {
                    writer.WritePropertyName(PropName_action);
                    writer.WriteTLObjectValue(obj.Action);
                }
            }
        }

        partial class GetLoginUrlInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getLoginUrlInfo");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_button_id = JsonEncodedText.Encode("button_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetLoginUrlInfo)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_button_id);
                writer.WriteNumberValue(obj.ButtonId);
            }
        }

        partial class GetLoginUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getLoginUrl");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_button_id = JsonEncodedText.Encode("button_id");
            private static readonly JsonEncodedText PropName_allow_write_access = JsonEncodedText.Encode("allow_write_access");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetLoginUrl)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_button_id);
                writer.WriteNumberValue(obj.ButtonId);
                writer.WritePropertyName(PropName_allow_write_access);
                writer.WriteBooleanValue(obj.AllowWriteAccess);
            }
        }

        partial class GetInlineQueryResultsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getInlineQueryResults");
            private static readonly JsonEncodedText PropName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_user_location = JsonEncodedText.Encode("user_location");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetInlineQueryResults)tlobj;
                writer.WritePropertyName(PropName_bot_user_id);
                writer.WriteNumberValue(obj.BotUserId);
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.UserLocation != null)
                {
                    writer.WritePropertyName(PropName_user_location);
                    writer.WriteTLObjectValue(obj.UserLocation);
                }
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_offset);
                writer.WriteStringValue(obj.Offset);
            }
        }

        partial class AnswerInlineQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("answerInlineQuery");
            private static readonly JsonEncodedText PropName_inline_query_id = JsonEncodedText.Encode("inline_query_id");
            private static readonly JsonEncodedText PropName_is_personal = JsonEncodedText.Encode("is_personal");
            private static readonly JsonEncodedText PropName_results = JsonEncodedText.Encode("results");
            private static readonly JsonEncodedText PropName_cache_time = JsonEncodedText.Encode("cache_time");
            private static readonly JsonEncodedText PropName_next_offset = JsonEncodedText.Encode("next_offset");
            private static readonly JsonEncodedText PropName_switch_pm_text = JsonEncodedText.Encode("switch_pm_text");
            private static readonly JsonEncodedText PropName_switch_pm_parameter = JsonEncodedText.Encode("switch_pm_parameter");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AnswerInlineQuery)tlobj;
                writer.WritePropertyName(PropName_inline_query_id);
                writer.WriteInt64String(obj.InlineQueryId);
                writer.WritePropertyName(PropName_is_personal);
                writer.WriteBooleanValue(obj.IsPersonal);
                if (obj.Results != null)
                {
                    writer.WritePropertyName(PropName_results);
                    writer.WriteArray(obj.Results);
                }
                writer.WritePropertyName(PropName_cache_time);
                writer.WriteNumberValue(obj.CacheTime);
                writer.WritePropertyName(PropName_next_offset);
                writer.WriteStringValue(obj.NextOffset);
                writer.WritePropertyName(PropName_switch_pm_text);
                writer.WriteStringValue(obj.SwitchPmText);
                writer.WritePropertyName(PropName_switch_pm_parameter);
                writer.WriteStringValue(obj.SwitchPmParameter);
            }
        }

        partial class GetCallbackQueryAnswerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getCallbackQueryAnswer");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_payload = JsonEncodedText.Encode("payload");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetCallbackQueryAnswer)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.Payload != null)
                {
                    writer.WritePropertyName(PropName_payload);
                    writer.WriteTLObjectValue(obj.Payload);
                }
            }
        }

        partial class AnswerCallbackQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("answerCallbackQuery");
            private static readonly JsonEncodedText PropName_callback_query_id = JsonEncodedText.Encode("callback_query_id");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_show_alert = JsonEncodedText.Encode("show_alert");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_cache_time = JsonEncodedText.Encode("cache_time");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AnswerCallbackQuery)tlobj;
                writer.WritePropertyName(PropName_callback_query_id);
                writer.WriteInt64String(obj.CallbackQueryId);
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
                writer.WritePropertyName(PropName_show_alert);
                writer.WriteBooleanValue(obj.ShowAlert);
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_cache_time);
                writer.WriteNumberValue(obj.CacheTime);
            }
        }

        partial class AnswerShippingQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("answerShippingQuery");
            private static readonly JsonEncodedText PropName_shipping_query_id = JsonEncodedText.Encode("shipping_query_id");
            private static readonly JsonEncodedText PropName_shipping_options = JsonEncodedText.Encode("shipping_options");
            private static readonly JsonEncodedText PropName_error_message = JsonEncodedText.Encode("error_message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AnswerShippingQuery)tlobj;
                writer.WritePropertyName(PropName_shipping_query_id);
                writer.WriteInt64String(obj.ShippingQueryId);
                if (obj.ShippingOptions != null)
                {
                    writer.WritePropertyName(PropName_shipping_options);
                    writer.WriteArray(obj.ShippingOptions);
                }
                writer.WritePropertyName(PropName_error_message);
                writer.WriteStringValue(obj.ErrorMessage);
            }
        }

        partial class AnswerPreCheckoutQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("answerPreCheckoutQuery");
            private static readonly JsonEncodedText PropName_pre_checkout_query_id = JsonEncodedText.Encode("pre_checkout_query_id");
            private static readonly JsonEncodedText PropName_error_message = JsonEncodedText.Encode("error_message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AnswerPreCheckoutQuery)tlobj;
                writer.WritePropertyName(PropName_pre_checkout_query_id);
                writer.WriteInt64String(obj.PreCheckoutQueryId);
                writer.WritePropertyName(PropName_error_message);
                writer.WriteStringValue(obj.ErrorMessage);
            }
        }

        partial class SetGameScoreConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setGameScore");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_edit_message = JsonEncodedText.Encode("edit_message");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_score = JsonEncodedText.Encode("score");
            private static readonly JsonEncodedText PropName_force = JsonEncodedText.Encode("force");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetGameScore)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_edit_message);
                writer.WriteBooleanValue(obj.EditMessage);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_score);
                writer.WriteNumberValue(obj.Score);
                writer.WritePropertyName(PropName_force);
                writer.WriteBooleanValue(obj.Force);
            }
        }

        partial class SetInlineGameScoreConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setInlineGameScore");
            private static readonly JsonEncodedText PropName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
            private static readonly JsonEncodedText PropName_edit_message = JsonEncodedText.Encode("edit_message");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_score = JsonEncodedText.Encode("score");
            private static readonly JsonEncodedText PropName_force = JsonEncodedText.Encode("force");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetInlineGameScore)tlobj;
                writer.WritePropertyName(PropName_inline_message_id);
                writer.WriteStringValue(obj.InlineMessageId);
                writer.WritePropertyName(PropName_edit_message);
                writer.WriteBooleanValue(obj.EditMessage);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_score);
                writer.WriteNumberValue(obj.Score);
                writer.WritePropertyName(PropName_force);
                writer.WriteBooleanValue(obj.Force);
            }
        }

        partial class GetGameHighScoresConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getGameHighScores");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetGameHighScores)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class GetInlineGameHighScoresConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getInlineGameHighScores");
            private static readonly JsonEncodedText PropName_inline_message_id = JsonEncodedText.Encode("inline_message_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetInlineGameHighScores)tlobj;
                writer.WritePropertyName(PropName_inline_message_id);
                writer.WriteStringValue(obj.InlineMessageId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class DeleteChatReplyMarkupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteChatReplyMarkup");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeleteChatReplyMarkup)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class SendChatActionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendChatAction");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
            private static readonly JsonEncodedText PropName_action = JsonEncodedText.Encode("action");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendChatAction)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_thread_id);
                writer.WriteNumberValue(obj.MessageThreadId);
                if (obj.Action != null)
                {
                    writer.WritePropertyName(PropName_action);
                    writer.WriteTLObjectValue(obj.Action);
                }
            }
        }

        partial class OpenChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("openChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (OpenChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class CloseChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("closeChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CloseChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class ViewMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("viewMessages");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
            private static readonly JsonEncodedText PropName_message_ids = JsonEncodedText.Encode("message_ids");
            private static readonly JsonEncodedText PropName_force_read = JsonEncodedText.Encode("force_read");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ViewMessages)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_thread_id);
                writer.WriteNumberValue(obj.MessageThreadId);
                if (obj.MessageIds != null)
                {
                    writer.WritePropertyName(PropName_message_ids);
                    writer.WriteArray(obj.MessageIds);
                }
                writer.WritePropertyName(PropName_force_read);
                writer.WriteBooleanValue(obj.ForceRead);
            }
        }

        partial class OpenMessageContentConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("openMessageContent");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (OpenMessageContent)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class ReadAllChatMentionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("readAllChatMentions");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ReadAllChatMentions)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class CreatePrivateChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createPrivateChat");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_force = JsonEncodedText.Encode("force");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreatePrivateChat)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_force);
                writer.WriteBooleanValue(obj.Force);
            }
        }

        partial class CreateBasicGroupChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createBasicGroupChat");
            private static readonly JsonEncodedText PropName_basic_group_id = JsonEncodedText.Encode("basic_group_id");
            private static readonly JsonEncodedText PropName_force = JsonEncodedText.Encode("force");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreateBasicGroupChat)tlobj;
                writer.WritePropertyName(PropName_basic_group_id);
                writer.WriteNumberValue(obj.BasicGroupId);
                writer.WritePropertyName(PropName_force);
                writer.WriteBooleanValue(obj.Force);
            }
        }

        partial class CreateSupergroupChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createSupergroupChat");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            private static readonly JsonEncodedText PropName_force = JsonEncodedText.Encode("force");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreateSupergroupChat)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
                writer.WritePropertyName(PropName_force);
                writer.WriteBooleanValue(obj.Force);
            }
        }

        partial class CreateSecretChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createSecretChat");
            private static readonly JsonEncodedText PropName_secret_chat_id = JsonEncodedText.Encode("secret_chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreateSecretChat)tlobj;
                writer.WritePropertyName(PropName_secret_chat_id);
                writer.WriteNumberValue(obj.SecretChatId);
            }
        }

        partial class CreateNewBasicGroupChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createNewBasicGroupChat");
            private static readonly JsonEncodedText PropName_user_ids = JsonEncodedText.Encode("user_ids");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreateNewBasicGroupChat)tlobj;
                if (obj.UserIds != null)
                {
                    writer.WritePropertyName(PropName_user_ids);
                    writer.WriteArray(obj.UserIds);
                }
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
            }
        }

        partial class CreateNewSupergroupChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createNewSupergroupChat");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_is_channel = JsonEncodedText.Encode("is_channel");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreateNewSupergroupChat)tlobj;
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_is_channel);
                writer.WriteBooleanValue(obj.IsChannel);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
            }
        }

        partial class CreateNewSecretChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createNewSecretChat");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreateNewSecretChat)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class UpgradeBasicGroupChatToSupergroupChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("upgradeBasicGroupChatToSupergroupChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UpgradeBasicGroupChatToSupergroupChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class GetChatListsToAddChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatListsToAddChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatListsToAddChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class AddChatToListConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addChatToList");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_chat_list = JsonEncodedText.Encode("chat_list");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddChatToList)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.ChatList != null)
                {
                    writer.WritePropertyName(PropName_chat_list);
                    writer.WriteTLObjectValue(obj.ChatList);
                }
            }
        }

        partial class GetChatFilterConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatFilter");
            private static readonly JsonEncodedText PropName_chat_filter_id = JsonEncodedText.Encode("chat_filter_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatFilter)tlobj;
                writer.WritePropertyName(PropName_chat_filter_id);
                writer.WriteNumberValue(obj.ChatFilterId);
            }
        }

        partial class CreateChatFilterConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createChatFilter");
            private static readonly JsonEncodedText PropName_filter = JsonEncodedText.Encode("filter");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreateChatFilter)tlobj;
                if (obj.Filter != null)
                {
                    writer.WritePropertyName(PropName_filter);
                    writer.WriteTLObjectValue(obj.Filter);
                }
            }
        }

        partial class EditChatFilterConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editChatFilter");
            private static readonly JsonEncodedText PropName_chat_filter_id = JsonEncodedText.Encode("chat_filter_id");
            private static readonly JsonEncodedText PropName_filter = JsonEncodedText.Encode("filter");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditChatFilter)tlobj;
                writer.WritePropertyName(PropName_chat_filter_id);
                writer.WriteNumberValue(obj.ChatFilterId);
                if (obj.Filter != null)
                {
                    writer.WritePropertyName(PropName_filter);
                    writer.WriteTLObjectValue(obj.Filter);
                }
            }
        }

        partial class DeleteChatFilterConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteChatFilter");
            private static readonly JsonEncodedText PropName_chat_filter_id = JsonEncodedText.Encode("chat_filter_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeleteChatFilter)tlobj;
                writer.WritePropertyName(PropName_chat_filter_id);
                writer.WriteNumberValue(obj.ChatFilterId);
            }
        }

        partial class ReorderChatFiltersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("reorderChatFilters");
            private static readonly JsonEncodedText PropName_chat_filter_ids = JsonEncodedText.Encode("chat_filter_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ReorderChatFilters)tlobj;
                if (obj.ChatFilterIds != null)
                {
                    writer.WritePropertyName(PropName_chat_filter_ids);
                    writer.WriteArray(obj.ChatFilterIds);
                }
            }
        }

        partial class GetRecommendedChatFiltersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getRecommendedChatFilters");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetChatFilterDefaultIconNameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatFilterDefaultIconName");
            private static readonly JsonEncodedText PropName_filter = JsonEncodedText.Encode("filter");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatFilterDefaultIconName)tlobj;
                if (obj.Filter != null)
                {
                    writer.WritePropertyName(PropName_filter);
                    writer.WriteTLObjectValue(obj.Filter);
                }
            }
        }

        partial class SetChatTitleConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatTitle");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatTitle)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
            }
        }

        partial class SetChatPhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatPhoto");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatPhoto)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
            }
        }

        partial class SetChatPermissionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatPermissions");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_permissions = JsonEncodedText.Encode("permissions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatPermissions)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.Permissions != null)
                {
                    writer.WritePropertyName(PropName_permissions);
                    writer.WriteTLObjectValue(obj.Permissions);
                }
            }
        }

        partial class SetChatDraftMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatDraftMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_thread_id = JsonEncodedText.Encode("message_thread_id");
            private static readonly JsonEncodedText PropName_draft_message = JsonEncodedText.Encode("draft_message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatDraftMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_thread_id);
                writer.WriteNumberValue(obj.MessageThreadId);
                if (obj.DraftMessage != null)
                {
                    writer.WritePropertyName(PropName_draft_message);
                    writer.WriteTLObjectValue(obj.DraftMessage);
                }
            }
        }

        partial class SetChatNotificationSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatNotificationSettings");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_notification_settings = JsonEncodedText.Encode("notification_settings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatNotificationSettings)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.NotificationSettings != null)
                {
                    writer.WritePropertyName(PropName_notification_settings);
                    writer.WriteTLObjectValue(obj.NotificationSettings);
                }
            }
        }

        partial class ToggleChatIsMarkedAsUnreadConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("toggleChatIsMarkedAsUnread");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_is_marked_as_unread = JsonEncodedText.Encode("is_marked_as_unread");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ToggleChatIsMarkedAsUnread)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_is_marked_as_unread);
                writer.WriteBooleanValue(obj.IsMarkedAsUnread);
            }
        }

        partial class ToggleChatIsBlockedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("toggleChatIsBlocked");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_is_blocked = JsonEncodedText.Encode("is_blocked");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ToggleChatIsBlocked)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_is_blocked);
                writer.WriteBooleanValue(obj.IsBlocked);
            }
        }

        partial class ToggleChatDefaultDisableNotificationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("toggleChatDefaultDisableNotification");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_default_disable_notification = JsonEncodedText.Encode("default_disable_notification");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ToggleChatDefaultDisableNotification)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_default_disable_notification);
                writer.WriteBooleanValue(obj.DefaultDisableNotification);
            }
        }

        partial class SetChatClientDataConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatClientData");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_client_data = JsonEncodedText.Encode("client_data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatClientData)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_client_data);
                writer.WriteStringValue(obj.ClientData);
            }
        }

        partial class SetChatDescriptionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatDescription");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_description = JsonEncodedText.Encode("description");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatDescription)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_description);
                writer.WriteStringValue(obj.Description);
            }
        }

        partial class SetChatDiscussionGroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatDiscussionGroup");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_discussion_chat_id = JsonEncodedText.Encode("discussion_chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatDiscussionGroup)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_discussion_chat_id);
                writer.WriteNumberValue(obj.DiscussionChatId);
            }
        }

        partial class SetChatLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatLocation");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatLocation)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
            }
        }

        partial class SetChatSlowModeDelayConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatSlowModeDelay");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_slow_mode_delay = JsonEncodedText.Encode("slow_mode_delay");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatSlowModeDelay)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_slow_mode_delay);
                writer.WriteNumberValue(obj.SlowModeDelay);
            }
        }

        partial class PinChatMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pinChatMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_disable_notification = JsonEncodedText.Encode("disable_notification");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PinChatMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_disable_notification);
                writer.WriteBooleanValue(obj.DisableNotification);
            }
        }

        partial class UnpinChatMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("unpinChatMessage");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UnpinChatMessage)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class JoinChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("joinChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (JoinChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class LeaveChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("leaveChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (LeaveChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class AddChatMemberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addChatMember");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_forward_limit = JsonEncodedText.Encode("forward_limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddChatMember)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_forward_limit);
                writer.WriteNumberValue(obj.ForwardLimit);
            }
        }

        partial class AddChatMembersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addChatMembers");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_user_ids = JsonEncodedText.Encode("user_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddChatMembers)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.UserIds != null)
                {
                    writer.WritePropertyName(PropName_user_ids);
                    writer.WriteArray(obj.UserIds);
                }
            }
        }

        partial class SetChatMemberStatusConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setChatMemberStatus");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_status = JsonEncodedText.Encode("status");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetChatMemberStatus)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.Status != null)
                {
                    writer.WritePropertyName(PropName_status);
                    writer.WriteTLObjectValue(obj.Status);
                }
            }
        }

        partial class CanTransferOwnershipConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("canTransferOwnership");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TransferChatOwnershipConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("transferChatOwnership");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TransferChatOwnership)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
            }
        }

        partial class GetChatMemberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatMember");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatMember)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class SearchChatMembersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchChatMembers");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            private static readonly JsonEncodedText PropName_filter = JsonEncodedText.Encode("filter");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchChatMembers)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
                if (obj.Filter != null)
                {
                    writer.WritePropertyName(PropName_filter);
                    writer.WriteTLObjectValue(obj.Filter);
                }
            }
        }

        partial class GetChatAdministratorsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatAdministrators");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatAdministrators)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class ClearAllDraftMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("clearAllDraftMessages");
            private static readonly JsonEncodedText PropName_exclude_secret_chats = JsonEncodedText.Encode("exclude_secret_chats");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ClearAllDraftMessages)tlobj;
                writer.WritePropertyName(PropName_exclude_secret_chats);
                writer.WriteBooleanValue(obj.ExcludeSecretChats);
            }
        }

        partial class GetChatNotificationSettingsExceptionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatNotificationSettingsExceptions");
            private static readonly JsonEncodedText PropName_scope = JsonEncodedText.Encode("scope");
            private static readonly JsonEncodedText PropName_compare_sound = JsonEncodedText.Encode("compare_sound");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatNotificationSettingsExceptions)tlobj;
                if (obj.Scope != null)
                {
                    writer.WritePropertyName(PropName_scope);
                    writer.WriteTLObjectValue(obj.Scope);
                }
                writer.WritePropertyName(PropName_compare_sound);
                writer.WriteBooleanValue(obj.CompareSound);
            }
        }

        partial class GetScopeNotificationSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getScopeNotificationSettings");
            private static readonly JsonEncodedText PropName_scope = JsonEncodedText.Encode("scope");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetScopeNotificationSettings)tlobj;
                if (obj.Scope != null)
                {
                    writer.WritePropertyName(PropName_scope);
                    writer.WriteTLObjectValue(obj.Scope);
                }
            }
        }

        partial class SetScopeNotificationSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setScopeNotificationSettings");
            private static readonly JsonEncodedText PropName_scope = JsonEncodedText.Encode("scope");
            private static readonly JsonEncodedText PropName_notification_settings = JsonEncodedText.Encode("notification_settings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetScopeNotificationSettings)tlobj;
                if (obj.Scope != null)
                {
                    writer.WritePropertyName(PropName_scope);
                    writer.WriteTLObjectValue(obj.Scope);
                }
                if (obj.NotificationSettings != null)
                {
                    writer.WritePropertyName(PropName_notification_settings);
                    writer.WriteTLObjectValue(obj.NotificationSettings);
                }
            }
        }

        partial class ResetAllNotificationSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("resetAllNotificationSettings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ToggleChatIsPinnedConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("toggleChatIsPinned");
            private static readonly JsonEncodedText PropName_chat_list = JsonEncodedText.Encode("chat_list");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_is_pinned = JsonEncodedText.Encode("is_pinned");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ToggleChatIsPinned)tlobj;
                if (obj.ChatList != null)
                {
                    writer.WritePropertyName(PropName_chat_list);
                    writer.WriteTLObjectValue(obj.ChatList);
                }
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_is_pinned);
                writer.WriteBooleanValue(obj.IsPinned);
            }
        }

        partial class SetPinnedChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setPinnedChats");
            private static readonly JsonEncodedText PropName_chat_list = JsonEncodedText.Encode("chat_list");
            private static readonly JsonEncodedText PropName_chat_ids = JsonEncodedText.Encode("chat_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetPinnedChats)tlobj;
                if (obj.ChatList != null)
                {
                    writer.WritePropertyName(PropName_chat_list);
                    writer.WriteTLObjectValue(obj.ChatList);
                }
                if (obj.ChatIds != null)
                {
                    writer.WritePropertyName(PropName_chat_ids);
                    writer.WriteArray(obj.ChatIds);
                }
            }
        }

        partial class DownloadFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("downloadFile");
            private static readonly JsonEncodedText PropName_file_id = JsonEncodedText.Encode("file_id");
            private static readonly JsonEncodedText PropName_priority = JsonEncodedText.Encode("priority");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            private static readonly JsonEncodedText PropName_synchronous = JsonEncodedText.Encode("synchronous");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DownloadFile)tlobj;
                writer.WritePropertyName(PropName_file_id);
                writer.WriteNumberValue(obj.FileId);
                writer.WritePropertyName(PropName_priority);
                writer.WriteNumberValue(obj.Priority);
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
                writer.WritePropertyName(PropName_synchronous);
                writer.WriteBooleanValue(obj.Synchronous);
            }
        }

        partial class GetFileDownloadedPrefixSizeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getFileDownloadedPrefixSize");
            private static readonly JsonEncodedText PropName_file_id = JsonEncodedText.Encode("file_id");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetFileDownloadedPrefixSize)tlobj;
                writer.WritePropertyName(PropName_file_id);
                writer.WriteNumberValue(obj.FileId);
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
            }
        }

        partial class CancelDownloadFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("cancelDownloadFile");
            private static readonly JsonEncodedText PropName_file_id = JsonEncodedText.Encode("file_id");
            private static readonly JsonEncodedText PropName_only_if_pending = JsonEncodedText.Encode("only_if_pending");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CancelDownloadFile)tlobj;
                writer.WritePropertyName(PropName_file_id);
                writer.WriteNumberValue(obj.FileId);
                writer.WritePropertyName(PropName_only_if_pending);
                writer.WriteBooleanValue(obj.OnlyIfPending);
            }
        }

        partial class UploadFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("uploadFile");
            private static readonly JsonEncodedText PropName_file = JsonEncodedText.Encode("file");
            private static readonly JsonEncodedText PropName_file_type = JsonEncodedText.Encode("file_type");
            private static readonly JsonEncodedText PropName_priority = JsonEncodedText.Encode("priority");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UploadFile)tlobj;
                if (obj.File != null)
                {
                    writer.WritePropertyName(PropName_file);
                    writer.WriteTLObjectValue(obj.File);
                }
                if (obj.FileType != null)
                {
                    writer.WritePropertyName(PropName_file_type);
                    writer.WriteTLObjectValue(obj.FileType);
                }
                writer.WritePropertyName(PropName_priority);
                writer.WriteNumberValue(obj.Priority);
            }
        }

        partial class CancelUploadFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("cancelUploadFile");
            private static readonly JsonEncodedText PropName_file_id = JsonEncodedText.Encode("file_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CancelUploadFile)tlobj;
                writer.WritePropertyName(PropName_file_id);
                writer.WriteNumberValue(obj.FileId);
            }
        }

        partial class WriteGeneratedFilePartConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("writeGeneratedFilePart");
            private static readonly JsonEncodedText PropName_generation_id = JsonEncodedText.Encode("generation_id");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (WriteGeneratedFilePart)tlobj;
                writer.WritePropertyName(PropName_generation_id);
                writer.WriteInt64String(obj.GenerationId);
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
            }
        }

        partial class SetFileGenerationProgressConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setFileGenerationProgress");
            private static readonly JsonEncodedText PropName_generation_id = JsonEncodedText.Encode("generation_id");
            private static readonly JsonEncodedText PropName_expected_size = JsonEncodedText.Encode("expected_size");
            private static readonly JsonEncodedText PropName_local_prefix_size = JsonEncodedText.Encode("local_prefix_size");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetFileGenerationProgress)tlobj;
                writer.WritePropertyName(PropName_generation_id);
                writer.WriteInt64String(obj.GenerationId);
                writer.WritePropertyName(PropName_expected_size);
                writer.WriteNumberValue(obj.ExpectedSize);
                writer.WritePropertyName(PropName_local_prefix_size);
                writer.WriteNumberValue(obj.LocalPrefixSize);
            }
        }

        partial class FinishFileGenerationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("finishFileGeneration");
            private static readonly JsonEncodedText PropName_generation_id = JsonEncodedText.Encode("generation_id");
            private static readonly JsonEncodedText PropName_error = JsonEncodedText.Encode("error");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (FinishFileGeneration)tlobj;
                writer.WritePropertyName(PropName_generation_id);
                writer.WriteInt64String(obj.GenerationId);
                if (obj.Error != null)
                {
                    writer.WritePropertyName(PropName_error);
                    writer.WriteTLObjectValue(obj.Error);
                }
            }
        }

        partial class ReadFilePartConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("readFilePart");
            private static readonly JsonEncodedText PropName_file_id = JsonEncodedText.Encode("file_id");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_count = JsonEncodedText.Encode("count");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ReadFilePart)tlobj;
                writer.WritePropertyName(PropName_file_id);
                writer.WriteNumberValue(obj.FileId);
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_count);
                writer.WriteNumberValue(obj.Count);
            }
        }

        partial class DeleteFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteFile");
            private static readonly JsonEncodedText PropName_file_id = JsonEncodedText.Encode("file_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeleteFile)tlobj;
                writer.WritePropertyName(PropName_file_id);
                writer.WriteNumberValue(obj.FileId);
            }
        }

        partial class GenerateChatInviteLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("generateChatInviteLink");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GenerateChatInviteLink)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class CheckChatInviteLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkChatInviteLink");
            private static readonly JsonEncodedText PropName_invite_link = JsonEncodedText.Encode("invite_link");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckChatInviteLink)tlobj;
                writer.WritePropertyName(PropName_invite_link);
                writer.WriteStringValue(obj.InviteLink);
            }
        }

        partial class JoinChatByInviteLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("joinChatByInviteLink");
            private static readonly JsonEncodedText PropName_invite_link = JsonEncodedText.Encode("invite_link");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (JoinChatByInviteLink)tlobj;
                writer.WritePropertyName(PropName_invite_link);
                writer.WriteStringValue(obj.InviteLink);
            }
        }

        partial class CreateCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createCall");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_protocol = JsonEncodedText.Encode("protocol");
            private static readonly JsonEncodedText PropName_is_video = JsonEncodedText.Encode("is_video");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreateCall)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.Protocol != null)
                {
                    writer.WritePropertyName(PropName_protocol);
                    writer.WriteTLObjectValue(obj.Protocol);
                }
                writer.WritePropertyName(PropName_is_video);
                writer.WriteBooleanValue(obj.IsVideo);
            }
        }

        partial class AcceptCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("acceptCall");
            private static readonly JsonEncodedText PropName_call_id = JsonEncodedText.Encode("call_id");
            private static readonly JsonEncodedText PropName_protocol = JsonEncodedText.Encode("protocol");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AcceptCall)tlobj;
                writer.WritePropertyName(PropName_call_id);
                writer.WriteNumberValue(obj.CallId);
                if (obj.Protocol != null)
                {
                    writer.WritePropertyName(PropName_protocol);
                    writer.WriteTLObjectValue(obj.Protocol);
                }
            }
        }

        partial class SendCallSignalingDataConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendCallSignalingData");
            private static readonly JsonEncodedText PropName_call_id = JsonEncodedText.Encode("call_id");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendCallSignalingData)tlobj;
                writer.WritePropertyName(PropName_call_id);
                writer.WriteNumberValue(obj.CallId);
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteBase64StringValue(obj.Data);
                }
            }
        }

        partial class DiscardCallConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("discardCall");
            private static readonly JsonEncodedText PropName_call_id = JsonEncodedText.Encode("call_id");
            private static readonly JsonEncodedText PropName_is_disconnected = JsonEncodedText.Encode("is_disconnected");
            private static readonly JsonEncodedText PropName_duration = JsonEncodedText.Encode("duration");
            private static readonly JsonEncodedText PropName_is_video = JsonEncodedText.Encode("is_video");
            private static readonly JsonEncodedText PropName_connection_id = JsonEncodedText.Encode("connection_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DiscardCall)tlobj;
                writer.WritePropertyName(PropName_call_id);
                writer.WriteNumberValue(obj.CallId);
                writer.WritePropertyName(PropName_is_disconnected);
                writer.WriteBooleanValue(obj.IsDisconnected);
                writer.WritePropertyName(PropName_duration);
                writer.WriteNumberValue(obj.Duration);
                writer.WritePropertyName(PropName_is_video);
                writer.WriteBooleanValue(obj.IsVideo);
                writer.WritePropertyName(PropName_connection_id);
                writer.WriteInt64String(obj.ConnectionId);
            }
        }

        partial class SendCallRatingConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendCallRating");
            private static readonly JsonEncodedText PropName_call_id = JsonEncodedText.Encode("call_id");
            private static readonly JsonEncodedText PropName_rating = JsonEncodedText.Encode("rating");
            private static readonly JsonEncodedText PropName_comment = JsonEncodedText.Encode("comment");
            private static readonly JsonEncodedText PropName_problems = JsonEncodedText.Encode("problems");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendCallRating)tlobj;
                writer.WritePropertyName(PropName_call_id);
                writer.WriteNumberValue(obj.CallId);
                writer.WritePropertyName(PropName_rating);
                writer.WriteNumberValue(obj.Rating);
                writer.WritePropertyName(PropName_comment);
                writer.WriteStringValue(obj.Comment);
                if (obj.Problems != null)
                {
                    writer.WritePropertyName(PropName_problems);
                    writer.WriteArray(obj.Problems);
                }
            }
        }

        partial class SendCallDebugInformationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendCallDebugInformation");
            private static readonly JsonEncodedText PropName_call_id = JsonEncodedText.Encode("call_id");
            private static readonly JsonEncodedText PropName_debug_information = JsonEncodedText.Encode("debug_information");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendCallDebugInformation)tlobj;
                writer.WritePropertyName(PropName_call_id);
                writer.WriteNumberValue(obj.CallId);
                writer.WritePropertyName(PropName_debug_information);
                writer.WriteStringValue(obj.DebugInformation);
            }
        }

        partial class BlockChatFromRepliesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("blockChatFromReplies");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_delete_message = JsonEncodedText.Encode("delete_message");
            private static readonly JsonEncodedText PropName_delete_all_messages = JsonEncodedText.Encode("delete_all_messages");
            private static readonly JsonEncodedText PropName_report_spam = JsonEncodedText.Encode("report_spam");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (BlockChatFromReplies)tlobj;
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_delete_message);
                writer.WriteBooleanValue(obj.DeleteMessage);
                writer.WritePropertyName(PropName_delete_all_messages);
                writer.WriteBooleanValue(obj.DeleteAllMessages);
                writer.WritePropertyName(PropName_report_spam);
                writer.WriteBooleanValue(obj.ReportSpam);
            }
        }

        partial class GetBlockedChatsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getBlockedChats");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetBlockedChats)tlobj;
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class AddContactConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addContact");
            private static readonly JsonEncodedText PropName_contact = JsonEncodedText.Encode("contact");
            private static readonly JsonEncodedText PropName_share_phone_number = JsonEncodedText.Encode("share_phone_number");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddContact)tlobj;
                if (obj.Contact != null)
                {
                    writer.WritePropertyName(PropName_contact);
                    writer.WriteTLObjectValue(obj.Contact);
                }
                writer.WritePropertyName(PropName_share_phone_number);
                writer.WriteBooleanValue(obj.SharePhoneNumber);
            }
        }

        partial class ImportContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("importContacts");
            private static readonly JsonEncodedText PropName_contacts = JsonEncodedText.Encode("contacts");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ImportContacts)tlobj;
                if (obj.Contacts != null)
                {
                    writer.WritePropertyName(PropName_contacts);
                    writer.WriteArray(obj.Contacts);
                }
            }
        }

        partial class GetContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getContacts");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchContacts");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchContacts)tlobj;
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class RemoveContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeContacts");
            private static readonly JsonEncodedText PropName_user_ids = JsonEncodedText.Encode("user_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveContacts)tlobj;
                if (obj.UserIds != null)
                {
                    writer.WritePropertyName(PropName_user_ids);
                    writer.WriteArray(obj.UserIds);
                }
            }
        }

        partial class GetImportedContactCountConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getImportedContactCount");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class ChangeImportedContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("changeImportedContacts");
            private static readonly JsonEncodedText PropName_contacts = JsonEncodedText.Encode("contacts");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChangeImportedContacts)tlobj;
                if (obj.Contacts != null)
                {
                    writer.WritePropertyName(PropName_contacts);
                    writer.WriteArray(obj.Contacts);
                }
            }
        }

        partial class ClearImportedContactsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("clearImportedContacts");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SharePhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sharePhoneNumber");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SharePhoneNumber)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
            }
        }

        partial class GetUserProfilePhotosConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getUserProfilePhotos");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetUserProfilePhotos)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class GetStickersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getStickers");
            private static readonly JsonEncodedText PropName_emoji = JsonEncodedText.Encode("emoji");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetStickers)tlobj;
                writer.WritePropertyName(PropName_emoji);
                writer.WriteStringValue(obj.Emoji);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class SearchStickersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchStickers");
            private static readonly JsonEncodedText PropName_emoji = JsonEncodedText.Encode("emoji");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchStickers)tlobj;
                writer.WritePropertyName(PropName_emoji);
                writer.WriteStringValue(obj.Emoji);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class GetInstalledStickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getInstalledStickerSets");
            private static readonly JsonEncodedText PropName_is_masks = JsonEncodedText.Encode("is_masks");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetInstalledStickerSets)tlobj;
                writer.WritePropertyName(PropName_is_masks);
                writer.WriteBooleanValue(obj.IsMasks);
            }
        }

        partial class GetArchivedStickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getArchivedStickerSets");
            private static readonly JsonEncodedText PropName_is_masks = JsonEncodedText.Encode("is_masks");
            private static readonly JsonEncodedText PropName_offset_sticker_set_id = JsonEncodedText.Encode("offset_sticker_set_id");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetArchivedStickerSets)tlobj;
                writer.WritePropertyName(PropName_is_masks);
                writer.WriteBooleanValue(obj.IsMasks);
                writer.WritePropertyName(PropName_offset_sticker_set_id);
                writer.WriteInt64String(obj.OffsetStickerSetId);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class GetTrendingStickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getTrendingStickerSets");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetTrendingStickerSets)tlobj;
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class GetAttachedStickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getAttachedStickerSets");
            private static readonly JsonEncodedText PropName_file_id = JsonEncodedText.Encode("file_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetAttachedStickerSets)tlobj;
                writer.WritePropertyName(PropName_file_id);
                writer.WriteNumberValue(obj.FileId);
            }
        }

        partial class GetStickerSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getStickerSet");
            private static readonly JsonEncodedText PropName_set_id = JsonEncodedText.Encode("set_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetStickerSet)tlobj;
                writer.WritePropertyName(PropName_set_id);
                writer.WriteInt64String(obj.SetId);
            }
        }

        partial class SearchStickerSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchStickerSet");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchStickerSet)tlobj;
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
            }
        }

        partial class SearchInstalledStickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchInstalledStickerSets");
            private static readonly JsonEncodedText PropName_is_masks = JsonEncodedText.Encode("is_masks");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchInstalledStickerSets)tlobj;
                writer.WritePropertyName(PropName_is_masks);
                writer.WriteBooleanValue(obj.IsMasks);
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class SearchStickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchStickerSets");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchStickerSets)tlobj;
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
            }
        }

        partial class ChangeStickerSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("changeStickerSet");
            private static readonly JsonEncodedText PropName_set_id = JsonEncodedText.Encode("set_id");
            private static readonly JsonEncodedText PropName_is_installed = JsonEncodedText.Encode("is_installed");
            private static readonly JsonEncodedText PropName_is_archived = JsonEncodedText.Encode("is_archived");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChangeStickerSet)tlobj;
                writer.WritePropertyName(PropName_set_id);
                writer.WriteInt64String(obj.SetId);
                writer.WritePropertyName(PropName_is_installed);
                writer.WriteBooleanValue(obj.IsInstalled);
                writer.WritePropertyName(PropName_is_archived);
                writer.WriteBooleanValue(obj.IsArchived);
            }
        }

        partial class ViewTrendingStickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("viewTrendingStickerSets");
            private static readonly JsonEncodedText PropName_sticker_set_ids = JsonEncodedText.Encode("sticker_set_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ViewTrendingStickerSets)tlobj;
                if (obj.StickerSetIds != null)
                {
                    writer.WritePropertyName(PropName_sticker_set_ids);
                    writer.WriteInt64Array(obj.StickerSetIds);
                }
            }
        }

        partial class ReorderInstalledStickerSetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("reorderInstalledStickerSets");
            private static readonly JsonEncodedText PropName_is_masks = JsonEncodedText.Encode("is_masks");
            private static readonly JsonEncodedText PropName_sticker_set_ids = JsonEncodedText.Encode("sticker_set_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ReorderInstalledStickerSets)tlobj;
                writer.WritePropertyName(PropName_is_masks);
                writer.WriteBooleanValue(obj.IsMasks);
                if (obj.StickerSetIds != null)
                {
                    writer.WritePropertyName(PropName_sticker_set_ids);
                    writer.WriteInt64Array(obj.StickerSetIds);
                }
            }
        }

        partial class GetRecentStickersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getRecentStickers");
            private static readonly JsonEncodedText PropName_is_attached = JsonEncodedText.Encode("is_attached");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetRecentStickers)tlobj;
                writer.WritePropertyName(PropName_is_attached);
                writer.WriteBooleanValue(obj.IsAttached);
            }
        }

        partial class AddRecentStickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addRecentSticker");
            private static readonly JsonEncodedText PropName_is_attached = JsonEncodedText.Encode("is_attached");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddRecentSticker)tlobj;
                writer.WritePropertyName(PropName_is_attached);
                writer.WriteBooleanValue(obj.IsAttached);
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
            }
        }

        partial class RemoveRecentStickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeRecentSticker");
            private static readonly JsonEncodedText PropName_is_attached = JsonEncodedText.Encode("is_attached");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveRecentSticker)tlobj;
                writer.WritePropertyName(PropName_is_attached);
                writer.WriteBooleanValue(obj.IsAttached);
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
            }
        }

        partial class ClearRecentStickersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("clearRecentStickers");
            private static readonly JsonEncodedText PropName_is_attached = JsonEncodedText.Encode("is_attached");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ClearRecentStickers)tlobj;
                writer.WritePropertyName(PropName_is_attached);
                writer.WriteBooleanValue(obj.IsAttached);
            }
        }

        partial class GetFavoriteStickersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getFavoriteStickers");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class AddFavoriteStickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addFavoriteSticker");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddFavoriteSticker)tlobj;
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
            }
        }

        partial class RemoveFavoriteStickerConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeFavoriteSticker");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveFavoriteSticker)tlobj;
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
            }
        }

        partial class GetStickerEmojisConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getStickerEmojis");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetStickerEmojis)tlobj;
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
            }
        }

        partial class SearchEmojisConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchEmojis");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            private static readonly JsonEncodedText PropName_exact_match = JsonEncodedText.Encode("exact_match");
            private static readonly JsonEncodedText PropName_input_language_codes = JsonEncodedText.Encode("input_language_codes");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchEmojis)tlobj;
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
                writer.WritePropertyName(PropName_exact_match);
                writer.WriteBooleanValue(obj.ExactMatch);
                if (obj.InputLanguageCodes != null)
                {
                    writer.WritePropertyName(PropName_input_language_codes);
                    writer.WriteArray(obj.InputLanguageCodes);
                }
            }
        }

        partial class GetEmojiSuggestionsUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getEmojiSuggestionsUrl");
            private static readonly JsonEncodedText PropName_language_code = JsonEncodedText.Encode("language_code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetEmojiSuggestionsUrl)tlobj;
                writer.WritePropertyName(PropName_language_code);
                writer.WriteStringValue(obj.LanguageCode);
            }
        }

        partial class GetSavedAnimationsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getSavedAnimations");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class AddSavedAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addSavedAnimation");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddSavedAnimation)tlobj;
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
            }
        }

        partial class RemoveSavedAnimationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeSavedAnimation");
            private static readonly JsonEncodedText PropName_animation = JsonEncodedText.Encode("animation");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveSavedAnimation)tlobj;
                if (obj.Animation != null)
                {
                    writer.WritePropertyName(PropName_animation);
                    writer.WriteTLObjectValue(obj.Animation);
                }
            }
        }

        partial class GetRecentInlineBotsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getRecentInlineBots");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SearchHashtagsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchHashtags");
            private static readonly JsonEncodedText PropName_prefix = JsonEncodedText.Encode("prefix");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchHashtags)tlobj;
                writer.WritePropertyName(PropName_prefix);
                writer.WriteStringValue(obj.Prefix);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class RemoveRecentHashtagConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeRecentHashtag");
            private static readonly JsonEncodedText PropName_hashtag = JsonEncodedText.Encode("hashtag");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveRecentHashtag)tlobj;
                writer.WritePropertyName(PropName_hashtag);
                writer.WriteStringValue(obj.Hashtag);
            }
        }

        partial class GetWebPagePreviewConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getWebPagePreview");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetWebPagePreview)tlobj;
                if (obj.Text != null)
                {
                    writer.WritePropertyName(PropName_text);
                    writer.WriteTLObjectValue(obj.Text);
                }
            }
        }

        partial class GetWebPageInstantViewConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getWebPageInstantView");
            private static readonly JsonEncodedText PropName_url = JsonEncodedText.Encode("url");
            private static readonly JsonEncodedText PropName_force_full = JsonEncodedText.Encode("force_full");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetWebPageInstantView)tlobj;
                writer.WritePropertyName(PropName_url);
                writer.WriteStringValue(obj.Url);
                writer.WritePropertyName(PropName_force_full);
                writer.WriteBooleanValue(obj.ForceFull);
            }
        }

        partial class SetProfilePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setProfilePhoto");
            private static readonly JsonEncodedText PropName_photo = JsonEncodedText.Encode("photo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetProfilePhoto)tlobj;
                if (obj.Photo != null)
                {
                    writer.WritePropertyName(PropName_photo);
                    writer.WriteTLObjectValue(obj.Photo);
                }
            }
        }

        partial class DeleteProfilePhotoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteProfilePhoto");
            private static readonly JsonEncodedText PropName_profile_photo_id = JsonEncodedText.Encode("profile_photo_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeleteProfilePhoto)tlobj;
                writer.WritePropertyName(PropName_profile_photo_id);
                writer.WriteInt64String(obj.ProfilePhotoId);
            }
        }

        partial class SetNameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setName");
            private static readonly JsonEncodedText PropName_first_name = JsonEncodedText.Encode("first_name");
            private static readonly JsonEncodedText PropName_last_name = JsonEncodedText.Encode("last_name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetName)tlobj;
                writer.WritePropertyName(PropName_first_name);
                writer.WriteStringValue(obj.FirstName);
                writer.WritePropertyName(PropName_last_name);
                writer.WriteStringValue(obj.LastName);
            }
        }

        partial class SetBioConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setBio");
            private static readonly JsonEncodedText PropName_bio = JsonEncodedText.Encode("bio");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetBio)tlobj;
                writer.WritePropertyName(PropName_bio);
                writer.WriteStringValue(obj.Bio);
            }
        }

        partial class SetUsernameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setUsername");
            private static readonly JsonEncodedText PropName_username = JsonEncodedText.Encode("username");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetUsername)tlobj;
                writer.WritePropertyName(PropName_username);
                writer.WriteStringValue(obj.Username);
            }
        }

        partial class SetLocationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setLocation");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetLocation)tlobj;
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
            }
        }

        partial class ChangePhoneNumberConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("changePhoneNumber");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            private static readonly JsonEncodedText PropName_settings = JsonEncodedText.Encode("settings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ChangePhoneNumber)tlobj;
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
                if (obj.Settings != null)
                {
                    writer.WritePropertyName(PropName_settings);
                    writer.WriteTLObjectValue(obj.Settings);
                }
            }
        }

        partial class ResendChangePhoneNumberCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("resendChangePhoneNumberCode");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CheckChangePhoneNumberCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkChangePhoneNumberCode");
            private static readonly JsonEncodedText PropName_code = JsonEncodedText.Encode("code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckChangePhoneNumberCode)tlobj;
                writer.WritePropertyName(PropName_code);
                writer.WriteStringValue(obj.Code);
            }
        }

        partial class SetCommandsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setCommands");
            private static readonly JsonEncodedText PropName_commands = JsonEncodedText.Encode("commands");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetCommands)tlobj;
                if (obj.Commands != null)
                {
                    writer.WritePropertyName(PropName_commands);
                    writer.WriteArray(obj.Commands);
                }
            }
        }

        partial class GetActiveSessionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getActiveSessions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TerminateSessionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("terminateSession");
            private static readonly JsonEncodedText PropName_session_id = JsonEncodedText.Encode("session_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TerminateSession)tlobj;
                writer.WritePropertyName(PropName_session_id);
                writer.WriteInt64String(obj.SessionId);
            }
        }

        partial class TerminateAllOtherSessionsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("terminateAllOtherSessions");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetConnectedWebsitesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getConnectedWebsites");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class DisconnectWebsiteConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("disconnectWebsite");
            private static readonly JsonEncodedText PropName_website_id = JsonEncodedText.Encode("website_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DisconnectWebsite)tlobj;
                writer.WritePropertyName(PropName_website_id);
                writer.WriteInt64String(obj.WebsiteId);
            }
        }

        partial class DisconnectAllWebsitesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("disconnectAllWebsites");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SetSupergroupUsernameConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setSupergroupUsername");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            private static readonly JsonEncodedText PropName_username = JsonEncodedText.Encode("username");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetSupergroupUsername)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
                writer.WritePropertyName(PropName_username);
                writer.WriteStringValue(obj.Username);
            }
        }

        partial class SetSupergroupStickerSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setSupergroupStickerSet");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            private static readonly JsonEncodedText PropName_sticker_set_id = JsonEncodedText.Encode("sticker_set_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetSupergroupStickerSet)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
                writer.WritePropertyName(PropName_sticker_set_id);
                writer.WriteInt64String(obj.StickerSetId);
            }
        }

        partial class ToggleSupergroupSignMessagesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("toggleSupergroupSignMessages");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            private static readonly JsonEncodedText PropName_sign_messages = JsonEncodedText.Encode("sign_messages");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ToggleSupergroupSignMessages)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
                writer.WritePropertyName(PropName_sign_messages);
                writer.WriteBooleanValue(obj.SignMessages);
            }
        }

        partial class ToggleSupergroupIsAllHistoryAvailableConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("toggleSupergroupIsAllHistoryAvailable");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            private static readonly JsonEncodedText PropName_is_all_history_available = JsonEncodedText.Encode("is_all_history_available");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ToggleSupergroupIsAllHistoryAvailable)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
                writer.WritePropertyName(PropName_is_all_history_available);
                writer.WriteBooleanValue(obj.IsAllHistoryAvailable);
            }
        }

        partial class ReportSupergroupSpamConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("reportSupergroupSpam");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_message_ids = JsonEncodedText.Encode("message_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ReportSupergroupSpam)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.MessageIds != null)
                {
                    writer.WritePropertyName(PropName_message_ids);
                    writer.WriteArray(obj.MessageIds);
                }
            }
        }

        partial class GetSupergroupMembersConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getSupergroupMembers");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            private static readonly JsonEncodedText PropName_filter = JsonEncodedText.Encode("filter");
            private static readonly JsonEncodedText PropName_offset = JsonEncodedText.Encode("offset");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetSupergroupMembers)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
                if (obj.Filter != null)
                {
                    writer.WritePropertyName(PropName_filter);
                    writer.WriteTLObjectValue(obj.Filter);
                }
                writer.WritePropertyName(PropName_offset);
                writer.WriteNumberValue(obj.Offset);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
            }
        }

        partial class DeleteSupergroupConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteSupergroup");
            private static readonly JsonEncodedText PropName_supergroup_id = JsonEncodedText.Encode("supergroup_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeleteSupergroup)tlobj;
                writer.WritePropertyName(PropName_supergroup_id);
                writer.WriteNumberValue(obj.SupergroupId);
            }
        }

        partial class CloseSecretChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("closeSecretChat");
            private static readonly JsonEncodedText PropName_secret_chat_id = JsonEncodedText.Encode("secret_chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CloseSecretChat)tlobj;
                writer.WritePropertyName(PropName_secret_chat_id);
                writer.WriteNumberValue(obj.SecretChatId);
            }
        }

        partial class GetChatEventLogConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatEventLog");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_query = JsonEncodedText.Encode("query");
            private static readonly JsonEncodedText PropName_from_event_id = JsonEncodedText.Encode("from_event_id");
            private static readonly JsonEncodedText PropName_limit = JsonEncodedText.Encode("limit");
            private static readonly JsonEncodedText PropName_filters = JsonEncodedText.Encode("filters");
            private static readonly JsonEncodedText PropName_user_ids = JsonEncodedText.Encode("user_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatEventLog)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_query);
                writer.WriteStringValue(obj.Query);
                writer.WritePropertyName(PropName_from_event_id);
                writer.WriteInt64String(obj.FromEventId);
                writer.WritePropertyName(PropName_limit);
                writer.WriteNumberValue(obj.Limit);
                if (obj.Filters != null)
                {
                    writer.WritePropertyName(PropName_filters);
                    writer.WriteTLObjectValue(obj.Filters);
                }
                if (obj.UserIds != null)
                {
                    writer.WritePropertyName(PropName_user_ids);
                    writer.WriteArray(obj.UserIds);
                }
            }
        }

        partial class GetPaymentFormConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getPaymentForm");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetPaymentForm)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class ValidateOrderInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("validateOrderInfo");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_order_info = JsonEncodedText.Encode("order_info");
            private static readonly JsonEncodedText PropName_allow_save = JsonEncodedText.Encode("allow_save");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ValidateOrderInfo)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                if (obj.OrderInfo != null)
                {
                    writer.WritePropertyName(PropName_order_info);
                    writer.WriteTLObjectValue(obj.OrderInfo);
                }
                writer.WritePropertyName(PropName_allow_save);
                writer.WriteBooleanValue(obj.AllowSave);
            }
        }

        partial class SendPaymentFormConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendPaymentForm");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_order_info_id = JsonEncodedText.Encode("order_info_id");
            private static readonly JsonEncodedText PropName_shipping_option_id = JsonEncodedText.Encode("shipping_option_id");
            private static readonly JsonEncodedText PropName_credentials = JsonEncodedText.Encode("credentials");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendPaymentForm)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_order_info_id);
                writer.WriteStringValue(obj.OrderInfoId);
                writer.WritePropertyName(PropName_shipping_option_id);
                writer.WriteStringValue(obj.ShippingOptionId);
                if (obj.Credentials != null)
                {
                    writer.WritePropertyName(PropName_credentials);
                    writer.WriteTLObjectValue(obj.Credentials);
                }
            }
        }

        partial class GetPaymentReceiptConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getPaymentReceipt");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetPaymentReceipt)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
            }
        }

        partial class GetSavedOrderInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getSavedOrderInfo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class DeleteSavedOrderInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteSavedOrderInfo");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class DeleteSavedCredentialsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteSavedCredentials");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetSupportUserConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getSupportUser");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetBackgroundsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getBackgrounds");
            private static readonly JsonEncodedText PropName_for_dark_theme = JsonEncodedText.Encode("for_dark_theme");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetBackgrounds)tlobj;
                writer.WritePropertyName(PropName_for_dark_theme);
                writer.WriteBooleanValue(obj.ForDarkTheme);
            }
        }

        partial class GetBackgroundUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getBackgroundUrl");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetBackgroundUrl)tlobj;
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class SearchBackgroundConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("searchBackground");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SearchBackground)tlobj;
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
            }
        }

        partial class SetBackgroundConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setBackground");
            private static readonly JsonEncodedText PropName_background = JsonEncodedText.Encode("background");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_for_dark_theme = JsonEncodedText.Encode("for_dark_theme");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetBackground)tlobj;
                if (obj.Background != null)
                {
                    writer.WritePropertyName(PropName_background);
                    writer.WriteTLObjectValue(obj.Background);
                }
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_for_dark_theme);
                writer.WriteBooleanValue(obj.ForDarkTheme);
            }
        }

        partial class RemoveBackgroundConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeBackground");
            private static readonly JsonEncodedText PropName_background_id = JsonEncodedText.Encode("background_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveBackground)tlobj;
                writer.WritePropertyName(PropName_background_id);
                writer.WriteInt64String(obj.BackgroundId);
            }
        }

        partial class ResetBackgroundsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("resetBackgrounds");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetLocalizationTargetInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getLocalizationTargetInfo");
            private static readonly JsonEncodedText PropName_only_local = JsonEncodedText.Encode("only_local");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetLocalizationTargetInfo)tlobj;
                writer.WritePropertyName(PropName_only_local);
                writer.WriteBooleanValue(obj.OnlyLocal);
            }
        }

        partial class GetLanguagePackInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getLanguagePackInfo");
            private static readonly JsonEncodedText PropName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetLanguagePackInfo)tlobj;
                writer.WritePropertyName(PropName_language_pack_id);
                writer.WriteStringValue(obj.LanguagePackId);
            }
        }

        partial class GetLanguagePackStringsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getLanguagePackStrings");
            private static readonly JsonEncodedText PropName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
            private static readonly JsonEncodedText PropName_keys = JsonEncodedText.Encode("keys");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetLanguagePackStrings)tlobj;
                writer.WritePropertyName(PropName_language_pack_id);
                writer.WriteStringValue(obj.LanguagePackId);
                if (obj.Keys != null)
                {
                    writer.WritePropertyName(PropName_keys);
                    writer.WriteArray(obj.Keys);
                }
            }
        }

        partial class SynchronizeLanguagePackConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("synchronizeLanguagePack");
            private static readonly JsonEncodedText PropName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SynchronizeLanguagePack)tlobj;
                writer.WritePropertyName(PropName_language_pack_id);
                writer.WriteStringValue(obj.LanguagePackId);
            }
        }

        partial class AddCustomServerLanguagePackConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addCustomServerLanguagePack");
            private static readonly JsonEncodedText PropName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddCustomServerLanguagePack)tlobj;
                writer.WritePropertyName(PropName_language_pack_id);
                writer.WriteStringValue(obj.LanguagePackId);
            }
        }

        partial class SetCustomLanguagePackConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setCustomLanguagePack");
            private static readonly JsonEncodedText PropName_info = JsonEncodedText.Encode("info");
            private static readonly JsonEncodedText PropName_strings = JsonEncodedText.Encode("strings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetCustomLanguagePack)tlobj;
                if (obj.Info != null)
                {
                    writer.WritePropertyName(PropName_info);
                    writer.WriteTLObjectValue(obj.Info);
                }
                if (obj.Strings != null)
                {
                    writer.WritePropertyName(PropName_strings);
                    writer.WriteArray(obj.Strings);
                }
            }
        }

        partial class EditCustomLanguagePackInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editCustomLanguagePackInfo");
            private static readonly JsonEncodedText PropName_info = JsonEncodedText.Encode("info");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditCustomLanguagePackInfo)tlobj;
                if (obj.Info != null)
                {
                    writer.WritePropertyName(PropName_info);
                    writer.WriteTLObjectValue(obj.Info);
                }
            }
        }

        partial class SetCustomLanguagePackStringConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setCustomLanguagePackString");
            private static readonly JsonEncodedText PropName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
            private static readonly JsonEncodedText PropName_new_string = JsonEncodedText.Encode("new_string");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetCustomLanguagePackString)tlobj;
                writer.WritePropertyName(PropName_language_pack_id);
                writer.WriteStringValue(obj.LanguagePackId);
                if (obj.NewString != null)
                {
                    writer.WritePropertyName(PropName_new_string);
                    writer.WriteTLObjectValue(obj.NewString);
                }
            }
        }

        partial class DeleteLanguagePackConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteLanguagePack");
            private static readonly JsonEncodedText PropName_language_pack_id = JsonEncodedText.Encode("language_pack_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeleteLanguagePack)tlobj;
                writer.WritePropertyName(PropName_language_pack_id);
                writer.WriteStringValue(obj.LanguagePackId);
            }
        }

        partial class RegisterDeviceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("registerDevice");
            private static readonly JsonEncodedText PropName_device_token = JsonEncodedText.Encode("device_token");
            private static readonly JsonEncodedText PropName_other_user_ids = JsonEncodedText.Encode("other_user_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RegisterDevice)tlobj;
                if (obj.DeviceToken != null)
                {
                    writer.WritePropertyName(PropName_device_token);
                    writer.WriteTLObjectValue(obj.DeviceToken);
                }
                if (obj.OtherUserIds != null)
                {
                    writer.WritePropertyName(PropName_other_user_ids);
                    writer.WriteArray(obj.OtherUserIds);
                }
            }
        }

        partial class ProcessPushNotificationConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("processPushNotification");
            private static readonly JsonEncodedText PropName_payload = JsonEncodedText.Encode("payload");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ProcessPushNotification)tlobj;
                writer.WritePropertyName(PropName_payload);
                writer.WriteStringValue(obj.Payload);
            }
        }

        partial class GetPushReceiverIdConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getPushReceiverId");
            private static readonly JsonEncodedText PropName_payload = JsonEncodedText.Encode("payload");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetPushReceiverId)tlobj;
                writer.WritePropertyName(PropName_payload);
                writer.WriteStringValue(obj.Payload);
            }
        }

        partial class GetRecentlyVisitedTMeUrlsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getRecentlyVisitedTMeUrls");
            private static readonly JsonEncodedText PropName_referrer = JsonEncodedText.Encode("referrer");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetRecentlyVisitedTMeUrls)tlobj;
                writer.WritePropertyName(PropName_referrer);
                writer.WriteStringValue(obj.Referrer);
            }
        }

        partial class SetUserPrivacySettingRulesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setUserPrivacySettingRules");
            private static readonly JsonEncodedText PropName_setting = JsonEncodedText.Encode("setting");
            private static readonly JsonEncodedText PropName_rules = JsonEncodedText.Encode("rules");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetUserPrivacySettingRules)tlobj;
                if (obj.Setting != null)
                {
                    writer.WritePropertyName(PropName_setting);
                    writer.WriteTLObjectValue(obj.Setting);
                }
                if (obj.Rules != null)
                {
                    writer.WritePropertyName(PropName_rules);
                    writer.WriteTLObjectValue(obj.Rules);
                }
            }
        }

        partial class GetUserPrivacySettingRulesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getUserPrivacySettingRules");
            private static readonly JsonEncodedText PropName_setting = JsonEncodedText.Encode("setting");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetUserPrivacySettingRules)tlobj;
                if (obj.Setting != null)
                {
                    writer.WritePropertyName(PropName_setting);
                    writer.WriteTLObjectValue(obj.Setting);
                }
            }
        }

        partial class GetOptionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getOption");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetOption)tlobj;
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
            }
        }

        partial class SetOptionConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setOption");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_value = JsonEncodedText.Encode("value");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetOption)tlobj;
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                if (obj.Value != null)
                {
                    writer.WritePropertyName(PropName_value);
                    writer.WriteTLObjectValue(obj.Value);
                }
            }
        }

        partial class SetAccountTtlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setAccountTtl");
            private static readonly JsonEncodedText PropName_ttl = JsonEncodedText.Encode("ttl");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetAccountTtl)tlobj;
                if (obj.Ttl != null)
                {
                    writer.WritePropertyName(PropName_ttl);
                    writer.WriteTLObjectValue(obj.Ttl);
                }
            }
        }

        partial class GetAccountTtlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getAccountTtl");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class DeleteAccountConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deleteAccount");
            private static readonly JsonEncodedText PropName_reason = JsonEncodedText.Encode("reason");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeleteAccount)tlobj;
                writer.WritePropertyName(PropName_reason);
                writer.WriteStringValue(obj.Reason);
            }
        }

        partial class RemoveChatActionBarConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeChatActionBar");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveChatActionBar)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class ReportChatConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("reportChat");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_reason = JsonEncodedText.Encode("reason");
            private static readonly JsonEncodedText PropName_message_ids = JsonEncodedText.Encode("message_ids");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (ReportChat)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.Reason != null)
                {
                    writer.WritePropertyName(PropName_reason);
                    writer.WriteTLObjectValue(obj.Reason);
                }
                if (obj.MessageIds != null)
                {
                    writer.WritePropertyName(PropName_message_ids);
                    writer.WriteArray(obj.MessageIds);
                }
            }
        }

        partial class GetChatStatisticsUrlConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatStatisticsUrl");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_parameters = JsonEncodedText.Encode("parameters");
            private static readonly JsonEncodedText PropName_is_dark = JsonEncodedText.Encode("is_dark");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatStatisticsUrl)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_parameters);
                writer.WriteStringValue(obj.Parameters);
                writer.WritePropertyName(PropName_is_dark);
                writer.WriteBooleanValue(obj.IsDark);
            }
        }

        partial class GetChatStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getChatStatistics");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_is_dark = JsonEncodedText.Encode("is_dark");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetChatStatistics)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_is_dark);
                writer.WriteBooleanValue(obj.IsDark);
            }
        }

        partial class GetMessageStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMessageStatistics");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_message_id = JsonEncodedText.Encode("message_id");
            private static readonly JsonEncodedText PropName_is_dark = JsonEncodedText.Encode("is_dark");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMessageStatistics)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_message_id);
                writer.WriteNumberValue(obj.MessageId);
                writer.WritePropertyName(PropName_is_dark);
                writer.WriteBooleanValue(obj.IsDark);
            }
        }

        partial class GetStatisticsGraphConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getStatisticsGraph");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_token = JsonEncodedText.Encode("token");
            private static readonly JsonEncodedText PropName_x = JsonEncodedText.Encode("x");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetStatisticsGraph)tlobj;
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                writer.WritePropertyName(PropName_token);
                writer.WriteStringValue(obj.Token);
                writer.WritePropertyName(PropName_x);
                writer.WriteNumberValue(obj.X);
            }
        }

        partial class GetStorageStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getStorageStatistics");
            private static readonly JsonEncodedText PropName_chat_limit = JsonEncodedText.Encode("chat_limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetStorageStatistics)tlobj;
                writer.WritePropertyName(PropName_chat_limit);
                writer.WriteNumberValue(obj.ChatLimit);
            }
        }

        partial class GetStorageStatisticsFastConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getStorageStatisticsFast");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetDatabaseStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getDatabaseStatistics");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class OptimizeStorageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("optimizeStorage");
            private static readonly JsonEncodedText PropName_size = JsonEncodedText.Encode("size");
            private static readonly JsonEncodedText PropName_ttl = JsonEncodedText.Encode("ttl");
            private static readonly JsonEncodedText PropName_count = JsonEncodedText.Encode("count");
            private static readonly JsonEncodedText PropName_immunity_delay = JsonEncodedText.Encode("immunity_delay");
            private static readonly JsonEncodedText PropName_file_types = JsonEncodedText.Encode("file_types");
            private static readonly JsonEncodedText PropName_chat_ids = JsonEncodedText.Encode("chat_ids");
            private static readonly JsonEncodedText PropName_exclude_chat_ids = JsonEncodedText.Encode("exclude_chat_ids");
            private static readonly JsonEncodedText PropName_return_deleted_file_statistics = JsonEncodedText.Encode("return_deleted_file_statistics");
            private static readonly JsonEncodedText PropName_chat_limit = JsonEncodedText.Encode("chat_limit");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (OptimizeStorage)tlobj;
                writer.WritePropertyName(PropName_size);
                writer.WriteNumberValue(obj.Size);
                writer.WritePropertyName(PropName_ttl);
                writer.WriteNumberValue(obj.Ttl);
                writer.WritePropertyName(PropName_count);
                writer.WriteNumberValue(obj.Count);
                writer.WritePropertyName(PropName_immunity_delay);
                writer.WriteNumberValue(obj.ImmunityDelay);
                if (obj.FileTypes != null)
                {
                    writer.WritePropertyName(PropName_file_types);
                    writer.WriteArray(obj.FileTypes);
                }
                if (obj.ChatIds != null)
                {
                    writer.WritePropertyName(PropName_chat_ids);
                    writer.WriteArray(obj.ChatIds);
                }
                if (obj.ExcludeChatIds != null)
                {
                    writer.WritePropertyName(PropName_exclude_chat_ids);
                    writer.WriteArray(obj.ExcludeChatIds);
                }
                writer.WritePropertyName(PropName_return_deleted_file_statistics);
                writer.WriteBooleanValue(obj.ReturnDeletedFileStatistics);
                writer.WritePropertyName(PropName_chat_limit);
                writer.WriteNumberValue(obj.ChatLimit);
            }
        }

        partial class SetNetworkTypeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setNetworkType");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetNetworkType)tlobj;
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class GetNetworkStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getNetworkStatistics");
            private static readonly JsonEncodedText PropName_only_current = JsonEncodedText.Encode("only_current");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetNetworkStatistics)tlobj;
                writer.WritePropertyName(PropName_only_current);
                writer.WriteBooleanValue(obj.OnlyCurrent);
            }
        }

        partial class AddNetworkStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addNetworkStatistics");
            private static readonly JsonEncodedText PropName_entry = JsonEncodedText.Encode("entry");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddNetworkStatistics)tlobj;
                if (obj.Entry != null)
                {
                    writer.WritePropertyName(PropName_entry);
                    writer.WriteTLObjectValue(obj.Entry);
                }
            }
        }

        partial class ResetNetworkStatisticsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("resetNetworkStatistics");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetAutoDownloadSettingsPresetsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getAutoDownloadSettingsPresets");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SetAutoDownloadSettingsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setAutoDownloadSettings");
            private static readonly JsonEncodedText PropName_settings = JsonEncodedText.Encode("settings");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetAutoDownloadSettings)tlobj;
                if (obj.Settings != null)
                {
                    writer.WritePropertyName(PropName_settings);
                    writer.WriteTLObjectValue(obj.Settings);
                }
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class GetBankCardInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getBankCardInfo");
            private static readonly JsonEncodedText PropName_bank_card_number = JsonEncodedText.Encode("bank_card_number");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetBankCardInfo)tlobj;
                writer.WritePropertyName(PropName_bank_card_number);
                writer.WriteStringValue(obj.BankCardNumber);
            }
        }

        partial class GetPassportElementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getPassportElement");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetPassportElement)tlobj;
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
            }
        }

        partial class GetAllPassportElementsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getAllPassportElements");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetAllPassportElements)tlobj;
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
            }
        }

        partial class SetPassportElementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setPassportElement");
            private static readonly JsonEncodedText PropName_element = JsonEncodedText.Encode("element");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetPassportElement)tlobj;
                if (obj.Element != null)
                {
                    writer.WritePropertyName(PropName_element);
                    writer.WriteTLObjectValue(obj.Element);
                }
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
            }
        }

        partial class DeletePassportElementConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("deletePassportElement");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (DeletePassportElement)tlobj;
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class SetPassportElementErrorsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setPassportElementErrors");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_errors = JsonEncodedText.Encode("errors");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetPassportElementErrors)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.Errors != null)
                {
                    writer.WritePropertyName(PropName_errors);
                    writer.WriteArray(obj.Errors);
                }
            }
        }

        partial class GetPreferredCountryLanguageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getPreferredCountryLanguage");
            private static readonly JsonEncodedText PropName_country_code = JsonEncodedText.Encode("country_code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetPreferredCountryLanguage)tlobj;
                writer.WritePropertyName(PropName_country_code);
                writer.WriteStringValue(obj.CountryCode);
            }
        }

        partial class SendPhoneNumberVerificationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendPhoneNumberVerificationCode");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            private static readonly JsonEncodedText PropName_settings = JsonEncodedText.Encode("settings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendPhoneNumberVerificationCode)tlobj;
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
                if (obj.Settings != null)
                {
                    writer.WritePropertyName(PropName_settings);
                    writer.WriteTLObjectValue(obj.Settings);
                }
            }
        }

        partial class ResendPhoneNumberVerificationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("resendPhoneNumberVerificationCode");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CheckPhoneNumberVerificationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkPhoneNumberVerificationCode");
            private static readonly JsonEncodedText PropName_code = JsonEncodedText.Encode("code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckPhoneNumberVerificationCode)tlobj;
                writer.WritePropertyName(PropName_code);
                writer.WriteStringValue(obj.Code);
            }
        }

        partial class SendEmailAddressVerificationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendEmailAddressVerificationCode");
            private static readonly JsonEncodedText PropName_email_address = JsonEncodedText.Encode("email_address");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendEmailAddressVerificationCode)tlobj;
                writer.WritePropertyName(PropName_email_address);
                writer.WriteStringValue(obj.EmailAddress);
            }
        }

        partial class ResendEmailAddressVerificationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("resendEmailAddressVerificationCode");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CheckEmailAddressVerificationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkEmailAddressVerificationCode");
            private static readonly JsonEncodedText PropName_code = JsonEncodedText.Encode("code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckEmailAddressVerificationCode)tlobj;
                writer.WritePropertyName(PropName_code);
                writer.WriteStringValue(obj.Code);
            }
        }

        partial class GetPassportAuthorizationFormConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getPassportAuthorizationForm");
            private static readonly JsonEncodedText PropName_bot_user_id = JsonEncodedText.Encode("bot_user_id");
            private static readonly JsonEncodedText PropName_scope = JsonEncodedText.Encode("scope");
            private static readonly JsonEncodedText PropName_public_key = JsonEncodedText.Encode("public_key");
            private static readonly JsonEncodedText PropName_nonce = JsonEncodedText.Encode("nonce");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetPassportAuthorizationForm)tlobj;
                writer.WritePropertyName(PropName_bot_user_id);
                writer.WriteNumberValue(obj.BotUserId);
                writer.WritePropertyName(PropName_scope);
                writer.WriteStringValue(obj.Scope);
                writer.WritePropertyName(PropName_public_key);
                writer.WriteStringValue(obj.PublicKey);
                writer.WritePropertyName(PropName_nonce);
                writer.WriteStringValue(obj.Nonce);
            }
        }

        partial class GetPassportAuthorizationFormAvailableElementsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getPassportAuthorizationFormAvailableElements");
            private static readonly JsonEncodedText PropName_autorization_form_id = JsonEncodedText.Encode("autorization_form_id");
            private static readonly JsonEncodedText PropName_password = JsonEncodedText.Encode("password");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetPassportAuthorizationFormAvailableElements)tlobj;
                writer.WritePropertyName(PropName_autorization_form_id);
                writer.WriteNumberValue(obj.AutorizationFormId);
                writer.WritePropertyName(PropName_password);
                writer.WriteStringValue(obj.Password);
            }
        }

        partial class SendPassportAuthorizationFormConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendPassportAuthorizationForm");
            private static readonly JsonEncodedText PropName_autorization_form_id = JsonEncodedText.Encode("autorization_form_id");
            private static readonly JsonEncodedText PropName_types = JsonEncodedText.Encode("types");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendPassportAuthorizationForm)tlobj;
                writer.WritePropertyName(PropName_autorization_form_id);
                writer.WriteNumberValue(obj.AutorizationFormId);
                if (obj.Types != null)
                {
                    writer.WritePropertyName(PropName_types);
                    writer.WriteArray(obj.Types);
                }
            }
        }

        partial class SendPhoneNumberConfirmationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendPhoneNumberConfirmationCode");
            private static readonly JsonEncodedText PropName_hash = JsonEncodedText.Encode("hash");
            private static readonly JsonEncodedText PropName_phone_number = JsonEncodedText.Encode("phone_number");
            private static readonly JsonEncodedText PropName_settings = JsonEncodedText.Encode("settings");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendPhoneNumberConfirmationCode)tlobj;
                writer.WritePropertyName(PropName_hash);
                writer.WriteStringValue(obj.Hash);
                writer.WritePropertyName(PropName_phone_number);
                writer.WriteStringValue(obj.PhoneNumber);
                if (obj.Settings != null)
                {
                    writer.WritePropertyName(PropName_settings);
                    writer.WriteTLObjectValue(obj.Settings);
                }
            }
        }

        partial class ResendPhoneNumberConfirmationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("resendPhoneNumberConfirmationCode");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class CheckPhoneNumberConfirmationCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("checkPhoneNumberConfirmationCode");
            private static readonly JsonEncodedText PropName_code = JsonEncodedText.Encode("code");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CheckPhoneNumberConfirmationCode)tlobj;
                writer.WritePropertyName(PropName_code);
                writer.WriteStringValue(obj.Code);
            }
        }

        partial class SetBotUpdatesStatusConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setBotUpdatesStatus");
            private static readonly JsonEncodedText PropName_pending_update_count = JsonEncodedText.Encode("pending_update_count");
            private static readonly JsonEncodedText PropName_error_message = JsonEncodedText.Encode("error_message");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetBotUpdatesStatus)tlobj;
                writer.WritePropertyName(PropName_pending_update_count);
                writer.WriteNumberValue(obj.PendingUpdateCount);
                writer.WritePropertyName(PropName_error_message);
                writer.WriteStringValue(obj.ErrorMessage);
            }
        }

        partial class UploadStickerFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("uploadStickerFile");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_png_sticker = JsonEncodedText.Encode("png_sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (UploadStickerFile)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                if (obj.PngSticker != null)
                {
                    writer.WritePropertyName(PropName_png_sticker);
                    writer.WriteTLObjectValue(obj.PngSticker);
                }
            }
        }

        partial class CreateNewStickerSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("createNewStickerSet");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_title = JsonEncodedText.Encode("title");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_is_masks = JsonEncodedText.Encode("is_masks");
            private static readonly JsonEncodedText PropName_stickers = JsonEncodedText.Encode("stickers");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (CreateNewStickerSet)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_title);
                writer.WriteStringValue(obj.Title);
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                writer.WritePropertyName(PropName_is_masks);
                writer.WriteBooleanValue(obj.IsMasks);
                if (obj.Stickers != null)
                {
                    writer.WritePropertyName(PropName_stickers);
                    writer.WriteArray(obj.Stickers);
                }
            }
        }

        partial class AddStickerToSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addStickerToSet");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddStickerToSet)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
            }
        }

        partial class SetStickerSetThumbnailConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setStickerSetThumbnail");
            private static readonly JsonEncodedText PropName_user_id = JsonEncodedText.Encode("user_id");
            private static readonly JsonEncodedText PropName_name = JsonEncodedText.Encode("name");
            private static readonly JsonEncodedText PropName_thumbnail = JsonEncodedText.Encode("thumbnail");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetStickerSetThumbnail)tlobj;
                writer.WritePropertyName(PropName_user_id);
                writer.WriteNumberValue(obj.UserId);
                writer.WritePropertyName(PropName_name);
                writer.WriteStringValue(obj.Name);
                if (obj.Thumbnail != null)
                {
                    writer.WritePropertyName(PropName_thumbnail);
                    writer.WriteTLObjectValue(obj.Thumbnail);
                }
            }
        }

        partial class SetStickerPositionInSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setStickerPositionInSet");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            private static readonly JsonEncodedText PropName_position = JsonEncodedText.Encode("position");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetStickerPositionInSet)tlobj;
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
                writer.WritePropertyName(PropName_position);
                writer.WriteNumberValue(obj.Position);
            }
        }

        partial class RemoveStickerFromSetConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeStickerFromSet");
            private static readonly JsonEncodedText PropName_sticker = JsonEncodedText.Encode("sticker");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveStickerFromSet)tlobj;
                if (obj.Sticker != null)
                {
                    writer.WritePropertyName(PropName_sticker);
                    writer.WriteTLObjectValue(obj.Sticker);
                }
            }
        }

        partial class GetMapThumbnailFileConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getMapThumbnailFile");
            private static readonly JsonEncodedText PropName_location = JsonEncodedText.Encode("location");
            private static readonly JsonEncodedText PropName_zoom = JsonEncodedText.Encode("zoom");
            private static readonly JsonEncodedText PropName_width = JsonEncodedText.Encode("width");
            private static readonly JsonEncodedText PropName_height = JsonEncodedText.Encode("height");
            private static readonly JsonEncodedText PropName_scale = JsonEncodedText.Encode("scale");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetMapThumbnailFile)tlobj;
                if (obj.Location != null)
                {
                    writer.WritePropertyName(PropName_location);
                    writer.WriteTLObjectValue(obj.Location);
                }
                writer.WritePropertyName(PropName_zoom);
                writer.WriteNumberValue(obj.Zoom);
                writer.WritePropertyName(PropName_width);
                writer.WriteNumberValue(obj.Width);
                writer.WritePropertyName(PropName_height);
                writer.WriteNumberValue(obj.Height);
                writer.WritePropertyName(PropName_scale);
                writer.WriteNumberValue(obj.Scale);
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
            }
        }

        partial class AcceptTermsOfServiceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("acceptTermsOfService");
            private static readonly JsonEncodedText PropName_terms_of_service_id = JsonEncodedText.Encode("terms_of_service_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AcceptTermsOfService)tlobj;
                writer.WritePropertyName(PropName_terms_of_service_id);
                writer.WriteStringValue(obj.TermsOfServiceId);
            }
        }

        partial class SendCustomRequestConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("sendCustomRequest");
            private static readonly JsonEncodedText PropName_method = JsonEncodedText.Encode("method");
            private static readonly JsonEncodedText PropName_parameters = JsonEncodedText.Encode("parameters");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SendCustomRequest)tlobj;
                writer.WritePropertyName(PropName_method);
                writer.WriteStringValue(obj.Method);
                writer.WritePropertyName(PropName_parameters);
                writer.WriteStringValue(obj.Parameters);
            }
        }

        partial class AnswerCustomQueryConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("answerCustomQuery");
            private static readonly JsonEncodedText PropName_custom_query_id = JsonEncodedText.Encode("custom_query_id");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AnswerCustomQuery)tlobj;
                writer.WritePropertyName(PropName_custom_query_id);
                writer.WriteInt64String(obj.CustomQueryId);
                writer.WritePropertyName(PropName_data);
                writer.WriteStringValue(obj.Data);
            }
        }

        partial class SetAlarmConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setAlarm");
            private static readonly JsonEncodedText PropName_seconds = JsonEncodedText.Encode("seconds");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetAlarm)tlobj;
                writer.WritePropertyName(PropName_seconds);
                writer.WriteNumberValue(obj.Seconds);
            }
        }

        partial class GetCountriesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getCountries");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetCountryCodeConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getCountryCode");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetPhoneNumberInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getPhoneNumberInfo");
            private static readonly JsonEncodedText PropName_phone_number_prefix = JsonEncodedText.Encode("phone_number_prefix");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetPhoneNumberInfo)tlobj;
                writer.WritePropertyName(PropName_phone_number_prefix);
                writer.WriteStringValue(obj.PhoneNumberPrefix);
            }
        }

        partial class GetInviteTextConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getInviteText");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetDeepLinkInfoConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getDeepLinkInfo");
            private static readonly JsonEncodedText PropName_link = JsonEncodedText.Encode("link");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetDeepLinkInfo)tlobj;
                writer.WritePropertyName(PropName_link);
                writer.WriteStringValue(obj.Link);
            }
        }

        partial class GetApplicationConfigConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getApplicationConfig");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SaveApplicationLogEventConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("saveApplicationLogEvent");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_chat_id = JsonEncodedText.Encode("chat_id");
            private static readonly JsonEncodedText PropName_data = JsonEncodedText.Encode("data");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SaveApplicationLogEvent)tlobj;
                writer.WritePropertyName(PropName_type);
                writer.WriteStringValue(obj.Type);
                writer.WritePropertyName(PropName_chat_id);
                writer.WriteNumberValue(obj.ChatId);
                if (obj.Data != null)
                {
                    writer.WritePropertyName(PropName_data);
                    writer.WriteTLObjectValue(obj.Data);
                }
            }
        }

        partial class AddProxyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addProxy");
            private static readonly JsonEncodedText PropName_server = JsonEncodedText.Encode("server");
            private static readonly JsonEncodedText PropName_port = JsonEncodedText.Encode("port");
            private static readonly JsonEncodedText PropName_enable = JsonEncodedText.Encode("enable");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddProxy)tlobj;
                writer.WritePropertyName(PropName_server);
                writer.WriteStringValue(obj.Server);
                writer.WritePropertyName(PropName_port);
                writer.WriteNumberValue(obj.Port);
                writer.WritePropertyName(PropName_enable);
                writer.WriteBooleanValue(obj.Enable);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class EditProxyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("editProxy");
            private static readonly JsonEncodedText PropName_proxy_id = JsonEncodedText.Encode("proxy_id");
            private static readonly JsonEncodedText PropName_server = JsonEncodedText.Encode("server");
            private static readonly JsonEncodedText PropName_port = JsonEncodedText.Encode("port");
            private static readonly JsonEncodedText PropName_enable = JsonEncodedText.Encode("enable");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EditProxy)tlobj;
                writer.WritePropertyName(PropName_proxy_id);
                writer.WriteNumberValue(obj.ProxyId);
                writer.WritePropertyName(PropName_server);
                writer.WriteStringValue(obj.Server);
                writer.WritePropertyName(PropName_port);
                writer.WriteNumberValue(obj.Port);
                writer.WritePropertyName(PropName_enable);
                writer.WriteBooleanValue(obj.Enable);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
            }
        }

        partial class EnableProxyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("enableProxy");
            private static readonly JsonEncodedText PropName_proxy_id = JsonEncodedText.Encode("proxy_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (EnableProxy)tlobj;
                writer.WritePropertyName(PropName_proxy_id);
                writer.WriteNumberValue(obj.ProxyId);
            }
        }

        partial class DisableProxyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("disableProxy");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class RemoveProxyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("removeProxy");
            private static readonly JsonEncodedText PropName_proxy_id = JsonEncodedText.Encode("proxy_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (RemoveProxy)tlobj;
                writer.WritePropertyName(PropName_proxy_id);
                writer.WriteNumberValue(obj.ProxyId);
            }
        }

        partial class GetProxiesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getProxies");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetProxyLinkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getProxyLink");
            private static readonly JsonEncodedText PropName_proxy_id = JsonEncodedText.Encode("proxy_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetProxyLink)tlobj;
                writer.WritePropertyName(PropName_proxy_id);
                writer.WriteNumberValue(obj.ProxyId);
            }
        }

        partial class PingProxyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("pingProxy");
            private static readonly JsonEncodedText PropName_proxy_id = JsonEncodedText.Encode("proxy_id");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (PingProxy)tlobj;
                writer.WritePropertyName(PropName_proxy_id);
                writer.WriteNumberValue(obj.ProxyId);
            }
        }

        partial class SetLogStreamConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setLogStream");
            private static readonly JsonEncodedText PropName_log_stream = JsonEncodedText.Encode("log_stream");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetLogStream)tlobj;
                if (obj.LogStream != null)
                {
                    writer.WritePropertyName(PropName_log_stream);
                    writer.WriteTLObjectValue(obj.LogStream);
                }
            }
        }

        partial class GetLogStreamConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getLogStream");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SetLogVerbosityLevelConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setLogVerbosityLevel");
            private static readonly JsonEncodedText PropName_new_verbosity_level = JsonEncodedText.Encode("new_verbosity_level");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetLogVerbosityLevel)tlobj;
                writer.WritePropertyName(PropName_new_verbosity_level);
                writer.WriteNumberValue(obj.NewVerbosityLevel);
            }
        }

        partial class GetLogVerbosityLevelConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getLogVerbosityLevel");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class GetLogTagsConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getLogTags");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class SetLogTagVerbosityLevelConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("setLogTagVerbosityLevel");
            private static readonly JsonEncodedText PropName_tag = JsonEncodedText.Encode("tag");
            private static readonly JsonEncodedText PropName_new_verbosity_level = JsonEncodedText.Encode("new_verbosity_level");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (SetLogTagVerbosityLevel)tlobj;
                writer.WritePropertyName(PropName_tag);
                writer.WriteStringValue(obj.Tag);
                writer.WritePropertyName(PropName_new_verbosity_level);
                writer.WriteNumberValue(obj.NewVerbosityLevel);
            }
        }

        partial class GetLogTagVerbosityLevelConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("getLogTagVerbosityLevel");
            private static readonly JsonEncodedText PropName_tag = JsonEncodedText.Encode("tag");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (GetLogTagVerbosityLevel)tlobj;
                writer.WritePropertyName(PropName_tag);
                writer.WriteStringValue(obj.Tag);
            }
        }

        partial class AddLogMessageConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("addLogMessage");
            private static readonly JsonEncodedText PropName_verbosity_level = JsonEncodedText.Encode("verbosity_level");
            private static readonly JsonEncodedText PropName_text = JsonEncodedText.Encode("text");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (AddLogMessage)tlobj;
                writer.WritePropertyName(PropName_verbosity_level);
                writer.WriteNumberValue(obj.VerbosityLevel);
                writer.WritePropertyName(PropName_text);
                writer.WriteStringValue(obj.Text);
            }
        }

        partial class TestCallEmptyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testCallEmpty");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TestCallStringConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testCallString");
            private static readonly JsonEncodedText PropName_x = JsonEncodedText.Encode("x");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestCallString)tlobj;
                writer.WritePropertyName(PropName_x);
                writer.WriteStringValue(obj.X);
            }
        }

        partial class TestCallBytesConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testCallBytes");
            private static readonly JsonEncodedText PropName_x = JsonEncodedText.Encode("x");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestCallBytes)tlobj;
                if (obj.X != null)
                {
                    writer.WritePropertyName(PropName_x);
                    writer.WriteBase64StringValue(obj.X);
                }
            }
        }

        partial class TestCallVectorIntConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testCallVectorInt");
            private static readonly JsonEncodedText PropName_x = JsonEncodedText.Encode("x");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestCallVectorInt)tlobj;
                if (obj.X != null)
                {
                    writer.WritePropertyName(PropName_x);
                    writer.WriteArray(obj.X);
                }
            }
        }

        partial class TestCallVectorIntObjectConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testCallVectorIntObject");
            private static readonly JsonEncodedText PropName_x = JsonEncodedText.Encode("x");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestCallVectorIntObject)tlobj;
                if (obj.X != null)
                {
                    writer.WritePropertyName(PropName_x);
                    writer.WriteArray(obj.X);
                }
            }
        }

        partial class TestCallVectorStringConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testCallVectorString");
            private static readonly JsonEncodedText PropName_x = JsonEncodedText.Encode("x");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestCallVectorString)tlobj;
                if (obj.X != null)
                {
                    writer.WritePropertyName(PropName_x);
                    writer.WriteArray(obj.X);
                }
            }
        }

        partial class TestCallVectorStringObjectConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testCallVectorStringObject");
            private static readonly JsonEncodedText PropName_x = JsonEncodedText.Encode("x");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestCallVectorStringObject)tlobj;
                if (obj.X != null)
                {
                    writer.WritePropertyName(PropName_x);
                    writer.WriteArray(obj.X);
                }
            }
        }

        partial class TestSquareIntConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testSquareInt");
            private static readonly JsonEncodedText PropName_x = JsonEncodedText.Encode("x");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestSquareInt)tlobj;
                writer.WritePropertyName(PropName_x);
                writer.WriteNumberValue(obj.X);
            }
        }

        partial class TestNetworkConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testNetwork");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TestProxyConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testProxy");
            private static readonly JsonEncodedText PropName_server = JsonEncodedText.Encode("server");
            private static readonly JsonEncodedText PropName_port = JsonEncodedText.Encode("port");
            private static readonly JsonEncodedText PropName_type = JsonEncodedText.Encode("type");
            private static readonly JsonEncodedText PropName_dc_id = JsonEncodedText.Encode("dc_id");
            private static readonly JsonEncodedText PropName_timeout = JsonEncodedText.Encode("timeout");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestProxy)tlobj;
                writer.WritePropertyName(PropName_server);
                writer.WriteStringValue(obj.Server);
                writer.WritePropertyName(PropName_port);
                writer.WriteNumberValue(obj.Port);
                if (obj.Type != null)
                {
                    writer.WritePropertyName(PropName_type);
                    writer.WriteTLObjectValue(obj.Type);
                }
                writer.WritePropertyName(PropName_dc_id);
                writer.WriteNumberValue(obj.DcId);
                writer.WritePropertyName(PropName_timeout);
                writer.WriteNumberValue(obj.Timeout);
            }
        }

        partial class TestGetDifferenceConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testGetDifference");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TestUseUpdateConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testUseUpdate");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
            }
        }

        partial class TestReturnErrorConverter
        {
            private static readonly JsonEncodedText JsonTypeName = JsonEncodedText.Encode("testReturnError");
            private static readonly JsonEncodedText PropName_error = JsonEncodedText.Encode("error");
            internal override void TdJsonWriteUnclosedObject(Utf8JsonWriter writer, TLObject tlobj)
            {
                writer.WriteStartObject();
                writer.WriteString(TdJsonWriter.TypePropertyName, JsonTypeName);
                var obj = (TestReturnError)tlobj;
                if (obj.Error != null)
                {
                    writer.WritePropertyName(PropName_error);
                    writer.WriteTLObjectValue(obj.Error);
                }
            }
        }

    }

}
