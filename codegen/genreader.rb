require 'zlib'
require_relative 'common'

def hashof(name)
  sprintf("0x%08Xu", Zlib.crc32(name.to_s))
end

def readerof(type)
  case
  when type == "string"
    "reader.ReadStringAsUTF16String()"
  when type == "bool"
    "reader.ReadBool()"
  when type == "int"
    "reader.ReadInt()"
  when type == "long"
    "reader.ReadLong()"
  when type == "double"
    "reader.ReadDouble()"
  when type == "bool"
    "(bool)reader.ReadValue()"
  when type == "byte[]"
    "reader.ReadBase64String()"
  when type.is_a?(Class) && type == TDLibTLTypeInfo::Int64
    "reader.ReadIntegerString()"
  when type.is_a?(Class) && type <= TDLibTLTypeInfo::Vector
    st, level = type.nestinfo
    case level
    when 1
      st == 'byte[]' ? "reader.ReadBytesArray()" : "reader.ReadArray<#{st.to_s}>()"
    when 2
      "reader.ReadNestedArray<#{st.to_s}>()"
    else
      raise NotImplementedError
    end
  else
    "(#{type})reader.ReadValue()"
  end
end

def emit_type(io, type)
  hashes = type.props.map{|x|hashof(x.name)}
  uniqhashes = hashes.uniq
  if hashes.length != uniqhashes.length
    raise "hash collision found in type #{type.name}"
  end
  csname = check_csharp_keyword type.name
  io.puts %Q{[TLTypeHash(#{hashof(type.realname)}, typeof(#{type.name}))]}

  io.puts "partial class #{csname}Marshal : BaseMarshal"
  io.puts "{"
  io.push
  io.puts "internal static BaseMarshal CreateMarshalInstance() => new #{csname}Marshal();"
  io.puts "internal static TLObject CreateObjectInstance() => new #{csname}();"
  unless type.props.empty?
    io.puts "internal override bool TdJsonReadItem(ref TdJsonReader reader, ref TLObjectWithExtra tlobj, uint hash)"
    io.puts "{"
    io.block do
      io.puts "if (base.TdJsonReadItem(ref reader, ref tlobj, hash)) return true;"
      io.puts "var obj = (#{csname})tlobj.TLObject;"
      io.puts "switch (hash)"
      io.puts "{"
      io.block do
        type.props.each do |prop|
          proptype = check_csharp_keyword prop.type.to_s
          propname = prop.capname
          csname = propname
          if csname == type.name
            csname = "#{csname}_"
          end
          csname = check_csharp_keyword csname
          io.puts "case #{hashof(prop.name)}:"
          io.block do
            io.puts "obj.#{csname} = " + readerof(prop.type) + ";"
            io.puts "return true;"
          end
        end

      end
      io.puts "}"
      io.puts "return false;"
    end
    io.puts "}"
  end
  io.pop
  io.puts "}"
  io.puts ""
end

def emit(out=STDOUT)
  io = IndentedOutput.new(out)
  io.puts "// generated by codegen/genreader.rb"
  io.puts "using System;"
  io.puts "using TDLib.Api;"
  io.puts ""
  io.puts "namespace TDLib.JsonClient"
  io.puts "{"
  io.push
  
  TDLibTLTypeInfo::Types.each_value do |type|
    emit_type(io, type)
  end

  TDLibTLTypeInfo::Functions.each_value do |type|
    emit_type(io, type)
  end
  io.pop
  io.puts "}"
end

emit File.open(ARGV[0], 'wb')

