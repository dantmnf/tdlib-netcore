require_relative 'common'

def emit_type(cxxio, csio, type, index)

  realname = type.realname
  type.props.each do |prop|
    cxxio.puts "(uint32_t)__builtin_offsetof(#{realname}, #{prop.name}_), // #{realname}::#{prop.name}"
    csio.puts "#{realname}_#{prop.name},"
    index += 1
  end
  return index
end

def emit(cxxout=STDOUT, csout)
  io = IndentedOutput.new(cxxout)
  csio = IndentedOutput.new(csout)
  io.puts "// Generated by codegen/gencxxoffsets.rb"
  io.puts '#include "tdcxxbridge.h"'
  io.puts ""
  io.puts "using namespace td::td_api;"
  io.puts ""
  io.puts "const uint32_t td_bridge_offsets[] = {"
  io.push
  
  csio.puts "// Generated by codegen/gencxxoffsets.rb"
  csio.puts "namespace TDLibCore.NativeClient.ObjectBridge"
  csio.puts "{"
  csio.push
  csio.puts "internal enum _MemberOffsetIndex"
  csio.puts "{"
  csio.push
  index = 0;
  TDLibTLTypeInfo::Types.each_value do |type|
    index = emit_type(io, csio, type, index)
  end

  TDLibTLTypeInfo::Functions.each_value do |type|
    index = emit_type(io, csio, type, index)
  end
  io.pop
  io.puts "};"

  csio.pop
  csio.puts "}" # class
  csio.pop
  csio.puts "}" # namespace

end

TDLibTLTypeInfo.load ARGV[0]
emit File.open(ARGV[1], 'wb'), File.open(ARGV[2], 'wb')
